
rotor controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000880e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000372  00802000  0000880e  000088a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000651  00802372  00802372  00008c14  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00008c14  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00004768  00000000  00000000  00008c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000620ef  00000000  00000000  0000d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00017259  00000000  00000000  0006f4c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0001d883  00000000  00000000  00086720  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00007710  00000000  00000000  000a3fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000f7d7  00000000  00000000  000ab6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00030aae  00000000  00000000  000bae8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002368  00000000  00000000  000eb939  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	uint8_t data[8];
}can_message_t;

// skannar alla 255 adresser på canbusen 
void Scan_canbuss(can_message_t message_recive)
{
       0:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__ctors_end>
       4:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
       8:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
       c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      10:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      14:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
	can_message_t message_handeling;
	// send to all canbus units
	for(int i=0;i<Max_units;i++)
      18:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      1c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      20:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      24:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      28:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
	{
		message_handeling.msg_id=i;
		// sending comand for scan 
		message_handeling.data[0] = 100;
      2c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      30:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
		message_handeling.data[1] = Master_unit_id;
      34:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      38:	0c 94 5b 39 	jmp	0x72b6	; 0x72b6 <__vector_14>
      3c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
	// send to all canbus units
	for(int i=0;i<Max_units;i++)
	{
		message_handeling.msg_id=i;
		// sending comand for scan 
		message_handeling.data[0] = 100;
      40:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
		message_handeling.data[1] = Master_unit_id;
      44:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
		CAN_message_send(&message_handeling);
      48:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      4c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
// skannar alla 255 adresser på canbusen 
void Scan_canbuss(can_message_t message_recive)
{
	can_message_t message_handeling;
	// send to all canbus units
	for(int i=0;i<Max_units;i++)
      50:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__vector_20>
      54:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      58:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      5c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      60:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
		message_handeling.data[0] = 100;
		message_handeling.data[1] = Master_unit_id;
		CAN_message_send(&message_handeling);

	}
}
      64:	0c 94 95 38 	jmp	0x712a	; 0x712a <__vector_25>
      68:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      6c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      70:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      74:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
        y*=chess_boxsize;
        if ( ((i^j) & 1)  == 0 )
          u8g_SetDefaultMidColor(lrc_u8g);  
        else
          u8g_SetDefaultBackgroundColor(lrc_u8g);  
        u8g_DrawBox(lrc_u8g, x,chess_low_edge-y-chess_boxsize+1,chess_boxsize,chess_boxsize);
      78:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      7c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      80:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      84:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      88:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  const uint8_t *ptr;  /* pointer into PROGMEM */
  
  if ( U8G_MODE_GET_BITS_PER_PIXEL(u8g_GetMode(lrc_u8g)) > 1 )
  {
    for( i = 0; i < 8; i++ )
      for( j = 0; j < 8; j++ )
      8c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  uint8_t i, j, cp;
  const uint8_t *ptr;  /* pointer into PROGMEM */
  
  if ( U8G_MODE_GET_BITS_PER_PIXEL(u8g_GetMode(lrc_u8g)) > 1 )
  {
    for( i = 0; i < 8; i++ )
      90:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      94:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  }
}


void chess_DrawBoard(void)
{
      98:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
    //u8g_SetDefaultForegroundColor(lrc_u8g);  
  }
  else
  {
    uint8_t x_offset = 1;
    u8g_SetDefaultForegroundColor(lrc_u8g);  
      9c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      a0:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
    for( i = 0; i < 8*8; i+=8 )
      a4:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
    {
      for( j = 0; j < 8*8; j+=8 )
      {
        if ( ((i^j) & 8)  == 0 )
      a8:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      ac:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
        {
          u8g_DrawPixel(lrc_u8g, j+0+x_offset, chess_low_edge - i-0);
      b0:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      b4:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      b8:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      bc:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      c0:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      c4:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+0+x_offset, chess_low_edge - i-2);
      c8:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      cc:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      d0:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      d4:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      d8:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+0+x_offset, chess_low_edge - i-4);
      dc:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      e0:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      e4:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      e8:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      ec:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      f0:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+0+x_offset, chess_low_edge - i-6);
      f4:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      f8:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      fc:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     100:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__vector_64>
     104:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+2+x_offset, chess_low_edge - i-0);
     108:	0c 94 df 14 	jmp	0x29be	; 0x29be <__vector_66>
     10c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     110:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     114:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     118:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     11c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+2+x_offset, chess_low_edge - i-6);
     120:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     124:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     128:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     12c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     130:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     134:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+4+x_offset, chess_low_edge - i-0);
     138:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     13c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     140:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     144:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     148:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     14c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+4+x_offset, chess_low_edge - i-6);
     150:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     154:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     158:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     15c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     160:	0c 94 26 38 	jmp	0x704c	; 0x704c <__vector_88>
          u8g_DrawPixel(lrc_u8g, j+6+x_offset, chess_low_edge - i-0);
     164:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     168:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     16c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     170:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     174:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     178:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+6+x_offset, chess_low_edge - i-2);
     17c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     180:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__vector_96>
     184:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__vector_97>
     188:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     18c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     190:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+6+x_offset, chess_low_edge - i-4);
     194:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     198:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     19c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     1a0:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     1a4:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+6+x_offset, chess_low_edge - i-6);
     1a8:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     1ac:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     1b0:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     1b4:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     1b8:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     1bc:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  {
    uint8_t x_offset = 1;
    u8g_SetDefaultForegroundColor(lrc_u8g);  
    for( i = 0; i < 8*8; i+=8 )
    {
      for( j = 0; j < 8*8; j+=8 )
     1c0:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     1c4:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  }
  else
  {
    uint8_t x_offset = 1;
    u8g_SetDefaultForegroundColor(lrc_u8g);  
    for( i = 0; i < 8*8; i+=8 )
     1c8:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     1cc:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
void chess_DrawBoard(void)
{
  uint8_t i, j, cp;
  const uint8_t *ptr;  /* pointer into PROGMEM */
  
  if ( U8G_MODE_GET_BITS_PER_PIXEL(u8g_GetMode(lrc_u8g)) > 1 )
     1d0:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  for ( i = 0; i < 8; i++ )
  {
    for ( j = 0; j < 8; j++ )
    {
      /* get piece from global board */
      if ( lrc_obj.orientation == COLOR_WHITE )
     1d4:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     1d8:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
     1dc:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__vector_119>
     1e0:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      {
	cp =  lrc_obj.board[i*8+j];
     1e4:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      }
      else
      {
	cp =  lrc_obj.board[(7-i)*8+7-j];
     1e8:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
}

/* inline is better than a macro */
static uint8_t cp_GetPiece(uint8_t cp)
{
  cp &= 0x0f;
     1ec:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      }
      else
      {
	cp =  lrc_obj.board[(7-i)*8+7-j];
      }
      if ( cp_GetPiece(cp) != PIECE_NONE )
     1f0:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
      {
	ptr = chess_black_pieces_bm;
	ptr += (cp_GetPiece(cp)-1)*8;
     1f4:	05 27       	eor	r16, r21
     1f6:	93 27       	eor	r25, r19
     1f8:	48 27       	eor	r20, r24
     1fa:	97 27       	eor	r25, r23
     1fc:	7b 27       	eor	r23, r27
     1fe:	ff 26       	eor	r15, r31
     200:	02 27       	eor	r16, r18
     202:	c7 2d       	mov	r28, r7
     204:	cf 2d       	mov	r28, r15
     206:	e9 2d       	mov	r30, r9
        u8g_SetDefaultForegroundColor(lrc_u8g);
     208:	d9 2d       	mov	r29, r9
     20a:	e9 2d       	mov	r30, r9
     20c:	e9 2d       	mov	r30, r9
     20e:	e9 2d       	mov	r30, r9
     210:	e9 2d       	mov	r30, r9
     212:	e9 2d       	mov	r30, r9
        u8g_DrawBitmapP(lrc_u8g, j*chess_boxsize+chess_boxoffset-1, chess_low_edge - (i*chess_boxsize+chess_boxsize-chess_boxoffset), 1, 8, ptr);
     214:	e9 2d       	mov	r30, r9
     216:	e9 2d       	mov	r30, r9
     218:	e9 2d       	mov	r30, r9
     21a:	e9 2d       	mov	r30, r9
	cp =  lrc_obj.board[(7-i)*8+7-j];
      }
      if ( cp_GetPiece(cp) != PIECE_NONE )
      {
	ptr = chess_black_pieces_bm;
	ptr += (cp_GetPiece(cp)-1)*8;
     21c:	e9 2d       	mov	r30, r9
     21e:	e9 2d       	mov	r30, r9
     220:	e9 2d       	mov	r30, r9
     222:	e9 2d       	mov	r30, r9
        u8g_SetDefaultForegroundColor(lrc_u8g);
        u8g_DrawBitmapP(lrc_u8g, j*chess_boxsize+chess_boxoffset-1, chess_low_edge - (i*chess_boxsize+chess_boxsize-chess_boxoffset), 1, 8, ptr);
     224:	e9 2d       	mov	r30, r9
     226:	e9 2d       	mov	r30, r9
     228:	e9 2d       	mov	r30, r9
     22a:	e9 2d       	mov	r30, r9
     22c:	e9 2d       	mov	r30, r9
     22e:	e9 2d       	mov	r30, r9
     230:	e9 2d       	mov	r30, r9
     232:	e9 2d       	mov	r30, r9
     234:	e9 2d       	mov	r30, r9
     236:	e9 2d       	mov	r30, r9
     238:	e9 2d       	mov	r30, r9
     23a:	e9 2d       	mov	r30, r9
     23c:	e9 2d       	mov	r30, r9
     23e:	c1 2d       	mov	r28, r1
     240:	e9 2d       	mov	r30, r9
     242:	e9 2d       	mov	r30, r9
     244:	e9 2d       	mov	r30, r9
     246:	e9 2d       	mov	r30, r9
  however, inlined functions are sometimes much better
*/
static uint8_t cp_GetColor(uint8_t cp)
{
  cp >>= 4;
  cp &= 1;
     248:	e9 2d       	mov	r30, r9
     24a:	e9 2d       	mov	r30, r9
	ptr = chess_black_pieces_bm;
	ptr += (cp_GetPiece(cp)-1)*8;
        u8g_SetDefaultForegroundColor(lrc_u8g);
        u8g_DrawBitmapP(lrc_u8g, j*chess_boxsize+chess_boxoffset-1, chess_low_edge - (i*chess_boxsize+chess_boxsize-chess_boxoffset), 1, 8, ptr);
        
	if ( cp_GetColor(cp) == lrc_obj.strike_out_color ) 
     24c:	e9 2d       	mov	r30, r9
     24e:	e9 2d       	mov	r30, r9
     250:	b5 2d       	mov	r27, r5
     252:	e9 2d       	mov	r30, r9
     254:	e9 2d       	mov	r30, r9
	{
	  ptr = chess_pieces_body_bm;
	  ptr += (cp_GetPiece(cp)-1)*8;
          u8g_SetDefaultBackgroundColor(lrc_u8g);
     256:	e9 2d       	mov	r30, r9
     258:	e9 2d       	mov	r30, r9
     25a:	e9 2d       	mov	r30, r9
     25c:	e9 2d       	mov	r30, r9
     25e:	e9 2d       	mov	r30, r9
     260:	e9 2d       	mov	r30, r9
          u8g_DrawBitmapP(lrc_u8g, j*chess_boxsize+chess_boxoffset-1, chess_low_edge - (i*chess_boxsize+chess_boxsize-chess_boxoffset), 1, 8, ptr);
     262:	e9 2d       	mov	r30, r9
     264:	e9 2d       	mov	r30, r9
     266:	df 2d       	mov	r29, r15
     268:	e4 2d       	mov	r30, r4
        u8g_DrawBitmapP(lrc_u8g, j*chess_boxsize+chess_boxoffset-1, chess_low_edge - (i*chess_boxsize+chess_boxsize-chess_boxoffset), 1, 8, ptr);
        
	if ( cp_GetColor(cp) == lrc_obj.strike_out_color ) 
	{
	  ptr = chess_pieces_body_bm;
	  ptr += (cp_GetPiece(cp)-1)*8;
     26a:	fa 31       	cpi	r31, 0x1A	; 26
     26c:	f4 31       	cpi	r31, 0x14	; 20
     26e:	00 32       	cpi	r16, 0x20	; 32
     270:	00 32       	cpi	r16, 0x20	; 32
          u8g_SetDefaultBackgroundColor(lrc_u8g);
          u8g_DrawBitmapP(lrc_u8g, j*chess_boxsize+chess_boxoffset-1, chess_low_edge - (i*chess_boxsize+chess_boxsize-chess_boxoffset), 1, 8, ptr);
     272:	00 32       	cpi	r16, 0x20	; 32
     274:	00 32       	cpi	r16, 0x20	; 32
     276:	00 32       	cpi	r16, 0x20	; 32
     278:	00 32       	cpi	r16, 0x20	; 32
     27a:	00 32       	cpi	r16, 0x20	; 32
     27c:	00 32       	cpi	r16, 0x20	; 32
     27e:	00 32       	cpi	r16, 0x20	; 32
     280:	00 32       	cpi	r16, 0x20	; 32
     282:	00 32       	cpi	r16, 0x20	; 32
     284:	00 32       	cpi	r16, 0x20	; 32
     286:	00 32       	cpi	r16, 0x20	; 32
     288:	00 32       	cpi	r16, 0x20	; 32
     28a:	00 32       	cpi	r16, 0x20	; 32
     28c:	00 32       	cpi	r16, 0x20	; 32
     28e:	00 32       	cpi	r16, 0x20	; 32
     290:	00 32       	cpi	r16, 0x20	; 32
     292:	00 32       	cpi	r16, 0x20	; 32
     294:	00 32       	cpi	r16, 0x20	; 32
     296:	00 32       	cpi	r16, 0x20	; 32
     298:	00 32       	cpi	r16, 0x20	; 32
     29a:	00 32       	cpi	r16, 0x20	; 32
    }
  }
  
  for ( i = 0; i < 8; i++ )
  {
    for ( j = 0; j < 8; j++ )
     29c:	00 32       	cpi	r16, 0x20	; 32
     29e:	00 32       	cpi	r16, 0x20	; 32
     2a0:	00 32       	cpi	r16, 0x20	; 32
     2a2:	00 32       	cpi	r16, 0x20	; 32
     2a4:	00 32       	cpi	r16, 0x20	; 32
     2a6:	00 32       	cpi	r16, 0x20	; 32
     2a8:	00 32       	cpi	r16, 0x20	; 32
     2aa:	00 32       	cpi	r16, 0x20	; 32
     2ac:	00 32       	cpi	r16, 0x20	; 32
     2ae:	00 32       	cpi	r16, 0x20	; 32
     2b0:	00 32       	cpi	r16, 0x20	; 32
        }
      }
    }
  }
  
  for ( i = 0; i < 8; i++ )
     2b2:	00 32       	cpi	r16, 0x20	; 32
     2b4:	00 32       	cpi	r16, 0x20	; 32
     2b6:	00 32       	cpi	r16, 0x20	; 32
  }
  else
  {
    uint8_t x_offset = 1;
    u8g_SetDefaultForegroundColor(lrc_u8g);  
    for( i = 0; i < 8*8; i+=8 )
     2b8:	00 32       	cpi	r16, 0x20	; 32
     2ba:	00 32       	cpi	r16, 0x20	; 32
     2bc:	00 32       	cpi	r16, 0x20	; 32
     2be:	f6 31       	cpi	r31, 0x16	; 22
	}
      }
    }
  }
  
  if ( (chess_source_pos & 0x88) == 0 )
     2c0:	f8 31       	cpi	r31, 0x18	; 24
     2c2:	fc 31       	cpi	r31, 0x1C	; 28
     2c4:	fe 31       	cpi	r31, 0x1E	; 30
     2c6:	00 32       	cpi	r16, 0x20	; 32
     2c8:	e4 31       	cpi	r30, 0x14	; 20
  {
    chess_DrawFrame(chess_source_pos, 1);
     2ca:	02 32       	cpi	r16, 0x22	; 34
     2cc:	e6 31       	cpi	r30, 0x16	; 22
     2ce:	e8 31       	cpi	r30, 0x18	; 24
  }

  if ( (chess_target_pos & 0x88) == 0 )
     2d0:	ea 31       	cpi	r30, 0x1A	; 26
     2d2:	ec 31       	cpi	r30, 0x1C	; 28
     2d4:	ee 31       	cpi	r30, 0x1E	; 30
     2d6:	f0 31       	cpi	r31, 0x10	; 16
     2d8:	f2 31       	cpi	r31, 0x12	; 18
  {
    chess_DrawFrame(chess_target_pos, 0);
     2da:	05 a8       	ldd	r0, Z+53	; 0x35
     2dc:	4c cd       	rjmp	.-1384   	; 0xfffffd76 <__eeprom_end+0xff7efd76>
     2de:	b2 d4       	rcall	.+2404   	; 0xc44 <CAN_MCP2515_setBitrate+0x7a>
     2e0:	4e b9       	out	0x0e, r20	; 14
     2e2:	38 36       	cpi	r19, 0x68	; 104
     2e4:	a9 02       	muls	r26, r25
     2e6:	0c 50       	subi	r16, 0x0C	; 12
     2e8:	b9 91       	ld	r27, Y+
     2ea:	86 88       	ldd	r8, Z+22	; 0x16
     2ec:	08 3c       	cpi	r16, 0xC8	; 200
     2ee:	a6 aa       	std	Z+54, r10	; 0x36
     2f0:	aa 2a       	or	r10, r26
     2f2:	be 00       	.word	0x00be	; ????
     2f4:	00 00       	nop
     2f6:	80 3f       	cpi	r24, 0xF0	; 240

000002f8 <__trampolines_end>:
     2f8:	04 06       	cpc	r0, r20
  }
  else
  {
    uint8_t x_offset = 1;
    u8g_SetDefaultForegroundColor(lrc_u8g);  
    for( i = 0; i < 8*8; i+=8 )
     2fa:	24 06       	cpc	r2, r20
     2fc:	04 07       	cpc	r16, r20
  for ( i = 0; i < 8; i++ )
  {
    for ( j = 0; j < 8; j++ )
    {
      /* get piece from global board */
      if ( lrc_obj.orientation == COLOR_WHITE )
     2fe:	24 07       	cpc	r18, r20
     300:	84 06       	cpc	r8, r20

00000302 <u8g_avr_ddr_P>:
     302:	00 06 20 06 00 07 20 07 80 06                       .. ... ...

0000030c <u8g_dev_ks0108_128x64_init_seq>:
  if ( (chess_target_pos & 0x88) == 0 )
  {
    chess_DrawFrame(chess_target_pos, 0);
  }
  
}
     30c:	ff d0 ff e0 ff c1 ff d1 3f c0 ff 14 ff d2 3f c0     ........?.....?.
     31c:	ff 14 ff d0 ff fe                                   ......

00000322 <u8g_font_6x10>:
     322:	01 06 0a 00 fe 07 01 36 02 68 20 ff fe 08 fe 07     .......6.h .....
     332:	fe 0a 00 60 22 17 67 80 80 80 80 80 00 80 16 33     ...`".g........3
     342:	63 a0 a0 a0 02 57 67 50 50 f8 50 f8 50 50 02 57     c....WgPP.P.PP.W
     352:	67 20 70 a0 70 28 70 20 02 57 67 48 a8 50 20 50     g p.p(p .WgH.P P
     362:	a8 90 02 57 67 40 a0 a0 40 a8 90 68 26 13 63 80     ...Wg@..@..h&.c.
     372:	80 80 12 37 67 20 40 80 80 80 40 20 12 37 67 80     ...7g @...@ .7g.
     382:	40 20 20 20 40 80 03 55 65 88 50 f8 50 88 03 55     @   @..Ue.P.P..U
     392:	65 20 20 f8 20 20 11 33 63 60 40 80 05 51 61 f8     e  .  .3c`@..Qa.
     3a2:	11 33 63 40 e0 40 02 57 67 08 08 10 20 40 80 80     .3c@.@.Wg... @..
     3b2:	02 57 67 20 50 88 88 88 50 20 02 57 67 20 60 a0     .Wg P...P .Wg `.
     3c2:	20 20 20 f8 02 57 67 70 88 08 30 40 80 f8 02 57        ..Wgp..0@...W
     3d2:	67 f8 08 10 30 08 88 70 02 57 67 10 30 50 90 f8     g...0..p.Wg.0P..
     3e2:	10 10 02 57 67 f8 80 b0 c8 08 88 70 02 57 67 30     ...Wg......p.Wg0
     3f2:	40 80 b0 c8 88 70 02 57 67 f8 08 10 10 20 40 40     @....p.Wg.... @@
     402:	02 57 67 70 88 88 70 88 88 70 02 57 67 70 88 98     .Wgp..p..p.Wgp..
     412:	68 08 10 60 11 37 67 40 e0 40 00 40 e0 40 11 37     h..`.7g@.@.@.@.7
     422:	67 40 e0 40 00 60 40 80 12 47 67 10 20 40 80 40     g@.@.`@..Gg. @.@
     432:	20 10 04 53 63 f8 00 f8 12 47 67 80 40 20 10 20      ..Sc....Gg.@ . 
     442:	40 80 02 57 67 70 88 10 20 20 00 20 02 57 67 70     @..Wgp..  . .Wgp
     452:	88 98 a8 b0 80 70 02 57 67 20 50 88 88 f8 88 88     .....p.Wg P.....
     462:	02 57 67 f0 48 48 70 48 48 f0 02 57 67 70 88 80     .Wg.HHpHH..Wgp..
     472:	80 80 88 70 02 57 67 f0 48 48 48 48 48 f0 02 57     ...p.Wg.HHHHH..W
     482:	67 f8 80 80 f0 80 80 f8 02 57 67 f8 80 80 f0 80     g........Wg.....
     492:	80 80 02 57 67 70 88 80 80 98 88 70 02 57 67 88     ...Wgp.....p.Wg.
     4a2:	88 88 f8 88 88 88 12 37 67 e0 40 40 40 40 40 e0     .......7g.@@@@@.
     4b2:	02 57 67 38 10 10 10 10 90 60 02 57 67 88 90 a0     .Wg8.....`.Wg...
     4c2:	c0 a0 90 88 02 57 67 80 80 80 80 80 80 f8 02 57     .....Wg........W
     4d2:	67 88 88 d8 a8 88 88 88 02 57 67 88 88 c8 a8 98     g........Wg.....
     4e2:	88 88 02 57 67 70 88 88 88 88 88 70 02 57 67 f0     ...Wgp.....p.Wg.
     4f2:	88 88 f0 80 80 80 01 58 68 70 88 88 88 88 a8 70     .......Xhp.....p
     502:	08 02 57 67 f0 88 88 f0 a0 90 88 02 57 67 70 88     ..Wg........Wgp.
     512:	80 70 08 88 70 02 57 67 f8 20 20 20 20 20 20 02     .p..p.Wg.      .
     522:	57 67 88 88 88 88 88 88 70 02 57 67 88 88 88 50     Wg......p.Wg...P
     532:	50 50 20 02 57 67 88 88 88 a8 a8 d8 88 02 57 67     PP .Wg........Wg
     542:	88 88 50 20 50 88 88 02 57 67 88 88 50 20 20 20     ..P P...Wg..P   
     552:	20 02 57 67 f8 08 10 20 40 80 f8 12 37 67 e0 80      .Wg... @...7g..
     562:	80 80 80 80 e0 02 57 67 80 80 40 20 10 08 08 12     ......Wg..@ ....
     572:	37 67 e0 20 20 20 20 20 e0 06 53 63 20 50 88 01     7g.     ..Sc P..
     582:	51 61 f8 28 22 62 80 40 02 55 65 70 08 78 88 78     Qa.("b.@.Uep.x.x
     592:	02 57 67 80 80 b0 c8 88 c8 b0 02 55 65 70 88 80     .Wg........Uep..
     5a2:	88 70 02 57 67 08 08 68 98 88 98 68 02 55 65 70     .p.Wg..h...h.Uep
     5b2:	88 f8 80 70 02 57 67 30 48 40 f0 40 40 40 00 57     ...p.Wg0H@.@@@.W
     5c2:	67 78 88 88 78 08 88 70 02 57 67 80 80 b0 c8 88     gx..x..p.Wg.....
     5d2:	88 88 12 37 67 40 00 c0 40 40 40 e0 10 49 69 10     ...7g@..@@@..Ii.
     5e2:	00 30 10 10 10 90 90 60 02 57 67 80 80 88 90 e0     .0.....`.Wg.....
     5f2:	90 88 12 37 67 c0 40 40 40 40 40 e0 02 55 65 d0     ...7g.@@@@@..Ue.
     602:	a8 a8 a8 88 02 55 65 b0 c8 88 88 88 02 55 65 70     .....Ue......Uep
     612:	88 88 88 70 00 57 67 b0 c8 88 c8 b0 80 80 00 57     ...p.Wg........W
     622:	67 68 98 88 98 68 08 08 02 55 65 b0 c8 80 80 80     gh...h...Ue.....
     632:	02 55 65 70 80 70 08 f0 02 57 67 40 40 f0 40 40     .Uep.p...Wg@@.@@
     642:	48 30 02 55 65 88 88 88 98 68 02 55 65 88 88 50     H0.Ue....h.Ue..P
     652:	50 20 02 55 65 88 88 a8 a8 50 02 55 65 88 50 20     P .Ue....P.Ue.P 
     662:	50 88 00 57 67 88 88 98 68 08 88 70 02 55 65 f8     P..Wg...h..p.Ue.
     672:	10 20 40 f8 12 47 67 30 40 20 c0 20 40 30 22 17     . @..Gg0@ . @0".
     682:	67 80 80 80 80 80 80 80 12 47 67 c0 20 40 30 40     g........Gg. @0@
     692:	20 c0 06 53 63 48 a8 90 ff ff ff ff ff ff ff ff      ..ScH..........
     6a2:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     6b2:	ff ff ff ff ff ff ff ff ff 0a 00 60 22 17 67 80     ...........`".g.
     6c2:	00 80 80 80 80 80 01 57 67 20 78 a0 a0 a0 78 20     .......Wg x...x 
     6d2:	02 57 67 30 48 40 e0 40 48 b0 02 55 65 88 70 50     .Wg0H@.@H..Ue.pP
     6e2:	70 88 01 58 68 88 88 50 20 f8 20 20 20 22 17 67     p..Xh..P .   ".g
     6f2:	80 80 80 00 80 80 80 01 58 68 70 80 e0 90 48 38     ........Xhp...H8
     702:	08 70 19 31 61 a0 02 57 67 70 88 a8 c8 a8 88 70     .p.1a..Wgp.....p
     712:	13 46 66 70 90 b0 50 00 f0 02 65 65 24 48 90 48     .Ffp..P...ee$H.H
     722:	24 14 42 62 f0 10 15 41 61 f0 02 57 67 70 88 e8     $.Bb...Aa..Wgp..
     732:	c8 c8 88 70 09 51 61 f8 16 33 63 40 a0 40 02 56     ...p.Qa..3c@.@.V
     742:	66 20 20 f8 20 20 f8 15 45 65 60 90 20 40 f0 15     f  .  ..Ee`. @..
     752:	45 65 e0 10 60 10 e0 28 22 62 40 80 01 56 66 88     Ee..`..("b@..Vf.
     762:	88 88 c8 b0 80 02 57 67 78 e8 e8 68 28 28 28 25     ......Wgx..h(((%
     772:	11 61 80 20 22 62 40 80 15 35 65 40 c0 40 40 e0     .a. "b@..5e@.@@.
     782:	13 46 66 60 90 90 60 00 f0 02 65 65 90 48 24 48     .Ff`..`...ee.H$H
     792:	90 01 69 69 40 c0 40 40 e4 0c 14 3c 04 01 69 69     ..ii@.@@...<..ii
     7a2:	40 c0 40 40 e8 14 04 08 1c 01 59 69 c0 20 40 20     @.@@......Yi. @ 
     7b2:	c8 18 28 78 08 02 57 67 20 00 20 20 40 88 70 02     ..(x..Wg .  @.p.
     7c2:	58 68 40 20 70 88 88 f8 88 88 02 58 68 10 20 70     Xh@ p......Xh. p
     7d2:	88 88 f8 88 88 02 58 68 20 50 70 88 88 f8 88 88     ......Xh Pp.....
     7e2:	02 58 68 48 b0 70 88 88 f8 88 88 02 58 68 50 00     .XhH.p......XhP.
     7f2:	70 88 88 f8 88 88 02 58 68 20 50 70 88 88 f8 88     p......Xh Pp....
     802:	88 02 67 67 3c 50 90 9c f0 90 9c 00 59 69 70 88     ..gg<P......Yip.
     812:	80 80 80 88 70 20 40 02 58 68 40 f8 80 80 f0 80     ....p @.Xh@.....
     822:	80 f8 02 58 68 10 f8 80 80 f0 80 80 f8 02 58 68     ...Xh.........Xh
     832:	20 f8 80 80 f0 80 80 f8 02 58 68 50 f8 80 80 f0      ........XhP....
     842:	80 80 f8 12 38 68 80 40 e0 40 40 40 40 e0 12 38     ....8h.@.@@@@..8
     852:	68 20 40 e0 40 40 40 40 e0 12 38 68 40 a0 e0 40     h @.@@@@..8h@..@
     862:	40 40 40 e0 12 38 68 a0 00 e0 40 40 40 40 e0 02     @@@..8h...@@@@..
     872:	57 67 f0 48 48 e8 48 48 f0 02 58 68 28 50 88 c8     Wg.HH.HH..Xh(P..
     882:	a8 98 88 88 02 58 68 40 20 70 88 88 88 88 70 02     .....Xh@ p....p.
     892:	58 68 10 20 70 88 88 88 88 70 02 58 68 20 50 70     Xh. p....p.Xh Pp
     8a2:	88 88 88 88 70 02 58 68 28 50 70 88 88 88 88 70     ....p.Xh(Pp....p
     8b2:	02 58 68 50 00 70 88 88 88 88 70 02 55 65 88 50     .XhP.p....p.Ue.P
     8c2:	20 50 88 02 57 67 70 98 98 a8 c8 c8 70 02 58 68      P..Wgp.....p.Xh
     8d2:	40 20 88 88 88 88 88 70 02 58 68 10 20 88 88 88     @ .....p.Xh. ...
     8e2:	88 88 70 02 58 68 20 50 00 88 88 88 88 70 02 58     ..p.Xh P.....p.X
     8f2:	68 50 00 88 88 88 88 88 70 02 58 68 10 20 88 88     hP......p.Xh. ..
     902:	50 20 20 20 02 57 67 80 f0 88 f0 80 80 80 02 57     P   .Wg........W
     912:	67 70 88 90 a0 90 88 b0 02 58 68 40 20 00 70 08     gp.......Xh@ .p.
     922:	78 88 78 02 58 68 10 20 00 70 08 78 88 78 02 58     x.x.Xh. .p.x.x.X
     932:	68 20 50 00 70 08 78 88 78 02 58 68 28 50 00 70     h P.p.x.x.Xh(P.p
     942:	08 78 88 78 02 57 67 50 00 70 08 78 88 78 02 58     .x.x.WgP.p.x.x.X
     952:	68 20 50 20 70 08 78 88 78 02 65 65 78 14 7c 90     h P p.x.x.eex.|.
     962:	7c 00 57 67 70 88 80 88 70 20 40 02 58 68 40 20     |.Wgp...p @.Xh@ 
     972:	00 70 88 f8 80 70 02 58 68 10 20 00 70 88 f8 80     .p...p.Xh. .p...
     982:	70 02 58 68 20 50 00 70 88 f8 80 70 02 57 67 50     p.Xh P.p...p.WgP
     992:	00 70 88 f8 80 70 12 38 68 80 40 00 c0 40 40 40     .p...p.8h.@..@@@
     9a2:	e0 12 38 68 40 80 00 c0 40 40 40 e0 12 38 68 40     ..8h@...@@@..8h@
     9b2:	a0 00 c0 40 40 40 e0 12 37 67 a0 00 c0 40 40 40     ...@@@..7g...@@@
     9c2:	e0 02 57 67 c0 30 70 88 88 88 70 02 58 68 28 50     ..Wg.0p...p.Xh(P
     9d2:	00 b0 c8 88 88 88 02 58 68 40 20 00 70 88 88 88     .......Xh@ .p...
     9e2:	70 02 58 68 10 20 00 70 88 88 88 70 02 58 68 20     p.Xh. .p...p.Xh 
     9f2:	50 00 70 88 88 88 70 02 58 68 28 50 00 70 88 88     P.p...p.Xh(P.p..
     a02:	88 70 02 57 67 50 00 70 88 88 88 70 03 55 65 20     .p.WgP.p...p.Ue 
     a12:	00 f8 00 20 02 55 65 78 98 a8 c8 f0 02 58 68 40     ... .Uex.....Xh@
     a22:	20 00 88 88 88 98 68 02 58 68 10 20 00 88 88 88      .....h.Xh. ....
     a32:	98 68 02 58 68 20 50 00 88 88 88 98 68 02 57 67     .h.Xh P.....h.Wg
     a42:	50 00 88 88 88 98 68 00 59 69 10 20 88 88 98 68     P.....h.Yi. ...h
     a52:	08 88 70 00 58 68 80 f0 88 88 88 f0 80 80 00 59     ..p.Xh.........Y
     a62:	69 50 00 88 88 98 68 08 88 70                       iP....h..p

00000a6c <pin_to_bit_mask_PGM>:
     a6c:	01 02 04 08 01 02 04 08                             ........

00000a74 <pin_to_register_PGM>:
     a74:	a0 a0 a0 a0 a8 a8 a8 a8                             ........

00000a7c <__c.2161>:
     a7c:	6e 61 6e 00                                         nan.

00000a80 <__c.2159>:
     a80:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     a90:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     aa0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     ab0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     ac0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     ad0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     ae0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     af0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     b00:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     b10:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     b20:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     b30:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     b40:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     b50:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     b60:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     b70:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000b7e <__ctors_end>:
     b7e:	11 24       	eor	r1, r1
     b80:	1f be       	out	0x3f, r1	; 63
     b82:	cf ef       	ldi	r28, 0xFF	; 255
     b84:	cd bf       	out	0x3d, r28	; 61
     b86:	df e2       	ldi	r29, 0x2F	; 47
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	18 be       	out	0x38, r1	; 56
     b8c:	19 be       	out	0x39, r1	; 57
     b8e:	1a be       	out	0x3a, r1	; 58
     b90:	1b be       	out	0x3b, r1	; 59

00000b92 <__do_copy_data>:
     b92:	13 e2       	ldi	r17, 0x23	; 35
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e2       	ldi	r27, 0x20	; 32
     b98:	ee e0       	ldi	r30, 0x0E	; 14
     b9a:	f8 e8       	ldi	r31, 0x88	; 136
     b9c:	00 e0       	ldi	r16, 0x00	; 0
     b9e:	0b bf       	out	0x3b, r16	; 59
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <__do_copy_data+0x14>
     ba2:	07 90       	elpm	r0, Z+
     ba4:	0d 92       	st	X+, r0
     ba6:	a2 37       	cpi	r26, 0x72	; 114
     ba8:	b1 07       	cpc	r27, r17
     baa:	d9 f7       	brne	.-10     	; 0xba2 <__do_copy_data+0x10>
     bac:	1b be       	out	0x3b, r1	; 59

00000bae <__do_clear_bss>:
     bae:	29 e2       	ldi	r18, 0x29	; 41
     bb0:	a2 e7       	ldi	r26, 0x72	; 114
     bb2:	b3 e2       	ldi	r27, 0x23	; 35
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <.do_clear_bss_start>

00000bb6 <.do_clear_bss_loop>:
     bb6:	1d 92       	st	X+, r1

00000bb8 <.do_clear_bss_start>:
     bb8:	a3 3c       	cpi	r26, 0xC3	; 195
     bba:	b2 07       	cpc	r27, r18
     bbc:	e1 f7       	brne	.-8      	; 0xbb6 <.do_clear_bss_loop>
     bbe:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <main>
     bc2:	0c 94 05 44 	jmp	0x880a	; 0x880a <_exit>

00000bc6 <__bad_interrupt>:
     bc6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000bca <CAN_MCP2515_setBitrate>:
        CAN_int_flag = 0;
		
}

void CAN_MCP2515_setBitrate(uint32_t bitrate)
{
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
  uint8_t CNF1 = 0; 
  uint8_t CNF2 = 0;
  uint8_t CNF3 = 0;
 if (bitrate == 5000)
     bce:	68 38       	cpi	r22, 0x88	; 136
     bd0:	23 e1       	ldi	r18, 0x13	; 19
     bd2:	72 07       	cpc	r23, r18
     bd4:	81 05       	cpc	r24, r1
     bd6:	91 05       	cpc	r25, r1
     bd8:	09 f4       	brne	.+2      	; 0xbdc <CAN_MCP2515_setBitrate+0x12>
     bda:	58 c0       	rjmp	.+176    	; 0xc8c <CAN_MCP2515_setBitrate+0xc2>
  {
    CNF1 = 0x3F;
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 10000)
     bdc:	60 31       	cpi	r22, 0x10	; 16
     bde:	27 e2       	ldi	r18, 0x27	; 39
     be0:	72 07       	cpc	r23, r18
     be2:	81 05       	cpc	r24, r1
     be4:	91 05       	cpc	r25, r1
     be6:	09 f4       	brne	.+2      	; 0xbea <CAN_MCP2515_setBitrate+0x20>
     be8:	55 c0       	rjmp	.+170    	; 0xc94 <CAN_MCP2515_setBitrate+0xca>
  {
    CNF1 = 0x1F;
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 20000)
     bea:	60 32       	cpi	r22, 0x20	; 32
     bec:	2e e4       	ldi	r18, 0x4E	; 78
     bee:	72 07       	cpc	r23, r18
     bf0:	81 05       	cpc	r24, r1
     bf2:	91 05       	cpc	r25, r1
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <CAN_MCP2515_setBitrate+0x2e>
     bf6:	52 c0       	rjmp	.+164    	; 0xc9c <CAN_MCP2515_setBitrate+0xd2>
  {
    CNF1 = 0x0F;
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 31025)
     bf8:	61 33       	cpi	r22, 0x31	; 49
     bfa:	29 e7       	ldi	r18, 0x79	; 121
     bfc:	72 07       	cpc	r23, r18
     bfe:	81 05       	cpc	r24, r1
     c00:	91 05       	cpc	r25, r1
     c02:	09 f4       	brne	.+2      	; 0xc06 <CAN_MCP2515_setBitrate+0x3c>
     c04:	4f c0       	rjmp	.+158    	; 0xca4 <CAN_MCP2515_setBitrate+0xda>
  {
    CNF1 = 0x0F;
    CNF2 = 0xF1;
    CNF3 = 0x85;
  }
  else if (bitrate == 40000)
     c06:	60 34       	cpi	r22, 0x40	; 64
     c08:	2c e9       	ldi	r18, 0x9C	; 156
     c0a:	72 07       	cpc	r23, r18
     c0c:	81 05       	cpc	r24, r1
     c0e:	91 05       	cpc	r25, r1
     c10:	09 f4       	brne	.+2      	; 0xc14 <CAN_MCP2515_setBitrate+0x4a>
     c12:	4c c0       	rjmp	.+152    	; 0xcac <CAN_MCP2515_setBitrate+0xe2>
  {
    CNF1 = 0x07;
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 50000)
     c14:	60 35       	cpi	r22, 0x50	; 80
     c16:	23 ec       	ldi	r18, 0xC3	; 195
     c18:	72 07       	cpc	r23, r18
     c1a:	81 05       	cpc	r24, r1
     c1c:	91 05       	cpc	r25, r1
     c1e:	09 f4       	brne	.+2      	; 0xc22 <CAN_MCP2515_setBitrate+0x58>
     c20:	49 c0       	rjmp	.+146    	; 0xcb4 <CAN_MCP2515_setBitrate+0xea>
  {
    CNF1 = 0x07;
    CNF2 = 0xFA;
    CNF3 = 0x87;
  }
  else if (bitrate == 80000)
     c22:	60 38       	cpi	r22, 0x80	; 128
     c24:	28 e3       	ldi	r18, 0x38	; 56
     c26:	72 07       	cpc	r23, r18
     c28:	21 e0       	ldi	r18, 0x01	; 1
     c2a:	82 07       	cpc	r24, r18
     c2c:	91 05       	cpc	r25, r1
     c2e:	09 f4       	brne	.+2      	; 0xc32 <CAN_MCP2515_setBitrate+0x68>
     c30:	45 c0       	rjmp	.+138    	; 0xcbc <CAN_MCP2515_setBitrate+0xf2>
  {
    CNF1 = 0x03;
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 100000)
     c32:	60 3a       	cpi	r22, 0xA0	; 160
     c34:	26 e8       	ldi	r18, 0x86	; 134
     c36:	72 07       	cpc	r23, r18
     c38:	21 e0       	ldi	r18, 0x01	; 1
     c3a:	82 07       	cpc	r24, r18
     c3c:	91 05       	cpc	r25, r1
     c3e:	09 f4       	brne	.+2      	; 0xc42 <CAN_MCP2515_setBitrate+0x78>
     c40:	41 c0       	rjmp	.+130    	; 0xcc4 <CAN_MCP2515_setBitrate+0xfa>
  {
    CNF1 = 0x03;
    CNF2 = 0xFA;
    CNF3 = 0x87;
  }
  else if (bitrate == 125000)
     c42:	68 34       	cpi	r22, 0x48	; 72
     c44:	28 ee       	ldi	r18, 0xE8	; 232
     c46:	72 07       	cpc	r23, r18
     c48:	21 e0       	ldi	r18, 0x01	; 1
     c4a:	82 07       	cpc	r24, r18
     c4c:	91 05       	cpc	r25, r1
     c4e:	f1 f1       	breq	.+124    	; 0xccc <CAN_MCP2515_setBitrate+0x102>
  {
    CNF1 = 0x03;
    CNF2 = 0xF0;
    CNF3 = 0x86;
  }
  else if (bitrate == 200000)
     c50:	60 34       	cpi	r22, 0x40	; 64
     c52:	2d e0       	ldi	r18, 0x0D	; 13
     c54:	72 07       	cpc	r23, r18
     c56:	23 e0       	ldi	r18, 0x03	; 3
     c58:	82 07       	cpc	r24, r18
     c5a:	91 05       	cpc	r25, r1
     c5c:	d9 f1       	breq	.+118    	; 0xcd4 <CAN_MCP2515_setBitrate+0x10a>
  {
    CNF1 = 0x01;
    CNF2 = 0xFA;
    CNF3 = 0x87;
  }
  else if (bitrate == 250000)
     c5e:	60 39       	cpi	r22, 0x90	; 144
     c60:	20 ed       	ldi	r18, 0xD0	; 208
     c62:	72 07       	cpc	r23, r18
     c64:	23 e0       	ldi	r18, 0x03	; 3
     c66:	82 07       	cpc	r24, r18
     c68:	91 05       	cpc	r25, r1
     c6a:	c1 f1       	breq	.+112    	; 0xcdc <CAN_MCP2515_setBitrate+0x112>
  {
    CNF1 = 0x41;
    CNF2 = 0xF1;
    CNF3 = 0x85;
  }
  else if (bitrate == 500000)
     c6c:	60 32       	cpi	r22, 0x20	; 32
     c6e:	21 ea       	ldi	r18, 0xA1	; 161
     c70:	72 07       	cpc	r23, r18
     c72:	27 e0       	ldi	r18, 0x07	; 7
     c74:	82 07       	cpc	r24, r18
     c76:	91 05       	cpc	r25, r1
     c78:	a9 f1       	breq	.+106    	; 0xce4 <CAN_MCP2515_setBitrate+0x11a>
  {
    CNF1 = 0x00;
    CNF2 = 0xF0;
    CNF3 = 0x86;
  }
  else if (bitrate == 1000000)
     c7a:	60 34       	cpi	r22, 0x40	; 64
     c7c:	72 44       	sbci	r23, 0x42	; 66
     c7e:	8f 40       	sbci	r24, 0x0F	; 15
     c80:	91 05       	cpc	r25, r1
     c82:	a1 f1       	breq	.+104    	; 0xcec <CAN_MCP2515_setBitrate+0x122>

void CAN_MCP2515_setBitrate(uint32_t bitrate)
{
  uint8_t CNF1 = 0; 
  uint8_t CNF2 = 0;
  uint8_t CNF3 = 0;
     c84:	c0 e0       	ldi	r28, 0x00	; 0
}

void CAN_MCP2515_setBitrate(uint32_t bitrate)
{
  uint8_t CNF1 = 0; 
  uint8_t CNF2 = 0;
     c86:	d0 e0       	ldi	r29, 0x00	; 0
		
}

void CAN_MCP2515_setBitrate(uint32_t bitrate)
{
  uint8_t CNF1 = 0; 
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	33 c0       	rjmp	.+102    	; 0xcf2 <CAN_MCP2515_setBitrate+0x128>
  uint8_t CNF3 = 0;
 if (bitrate == 5000)
  {
    CNF1 = 0x3F;
    CNF2 = 0xFF;
    CNF3 = 0x87;
     c8c:	c7 e8       	ldi	r28, 0x87	; 135
  uint8_t CNF2 = 0;
  uint8_t CNF3 = 0;
 if (bitrate == 5000)
  {
    CNF1 = 0x3F;
    CNF2 = 0xFF;
     c8e:	df ef       	ldi	r29, 0xFF	; 255
  uint8_t CNF1 = 0; 
  uint8_t CNF2 = 0;
  uint8_t CNF3 = 0;
 if (bitrate == 5000)
  {
    CNF1 = 0x3F;
     c90:	6f e3       	ldi	r22, 0x3F	; 63
     c92:	2f c0       	rjmp	.+94     	; 0xcf2 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 10000)
  {
    CNF1 = 0x1F;
    CNF2 = 0xFF;
    CNF3 = 0x87;
     c94:	c7 e8       	ldi	r28, 0x87	; 135
    CNF3 = 0x87;
  }
  else if (bitrate == 10000)
  {
    CNF1 = 0x1F;
    CNF2 = 0xFF;
     c96:	df ef       	ldi	r29, 0xFF	; 255
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 10000)
  {
    CNF1 = 0x1F;
     c98:	6f e1       	ldi	r22, 0x1F	; 31
     c9a:	2b c0       	rjmp	.+86     	; 0xcf2 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 20000)
  {
    CNF1 = 0x0F;
    CNF2 = 0xFF;
    CNF3 = 0x87;
     c9c:	c7 e8       	ldi	r28, 0x87	; 135
    CNF3 = 0x87;
  }
  else if (bitrate == 20000)
  {
    CNF1 = 0x0F;
    CNF2 = 0xFF;
     c9e:	df ef       	ldi	r29, 0xFF	; 255
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 20000)
  {
    CNF1 = 0x0F;
     ca0:	6f e0       	ldi	r22, 0x0F	; 15
     ca2:	27 c0       	rjmp	.+78     	; 0xcf2 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 31025)
  {
    CNF1 = 0x0F;
    CNF2 = 0xF1;
    CNF3 = 0x85;
     ca4:	c5 e8       	ldi	r28, 0x85	; 133
    CNF3 = 0x87;
  }
  else if (bitrate == 31025)
  {
    CNF1 = 0x0F;
    CNF2 = 0xF1;
     ca6:	d1 ef       	ldi	r29, 0xF1	; 241
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 31025)
  {
    CNF1 = 0x0F;
     ca8:	6f e0       	ldi	r22, 0x0F	; 15
     caa:	23 c0       	rjmp	.+70     	; 0xcf2 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 40000)
  {
    CNF1 = 0x07;
    CNF2 = 0xFF;
    CNF3 = 0x87;
     cac:	c7 e8       	ldi	r28, 0x87	; 135
    CNF3 = 0x85;
  }
  else if (bitrate == 40000)
  {
    CNF1 = 0x07;
    CNF2 = 0xFF;
     cae:	df ef       	ldi	r29, 0xFF	; 255
    CNF2 = 0xF1;
    CNF3 = 0x85;
  }
  else if (bitrate == 40000)
  {
    CNF1 = 0x07;
     cb0:	67 e0       	ldi	r22, 0x07	; 7
     cb2:	1f c0       	rjmp	.+62     	; 0xcf2 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 50000)
  {
    CNF1 = 0x07;
    CNF2 = 0xFA;
    CNF3 = 0x87;
     cb4:	c7 e8       	ldi	r28, 0x87	; 135
    CNF3 = 0x87;
  }
  else if (bitrate == 50000)
  {
    CNF1 = 0x07;
    CNF2 = 0xFA;
     cb6:	da ef       	ldi	r29, 0xFA	; 250
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 50000)
  {
    CNF1 = 0x07;
     cb8:	67 e0       	ldi	r22, 0x07	; 7
     cba:	1b c0       	rjmp	.+54     	; 0xcf2 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 80000)
  {
    CNF1 = 0x03;
    CNF2 = 0xFF;
    CNF3 = 0x87;
     cbc:	c7 e8       	ldi	r28, 0x87	; 135
    CNF3 = 0x87;
  }
  else if (bitrate == 80000)
  {
    CNF1 = 0x03;
    CNF2 = 0xFF;
     cbe:	df ef       	ldi	r29, 0xFF	; 255
    CNF2 = 0xFA;
    CNF3 = 0x87;
  }
  else if (bitrate == 80000)
  {
    CNF1 = 0x03;
     cc0:	63 e0       	ldi	r22, 0x03	; 3
     cc2:	17 c0       	rjmp	.+46     	; 0xcf2 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 100000)
  {
    CNF1 = 0x03;
    CNF2 = 0xFA;
    CNF3 = 0x87;
     cc4:	c7 e8       	ldi	r28, 0x87	; 135
    CNF3 = 0x87;
  }
  else if (bitrate == 100000)
  {
    CNF1 = 0x03;
    CNF2 = 0xFA;
     cc6:	da ef       	ldi	r29, 0xFA	; 250
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 100000)
  {
    CNF1 = 0x03;
     cc8:	63 e0       	ldi	r22, 0x03	; 3
     cca:	13 c0       	rjmp	.+38     	; 0xcf2 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 125000)
  {
    CNF1 = 0x03;
    CNF2 = 0xF0;
    CNF3 = 0x86;
     ccc:	c6 e8       	ldi	r28, 0x86	; 134
    CNF3 = 0x87;
  }
  else if (bitrate == 125000)
  {
    CNF1 = 0x03;
    CNF2 = 0xF0;
     cce:	d0 ef       	ldi	r29, 0xF0	; 240
    CNF2 = 0xFA;
    CNF3 = 0x87;
  }
  else if (bitrate == 125000)
  {
    CNF1 = 0x03;
     cd0:	63 e0       	ldi	r22, 0x03	; 3
     cd2:	0f c0       	rjmp	.+30     	; 0xcf2 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 200000)
  {
    CNF1 = 0x01;
    CNF2 = 0xFA;
    CNF3 = 0x87;
     cd4:	c7 e8       	ldi	r28, 0x87	; 135
    CNF3 = 0x86;
  }
  else if (bitrate == 200000)
  {
    CNF1 = 0x01;
    CNF2 = 0xFA;
     cd6:	da ef       	ldi	r29, 0xFA	; 250
    CNF2 = 0xF0;
    CNF3 = 0x86;
  }
  else if (bitrate == 200000)
  {
    CNF1 = 0x01;
     cd8:	61 e0       	ldi	r22, 0x01	; 1
     cda:	0b c0       	rjmp	.+22     	; 0xcf2 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 250000)
  {
    CNF1 = 0x41;
    CNF2 = 0xF1;
    CNF3 = 0x85;
     cdc:	c5 e8       	ldi	r28, 0x85	; 133
    CNF3 = 0x87;
  }
  else if (bitrate == 250000)
  {
    CNF1 = 0x41;
    CNF2 = 0xF1;
     cde:	d1 ef       	ldi	r29, 0xF1	; 241
    CNF2 = 0xFA;
    CNF3 = 0x87;
  }
  else if (bitrate == 250000)
  {
    CNF1 = 0x41;
     ce0:	61 e4       	ldi	r22, 0x41	; 65
     ce2:	07 c0       	rjmp	.+14     	; 0xcf2 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 500000)
  {
    CNF1 = 0x00;
    CNF2 = 0xF0;
    CNF3 = 0x86;
     ce4:	c6 e8       	ldi	r28, 0x86	; 134
    CNF3 = 0x85;
  }
  else if (bitrate == 500000)
  {
    CNF1 = 0x00;
    CNF2 = 0xF0;
     ce6:	d0 ef       	ldi	r29, 0xF0	; 240
    CNF2 = 0xF1;
    CNF3 = 0x85;
  }
  else if (bitrate == 500000)
  {
    CNF1 = 0x00;
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	03 c0       	rjmp	.+6      	; 0xcf2 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 1000000)
  {
    CNF1 = 0x00;
    CNF2 = 0xD0;
    CNF3 = 0x82;
     cec:	c2 e8       	ldi	r28, 0x82	; 130
    CNF3 = 0x86;
  }
  else if (bitrate == 1000000)
  {
    CNF1 = 0x00;
    CNF2 = 0xD0;
     cee:	d0 ed       	ldi	r29, 0xD0	; 208
    CNF2 = 0xF0;
    CNF3 = 0x86;
  }
  else if (bitrate == 1000000)
  {
    CNF1 = 0x00;
     cf0:	60 e0       	ldi	r22, 0x00	; 0
  }

// 	mcp2515_write_register(MCP2515_CNF1, CNF1);//Write config address 1
// 	mcp2515_write_register(MCP2515_CNF2, CNF2);//Write config address 2
// 	mcp2515_write_register(MCP2515_CNF3, CNF3);//Write config address 3
	mcp2515_bit_modify(MCP2515_CNF1, CNF1,0xFF);//Write config address 1
     cf2:	4f ef       	ldi	r20, 0xFF	; 255
     cf4:	8a e2       	ldi	r24, 0x2A	; 42
     cf6:	0e 94 0d 08 	call	0x101a	; 0x101a <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP2515_CNF2, CNF2,0xFF);//Write config address 2
     cfa:	4f ef       	ldi	r20, 0xFF	; 255
     cfc:	6d 2f       	mov	r22, r29
     cfe:	89 e2       	ldi	r24, 0x29	; 41
     d00:	0e 94 0d 08 	call	0x101a	; 0x101a <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP2515_CNF3, CNF3,0xFF);//Write config address 3
     d04:	4f ef       	ldi	r20, 0xFF	; 255
     d06:	6c 2f       	mov	r22, r28
     d08:	88 e2       	ldi	r24, 0x28	; 40
     d0a:	0e 94 0d 08 	call	0x101a	; 0x101a <mcp2515_bit_modify>
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <CAN_init>:

/****************************************************************************
Call this function to set up the CAN to its initial standby state.
****************************************************************************/
void CAN_init(){
        mcp2515_init();
     d14:	0e 94 42 08 	call	0x1084	; 0x1084 <mcp2515_init>
        //Set receive interrupt

       // set speed to 
	    //mcp2515_bit_modify(MCP2515_CANCTRL,MCP2515_MODE_CONFIG , MCP2515_REQOPn);
		CAN_MCP2515_clearTxBuffers();
     d18:	0e 94 a4 07 	call	0xf48	; 0xf48 <CAN_MCP2515_clearTxBuffers>
		CAN_MCP2515_clearRxBuffers();
     d1c:	0e 94 76 07 	call	0xeec	; 0xeec <CAN_MCP2515_clearRxBuffers>
		

		CAN_MCP2515_setBitrate(250000);
     d20:	60 e9       	ldi	r22, 0x90	; 144
     d22:	70 ed       	ldi	r23, 0xD0	; 208
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 e5 05 	call	0xbca	; 0xbca <CAN_MCP2515_setBitrate>
		
		mcp2515_bit_modify(MCP_CANINTE, 0x3, MCP_RX_INT);
     d2c:	43 e0       	ldi	r20, 0x03	; 3
     d2e:	63 e0       	ldi	r22, 0x03	; 3
     d30:	8b e2       	ldi	r24, 0x2B	; 43
     d32:	0e 94 0d 08 	call	0x101a	; 0x101a <mcp2515_bit_modify>
        //Set control register to turn off mask filter and receive any msgs
        mcp2515_bit_modify(MCP_RXB0CTRL, 0x60, 0xFF);
     d36:	4f ef       	ldi	r20, 0xFF	; 255
     d38:	60 e6       	ldi	r22, 0x60	; 96
     d3a:	80 e6       	ldi	r24, 0x60	; 96
     d3c:	0e 94 0d 08 	call	0x101a	; 0x101a <mcp2515_bit_modify>
		//Set mode normal
        mcp2515_bit_modify(MCP_CANCTRL, MODE_NORMAL, MODE_MASK);
     d40:	40 ee       	ldi	r20, 0xE0	; 224
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	8f e0       	ldi	r24, 0x0F	; 15
     d46:	0e 94 0d 08 	call	0x101a	; 0x101a <mcp2515_bit_modify>
		
				
		printf("\n Can setings %i \t",mcp2515_read_register(MCP2515_CNF1));
     d4a:	8a e2       	ldi	r24, 0x2A	; 42
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 5d 07 	call	0xeba	; 0xeba <mcp2515_read_register>
     d52:	1f 92       	push	r1
     d54:	8f 93       	push	r24
     d56:	88 ec       	ldi	r24, 0xC8	; 200
     d58:	90 e2       	ldi	r25, 0x20	; 32
     d5a:	9f 93       	push	r25
     d5c:	8f 93       	push	r24
     d5e:	0e 94 3f 43 	call	0x867e	; 0x867e <printf>
		printf("%i\t",mcp2515_read_register(MCP2515_CNF2));
     d62:	89 e2       	ldi	r24, 0x29	; 41
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 5d 07 	call	0xeba	; 0xeba <mcp2515_read_register>
     d6a:	1f 92       	push	r1
     d6c:	8f 93       	push	r24
     d6e:	8b ed       	ldi	r24, 0xDB	; 219
     d70:	90 e2       	ldi	r25, 0x20	; 32
     d72:	9f 93       	push	r25
     d74:	8f 93       	push	r24
     d76:	0e 94 3f 43 	call	0x867e	; 0x867e <printf>
		printf("%i\n",mcp2515_read_register(MCP2515_CNF3));
     d7a:	88 e2       	ldi	r24, 0x28	; 40
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 5d 07 	call	0xeba	; 0xeba <mcp2515_read_register>
     d82:	1f 92       	push	r1
     d84:	8f 93       	push	r24
     d86:	83 ee       	ldi	r24, 0xE3	; 227
     d88:	90 e2       	ldi	r25, 0x20	; 32
     d8a:	9f 93       	push	r25
     d8c:	8f 93       	push	r24
     d8e:	0e 94 3f 43 	call	0x867e	; 0x867e <printf>

        CAN_int_flag = 0;
     d92:	10 92 01 27 	sts	0x2701, r1
     d96:	8d b7       	in	r24, 0x3d	; 61
     d98:	9e b7       	in	r25, 0x3e	; 62
     d9a:	0c 96       	adiw	r24, 0x0c	; 12
     d9c:	8d bf       	out	0x3d, r24	; 61
     d9e:	9e bf       	out	0x3e, r25	; 62
     da0:	08 95       	ret

00000da2 <CAN_message_send>:
}

/****************************************************************************
Call this function to send a message over the CAN bus
****************************************************************************/
void CAN_message_send(can_message_t* msg){
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	ec 01       	movw	r28, r24
        mcp2515_write(msg->msg_id, MCP_TXB0SIDH);
     daa:	61 e3       	ldi	r22, 0x31	; 49
     dac:	88 81       	ld	r24, Y
     dae:	0e 94 3f 07 	call	0xe7e	; 0xe7e <mcp2515_write>
		//mcp2515_write(msg->msg_id, MCP2515_TXB0EID0);
        mcp2515_bit_modify(MCP_TXB0DLC, msg->data_length, 0x0F);
     db2:	4f e0       	ldi	r20, 0x0F	; 15
     db4:	69 81       	ldd	r22, Y+1	; 0x01
     db6:	85 e3       	ldi	r24, 0x35	; 53
     db8:	0e 94 0d 08 	call	0x101a	; 0x101a <mcp2515_bit_modify>
        BYTE i;
        for(i = 0; i <  msg->data_length; i++){
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	88 23       	and	r24, r24
     dc0:	69 f0       	breq	.+26     	; 0xddc <CAN_message_send+0x3a>
     dc2:	10 e0       	ldi	r17, 0x00	; 0
     dc4:	66 e3       	ldi	r22, 0x36	; 54
     dc6:	61 0f       	add	r22, r17
                mcp2515_write(msg->data[i], MCP_TXB0D0 + i);
     dc8:	fe 01       	movw	r30, r28
     dca:	e1 0f       	add	r30, r17
     dcc:	f1 1d       	adc	r31, r1
     dce:	82 81       	ldd	r24, Z+2	; 0x02
     dd0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <mcp2515_write>
void CAN_message_send(can_message_t* msg){
        mcp2515_write(msg->msg_id, MCP_TXB0SIDH);
		//mcp2515_write(msg->msg_id, MCP2515_TXB0EID0);
        mcp2515_bit_modify(MCP_TXB0DLC, msg->data_length, 0x0F);
        BYTE i;
        for(i = 0; i <  msg->data_length; i++){
     dd4:	1f 5f       	subi	r17, 0xFF	; 255
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	18 17       	cp	r17, r24
     dda:	a0 f3       	brcs	.-24     	; 0xdc4 <CAN_message_send+0x22>
                mcp2515_write(msg->data[i], MCP_TXB0D0 + i);
        }
        mcp2515_request_to_send(MCP_RTS_TX0);
     ddc:	81 e8       	ldi	r24, 0x81	; 129
     dde:	0e 94 e6 07 	call	0xfcc	; 0xfcc <mcp2515_request_to_send>
}
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	08 95       	ret

00000dea <CAN_data_receive>:

/****************************************************************************
Call this function to receive a message over the CAN bus. Note that
the interrupt is cleared by bit modification.
****************************************************************************/
void CAN_data_receive(can_message_t* msg) {
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	ec 01       	movw	r28, r24
     df2:	fc 01       	movw	r30, r24
     df4:	32 96       	adiw	r30, 0x02	; 2
     df6:	88 e0       	ldi	r24, 0x08	; 8
        BYTE i;
        for(i = 0; i < 8; i++){
                msg->data[i] = 0;
     df8:	11 92       	st	Z+, r1
     dfa:	81 50       	subi	r24, 0x01	; 1
Call this function to receive a message over the CAN bus. Note that
the interrupt is cleared by bit modification.
****************************************************************************/
void CAN_data_receive(can_message_t* msg) {
        BYTE i;
        for(i = 0; i < 8; i++){
     dfc:	e9 f7       	brne	.-6      	; 0xdf8 <CAN_data_receive+0xe>
                msg->data[i] = 0;
        }

        msg->msg_id = mcp2515_read(MCP_RXB0SIDH);
     dfe:	81 e6       	ldi	r24, 0x61	; 97
     e00:	0e 94 26 07 	call	0xe4c	; 0xe4c <mcp2515_read>
     e04:	88 83       	st	Y, r24
		
		
		char val;
		val = mcp2515_read(MCP2515_RXB0EID0);
     e06:	84 e6       	ldi	r24, 0x64	; 100
     e08:	0e 94 26 07 	call	0xe4c	; 0xe4c <mcp2515_read>

		if (msg->msg_id ==0)
     e0c:	98 81       	ld	r25, Y
     e0e:	91 11       	cpse	r25, r1
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <CAN_data_receive+0x2a>
		{
			 msg->msg_id  = (msg->msg_id  << 8) | val;
     e12:	88 83       	st	Y, r24
		}
      
		
        msg->data_length = mcp2515_read(MCP_RXB0DLC);
     e14:	85 e6       	ldi	r24, 0x65	; 101
     e16:	0e 94 26 07 	call	0xe4c	; 0xe4c <mcp2515_read>
     e1a:	89 83       	std	Y+1, r24	; 0x01
        for(i = 0; i < msg->data_length; i++){
     e1c:	88 23       	and	r24, r24
     e1e:	69 f0       	breq	.+26     	; 0xe3a <CAN_data_receive+0x50>
     e20:	10 e0       	ldi	r17, 0x00	; 0
                msg->data[i] = mcp2515_read(MCP_RXB0D0 + i);
     e22:	86 e6       	ldi	r24, 0x66	; 102
     e24:	81 0f       	add	r24, r17
     e26:	0e 94 26 07 	call	0xe4c	; 0xe4c <mcp2515_read>
     e2a:	fe 01       	movw	r30, r28
     e2c:	e1 0f       	add	r30, r17
     e2e:	f1 1d       	adc	r31, r1
     e30:	82 83       	std	Z+2, r24	; 0x02
			 msg->msg_id  = (msg->msg_id  << 8) | val;
		}
      
		
        msg->data_length = mcp2515_read(MCP_RXB0DLC);
        for(i = 0; i < msg->data_length; i++){
     e32:	1f 5f       	subi	r17, 0xFF	; 255
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	18 17       	cp	r17, r24
     e38:	a0 f3       	brcs	.-24     	; 0xe22 <CAN_data_receive+0x38>
                msg->data[i] = mcp2515_read(MCP_RXB0D0 + i);
        }
        //Clear interrupt
        mcp2515_bit_modify(MCP_CANINTF, 0x00, 0x01);
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	8c e2       	ldi	r24, 0x2C	; 44
     e40:	0e 94 0d 08 	call	0x101a	; 0x101a <mcp2515_bit_modify>
        //CAN_int_flag = 0;
}
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	08 95       	ret

00000e4c <mcp2515_read>:
}

/****************************************************************************
Call this function to read from a specified address.
****************************************************************************/
BYTE mcp2515_read(BYTE address){
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	08 2f       	mov	r16, r24
 
        // Chip select
       PORTD.OUTCLR =PIN4_bm;
     e56:	c0 e6       	ldi	r28, 0x60	; 96
     e58:	d6 e0       	ldi	r29, 0x06	; 6
     e5a:	10 e1       	ldi	r17, 0x10	; 16
     e5c:	1e 83       	std	Y+6, r17	; 0x06
		BYTE result;
        // Write instruction
        SPI_write(0x03);
     e5e:	83 e0       	ldi	r24, 0x03	; 3
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
        // Where to read from
        SPI_write(address);
     e66:	80 2f       	mov	r24, r16
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
        result = SPI_read();
     e6e:	0e 94 39 15 	call	0x2a72	; 0x2a72 <SPI_read>
        PORTD.OUTSET =PIN4_bm;
     e72:	1d 83       	std	Y+5, r17	; 0x05
    
        return result;
}
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	08 95       	ret

00000e7e <mcp2515_write>:
}

/****************************************************************************
Call this function to write a byte to a specified address.
****************************************************************************/
void mcp2515_write(BYTE data, BYTE address){
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	08 2f       	mov	r16, r24
     e8a:	f6 2e       	mov	r15, r22
       
        // Chip select
        PORTD.OUTCLR =PIN4_bm;
     e8c:	c0 e6       	ldi	r28, 0x60	; 96
     e8e:	d6 e0       	ldi	r29, 0x06	; 6
     e90:	10 e1       	ldi	r17, 0x10	; 16
     e92:	1e 83       	std	Y+6, r17	; 0x06
        // Write instruction
        SPI_write(MCP_WRITE);
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
        // Where to write to
        SPI_write(address);
     e9c:	8f 2d       	mov	r24, r15
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
        // What to send
        SPI_write(data);
     ea4:	80 2f       	mov	r24, r16
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
        // Chip unselect
        PORTD.OUTSET =PIN4_bm;
     eac:	1d 83       	std	Y+5, r17	; 0x05
       
}
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	08 95       	ret

00000eba <mcp2515_read_register>:

uint8_t mcp2515_read_register(uint8_t address)
{
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	08 2f       	mov	r16, r24
	uint8_t data;

	PORTD.OUTCLR =PIN4_bm;
     ec4:	c0 e6       	ldi	r28, 0x60	; 96
     ec6:	d6 e0       	ldi	r29, 0x06	; 6
     ec8:	10 e1       	ldi	r17, 0x10	; 16
     eca:	1e 83       	std	Y+6, r17	; 0x06
	SPI_write(MCP2515_SPI_READ);     //READ Instruction
     ecc:	83 e0       	ldi	r24, 0x03	; 3
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
	SPI_write(address);
     ed4:	80 2f       	mov	r24, r16
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
	data=SPI_read();
     edc:	0e 94 39 15 	call	0x2a72	; 0x2a72 <SPI_read>
	PORTD.OUTSET =PIN4_bm;
     ee0:	1d 83       	std	Y+5, r17	; 0x05

	return data;
}
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	08 95       	ret

00000eec <CAN_MCP2515_clearRxBuffers>:
}

//At power up, MCP2515 buffers are not truly empty. There is random data in the registers
//This loads buffers with zeros to prevent incorrect data to be sent.
void CAN_MCP2515_clearRxBuffers()
{
     eec:	cf 93       	push	r28
	PORTD.OUTCLR =PIN4_bm;
     eee:	80 e1       	ldi	r24, 0x10	; 16
     ef0:	e0 e6       	ldi	r30, 0x60	; 96
     ef2:	f6 e0       	ldi	r31, 0x06	; 6
     ef4:	86 83       	std	Z+6, r24	; 0x06
	SPI_write(MCP2515_SPI_WRITE);
     ef6:	82 e0       	ldi	r24, 0x02	; 2
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
	SPI_write(MCP2515_RXB0SIDH);
     efe:	81 e6       	ldi	r24, 0x61	; 97
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
     f06:	cd e0       	ldi	r28, 0x0D	; 13
	for (uint8_t i = 0; i < 13; i++)
	{
		SPI_write(0x00);
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
     f10:	c1 50       	subi	r28, 0x01	; 1
void CAN_MCP2515_clearRxBuffers()
{
	PORTD.OUTCLR =PIN4_bm;
	SPI_write(MCP2515_SPI_WRITE);
	SPI_write(MCP2515_RXB0SIDH);
	for (uint8_t i = 0; i < 13; i++)
     f12:	d1 f7       	brne	.-12     	; 0xf08 <CAN_MCP2515_clearRxBuffers+0x1c>
	{
		SPI_write(0x00);
	}
	PORTD.OUTSET =PIN4_bm;
     f14:	e0 e6       	ldi	r30, 0x60	; 96
     f16:	f6 e0       	ldi	r31, 0x06	; 6
     f18:	80 e1       	ldi	r24, 0x10	; 16
     f1a:	85 83       	std	Z+5, r24	; 0x05
	PORTD.OUTCLR =PIN4_bm;;
     f1c:	86 83       	std	Z+6, r24	; 0x06
	SPI_write (MCP2515_SPI_WRITE);
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
	SPI_write(MCP2515_RXB1SIDH);
     f26:	81 e7       	ldi	r24, 0x71	; 113
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
     f2e:	cd e0       	ldi	r28, 0x0D	; 13
	for (uint8_t i = 0; i < 13; i++)
	{
		SPI_write(0x00);
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
     f38:	c1 50       	subi	r28, 0x01	; 1
	}
	PORTD.OUTSET =PIN4_bm;
	PORTD.OUTCLR =PIN4_bm;;
	SPI_write (MCP2515_SPI_WRITE);
	SPI_write(MCP2515_RXB1SIDH);
	for (uint8_t i = 0; i < 13; i++)
     f3a:	d1 f7       	brne	.-12     	; 0xf30 <CAN_MCP2515_clearRxBuffers+0x44>
	{
		SPI_write(0x00);
	}
		PORTD.OUTSET =PIN4_bm;
     f3c:	80 e1       	ldi	r24, 0x10	; 16
     f3e:	e0 e6       	ldi	r30, 0x60	; 96
     f40:	f6 e0       	ldi	r31, 0x06	; 6
     f42:	85 83       	std	Z+5, r24	; 0x05
}
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <CAN_MCP2515_clearTxBuffers>:

// This loads buffers with zeros to prevent incorrect data to be sent.
// Note: If RTS is sent to a buffer that has all zeros it will still send a message with all zeros.
void CAN_MCP2515_clearTxBuffers()
{
     f48:	cf 93       	push	r28
	PORTD.OUTCLR =PIN4_bm;;
     f4a:	80 e1       	ldi	r24, 0x10	; 16
     f4c:	e0 e6       	ldi	r30, 0x60	; 96
     f4e:	f6 e0       	ldi	r31, 0x06	; 6
     f50:	86 83       	std	Z+6, r24	; 0x06
	SPI_write(MCP2515_SPI_WRITE);
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
	SPI_write(MCP2515_TXB0SIDH);
     f5a:	81 e3       	ldi	r24, 0x31	; 49
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
     f62:	cd e0       	ldi	r28, 0x0D	; 13
	for (uint8_t i = 0; i < 13; i++)
	{
		SPI_write(0x00);
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
     f6c:	c1 50       	subi	r28, 0x01	; 1
void CAN_MCP2515_clearTxBuffers()
{
	PORTD.OUTCLR =PIN4_bm;;
	SPI_write(MCP2515_SPI_WRITE);
	SPI_write(MCP2515_TXB0SIDH);
	for (uint8_t i = 0; i < 13; i++)
     f6e:	d1 f7       	brne	.-12     	; 0xf64 <CAN_MCP2515_clearTxBuffers+0x1c>
	{
		SPI_write(0x00);
	}
	PORTD.OUTSET =PIN4_bm;
     f70:	e0 e6       	ldi	r30, 0x60	; 96
     f72:	f6 e0       	ldi	r31, 0x06	; 6
     f74:	80 e1       	ldi	r24, 0x10	; 16
     f76:	85 83       	std	Z+5, r24	; 0x05
	PORTD.OUTCLR =PIN4_bm;;
     f78:	86 83       	std	Z+6, r24	; 0x06
	SPI_write (MCP2515_SPI_WRITE);
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
	SPI_write (MCP2515_TXB1SIDH);
     f82:	81 e4       	ldi	r24, 0x41	; 65
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
     f8a:	cd e0       	ldi	r28, 0x0D	; 13
	for (uint8_t i = 0; i < 13; i++)
	{
	  SPI_write(0x00);
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
     f94:	c1 50       	subi	r28, 0x01	; 1
	}
	PORTD.OUTSET =PIN4_bm;
	PORTD.OUTCLR =PIN4_bm;;
	SPI_write (MCP2515_SPI_WRITE);
	SPI_write (MCP2515_TXB1SIDH);
	for (uint8_t i = 0; i < 13; i++)
     f96:	d1 f7       	brne	.-12     	; 0xf8c <CAN_MCP2515_clearTxBuffers+0x44>
	{
	  SPI_write(0x00);
	}
	PORTD.OUTSET =PIN4_bm;
     f98:	e0 e6       	ldi	r30, 0x60	; 96
     f9a:	f6 e0       	ldi	r31, 0x06	; 6
     f9c:	80 e1       	ldi	r24, 0x10	; 16
     f9e:	85 83       	std	Z+5, r24	; 0x05
	PORTD.OUTCLR =PIN4_bm;	
     fa0:	86 83       	std	Z+6, r24	; 0x06
	
	SPI_write (MCP2515_SPI_WRITE);
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
	SPI_write (MCP2515_TXB2SIDH);
     faa:	81 e5       	ldi	r24, 0x51	; 81
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
     fb2:	cd e0       	ldi	r28, 0x0D	; 13
	for (uint8_t i = 0; i < 13; i++)
	{
		SPI_write(0x00);
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
     fbc:	c1 50       	subi	r28, 0x01	; 1
	PORTD.OUTSET =PIN4_bm;
	PORTD.OUTCLR =PIN4_bm;	
	
	SPI_write (MCP2515_SPI_WRITE);
	SPI_write (MCP2515_TXB2SIDH);
	for (uint8_t i = 0; i < 13; i++)
     fbe:	d1 f7       	brne	.-12     	; 0xfb4 <CAN_MCP2515_clearTxBuffers+0x6c>
	{
		SPI_write(0x00);
	}
	PORTD.OUTSET =PIN4_bm;
     fc0:	80 e1       	ldi	r24, 0x10	; 16
     fc2:	e0 e6       	ldi	r30, 0x60	; 96
     fc4:	f6 e0       	ldi	r31, 0x06	; 6
     fc6:	85 83       	std	Z+5, r24	; 0x05
}
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <mcp2515_request_to_send>:
Call this function to send from a specified buffer.
****************************************************************************/
void mcp2515_request_to_send(BYTE rts_buffer)
{
        // Chip select
        PORTD.OUTCLR =PIN4_bm;
     fcc:	90 e1       	ldi	r25, 0x10	; 16
     fce:	e0 e6       	ldi	r30, 0x60	; 96
     fd0:	f6 e0       	ldi	r31, 0x06	; 6
     fd2:	96 83       	std	Z+6, r25	; 0x06
        // Write instruction
        switch(rts_buffer){
     fd4:	82 38       	cpi	r24, 0x82	; 130
     fd6:	71 f0       	breq	.+28     	; 0xff4 <mcp2515_request_to_send+0x28>
     fd8:	18 f4       	brcc	.+6      	; 0xfe0 <mcp2515_request_to_send+0x14>
     fda:	81 38       	cpi	r24, 0x81	; 129
     fdc:	31 f0       	breq	.+12     	; 0xfea <mcp2515_request_to_send+0x1e>
     fde:	18 c0       	rjmp	.+48     	; 0x1010 <mcp2515_request_to_send+0x44>
     fe0:	84 38       	cpi	r24, 0x84	; 132
     fe2:	69 f0       	breq	.+26     	; 0xffe <mcp2515_request_to_send+0x32>
     fe4:	87 38       	cpi	r24, 0x87	; 135
     fe6:	81 f0       	breq	.+32     	; 0x1008 <mcp2515_request_to_send+0x3c>
     fe8:	13 c0       	rjmp	.+38     	; 0x1010 <mcp2515_request_to_send+0x44>
                case MCP_RTS_TX0:
                        SPI_write(MCP_RTS_TX0);
     fea:	81 e8       	ldi	r24, 0x81	; 129
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
                        break;
     ff2:	0e c0       	rjmp	.+28     	; 0x1010 <mcp2515_request_to_send+0x44>
                case MCP_RTS_TX1:
                        SPI_write(MCP_RTS_TX1);
     ff4:	82 e8       	ldi	r24, 0x82	; 130
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
                        break;
     ffc:	09 c0       	rjmp	.+18     	; 0x1010 <mcp2515_request_to_send+0x44>
                case MCP_RTS_TX2:
                        SPI_write(MCP_RTS_TX2);
     ffe:	84 e8       	ldi	r24, 0x84	; 132
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
                        break;
    1006:	04 c0       	rjmp	.+8      	; 0x1010 <mcp2515_request_to_send+0x44>
                case MCP_RTS_ALL:
                        SPI_write(MCP_RTS_ALL);
    1008:	87 e8       	ldi	r24, 0x87	; 135
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
                        break;
        }
        // Chip Unselect
        PORTD.OUTSET =PIN4_bm;
    1010:	80 e1       	ldi	r24, 0x10	; 16
    1012:	e0 e6       	ldi	r30, 0x60	; 96
    1014:	f6 e0       	ldi	r31, 0x06	; 6
    1016:	85 83       	std	Z+5, r24	; 0x05
    1018:	08 95       	ret

0000101a <mcp2515_bit_modify>:

/****************************************************************************
Call this function to bit modify a specified buffer
****************************************************************************/
void mcp2515_bit_modify(BYTE address, uint8_t data, BYTE mask)
{
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	e8 2e       	mov	r14, r24
    1028:	06 2f       	mov	r16, r22
    102a:	f4 2e       	mov	r15, r20
        // Chip Select
        PORTD.OUTCLR =PIN4_bm;
    102c:	c0 e6       	ldi	r28, 0x60	; 96
    102e:	d6 e0       	ldi	r29, 0x06	; 6
    1030:	10 e1       	ldi	r17, 0x10	; 16
    1032:	1e 83       	std	Y+6, r17	; 0x06
        // Write instruction
        SPI_write(MCP_BITMOD);
    1034:	85 e0       	ldi	r24, 0x05	; 5
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
        // Write address
        SPI_write(address);             // Where we will change bits
    103c:	8e 2d       	mov	r24, r14
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
		// Write mask
        SPI_write(mask);                // Which bits are allowed to change
    1044:	8f 2d       	mov	r24, r15
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
		// Write data
        SPI_write(data);                // Which bits we will change to
    104c:	80 2f       	mov	r24, r16
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
        // Chip Unselect
        PORTD.OUTSET =PIN4_bm;
    1054:	1d 83       	std	Y+5, r17	; 0x05
}
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	08 95       	ret

00001064 <mcp2515_reset>:

/****************************************************************************
Call this function to reset the mcp2515
****************************************************************************/
void mcp2515_reset()
{
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
        // Chip select
        PORTD.OUTCLR =PIN4_bm;
    106a:	c0 e6       	ldi	r28, 0x60	; 96
    106c:	d6 e0       	ldi	r29, 0x06	; 6
    106e:	10 e1       	ldi	r17, 0x10	; 16
    1070:	1e 83       	std	Y+6, r17	; 0x06
        // Write instruction
        SPI_write(MCP2515_SPI_RESET);
    1072:	80 ec       	ldi	r24, 0xC0	; 192
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
        // Chip unselect
        PORTD.OUTSET =PIN4_bm;
    107a:	1d 83       	std	Y+5, r17	; 0x05
}
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	08 95       	ret

00001084 <mcp2515_init>:
/****************************************************************************
Call this function to set up the mcp2515 to its initial standby state.
****************************************************************************/
BYTE mcp2515_init(){    
	 
        SPI_init();		
    1084:	0e 94 24 15 	call	0x2a48	; 0x2a48 <SPI_init>
        mcp2515_reset();       
    1088:	0e 94 32 08 	call	0x1064	; 0x1064 <mcp2515_reset>
        return 0;
}
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	08 95       	ret

00001090 <can_queue_Enqueue>:
// Two glboal variables to store address of front and rear nodes.
struct Node* front = NULL;
struct Node* rear = NULL;

// To Enqueue an integer
void can_queue_Enqueue(can_message_t x) {
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	2a 97       	sbiw	r28, 0x0a	; 10
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	09 83       	std	Y+1, r16	; 0x01
    10a4:	1a 83       	std	Y+2, r17	; 0x02
    10a6:	2b 83       	std	Y+3, r18	; 0x03
    10a8:	3c 83       	std	Y+4, r19	; 0x04
    10aa:	4d 83       	std	Y+5, r20	; 0x05
    10ac:	5e 83       	std	Y+6, r21	; 0x06
    10ae:	6f 83       	std	Y+7, r22	; 0x07
    10b0:	78 87       	std	Y+8, r23	; 0x08
    10b2:	89 87       	std	Y+9, r24	; 0x09
    10b4:	9a 87       	std	Y+10, r25	; 0x0a
	struct Node* temp =
    10b6:	8c e0       	ldi	r24, 0x0C	; 12
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 cd 40 	call	0x819a	; 0x819a <malloc>
	(struct Node*)malloc(sizeof(struct Node));
	temp->data =x;
    10be:	2a e0       	ldi	r18, 0x0A	; 10
    10c0:	fe 01       	movw	r30, r28
    10c2:	31 96       	adiw	r30, 0x01	; 1
    10c4:	dc 01       	movw	r26, r24
    10c6:	01 90       	ld	r0, Z+
    10c8:	0d 92       	st	X+, r0
    10ca:	2a 95       	dec	r18
    10cc:	e1 f7       	brne	.-8      	; 0x10c6 <can_queue_Enqueue+0x36>
	temp->next = NULL;
    10ce:	fc 01       	movw	r30, r24
    10d0:	12 86       	std	Z+10, r1	; 0x0a
    10d2:	13 86       	std	Z+11, r1	; 0x0b
	if(front == NULL && rear == NULL){
    10d4:	20 91 74 23 	lds	r18, 0x2374
    10d8:	30 91 75 23 	lds	r19, 0x2375
    10dc:	23 2b       	or	r18, r19
    10de:	79 f4       	brne	.+30     	; 0x10fe <can_queue_Enqueue+0x6e>
    10e0:	20 91 72 23 	lds	r18, 0x2372
    10e4:	30 91 73 23 	lds	r19, 0x2373
    10e8:	23 2b       	or	r18, r19
    10ea:	49 f4       	brne	.+18     	; 0x10fe <can_queue_Enqueue+0x6e>
		front = rear = temp;
    10ec:	80 93 72 23 	sts	0x2372, r24
    10f0:	90 93 73 23 	sts	0x2373, r25
    10f4:	80 93 74 23 	sts	0x2374, r24
    10f8:	90 93 75 23 	sts	0x2375, r25
		return;
    10fc:	0a c0       	rjmp	.+20     	; 0x1112 <can_queue_Enqueue+0x82>
	}
	rear->next = temp;
    10fe:	e0 91 72 23 	lds	r30, 0x2372
    1102:	f0 91 73 23 	lds	r31, 0x2373
    1106:	82 87       	std	Z+10, r24	; 0x0a
    1108:	93 87       	std	Z+11, r25	; 0x0b
	rear = temp;
    110a:	80 93 72 23 	sts	0x2372, r24
    110e:	90 93 73 23 	sts	0x2373, r25
}
    1112:	2a 96       	adiw	r28, 0x0a	; 10
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	08 95       	ret

00001122 <can_queue_Dequeue>:

// To Dequeue an integer.
void can_queue_Dequeue() {
	struct Node* temp = front;
    1122:	80 91 74 23 	lds	r24, 0x2374
    1126:	90 91 75 23 	lds	r25, 0x2375
	if(front == NULL) {
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	c9 f0       	breq	.+50     	; 0x1160 <can_queue_Dequeue+0x3e>

		return;
	}
	if(front == rear) {
    112e:	20 91 72 23 	lds	r18, 0x2372
    1132:	30 91 73 23 	lds	r19, 0x2373
    1136:	82 17       	cp	r24, r18
    1138:	93 07       	cpc	r25, r19
    113a:	49 f4       	brne	.+18     	; 0x114e <can_queue_Dequeue+0x2c>
		front = rear = NULL;
    113c:	10 92 72 23 	sts	0x2372, r1
    1140:	10 92 73 23 	sts	0x2373, r1
    1144:	10 92 74 23 	sts	0x2374, r1
    1148:	10 92 75 23 	sts	0x2375, r1
    114c:	07 c0       	rjmp	.+14     	; 0x115c <can_queue_Dequeue+0x3a>
	}
	else {
		front = front->next;
    114e:	fc 01       	movw	r30, r24
    1150:	22 85       	ldd	r18, Z+10	; 0x0a
    1152:	33 85       	ldd	r19, Z+11	; 0x0b
    1154:	20 93 74 23 	sts	0x2374, r18
    1158:	30 93 75 23 	sts	0x2375, r19
	}
	free(temp);
    115c:	0e 94 65 41 	call	0x82ca	; 0x82ca <free>
    1160:	08 95       	ret

00001162 <can_queue_Front>:
}

can_message_t can_queue_Front() {
	if(front == NULL) {
    1162:	e0 91 74 23 	lds	r30, 0x2374
    1166:	f0 91 75 23 	lds	r31, 0x2375
    116a:	30 97       	sbiw	r30, 0x00	; 0
    116c:	21 f4       	brne	.+8      	; 0x1176 <can_queue_Front+0x14>
		
		can_message_t emp;
		emp.msg_id=0xFF;
		return emp;
    116e:	2f ef       	ldi	r18, 0xFF	; 255
    1170:	fc 01       	movw	r30, r24
    1172:	20 83       	st	Z, r18
    1174:	08 95       	ret
	}
	return front->data;
    1176:	2a e0       	ldi	r18, 0x0A	; 10
    1178:	dc 01       	movw	r26, r24
    117a:	01 90       	ld	r0, Z+
    117c:	0d 92       	st	X+, r0
    117e:	2a 95       	dec	r18
    1180:	e1 f7       	brne	.-8      	; 0x117a <can_queue_Front+0x18>
}
    1182:	08 95       	ret

00001184 <can_queue_is_empty>:
int can_queue_is_empty()
{
		if(front == NULL) {
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	20 91 74 23 	lds	r18, 0x2374
    118c:	30 91 75 23 	lds	r19, 0x2375
    1190:	23 2b       	or	r18, r19
    1192:	11 f0       	breq	.+4      	; 0x1198 <can_queue_is_empty+0x14>
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
			//printf("Queue is empty\n");
			return 1;
		}
		return 0;
}
    1198:	08 95       	ret

0000119a <buttion_one>:
function to get the select button1
*/
int buttion_one()
{
	int ret =0;
	if((PORTH.IN & PIN2_bm) ==0 )
    119a:	e0 ee       	ldi	r30, 0xE0	; 224
    119c:	f6 e0       	ldi	r31, 0x06	; 6
    119e:	80 85       	ldd	r24, Z+8	; 0x08
    11a0:	86 95       	lsr	r24
    11a2:	86 95       	lsr	r24
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	89 27       	eor	r24, r25
	{
		ret =1;
	}
	
	return ret;
}
    11a8:	81 70       	andi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	08 95       	ret

000011ae <setup_buttons>:
/************************************************************************/
/* fuction to set pullup on buttons           */
/************************************************************************/
void setup_buttons()
{
	PORTH.PIN4CTRL  =    PORT_OPC_PULLUP_gc;
    11ae:	e0 ee       	ldi	r30, 0xE0	; 224
    11b0:	f6 e0       	ldi	r31, 0x06	; 6
    11b2:	88 e1       	ldi	r24, 0x18	; 24
    11b4:	84 8b       	std	Z+20, r24	; 0x14
	PORTH.DIRCLR    =    PIN2_bm;
    11b6:	94 e0       	ldi	r25, 0x04	; 4
    11b8:	92 83       	std	Z+2, r25	; 0x02
	PORTH.PIN4CTRL  =    PORT_OPC_PULLUP_gc;
    11ba:	84 8b       	std	Z+20, r24	; 0x14
	PORTH.DIRCLR    =    PIN3_bm;
    11bc:	98 e0       	ldi	r25, 0x08	; 8
    11be:	92 83       	std	Z+2, r25	; 0x02
	PORTH.PIN4CTRL  =    PORT_OPC_PULLUP_gc;
    11c0:	84 8b       	std	Z+20, r24	; 0x14
	PORTH.DIRCLR    =    PIN4_bm;
    11c2:	90 e1       	ldi	r25, 0x10	; 16
    11c4:	92 83       	std	Z+2, r25	; 0x02
	PORTH.PIN4CTRL  =    PORT_OPC_PULLUP_gc;
    11c6:	84 8b       	std	Z+20, r24	; 0x14
	PORTH.DIRCLR    =    PIN5_bm;
    11c8:	90 e2       	ldi	r25, 0x20	; 32
    11ca:	92 83       	std	Z+2, r25	; 0x02
	PORTH.PIN4CTRL  =    PORT_OPC_PULLUP_gc;
    11cc:	84 8b       	std	Z+20, r24	; 0x14
	PORTH.DIRCLR    =    PIN6_bm;
    11ce:	90 e4       	ldi	r25, 0x40	; 64
    11d0:	92 83       	std	Z+2, r25	; 0x02
	PORTH.PIN4CTRL  =    PORT_OPC_PULLUP_gc;
    11d2:	84 8b       	std	Z+20, r24	; 0x14
	PORTH.DIRCLR    =    PIN7_bm;
    11d4:	80 e8       	ldi	r24, 0x80	; 128
    11d6:	82 83       	std	Z+2, r24	; 0x02
    11d8:	08 95       	ret

000011da <toogle_alert>:
}

// alert led toogle functions
void toogle_alert()
{
	PORTK.OUTSET = PIN7_bm;
    11da:	80 e8       	ldi	r24, 0x80	; 128
    11dc:	e0 e2       	ldi	r30, 0x20	; 32
    11de:	f7 e0       	ldi	r31, 0x07	; 7
    11e0:	85 83       	std	Z+5, r24	; 0x05
    11e2:	08 95       	ret

000011e4 <clear_alert>:
}
void clear_alert()
{
	PORTK.OUTCLR = PIN7_bm;
    11e4:	80 e8       	ldi	r24, 0x80	; 128
    11e6:	e0 e2       	ldi	r30, 0x20	; 32
    11e8:	f7 e0       	ldi	r31, 0x07	; 7
    11ea:	86 83       	std	Z+6, r24	; 0x06
    11ec:	08 95       	ret

000011ee <beep>:
}
/** Generates pezoo beep */
void beep(int duration )
{
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	8c 01       	movw	r16, r24
	/** tone 1 khz*/
	for (int i =0;i< duration; i++)
    11f8:	18 16       	cp	r1, r24
    11fa:	19 06       	cpc	r1, r25
    11fc:	f4 f4       	brge	.+60     	; 0x123a <beep+0x4c>
    11fe:	c0 e0       	ldi	r28, 0x00	; 0
    1200:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Max_write( 0,  1);
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <Max_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    120e:	8f e3       	ldi	r24, 0x3F	; 63
    1210:	9f e1       	ldi	r25, 0x1F	; 31
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <beep+0x24>
    1216:	00 c0       	rjmp	.+0      	; 0x1218 <beep+0x2a>
    1218:	00 00       	nop
		_delay_ms(1);
		Max_write( 0, 0);
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <Max_write>
    1226:	8f e3       	ldi	r24, 0x3F	; 63
    1228:	9f e1       	ldi	r25, 0x1F	; 31
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	f1 f7       	brne	.-4      	; 0x122a <beep+0x3c>
    122e:	00 c0       	rjmp	.+0      	; 0x1230 <beep+0x42>
    1230:	00 00       	nop
}
/** Generates pezoo beep */
void beep(int duration )
{
	/** tone 1 khz*/
	for (int i =0;i< duration; i++)
    1232:	21 96       	adiw	r28, 0x01	; 1
    1234:	c0 17       	cp	r28, r16
    1236:	d1 07       	cpc	r29, r17
    1238:	21 f7       	brne	.-56     	; 0x1202 <beep+0x14>
		_delay_ms(1);
		Max_write( 0, 0);
		_delay_ms(1);
	}

}
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	08 95       	ret

00001244 <uart_putchar>:
	}
}


static int uart_putchar (char c, FILE *stream)
{
    1244:	cf 93       	push	r28
    1246:	c8 2f       	mov	r28, r24
    if (c == '\n')
    1248:	8a 30       	cpi	r24, 0x0A	; 10
    124a:	19 f4       	brne	.+6      	; 0x1252 <uart_putchar+0xe>
    uart_putchar('\r', stream);
    124c:	8d e0       	ldi	r24, 0x0D	; 13
    124e:	0e 94 22 09 	call	0x1244	; 0x1244 <uart_putchar>
     
    // Wait for the transmit buffer to be empty
    while (  !(USARTE0_STATUS & USART_DREIF_bm) );
    1252:	e1 ea       	ldi	r30, 0xA1	; 161
    1254:	fa e0       	ldi	r31, 0x0A	; 10
    1256:	90 81       	ld	r25, Z
    1258:	95 ff       	sbrs	r25, 5
    125a:	fd cf       	rjmp	.-6      	; 0x1256 <uart_putchar+0x12>
     
    // Put our character into the transmit buffer
    USARTE0_DATA = c;
    125c:	c0 93 a0 0a 	sts	0x0AA0, r28
	
	
    return 0;
}
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	cf 91       	pop	r28
    1266:	08 95       	ret

00001268 <uart_getchar>:

int uart_getchar(FILE *stream)
{
    1268:	cf 93       	push	r28
    126a:	bc 01       	movw	r22, r24
    while( !(USARTE0_STATUS & USART_RXCIF_bm) ); //Wait until data has been received.
    126c:	e1 ea       	ldi	r30, 0xA1	; 161
    126e:	fa e0       	ldi	r31, 0x0A	; 10
    1270:	80 81       	ld	r24, Z
    1272:	88 23       	and	r24, r24
    1274:	ec f7       	brge	.-6      	; 0x1270 <uart_getchar+0x8>
    char data = USARTE0_DATA; //Temporarly store received data
    1276:	c0 91 a0 0a 	lds	r28, 0x0AA0
    if(data == '\r')
    127a:	cd 30       	cpi	r28, 0x0D	; 13
    127c:	09 f4       	brne	.+2      	; 0x1280 <uart_getchar+0x18>
        data = '\n';    
    127e:	ca e0       	ldi	r28, 0x0A	; 10
    uart_putchar(data, stream); //Send to console what has been received, so we can see when typing
    1280:	8c 2f       	mov	r24, r28
    1282:	0e 94 22 09 	call	0x1244	; 0x1244 <uart_putchar>
    return data;        
}
    1286:	8c 2f       	mov	r24, r28
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	cf 91       	pop	r28
    128c:	08 95       	ret

0000128e <print_heartbeat>:
	}
	
}
int heartbeat= 0;
void print_heartbeat()
{
    128e:	cf 92       	push	r12
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
	heartbeat++;
    129e:	80 91 80 23 	lds	r24, 0x2380
    12a2:	90 91 81 23 	lds	r25, 0x2381
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	80 93 80 23 	sts	0x2380, r24
    12ac:	90 93 81 23 	sts	0x2381, r25
	printf("2;h;%i\n",heartbeat);
    12b0:	9f 93       	push	r25
    12b2:	8f 93       	push	r24
    12b4:	8f ed       	ldi	r24, 0xDF	; 223
    12b6:	90 e2       	ldi	r25, 0x20	; 32
    12b8:	9f 93       	push	r25
    12ba:	8f 93       	push	r24
    12bc:	0e 94 3f 43 	call	0x867e	; 0x867e <printf>
	printf("1;%s;%i;%ld;%ld;\n",rs232radio.model,get_amp_id(),rs232radio.freqvensy,rs232radio.band);
    12c0:	ee e7       	ldi	r30, 0x7E	; 126
    12c2:	f7 e2       	ldi	r31, 0x27	; 39
    12c4:	f0 80       	ld	r15, Z
    12c6:	e1 80       	ldd	r14, Z+1	; 0x01
    12c8:	d2 80       	ldd	r13, Z+2	; 0x02
    12ca:	c3 80       	ldd	r12, Z+3	; 0x03
    12cc:	ee e8       	ldi	r30, 0x8E	; 142
    12ce:	f7 e2       	ldi	r31, 0x27	; 39
    12d0:	c0 81       	ld	r28, Z
    12d2:	d1 81       	ldd	r29, Z+1	; 0x01
    12d4:	12 81       	ldd	r17, Z+2	; 0x02
    12d6:	03 81       	ldd	r16, Z+3	; 0x03
    12d8:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <get_amp_id>
    12dc:	cf 92       	push	r12
    12de:	df 92       	push	r13
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	9f 93       	push	r25
    12ee:	8f 93       	push	r24
    12f0:	ec e7       	ldi	r30, 0x7C	; 124
    12f2:	f7 e2       	ldi	r31, 0x27	; 39
    12f4:	81 81       	ldd	r24, Z+1	; 0x01
    12f6:	8f 93       	push	r24
    12f8:	80 81       	ld	r24, Z
    12fa:	8f 93       	push	r24
    12fc:	87 ee       	ldi	r24, 0xE7	; 231
    12fe:	90 e2       	ldi	r25, 0x20	; 32
    1300:	9f 93       	push	r25
    1302:	8f 93       	push	r24
    1304:	0e 94 3f 43 	call	0x867e	; 0x867e <printf>
    1308:	8d b7       	in	r24, 0x3d	; 61
    130a:	9e b7       	in	r25, 0x3e	; 62
    130c:	42 96       	adiw	r24, 0x12	; 18
    130e:	8d bf       	out	0x3d, r24	; 61
    1310:	9e bf       	out	0x3e, r25	; 62
}
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	ff 90       	pop	r15
    131c:	ef 90       	pop	r14
    131e:	df 90       	pop	r13
    1320:	cf 90       	pop	r12
    1322:	08 95       	ret

00001324 <setClockTo32MHz>:
	// 	CCP = CCP_IOREG_gc;              // disable register security for oscillator update
	// 	OSC.CTRL = OSC_RC32MEN_bm;       // enable 32MHz oscillator
	// 	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); // wait for oscillator to be ready
	// 	CCP = CCP_IOREG_gc;              // disable register security for clock update
	// 	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; // switch to 32MHz clock
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc ;
    1324:	e0 e5       	ldi	r30, 0x50	; 80
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	8b ec       	ldi	r24, 0xCB	; 203
    132a:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_XOSCEN_bm ; // enable it
    132c:	80 81       	ld	r24, Z
    132e:	88 60       	ori	r24, 0x08	; 8
    1330:	80 83       	st	Z, r24
	while( (OSC.STATUS & OSC_XOSCRDY_bm) == 0 ){} // wait until it's stable
    1332:	81 81       	ldd	r24, Z+1	; 0x01
    1334:	83 ff       	sbrs	r24, 3
    1336:	fd cf       	rjmp	.-6      	; 0x1332 <setClockTo32MHz+0xe>

	// The external crystal is now running and stable.
	// (Note that it's not yet selected as the clock source)
	// Now configure the PLL to be eXternal oscillator * 2
	OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | 2 ;
    1338:	e0 e5       	ldi	r30, 0x50	; 80
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	82 ec       	ldi	r24, 0xC2	; 194
    133e:	85 83       	std	Z+5, r24	; 0x05

	// now enable the PLL...
	OSC.CTRL |= OSC_PLLEN_bm ; // enable the PLL...
    1340:	80 81       	ld	r24, Z
    1342:	80 61       	ori	r24, 0x10	; 16
    1344:	80 83       	st	Z, r24
	while( (OSC.STATUS & OSC_PLLRDY_bm) == 0 ){} // wait until it's stable
    1346:	81 81       	ldd	r24, Z+1	; 0x01
    1348:	84 ff       	sbrs	r24, 4
    134a:	fd cf       	rjmp	.-6      	; 0x1346 <setClockTo32MHz+0x22>

	// And now, *finally*, we can switch from the internal 2Mhz clock to the PLL
	CCP = CCP_IOREG_gc;	// protected write follows
    134c:	88 ed       	ldi	r24, 0xD8	; 216
    134e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_PLL_gc;	// The System clock is now  PLL (16Mhz * 2)
    1350:	84 e0       	ldi	r24, 0x04	; 4
    1352:	80 93 40 00 	sts	0x0040, r24
    1356:	08 95       	ret

00001358 <send_data_to_pi>:



/** Send a mode pacet for pi i band*/ 
void send_data_to_pi()
{
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	2a 97       	sbiw	r28, 0x0a	; 10
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	de bf       	out	0x3e, r29	; 62
	can_message_t  pimsg;
	pimsg.msg_id=200;
	pimsg.data_length=7;
	pimsg.data[0] = 252;
	/* send band in 16 bit over can*/
	pimsg.data[1] = (rs232radio.band& 0xFF);
    136c:	80 91 7e 27 	lds	r24, 0x277E
    1370:	90 91 7f 27 	lds	r25, 0x277F
    1374:	a0 91 80 27 	lds	r26, 0x2780
    1378:	b0 91 81 27 	lds	r27, 0x2781
	pimsg.data[2] = (rs232radio.band >>8);
    137c:	49 2f       	mov	r20, r25
    137e:	5a 2f       	mov	r21, r26
    1380:	6b 2f       	mov	r22, r27
    1382:	77 27       	eor	r23, r23
	pimsg.data[3] = rs232radio.meter;
    1384:	f0 90 82 27 	lds	r15, 0x2782
	pimsg.data[4] = rs232radio.ptt;
    1388:	f0 91 86 27 	lds	r31, 0x2786
	pimsg.data[5] = rs232radio.amp_id;
    138c:	e0 91 8a 27 	lds	r30, 0x278A
	pimsg.data[6] = rs232radio.mode_id;

	
	can_queue_Enqueue(pimsg);
    1390:	08 ec       	ldi	r16, 0xC8	; 200
    1392:	17 e0       	ldi	r17, 0x07	; 7
    1394:	2c ef       	ldi	r18, 0xFC	; 252
    1396:	38 2f       	mov	r19, r24
    1398:	5f 2d       	mov	r21, r15
    139a:	6f 2f       	mov	r22, r31
    139c:	7e 2f       	mov	r23, r30
    139e:	80 91 88 27 	lds	r24, 0x2788
    13a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a4:	0e 94 48 08 	call	0x1090	; 0x1090 <can_queue_Enqueue>
	
	
}
    13a8:	2a 96       	adiw	r28, 0x0a	; 10
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	08 95       	ret

000013ba <send_data_to_freq>:
/** create a 32bit int from freq to send to canbus for freq*/ 
void send_data_to_freq()
{	
    13ba:	8f 92       	push	r8
    13bc:	9f 92       	push	r9
    13be:	af 92       	push	r10
    13c0:	bf 92       	push	r11
    13c2:	cf 92       	push	r12
    13c4:	df 92       	push	r13
    13c6:	ef 92       	push	r14
    13c8:	ff 92       	push	r15
    13ca:	0f 93       	push	r16
    13cc:	1f 93       	push	r17
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	2a 97       	sbiw	r28, 0x0a	; 10
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	de bf       	out	0x3e, r29	; 62
		/** create a 32bit int to send to pi for freq*/ 
		uint32_t Freq_to_send;
		Freq_to_send= rs232radio.freqvensy;
    13dc:	ee e8       	ldi	r30, 0x8E	; 142
    13de:	f7 e2       	ldi	r31, 0x27	; 39
    13e0:	30 81       	ld	r19, Z
    13e2:	83 2f       	mov	r24, r19
    13e4:	91 81       	ldd	r25, Z+1	; 0x01
    13e6:	a2 81       	ldd	r26, Z+2	; 0x02
    13e8:	b3 81       	ldd	r27, Z+3	; 0x03
		can_message_t  pimsg;
		pimsg.msg_id=200;
		pimsg.data_length=5;
		pimsg.data[0]= 253;
		pimsg.data[1]= Freq_to_send;
		pimsg.data[2]= Freq_to_send >> 8;
    13ea:	89 2e       	mov	r8, r25
    13ec:	9a 2e       	mov	r9, r26
    13ee:	ab 2e       	mov	r10, r27
    13f0:	bb 24       	eor	r11, r11
		pimsg.data[3]= Freq_to_send >> 16;
    13f2:	6d 01       	movw	r12, r26
    13f4:	ee 24       	eor	r14, r14
    13f6:	ff 24       	eor	r15, r15
		pimsg.data[4]= Freq_to_send >> 24;
    13f8:	6b 2f       	mov	r22, r27
    13fa:	77 27       	eor	r23, r23
    13fc:	88 27       	eor	r24, r24
    13fe:	99 27       	eor	r25, r25
		can_queue_Enqueue(pimsg);
    1400:	08 ec       	ldi	r16, 0xC8	; 200
    1402:	15 e0       	ldi	r17, 0x05	; 5
    1404:	2d ef       	ldi	r18, 0xFD	; 253
    1406:	48 2d       	mov	r20, r8
    1408:	5c 2d       	mov	r21, r12
    140a:	78 85       	ldd	r23, Y+8	; 0x08
    140c:	89 85       	ldd	r24, Y+9	; 0x09
    140e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1410:	0e 94 48 08 	call	0x1090	; 0x1090 <can_queue_Enqueue>
	

}
    1414:	2a 96       	adiw	r28, 0x0a	; 10
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	ff 90       	pop	r15
    1424:	ef 90       	pop	r14
    1426:	df 90       	pop	r13
    1428:	cf 90       	pop	r12
    142a:	bf 90       	pop	r11
    142c:	af 90       	pop	r10
    142e:	9f 90       	pop	r9
    1430:	8f 90       	pop	r8
    1432:	08 95       	ret

00001434 <Send_can_heartbeat>:


/*** Send data on canbus heartbeat */
void Send_can_heartbeat(void)
{
	send_data_to_pi();
    1434:	0e 94 ac 09 	call	0x1358	; 0x1358 <send_data_to_pi>
	send_data_to_freq();
    1438:	0e 94 dd 09 	call	0x13ba	; 0x13ba <send_data_to_freq>
    143c:	08 95       	ret

0000143e <send_data_on_canbus>:
}
/**
Sending the CAN Buss messasge to MCP2515 with a delay
*/
void send_data_on_canbus()
{
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	64 97       	sbiw	r28, 0x14	; 20
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	de bf       	out	0x3e, r29	; 62

	//printf("send_data\n");
	can_message_t send;
	send = can_queue_Front();
    144c:	ce 01       	movw	r24, r28
    144e:	0b 96       	adiw	r24, 0x0b	; 11
    1450:	0e 94 b1 08 	call	0x1162	; 0x1162 <can_queue_Front>
    1454:	8a e0       	ldi	r24, 0x0A	; 10
    1456:	fe 01       	movw	r30, r28
    1458:	3b 96       	adiw	r30, 0x0b	; 11
    145a:	de 01       	movw	r26, r28
    145c:	11 96       	adiw	r26, 0x01	; 1
    145e:	01 90       	ld	r0, Z+
    1460:	0d 92       	st	X+, r0
    1462:	8a 95       	dec	r24
    1464:	e1 f7       	brne	.-8      	; 0x145e <send_data_on_canbus+0x20>
	//printf("%i\n",send.data[0]);
	CAN_message_send(&send);
    1466:	ce 01       	movw	r24, r28
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	0e 94 d1 06 	call	0xda2	; 0xda2 <CAN_message_send>
	can_queue_Dequeue();
    146e:	0e 94 91 08 	call	0x1122	; 0x1122 <can_queue_Dequeue>
    1472:	8f e3       	ldi	r24, 0x3F	; 63
    1474:	9c e9       	ldi	r25, 0x9C	; 156
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <send_data_on_canbus+0x38>
    147a:	00 c0       	rjmp	.+0      	; 0x147c <send_data_on_canbus+0x3e>
    147c:	00 00       	nop
	

	
	

}
    147e:	64 96       	adiw	r28, 0x14	; 20
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	08 95       	ret

0000148a <Send_can_Task>:
/*** Send data on canbus task */
void Send_can_Task(void)
{
	
//	printf("Send can \n");
	if (can_queue_is_empty() ==0)
    148a:	0e 94 c2 08 	call	0x1184	; 0x1184 <can_queue_is_empty>
    148e:	89 2b       	or	r24, r25
    1490:	39 f4       	brne	.+14     	; 0x14a0 <Send_can_Task+0x16>
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <Send_can_Task+0xe>
	{
		
		while(can_queue_is_empty() ==0)
		{
			
			send_data_on_canbus();
    1494:	0e 94 1f 0a 	call	0x143e	; 0x143e <send_data_on_canbus>
	
//	printf("Send can \n");
	if (can_queue_is_empty() ==0)
	{
		
		while(can_queue_is_empty() ==0)
    1498:	0e 94 c2 08 	call	0x1184	; 0x1184 <can_queue_is_empty>
    149c:	89 2b       	or	r24, r25
    149e:	d1 f3       	breq	.-12     	; 0x1494 <Send_can_Task+0xa>
		{
			
			send_data_on_canbus();
		}
	}
	if (can_queue_is_empty() ==1)
    14a0:	0e 94 c2 08 	call	0x1184	; 0x1184 <can_queue_is_empty>
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	31 f4       	brne	.+12     	; 0x14b4 <Send_can_Task+0x2a>
	{
		CAN_data_receive(Rxmsg);
    14a8:	80 91 66 27 	lds	r24, 0x2766
    14ac:	90 91 67 27 	lds	r25, 0x2767
    14b0:	0e 94 f5 06 	call	0xdea	; 0xdea <CAN_data_receive>
    14b4:	08 95       	ret

000014b6 <read_system_Task>:
/*read usb host */
void read_system_Task()
{
	
	
	main_usb();
    14b6:	0e 94 bb 31 	call	0x6376	; 0x6376 <main_usb>
	// readcan
	Send_can_Task();
    14ba:	0e 94 45 0a 	call	0x148a	; 0x148a <Send_can_Task>
	if (key_pressed == '1')
    14be:	80 91 02 27 	lds	r24, 0x2702
    14c2:	81 33       	cpi	r24, 0x31	; 49
    14c4:	21 f4       	brne	.+8      	; 0x14ce <read_system_Task+0x18>
	{
		beep(40);
    14c6:	88 e2       	ldi	r24, 0x28	; 40
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 f7 08 	call	0x11ee	; 0x11ee <beep>
    14ce:	08 95       	ret

000014d0 <trasmit_slide>:
	

}

void trasmit_slide()
{
    14d0:	2f 92       	push	r2
    14d2:	3f 92       	push	r3
    14d4:	4f 92       	push	r4
    14d6:	5f 92       	push	r5
    14d8:	6f 92       	push	r6
    14da:	7f 92       	push	r7
    14dc:	8f 92       	push	r8
    14de:	9f 92       	push	r9
    14e0:	af 92       	push	r10
    14e2:	bf 92       	push	r11
    14e4:	cf 92       	push	r12
    14e6:	df 92       	push	r13
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	64 97       	sbiw	r28, 0x14	; 20
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	de bf       	out	0x3e, r29	; 62
		u8g_FirstPage(&u8g);
    14fe:	83 e0       	ldi	r24, 0x03	; 3
    1500:	97 e2       	ldi	r25, 0x27	; 39
    1502:	0e 94 80 2c 	call	0x5900	; 0x5900 <u8g_FirstPage>
		//float procennt_fwd =200/amplifier.power_max;
		double procennt_fwd =(100 * amplifier.power_fwd) / amplifier.power_max;
    1506:	c0 90 76 27 	lds	r12, 0x2776
    150a:	d0 90 77 27 	lds	r13, 0x2777
    150e:	20 91 72 27 	lds	r18, 0x2772
    1512:	30 91 73 27 	lds	r19, 0x2773
    1516:	04 e6       	ldi	r16, 0x64	; 100
    1518:	02 9f       	mul	r16, r18
    151a:	c0 01       	movw	r24, r0
    151c:	03 9f       	mul	r16, r19
    151e:	90 0d       	add	r25, r0
    1520:	11 24       	eor	r1, r1
    1522:	b6 01       	movw	r22, r12
    1524:	0e 94 a1 3f 	call	0x7f42	; 0x7f42 <__divmodhi4>
    1528:	88 27       	eor	r24, r24
    152a:	77 fd       	sbrc	r23, 7
    152c:	80 95       	com	r24
    152e:	98 2f       	mov	r25, r24
    1530:	0e 94 45 3a 	call	0x748a	; 0x748a <__floatsisf>
		double procennt_rev =(100 * amplifier.power_rev) / amplifier.power_max;
		int fwd = 2+(procennt_fwd)*1.2;
    1534:	2a e9       	ldi	r18, 0x9A	; 154
    1536:	39 e9       	ldi	r19, 0x99	; 153
    1538:	49 e9       	ldi	r20, 0x99	; 153
    153a:	5f e3       	ldi	r21, 0x3F	; 63
    153c:	0e 94 32 3b 	call	0x7664	; 0x7664 <__mulsf3>
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	50 e4       	ldi	r21, 0x40	; 64
    1548:	0e 94 a7 39 	call	0x734e	; 0x734e <__addsf3>
    154c:	0e 94 12 3a 	call	0x7424	; 0x7424 <__fixsfsi>
    1550:	16 2f       	mov	r17, r22
void trasmit_slide()
{
		u8g_FirstPage(&u8g);
		//float procennt_fwd =200/amplifier.power_max;
		double procennt_fwd =(100 * amplifier.power_fwd) / amplifier.power_max;
		double procennt_rev =(100 * amplifier.power_rev) / amplifier.power_max;
    1552:	20 91 74 27 	lds	r18, 0x2774
    1556:	30 91 75 27 	lds	r19, 0x2775
    155a:	02 9f       	mul	r16, r18
    155c:	c0 01       	movw	r24, r0
    155e:	03 9f       	mul	r16, r19
    1560:	90 0d       	add	r25, r0
    1562:	11 24       	eor	r1, r1
    1564:	b6 01       	movw	r22, r12
    1566:	0e 94 a1 3f 	call	0x7f42	; 0x7f42 <__divmodhi4>
    156a:	88 27       	eor	r24, r24
    156c:	77 fd       	sbrc	r23, 7
    156e:	80 95       	com	r24
    1570:	98 2f       	mov	r25, r24
    1572:	0e 94 45 3a 	call	0x748a	; 0x748a <__floatsisf>
		int fwd = 2+(procennt_fwd)*1.2;
		int ref = 2+(procennt_rev*1.2);
    1576:	2a e9       	ldi	r18, 0x9A	; 154
    1578:	39 e9       	ldi	r19, 0x99	; 153
    157a:	49 e9       	ldi	r20, 0x99	; 153
    157c:	5f e3       	ldi	r21, 0x3F	; 63
    157e:	0e 94 32 3b 	call	0x7664	; 0x7664 <__mulsf3>
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	50 e4       	ldi	r21, 0x40	; 64
    158a:	0e 94 a7 39 	call	0x734e	; 0x734e <__addsf3>
    158e:	0e 94 12 3a 	call	0x7424	; 0x7424 <__fixsfsi>
    1592:	f6 2e       	mov	r15, r22
		{
			u8g_SetFont(&u8g, u8g_font_6x10);
			u8g_DrawRFrame(&u8g, 1, 1, 126, 15, 2);
			u8g_DrawStr(&u8g, 1, 17, "FWD Power:");
		
			sprintf(text,"%i W",amplifier.power_fwd);
    1594:	0f 2e       	mov	r0, r31
    1596:	f2 e7       	ldi	r31, 0x72	; 114
    1598:	4f 2e       	mov	r4, r31
    159a:	f7 e2       	ldi	r31, 0x27	; 39
    159c:	5f 2e       	mov	r5, r31
    159e:	f0 2d       	mov	r31, r0
    15a0:	0f 2e       	mov	r0, r31
    15a2:	f4 e0       	ldi	r31, 0x04	; 4
    15a4:	8f 2e       	mov	r8, r31
    15a6:	f1 e2       	ldi	r31, 0x21	; 33
    15a8:	9f 2e       	mov	r9, r31
    15aa:	f0 2d       	mov	r31, r0
    15ac:	ce 01       	movw	r24, r28
    15ae:	01 96       	adiw	r24, 0x01	; 1
    15b0:	6c 01       	movw	r12, r24
			u8g_DrawStr(&u8g, 67, 17, text);
			
			u8g_DrawRFrame(&u8g, 1, 28, 126, 15, 2);
			
			sprintf(text,"%i W",amplifier.power_rev);
    15b2:	0f 2e       	mov	r0, r31
    15b4:	f4 e7       	ldi	r31, 0x74	; 116
    15b6:	6f 2e       	mov	r6, r31
    15b8:	f7 e2       	ldi	r31, 0x27	; 39
    15ba:	7f 2e       	mov	r7, r31
    15bc:	f0 2d       	mov	r31, r0
			// bars fwd
			u8g_DrawBox(&u8g,3,3,fwd,11);
			//ref
			u8g_DrawBox(&u8g,3,30,ref,11);
			
			sprintf(text,"SWR : 1:%.03f ",swr);
    15be:	0f 2e       	mov	r0, r31
    15c0:	f4 e1       	ldi	r31, 0x14	; 20
    15c2:	2f 2e       	mov	r2, r31
    15c4:	f1 e2       	ldi	r31, 0x21	; 33
    15c6:	3f 2e       	mov	r3, r31
    15c8:	f0 2d       	mov	r31, r0
				sprintf(text, "%ldM", rs232radio.band);
				u8g_DrawStr(&u8g, 110, 54,text );

			}else
			{
				sprintf(text, "%ldcM", rs232radio.band);
    15ca:	0f 2e       	mov	r0, r31
    15cc:	fe e7       	ldi	r31, 0x7E	; 126
    15ce:	af 2e       	mov	r10, r31
    15d0:	f7 e2       	ldi	r31, 0x27	; 39
    15d2:	bf 2e       	mov	r11, r31
    15d4:	f0 2d       	mov	r31, r0
		float swr=0;
		char text[20];
	
		do
		{
			u8g_SetFont(&u8g, u8g_font_6x10);
    15d6:	62 e2       	ldi	r22, 0x22	; 34
    15d8:	73 e0       	ldi	r23, 0x03	; 3
    15da:	83 e0       	ldi	r24, 0x03	; 3
    15dc:	97 e2       	ldi	r25, 0x27	; 39
    15de:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <u8g_SetFont>
			u8g_DrawRFrame(&u8g, 1, 1, 126, 15, 2);
    15e2:	68 94       	set
    15e4:	ee 24       	eor	r14, r14
    15e6:	e1 f8       	bld	r14, 1
    15e8:	0f e0       	ldi	r16, 0x0F	; 15
    15ea:	2e e7       	ldi	r18, 0x7E	; 126
    15ec:	41 e0       	ldi	r20, 0x01	; 1
    15ee:	61 e0       	ldi	r22, 0x01	; 1
    15f0:	83 e0       	ldi	r24, 0x03	; 3
    15f2:	97 e2       	ldi	r25, 0x27	; 39
    15f4:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <u8g_DrawRFrame>
			u8g_DrawStr(&u8g, 1, 17, "FWD Power:");
    15f8:	29 ef       	ldi	r18, 0xF9	; 249
    15fa:	30 e2       	ldi	r19, 0x20	; 32
    15fc:	41 e1       	ldi	r20, 0x11	; 17
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	83 e0       	ldi	r24, 0x03	; 3
    1602:	97 e2       	ldi	r25, 0x27	; 39
    1604:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
		
			sprintf(text,"%i W",amplifier.power_fwd);
    1608:	d2 01       	movw	r26, r4
    160a:	11 96       	adiw	r26, 0x01	; 1
    160c:	8c 91       	ld	r24, X
    160e:	11 97       	sbiw	r26, 0x01	; 1
    1610:	8f 93       	push	r24
    1612:	8c 91       	ld	r24, X
    1614:	8f 93       	push	r24
    1616:	9f 92       	push	r9
    1618:	8f 92       	push	r8
    161a:	df 92       	push	r13
    161c:	cf 92       	push	r12
    161e:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
			u8g_DrawStr(&u8g, 67, 17, text);
    1622:	96 01       	movw	r18, r12
    1624:	41 e1       	ldi	r20, 0x11	; 17
    1626:	63 e4       	ldi	r22, 0x43	; 67
    1628:	83 e0       	ldi	r24, 0x03	; 3
    162a:	97 e2       	ldi	r25, 0x27	; 39
    162c:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
			
			u8g_DrawRFrame(&u8g, 1, 28, 126, 15, 2);
    1630:	2e e7       	ldi	r18, 0x7E	; 126
    1632:	4c e1       	ldi	r20, 0x1C	; 28
    1634:	61 e0       	ldi	r22, 0x01	; 1
    1636:	83 e0       	ldi	r24, 0x03	; 3
    1638:	97 e2       	ldi	r25, 0x27	; 39
    163a:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <u8g_DrawRFrame>
			
			sprintf(text,"%i W",amplifier.power_rev);
    163e:	f3 01       	movw	r30, r6
    1640:	81 81       	ldd	r24, Z+1	; 0x01
    1642:	8f 93       	push	r24
    1644:	80 81       	ld	r24, Z
    1646:	8f 93       	push	r24
    1648:	9f 92       	push	r9
    164a:	8f 92       	push	r8
    164c:	df 92       	push	r13
    164e:	cf 92       	push	r12
    1650:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
			u8g_DrawStr(&u8g, 1, 45, "REF Power:");
    1654:	29 e0       	ldi	r18, 0x09	; 9
    1656:	31 e2       	ldi	r19, 0x21	; 33
    1658:	4d e2       	ldi	r20, 0x2D	; 45
    165a:	61 e0       	ldi	r22, 0x01	; 1
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	97 e2       	ldi	r25, 0x27	; 39
    1660:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
			u8g_DrawStr(&u8g, 67,45 ,text);
    1664:	96 01       	movw	r18, r12
    1666:	4d e2       	ldi	r20, 0x2D	; 45
    1668:	63 e4       	ldi	r22, 0x43	; 67
    166a:	83 e0       	ldi	r24, 0x03	; 3
    166c:	97 e2       	ldi	r25, 0x27	; 39
    166e:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>

			// bars fwd
			u8g_DrawBox(&u8g,3,3,fwd,11);
    1672:	0b e0       	ldi	r16, 0x0B	; 11
    1674:	21 2f       	mov	r18, r17
    1676:	43 e0       	ldi	r20, 0x03	; 3
    1678:	63 e0       	ldi	r22, 0x03	; 3
    167a:	83 e0       	ldi	r24, 0x03	; 3
    167c:	97 e2       	ldi	r25, 0x27	; 39
    167e:	0e 94 cb 2e 	call	0x5d96	; 0x5d96 <u8g_DrawBox>
			//ref
			u8g_DrawBox(&u8g,3,30,ref,11);
    1682:	2f 2d       	mov	r18, r15
    1684:	4e e1       	ldi	r20, 0x1E	; 30
    1686:	63 e0       	ldi	r22, 0x03	; 3
    1688:	83 e0       	ldi	r24, 0x03	; 3
    168a:	97 e2       	ldi	r25, 0x27	; 39
    168c:	0e 94 cb 2e 	call	0x5d96	; 0x5d96 <u8g_DrawBox>
			
			sprintf(text,"SWR : 1:%.03f ",swr);
    1690:	1f 92       	push	r1
    1692:	1f 92       	push	r1
    1694:	1f 92       	push	r1
    1696:	1f 92       	push	r1
    1698:	3f 92       	push	r3
    169a:	2f 92       	push	r2
    169c:	df 92       	push	r13
    169e:	cf 92       	push	r12
    16a0:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
			u8g_DrawStr(&u8g,1,54 ,text);
    16a4:	96 01       	movw	r18, r12
    16a6:	46 e3       	ldi	r20, 0x36	; 54
    16a8:	61 e0       	ldi	r22, 0x01	; 1
    16aa:	83 e0       	ldi	r24, 0x03	; 3
    16ac:	97 e2       	ldi	r25, 0x27	; 39
    16ae:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
			
			if(rs232radio.meter == 1)
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	a2 e8       	ldi	r26, 0x82	; 130
    16b8:	b7 e2       	ldi	r27, 0x27	; 39
    16ba:	8d 91       	ld	r24, X+
    16bc:	9c 91       	ld	r25, X
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	d9 f4       	brne	.+54     	; 0x16f8 <trasmit_slide+0x228>
			{
				sprintf(text, "%ldM", rs232radio.band);
    16c2:	f5 01       	movw	r30, r10
    16c4:	83 81       	ldd	r24, Z+3	; 0x03
    16c6:	8f 93       	push	r24
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	8f 93       	push	r24
    16cc:	81 81       	ldd	r24, Z+1	; 0x01
    16ce:	8f 93       	push	r24
    16d0:	80 81       	ld	r24, Z
    16d2:	8f 93       	push	r24
    16d4:	a3 e2       	ldi	r26, 0x23	; 35
    16d6:	b1 e2       	ldi	r27, 0x21	; 33
    16d8:	bf 93       	push	r27
    16da:	af 93       	push	r26
    16dc:	df 92       	push	r13
    16de:	cf 92       	push	r12
    16e0:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
				u8g_DrawStr(&u8g, 110, 54,text );
    16e4:	96 01       	movw	r18, r12
    16e6:	46 e3       	ldi	r20, 0x36	; 54
    16e8:	6e e6       	ldi	r22, 0x6E	; 110
    16ea:	83 e0       	ldi	r24, 0x03	; 3
    16ec:	97 e2       	ldi	r25, 0x27	; 39
    16ee:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	20 c0       	rjmp	.+64     	; 0x1738 <trasmit_slide+0x268>

			}else
			{
				sprintf(text, "%ldcM", rs232radio.band);
    16f8:	d5 01       	movw	r26, r10
    16fa:	13 96       	adiw	r26, 0x03	; 3
    16fc:	8c 91       	ld	r24, X
    16fe:	13 97       	sbiw	r26, 0x03	; 3
    1700:	8f 93       	push	r24
    1702:	12 96       	adiw	r26, 0x02	; 2
    1704:	8c 91       	ld	r24, X
    1706:	12 97       	sbiw	r26, 0x02	; 2
    1708:	8f 93       	push	r24
    170a:	11 96       	adiw	r26, 0x01	; 1
    170c:	8c 91       	ld	r24, X
    170e:	11 97       	sbiw	r26, 0x01	; 1
    1710:	8f 93       	push	r24
    1712:	8c 91       	ld	r24, X
    1714:	8f 93       	push	r24
    1716:	a8 e2       	ldi	r26, 0x28	; 40
    1718:	b1 e2       	ldi	r27, 0x21	; 33
    171a:	bf 93       	push	r27
    171c:	af 93       	push	r26
    171e:	df 92       	push	r13
    1720:	cf 92       	push	r12
    1722:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
				u8g_DrawStr(&u8g, 110, 54,text );
    1726:	96 01       	movw	r18, r12
    1728:	46 e3       	ldi	r20, 0x36	; 54
    172a:	6e e6       	ldi	r22, 0x6E	; 110
    172c:	83 e0       	ldi	r24, 0x03	; 3
    172e:	97 e2       	ldi	r25, 0x27	; 39
    1730:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	de bf       	out	0x3e, r29	; 62
			}
			
					
		} while ( u8g_NextPage(&u8g) );
    1738:	83 e0       	ldi	r24, 0x03	; 3
    173a:	97 e2       	ldi	r25, 0x27	; 39
    173c:	0e 94 86 2c 	call	0x590c	; 0x590c <u8g_NextPage>
    1740:	81 11       	cpse	r24, r1
    1742:	49 cf       	rjmp	.-366    	; 0x15d6 <trasmit_slide+0x106>
	
		
}
    1744:	64 96       	adiw	r28, 0x14	; 20
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	ff 90       	pop	r15
    1754:	ef 90       	pop	r14
    1756:	df 90       	pop	r13
    1758:	cf 90       	pop	r12
    175a:	bf 90       	pop	r11
    175c:	af 90       	pop	r10
    175e:	9f 90       	pop	r9
    1760:	8f 90       	pop	r8
    1762:	7f 90       	pop	r7
    1764:	6f 90       	pop	r6
    1766:	5f 90       	pop	r5
    1768:	4f 90       	pop	r4
    176a:	3f 90       	pop	r3
    176c:	2f 90       	pop	r2
    176e:	08 95       	ret

00001770 <screen_int>:


void screen_int()
{
    1770:	ef 92       	push	r14
    1772:	0f 93       	push	r16

	u8g_FirstPage(&u8g);
    1774:	83 e0       	ldi	r24, 0x03	; 3
    1776:	97 e2       	ldi	r25, 0x27	; 39
    1778:	0e 94 80 2c 	call	0x5900	; 0x5900 <u8g_FirstPage>
    do
    {
	  u8g_SetFont(&u8g, u8g_font_6x10);
    177c:	62 e2       	ldi	r22, 0x22	; 34
    177e:	73 e0       	ldi	r23, 0x03	; 3
    1780:	83 e0       	ldi	r24, 0x03	; 3
    1782:	97 e2       	ldi	r25, 0x27	; 39
    1784:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <u8g_SetFont>
	  u8g_DrawRFrame(&u8g, 1, 1, 126, 62, 2);
    1788:	68 94       	set
    178a:	ee 24       	eor	r14, r14
    178c:	e1 f8       	bld	r14, 1
    178e:	0e e3       	ldi	r16, 0x3E	; 62
    1790:	2e e7       	ldi	r18, 0x7E	; 126
    1792:	41 e0       	ldi	r20, 0x01	; 1
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	83 e0       	ldi	r24, 0x03	; 3
    1798:	97 e2       	ldi	r25, 0x27	; 39
    179a:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <u8g_DrawRFrame>
      u8g_DrawStr(&u8g, 5, 10, "ANTENNA CONTROLLER");
    179e:	2e e2       	ldi	r18, 0x2E	; 46
    17a0:	31 e2       	ldi	r19, 0x21	; 33
    17a2:	4a e0       	ldi	r20, 0x0A	; 10
    17a4:	65 e0       	ldi	r22, 0x05	; 5
    17a6:	83 e0       	ldi	r24, 0x03	; 3
    17a8:	97 e2       	ldi	r25, 0x27	; 39
    17aa:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
	  u8g_DrawStr(&u8g, 5, 20, "BY SA2BLV");
    17ae:	21 e4       	ldi	r18, 0x41	; 65
    17b0:	31 e2       	ldi	r19, 0x21	; 33
    17b2:	44 e1       	ldi	r20, 0x14	; 20
    17b4:	65 e0       	ldi	r22, 0x05	; 5
    17b6:	83 e0       	ldi	r24, 0x03	; 3
    17b8:	97 e2       	ldi	r25, 0x27	; 39
    17ba:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
	  
	  u8g_DrawStr(&u8g, 5, 50, "Loading ....");
    17be:	2b e4       	ldi	r18, 0x4B	; 75
    17c0:	31 e2       	ldi	r19, 0x21	; 33
    17c2:	42 e3       	ldi	r20, 0x32	; 50
    17c4:	65 e0       	ldi	r22, 0x05	; 5
    17c6:	83 e0       	ldi	r24, 0x03	; 3
    17c8:	97 e2       	ldi	r25, 0x27	; 39
    17ca:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
 
    } while ( u8g_NextPage(&u8g) );
    17ce:	83 e0       	ldi	r24, 0x03	; 3
    17d0:	97 e2       	ldi	r25, 0x27	; 39
    17d2:	0e 94 86 2c 	call	0x590c	; 0x590c <u8g_NextPage>
    17d6:	81 11       	cpse	r24, r1
    17d8:	d1 cf       	rjmp	.-94     	; 0x177c <screen_int+0xc>
// 	u8g_Delay(100);
 	
}
    17da:	0f 91       	pop	r16
    17dc:	ef 90       	pop	r14
    17de:	08 95       	ret

000017e0 <hr_x_coordinate_finder>:
	radian=(degree*(0.0174));
	return radian;
}

int hr_x_coordinate_finder(uint16_t degree,uint16_t radius)
{
    17e0:	cf 92       	push	r12
    17e2:	df 92       	push	r13
    17e4:	ef 92       	push	r14
    17e6:	ff 92       	push	r15
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	eb 01       	movw	r28, r22
	int xcoordinate,intermediate;
	double radian;
	radian= degree_to_radian(degree+90);
    17ee:	86 5a       	subi	r24, 0xA6	; 166
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	bc 01       	movw	r22, r24
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	0e 94 43 3a 	call	0x7486	; 0x7486 <__floatunsisf>


double degree_to_radian(double degree)
{
	double radian;
	radian=(degree*(0.0174));
    17fc:	22 e7       	ldi	r18, 0x72	; 114
    17fe:	3a e8       	ldi	r19, 0x8A	; 138
    1800:	4e e8       	ldi	r20, 0x8E	; 142
    1802:	5c e3       	ldi	r21, 0x3C	; 60
    1804:	0e 94 32 3b 	call	0x7664	; 0x7664 <__mulsf3>
int hr_x_coordinate_finder(uint16_t degree,uint16_t radius)
{
	int xcoordinate,intermediate;
	double radian;
	radian= degree_to_radian(degree+90);
	intermediate= radius*(cos(radian));
    1808:	0e 94 0f 3a 	call	0x741e	; 0x741e <cos>
    180c:	6b 01       	movw	r12, r22
    180e:	7c 01       	movw	r14, r24
    1810:	be 01       	movw	r22, r28
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 43 3a 	call	0x7486	; 0x7486 <__floatunsisf>
    181a:	a7 01       	movw	r20, r14
    181c:	96 01       	movw	r18, r12
    181e:	0e 94 32 3b 	call	0x7664	; 0x7664 <__mulsf3>
    1822:	0e 94 12 3a 	call	0x7424	; 0x7424 <__fixsfsi>
	xcoordinate= (32-intermediate);
	return xcoordinate;
}
    1826:	20 e2       	ldi	r18, 0x20	; 32
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	c9 01       	movw	r24, r18
    182c:	86 1b       	sub	r24, r22
    182e:	97 0b       	sbc	r25, r23
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	df 90       	pop	r13
    183a:	cf 90       	pop	r12
    183c:	08 95       	ret

0000183e <hr_y_coordinate_finder>:
double status_degree;
int hr_y_coordinate_finder(uint16_t degree,uint16_t radius)
{
    183e:	cf 92       	push	r12
    1840:	df 92       	push	r13
    1842:	ef 92       	push	r14
    1844:	ff 92       	push	r15
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	eb 01       	movw	r28, r22
	int ycoordinate;
	int intermediate;
	double radian;
	radian= degree_to_radian(degree+92);
    184c:	84 5a       	subi	r24, 0xA4	; 164
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
    1850:	bc 01       	movw	r22, r24
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0e 94 43 3a 	call	0x7486	; 0x7486 <__floatunsisf>


double degree_to_radian(double degree)
{
	double radian;
	radian=(degree*(0.0174));
    185a:	22 e7       	ldi	r18, 0x72	; 114
    185c:	3a e8       	ldi	r19, 0x8A	; 138
    185e:	4e e8       	ldi	r20, 0x8E	; 142
    1860:	5c e3       	ldi	r21, 0x3C	; 60
    1862:	0e 94 32 3b 	call	0x7664	; 0x7664 <__mulsf3>
{
	int ycoordinate;
	int intermediate;
	double radian;
	radian= degree_to_radian(degree+92);
	intermediate= radius*(sin(radian));
    1866:	0e 94 95 3b 	call	0x772a	; 0x772a <sin>
    186a:	6b 01       	movw	r12, r22
    186c:	7c 01       	movw	r14, r24
    186e:	be 01       	movw	r22, r28
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	0e 94 43 3a 	call	0x7486	; 0x7486 <__floatunsisf>
    1878:	a7 01       	movw	r20, r14
    187a:	96 01       	movw	r18, r12
    187c:	0e 94 32 3b 	call	0x7664	; 0x7664 <__mulsf3>
    1880:	0e 94 12 3a 	call	0x7424	; 0x7424 <__fixsfsi>
	ycoordinate= (32-intermediate);
	return ycoordinate;
}
    1884:	20 e2       	ldi	r18, 0x20	; 32
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	c9 01       	movw	r24, r18
    188a:	86 1b       	sub	r24, r22
    188c:	97 0b       	sbc	r25, r23
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	ff 90       	pop	r15
    1894:	ef 90       	pop	r14
    1896:	df 90       	pop	r13
    1898:	cf 90       	pop	r12
    189a:	08 95       	ret

0000189c <draw_angel_circle>:


void draw_angel_circle(int angel, int type )
{
    189c:	cf 92       	push	r12
    189e:	df 92       	push	r13
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <draw_angel_circle+0x12>
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <draw_angel_circle+0x14>
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	d8 2e       	mov	r13, r24
    18b6:	19 2f       	mov	r17, r25
    18b8:	7b 01       	movw	r14, r22
	int size_a =26;
	if (type == 1)
    18ba:	61 30       	cpi	r22, 0x01	; 1
    18bc:	71 05       	cpc	r23, r1
    18be:	d1 f1       	breq	.+116    	; 0x1934 <draw_angel_circle+0x98>
	{
		size_a =12;
	}
	
	u8g_DrawCircle(&u8g, 30, 30, size_a+1,U8G_DRAW_ALL);
    18c0:	0f e0       	ldi	r16, 0x0F	; 15
    18c2:	2b e1       	ldi	r18, 0x1B	; 27
    18c4:	4e e1       	ldi	r20, 0x1E	; 30
    18c6:	6e e1       	ldi	r22, 0x1E	; 30
    18c8:	83 e0       	ldi	r24, 0x03	; 3
    18ca:	97 e2       	ldi	r25, 0x27	; 39
    18cc:	0e 94 88 25 	call	0x4b10	; 0x4b10 <u8g_DrawCircle>
	// rotorns peklinje
	int x_rad= hr_x_coordinate_finder(angel,(size_a-2));
    18d0:	68 e1       	ldi	r22, 0x18	; 24
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	8d 2d       	mov	r24, r13
    18d6:	91 2f       	mov	r25, r17
    18d8:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <hr_x_coordinate_finder>
    18dc:	c8 2e       	mov	r12, r24
	int y_rad= hr_y_coordinate_finder(angel,(size_a-2));
    18de:	68 e1       	ldi	r22, 0x18	; 24
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	8d 2d       	mov	r24, r13
    18e4:	91 2f       	mov	r25, r17
    18e6:	0e 94 1f 0c 	call	0x183e	; 0x183e <hr_y_coordinate_finder>
	u8g_DrawLine(&u8g, x_rad, y_rad,  32,  32);
    18ea:	00 e2       	ldi	r16, 0x20	; 32
    18ec:	20 e2       	ldi	r18, 0x20	; 32
    18ee:	48 2f       	mov	r20, r24
    18f0:	6c 2d       	mov	r22, r12
    18f2:	83 e0       	ldi	r24, 0x03	; 3
    18f4:	97 e2       	ldi	r25, 0x27	; 39
    18f6:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <u8g_DrawLine>
	// text radie
	
	// target / heading
	if (type == 0)
    18fa:	ef 28       	or	r14, r15
    18fc:	c1 f5       	brne	.+112    	; 0x196e <draw_angel_circle+0xd2>
	{
	char str[4];
	sprintf(str, "%i°",angel);
    18fe:	1f 93       	push	r17
    1900:	df 92       	push	r13
    1902:	88 e5       	ldi	r24, 0x58	; 88
    1904:	91 e2       	ldi	r25, 0x21	; 33
    1906:	9f 93       	push	r25
    1908:	8f 93       	push	r24
    190a:	8e 01       	movw	r16, r28
    190c:	0f 5f       	subi	r16, 0xFF	; 255
    190e:	1f 4f       	sbci	r17, 0xFF	; 255
    1910:	1f 93       	push	r17
    1912:	0f 93       	push	r16
    1914:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>

	u8g_DrawStr(&u8g, 1, 1, str);
    1918:	98 01       	movw	r18, r16
    191a:	41 e0       	ldi	r20, 0x01	; 1
    191c:	61 e0       	ldi	r22, 0x01	; 1
    191e:	83 e0       	ldi	r24, 0x03	; 3
    1920:	97 e2       	ldi	r25, 0x27	; 39
    1922:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	1d c0       	rjmp	.+58     	; 0x196e <draw_angel_circle+0xd2>
	if (type == 1)
	{
		size_a =12;
	}
	
	u8g_DrawCircle(&u8g, 30, 30, size_a+1,U8G_DRAW_ALL);
    1934:	0f e0       	ldi	r16, 0x0F	; 15
    1936:	2d e0       	ldi	r18, 0x0D	; 13
    1938:	4e e1       	ldi	r20, 0x1E	; 30
    193a:	6e e1       	ldi	r22, 0x1E	; 30
    193c:	83 e0       	ldi	r24, 0x03	; 3
    193e:	97 e2       	ldi	r25, 0x27	; 39
    1940:	0e 94 88 25 	call	0x4b10	; 0x4b10 <u8g_DrawCircle>
	// rotorns peklinje
	int x_rad= hr_x_coordinate_finder(angel,(size_a-2));
    1944:	6a e0       	ldi	r22, 0x0A	; 10
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	8d 2d       	mov	r24, r13
    194a:	91 2f       	mov	r25, r17
    194c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <hr_x_coordinate_finder>
    1950:	f8 2e       	mov	r15, r24
	int y_rad= hr_y_coordinate_finder(angel,(size_a-2));
    1952:	6a e0       	ldi	r22, 0x0A	; 10
    1954:	70 e0       	ldi	r23, 0x00	; 0
    1956:	8d 2d       	mov	r24, r13
    1958:	91 2f       	mov	r25, r17
    195a:	0e 94 1f 0c 	call	0x183e	; 0x183e <hr_y_coordinate_finder>
	u8g_DrawLine(&u8g, x_rad, y_rad,  32,  32);
    195e:	00 e2       	ldi	r16, 0x20	; 32
    1960:	20 e2       	ldi	r18, 0x20	; 32
    1962:	48 2f       	mov	r20, r24
    1964:	6f 2d       	mov	r22, r15
    1966:	83 e0       	ldi	r24, 0x03	; 3
    1968:	97 e2       	ldi	r25, 0x27	; 39
    196a:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <u8g_DrawLine>

	u8g_DrawStr(&u8g, 1, 1, str);
	}
	
	
}
    196e:	24 96       	adiw	r28, 0x04	; 4
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	1f 91       	pop	r17
    197a:	0f 91       	pop	r16
    197c:	ff 90       	pop	r15
    197e:	ef 90       	pop	r14
    1980:	df 90       	pop	r13
    1982:	cf 90       	pop	r12
    1984:	08 95       	ret

00001986 <setUpSerial_main>:


void setUpSerial_main()
{
	 // uart port E
	PORTE_OUTSET = PIN3_bm; //Let's make PC7 as TX
    1986:	98 e0       	ldi	r25, 0x08	; 8
    1988:	90 93 85 06 	sts	0x0685, r25
	PORTE_DIRSET = PIN3_bm; //TX pin as output
    198c:	90 93 81 06 	sts	0x0681, r25
     
	PORTE_OUTCLR = PIN2_bm;
    1990:	84 e0       	ldi	r24, 0x04	; 4
    1992:	80 93 86 06 	sts	0x0686, r24
	PORTE_DIRCLR = PIN2_bm; //PC6 as RX
    1996:	80 93 82 06 	sts	0x0682, r24
 
    // Baud rate selection
    // BSEL = (32000000 / (2^0 * 16*9600) -1 = 207.333 -> BSCALE = 0
    // FBAUD = ( (32000000)/(2^0*16(207+1)) = 9615.384 -> it's alright
     
    USARTE0_BAUDCTRLB = 0; //Just to be sure that BSCALE is 0
    199a:	10 92 a7 0a 	sts	0x0AA7, r1
    USARTE0_BAUDCTRLA = 0xCF; // 207
    199e:	4f ec       	ldi	r20, 0xCF	; 207
    19a0:	40 93 a6 0a 	sts	0x0AA6, r20
     
     
    
	//8 data bits, no parity and 1 stop bit 
    USARTE0_CTRLC = USART_CHSIZE_8BIT_gc;
    19a4:	33 e0       	ldi	r19, 0x03	; 3
    19a6:	30 93 a5 0a 	sts	0x0AA5, r19
     
    //Enable receive and transmit
    USARTE0_CTRLB = USART_TXEN_bm | USART_RXEN_bm; // And enable high speed mode
    19aa:	28 e1       	ldi	r18, 0x18	; 24
    19ac:	20 93 a4 0a 	sts	0x0AA4, r18
	USARTE0_CTRLA|= USART_RXCINTLVL_LO_gc;
    19b0:	e3 ea       	ldi	r30, 0xA3	; 163
    19b2:	fa e0       	ldi	r31, 0x0A	; 10
    19b4:	50 81       	ld	r21, Z
    19b6:	50 61       	ori	r21, 0x10	; 16
    19b8:	50 83       	st	Z, r21
	
	// usart port F0
	
	PORTF_OUTSET = PIN3_bm; //Let's make PC7 as TX
    19ba:	90 93 a5 06 	sts	0x06A5, r25
	PORTF_DIRSET = PIN3_bm; //TX pin as output
    19be:	90 93 a1 06 	sts	0x06A1, r25
     
	PORTF_OUTCLR = PIN2_bm;
    19c2:	80 93 a6 06 	sts	0x06A6, r24
	PORTF_DIRCLR = PIN2_bm; //PC6 as RX
    19c6:	80 93 a2 06 	sts	0x06A2, r24
 
    // Baud rate selection
    // BSEL = (32000000 / (2^0 * 16*9600) -1 = 207.333 -> BSCALE = 0
    // FBAUD = ( (32000000)/(2^0*16(207+1)) = 9615.384 -> it's alright
     
    USARTF0_BAUDCTRLB = 0; //Just to be sure that BSCALE is 0
    19ca:	10 92 a7 0b 	sts	0x0BA7, r1
    USARTF0_BAUDCTRLA = 0xCF; // 207
    19ce:	40 93 a6 0b 	sts	0x0BA6, r20
     
     
    
	//8 data bits, no parity and 1 stop bit 
    USARTF0_CTRLC = USART_CHSIZE_8BIT_gc;
    19d2:	30 93 a5 0b 	sts	0x0BA5, r19
     
    //Enable receive and transmit
    USARTF0_CTRLB = USART_TXEN_bm | USART_RXEN_bm; // And enable high speed mode
    19d6:	20 93 a4 0b 	sts	0x0BA4, r18
	USARTF0_CTRLA|= USART_RXCINTLVL_LO_gc;
    19da:	e3 ea       	ldi	r30, 0xA3	; 163
    19dc:	fb e0       	ldi	r31, 0x0B	; 11
    19de:	80 81       	ld	r24, Z
    19e0:	80 61       	ori	r24, 0x10	; 16
    19e2:	80 83       	st	Z, r24
    19e4:	08 95       	ret

000019e6 <setUpSerial_rpt>:

void setUpSerial_rpt()
{

     // uart port c
	PORTC_OUTSET = PIN3_bm; //Let's make PC3 as TX
    19e6:	98 e0       	ldi	r25, 0x08	; 8
    19e8:	90 93 45 06 	sts	0x0645, r25
	PORTC_DIRSET = PIN3_bm; //TX pin as output
    19ec:	90 93 41 06 	sts	0x0641, r25
	PORTC_OUTCLR = PIN2_bm;
    19f0:	84 e0       	ldi	r24, 0x04	; 4
    19f2:	80 93 46 06 	sts	0x0646, r24
	PORTC_DIRCLR = PIN2_bm; //PC2 as RX	
    19f6:	80 93 42 06 	sts	0x0642, r24
	bool twoStopBits =1;
    // Baud rate selection
    // BSEL = (32000000 / (2^0 * 16*9600) -1 = 207.333 -> BSCALE = 0
    // FBAUD = ( (32000000)/(2^0*16(207+1)) = 9615.384 -> it's alright
     
    USARTC0_BAUDCTRLB = rs232radio.rs232_prescale; //Just to be sure that BSCALE is 0
    19fa:	40 91 7a 27 	lds	r20, 0x277A
    19fe:	40 93 a7 08 	sts	0x08A7, r20
    USARTC0_BAUDCTRLA = rs232radio.radio_rs232; // 207
    1a02:	e8 e7       	ldi	r30, 0x78	; 120
    1a04:	f7 e2       	ldi	r31, 0x27	; 39
    1a06:	20 81       	ld	r18, Z
    1a08:	20 93 a6 08 	sts	0x08A6, r18
     
    //8 data bits, no parity and 2 stop bit 
    USARTC0_CTRLC = USART_CHSIZE_8BIT_gc |(twoStopBits ? USART_SBMODE_bm : 0);
    1a0c:	3b e0       	ldi	r19, 0x0B	; 11
    1a0e:	30 93 a5 08 	sts	0x08A5, r19
     
    //Enable receive and transmit
    USARTC0_CTRLB = USART_TXEN_bm | USART_RXEN_bm; // And enable high speed mode
    1a12:	28 e1       	ldi	r18, 0x18	; 24
    1a14:	20 93 a4 08 	sts	0x08A4, r18
	USARTC0_CTRLA|= USART_RXCINTLVL_HI_gc;
    1a18:	a3 ea       	ldi	r26, 0xA3	; 163
    1a1a:	b8 e0       	ldi	r27, 0x08	; 8
    1a1c:	5c 91       	ld	r21, X
    1a1e:	50 63       	ori	r21, 0x30	; 48
    1a20:	5c 93       	st	X, r21
	
	// port d init
	PORTD_OUTSET = PIN3_bm; //Let's make PC7 as TX
    1a22:	90 93 65 06 	sts	0x0665, r25
	PORTD_DIRSET = PIN3_bm; //TX pin as output
    1a26:	90 93 61 06 	sts	0x0661, r25
     
	PORTD_OUTCLR = PIN2_bm;
    1a2a:	80 93 66 06 	sts	0x0666, r24
	PORTD_DIRCLR = PIN2_bm; //PC6 as RX
    1a2e:	80 93 62 06 	sts	0x0662, r24

    // Baud rate selection
    // BSEL = (32000000 / (2^0 * 16*9600) -1 = 207.333 -> BSCALE = 0
    // FBAUD = ( (32000000)/(2^0*16(207+1)) = 9615.384 -> it's alright
     
    USARTD0_BAUDCTRLB = rs232radio.rs232_prescale; //Just to be sure that BSCALE is 0
    1a32:	40 93 a7 09 	sts	0x09A7, r20
    USARTD0_BAUDCTRLA = rs232radio.radio_rs232; // 207
    1a36:	80 81       	ld	r24, Z
    1a38:	80 93 a6 09 	sts	0x09A6, r24
     
     
    
	//8 data bits, no parity and 2 stop bit 
    USARTD0_CTRLC = USART_CHSIZE_8BIT_gc | (twoStopBits ? USART_SBMODE_bm : 0);
    1a3c:	30 93 a5 09 	sts	0x09A5, r19
     
    //Enable receive and transmit
    USARTD0_CTRLB = USART_TXEN_bm | USART_RXEN_bm; // And enable high speed mode
    1a40:	20 93 a4 09 	sts	0x09A4, r18
	USARTD0_CTRLA|= USART_RXCINTLVL_HI_gc;
    1a44:	e3 ea       	ldi	r30, 0xA3	; 163
    1a46:	f9 e0       	ldi	r31, 0x09	; 9
    1a48:	80 81       	ld	r24, Z
    1a4a:	80 63       	ori	r24, 0x30	; 48
    1a4c:	80 83       	st	Z, r24
    1a4e:	08 95       	ret

00001a50 <setup>:
// New can message
int new_can_message =0;


void setup()
{
    1a50:	7f 92       	push	r7
    1a52:	8f 92       	push	r8
    1a54:	9f 92       	push	r9
    1a56:	af 92       	push	r10
    1a58:	bf 92       	push	r11
    1a5a:	cf 92       	push	r12
    1a5c:	df 92       	push	r13
    1a5e:	ef 92       	push	r14
    1a60:	ff 92       	push	r15
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29

	//toogle_alert();
	setClockTo32MHz();
    1a6a:	0e 94 92 09 	call	0x1324	; 0x1324 <setClockTo32MHz>
	// set direcotion of lcd
	PORTK.DIRSET =0xFF;
    1a6e:	8f ef       	ldi	r24, 0xFF	; 255
    1a70:	e0 e2       	ldi	r30, 0x20	; 32
    1a72:	f7 e0       	ldi	r31, 0x07	; 7
    1a74:	81 83       	std	Z+1, r24	; 0x01
	PORTJ.DIRSET =0xFF;
    1a76:	e0 e0       	ldi	r30, 0x00	; 0
    1a78:	f7 e0       	ldi	r31, 0x07	; 7
    1a7a:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET =0xB0;
    1a7c:	80 eb       	ldi	r24, 0xB0	; 176
    1a7e:	e0 e8       	ldi	r30, 0x80	; 128
    1a80:	f6 e0       	ldi	r31, 0x06	; 6
    1a82:	81 83       	std	Z+1, r24	; 0x01
	// dir of inputs
	PORTH.DIRCLR    =    PIN2_bm;
    1a84:	c0 ee       	ldi	r28, 0xE0	; 224
    1a86:	d6 e0       	ldi	r29, 0x06	; 6
    1a88:	14 e0       	ldi	r17, 0x04	; 4
    1a8a:	1a 83       	std	Y+2, r17	; 0x02
    PORTH.PIN2CTRL  =    PORT_OPC_PULLUP_gc;
    1a8c:	88 e1       	ldi	r24, 0x18	; 24
    1a8e:	8a 8b       	std	Y+18, r24	; 0x12
	PORTH.DIRCLR    =    PIN3_bm;
    1a90:	98 e0       	ldi	r25, 0x08	; 8
    1a92:	9a 83       	std	Y+2, r25	; 0x02
    PORTH.PIN3CTRL  =    PORT_OPC_PULLUP_gc;
    1a94:	8b 8b       	std	Y+19, r24	; 0x13
	PORTH.DIRCLR    =    PIN4_bm;
    1a96:	90 e1       	ldi	r25, 0x10	; 16
    1a98:	9a 83       	std	Y+2, r25	; 0x02
	PORTH.PIN4CTRL  =    PORT_OPC_PULLUP_gc;
    1a9a:	8c 8b       	std	Y+20, r24	; 0x14
	PORTH.DIRCLR    =    PIN5_bm;
    1a9c:	20 e2       	ldi	r18, 0x20	; 32
    1a9e:	2a 83       	std	Y+2, r18	; 0x02
	PORTH.PIN5CTRL  =    PORT_OPC_PULLUP_gc;
    1aa0:	8d 8b       	std	Y+21, r24	; 0x15
	PORTH.DIRCLR    =    PIN4_bm;
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
	setup_buttons(); //*burrons config *//
    1aa4:	0e 94 d7 08 	call	0x11ae	; 0x11ae <setup_buttons>
	
	// port D setup interupt
	PORTD.DIRCLR    =    PIN1_bm;
    1aa8:	e0 e6       	ldi	r30, 0x60	; 96
    1aaa:	f6 e0       	ldi	r31, 0x06	; 6
    1aac:	82 e0       	ldi	r24, 0x02	; 2
    1aae:	82 83       	std	Z+2, r24	; 0x02
	
	// interupt rotary encoder
	PORTH.DIR = 0x00; // Port D als Eingang
    1ab0:	18 82       	st	Y, r1
    PORTH.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_RISING_gc;// PD0: Pull up, erkenne Rising Edge
    1ab2:	99 e1       	ldi	r25, 0x19	; 25
    1ab4:	98 8b       	std	Y+16, r25	; 0x10
	PORTH.PIN1CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_RISING_gc;// PD0: Pull up, erkenne Rising Edge
    1ab6:	99 8b       	std	Y+17, r25	; 0x11
	PORTH.PIN7CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_RISING_gc;// PD0: Pull up, erkenne Rising Edge
    1ab8:	9f 8b       	std	Y+23, r25	; 0x17

	PORTH.INT0MASK = PIN0_bm; // PD0 lÃ¶st Interrupt 0 aus. 
    1aba:	91 e0       	ldi	r25, 0x01	; 1
    1abc:	9a 87       	std	Y+10, r25	; 0x0a
	PORTH.INT1MASK = PIN1_bm;
    1abe:	8b 87       	std	Y+11, r24	; 0x0b
  
	PORTH_INTCTRL = PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc; // Port D Interrupt 0: Medium Level
    1ac0:	2a e0       	ldi	r18, 0x0A	; 10
    1ac2:	20 93 e9 06 	sts	0x06E9, r18
	
	
	//PORTH PTT INT
	PORTA.INT0MASK = PIN0_bm; // PD0 lÃ¶st Interrupt 0 aus. 
    1ac6:	a0 e0       	ldi	r26, 0x00	; 0
    1ac8:	b6 e0       	ldi	r27, 0x06	; 6
    1aca:	1a 96       	adiw	r26, 0x0a	; 10
    1acc:	9c 93       	st	X, r25
    1ace:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTA_INTCTRL = PORT_INT0LVL_MED_gc; // Port D Interrupt 0: Medium Level
    1ad0:	80 93 09 06 	sts	0x0609, r24
	PORTA.DIRSET = PIN2_bm;
    1ad4:	11 96       	adiw	r26, 0x01	; 1
    1ad6:	1c 93       	st	X, r17
	
	
	// Can pin interupt
	
	PORTD.OUTCLR = PIN1_bm;
    1ad8:	86 83       	std	Z+6, r24	; 0x06
	PORTD.PIN1CTRL = PORT_ISC_FALLING_gc | PORT_OPC_PULLUP_gc;// PD0: Pull up, erkenne Rising Edge
    1ada:	9a e1       	ldi	r25, 0x1A	; 26
    1adc:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.INT0MASK = PIN1_bm; // PD0 lÃ¶st Interrupt 0 aus. 
    1ade:	82 87       	std	Z+10, r24	; 0x0a
    PORTD_INTCTRL = PORT_INT0LVL_MED_gc; // Port D Interrupt 0: Medium Level
    1ae0:	80 93 69 06 	sts	0x0669, r24
	PORTD.INTFLAGS = 0x00;
    1ae4:	14 86       	std	Z+12, r1	; 0x0c
  
  
  //Enable Medium-Level-Interrupts 
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    1ae6:	87 e0       	ldi	r24, 0x07	; 7
    1ae8:	e0 ea       	ldi	r30, 0xA0	; 160
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	82 83       	std	Z+2, r24	; 0x02
  //Enable Interrupts 
	sei();
    1aee:	78 94       	sei
	// LCD REGISTER TOLKEN
	int DR = 2;
	int CR =3;
	// display deklaration

	u8g_Init8Bit( &u8g,&u8g_dev_ks0108_128x64 , u8g_Pin(DR,0), u8g_Pin(DR,1), u8g_Pin(DR,2), u8g_Pin(DR,3), PN(DR,4), PN(DR,5), PN(DR,6), PN(CR,6),PN(CR,5),PN(CR,0),PN(CR,1),PN(CR,4),PN(CR,3),PN(CR,2));
    1af0:	62 e0       	ldi	r22, 0x02	; 2
    1af2:	83 e0       	ldi	r24, 0x03	; 3
    1af4:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <u8g_Pin>
    1af8:	78 2e       	mov	r7, r24
    1afa:	63 e0       	ldi	r22, 0x03	; 3
    1afc:	83 e0       	ldi	r24, 0x03	; 3
    1afe:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <u8g_Pin>
    1b02:	98 2e       	mov	r9, r24
    1b04:	64 e0       	ldi	r22, 0x04	; 4
    1b06:	83 e0       	ldi	r24, 0x03	; 3
    1b08:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <u8g_Pin>
    1b0c:	b8 2e       	mov	r11, r24
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	83 e0       	ldi	r24, 0x03	; 3
    1b12:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <u8g_Pin>
    1b16:	d8 2e       	mov	r13, r24
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	83 e0       	ldi	r24, 0x03	; 3
    1b1c:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <u8g_Pin>
    1b20:	f8 2e       	mov	r15, r24
    1b22:	65 e0       	ldi	r22, 0x05	; 5
    1b24:	83 e0       	ldi	r24, 0x03	; 3
    1b26:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <u8g_Pin>
    1b2a:	18 2f       	mov	r17, r24
    1b2c:	66 e0       	ldi	r22, 0x06	; 6
    1b2e:	83 e0       	ldi	r24, 0x03	; 3
    1b30:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <u8g_Pin>
    1b34:	d8 2f       	mov	r29, r24
    1b36:	66 e0       	ldi	r22, 0x06	; 6
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <u8g_Pin>
    1b3e:	88 2e       	mov	r8, r24
    1b40:	65 e0       	ldi	r22, 0x05	; 5
    1b42:	82 e0       	ldi	r24, 0x02	; 2
    1b44:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <u8g_Pin>
    1b48:	a8 2e       	mov	r10, r24
    1b4a:	64 e0       	ldi	r22, 0x04	; 4
    1b4c:	82 e0       	ldi	r24, 0x02	; 2
    1b4e:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <u8g_Pin>
    1b52:	c8 2e       	mov	r12, r24
    1b54:	63 e0       	ldi	r22, 0x03	; 3
    1b56:	82 e0       	ldi	r24, 0x02	; 2
    1b58:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <u8g_Pin>
    1b5c:	e8 2e       	mov	r14, r24
    1b5e:	62 e0       	ldi	r22, 0x02	; 2
    1b60:	82 e0       	ldi	r24, 0x02	; 2
    1b62:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <u8g_Pin>
    1b66:	08 2f       	mov	r16, r24
    1b68:	61 e0       	ldi	r22, 0x01	; 1
    1b6a:	82 e0       	ldi	r24, 0x02	; 2
    1b6c:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <u8g_Pin>
    1b70:	c8 2f       	mov	r28, r24
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <u8g_Pin>
    1b7a:	7f 92       	push	r7
    1b7c:	9f 92       	push	r9
    1b7e:	bf 92       	push	r11
    1b80:	df 92       	push	r13
    1b82:	ff 92       	push	r15
    1b84:	1f 93       	push	r17
    1b86:	df 93       	push	r29
    1b88:	2c 2f       	mov	r18, r28
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	64 e1       	ldi	r22, 0x14	; 20
    1b8e:	70 e2       	ldi	r23, 0x20	; 32
    1b90:	83 e0       	ldi	r24, 0x03	; 3
    1b92:	97 e2       	ldi	r25, 0x27	; 39
    1b94:	0e 94 42 2c 	call	0x5884	; 0x5884 <u8g_Init8Bit>


	//sei();
	stdout = stdin = &usart_str;
    1b98:	86 e0       	ldi	r24, 0x06	; 6
    1b9a:	90 e2       	ldi	r25, 0x20	; 32
    1b9c:	80 93 bd 29 	sts	0x29BD, r24
    1ba0:	90 93 be 29 	sts	0x29BE, r25
    1ba4:	80 93 bf 29 	sts	0x29BF, r24
    1ba8:	90 93 c0 29 	sts	0x29C0, r25
		// canbus init
	CAN_init();
    1bac:	0e 94 8a 06 	call	0xd14	; 0xd14 <CAN_init>
	//clear_alert();
	

	
	setup_timmer();	 
    1bb0:	0e 94 ed 36 	call	0x6dda	; 0x6dda <setup_timmer>
	//uarts
	setUpSerial_rpt();
    1bb4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <setUpSerial_rpt>
	setUpSerial_main();
    1bb8:	0e 94 c3 0c 	call	0x1986	; 0x1986 <setUpSerial_main>
    1bbc:	8d b7       	in	r24, 0x3d	; 61
    1bbe:	9e b7       	in	r25, 0x3e	; 62
    1bc0:	07 96       	adiw	r24, 0x07	; 7
    1bc2:	8d bf       	out	0x3d, r24	; 61
    1bc4:	9e bf       	out	0x3e, r25	; 62

}
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	cf 90       	pop	r12
    1bd6:	bf 90       	pop	r11
    1bd8:	af 90       	pop	r10
    1bda:	9f 90       	pop	r9
    1bdc:	8f 90       	pop	r8
    1bde:	7f 90       	pop	r7
    1be0:	08 95       	ret

00001be2 <Setup_main>:
void Recive_data_from_can(void);


void Setup_main()
{
		printf("Bootloader Done!\n");
    1be2:	8c e5       	ldi	r24, 0x5C	; 92
    1be4:	91 e2       	ldi	r25, 0x21	; 33
    1be6:	0e 94 51 43 	call	0x86a2	; 0x86a2 <puts>
		toogle_alert();
    1bea:	0e 94 ed 08 	call	0x11da	; 0x11da <toogle_alert>
		printf("INT devices!\n");
    1bee:	8d e6       	ldi	r24, 0x6D	; 109
    1bf0:	91 e2       	ldi	r25, 0x21	; 33
    1bf2:	0e 94 51 43 	call	0x86a2	; 0x86a2 <puts>
		setup();
    1bf6:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <setup>
		printf("Done!\n");
    1bfa:	87 e6       	ldi	r24, 0x67	; 103
    1bfc:	91 e2       	ldi	r25, 0x21	; 33
    1bfe:	0e 94 51 43 	call	0x86a2	; 0x86a2 <puts>

		// test
		printf("Loading SD card!\n");
    1c02:	8a e7       	ldi	r24, 0x7A	; 122
    1c04:	91 e2       	ldi	r25, 0x21	; 33
    1c06:	0e 94 51 43 	call	0x86a2	; 0x86a2 <puts>
		sd_raw_init();
    1c0a:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <sd_raw_init>
		sd_card_open();
    1c0e:	0e 94 7e 23 	call	0x46fc	; 0x46fc <sd_card_open>
		screen_int();
    1c12:	0e 94 b8 0b 	call	0x1770	; 0x1770 <screen_int>
		printf("Done!\n");
    1c16:	87 e6       	ldi	r24, 0x67	; 103
    1c18:	91 e2       	ldi	r25, 0x21	; 33
    1c1a:	0e 94 51 43 	call	0x86a2	; 0x86a2 <puts>
    1c1e:	2f ef       	ldi	r18, 0xFF	; 255
    1c20:	8b e4       	ldi	r24, 0x4B	; 75
    1c22:	9d e1       	ldi	r25, 0x1D	; 29
    1c24:	21 50       	subi	r18, 0x01	; 1
    1c26:	80 40       	sbci	r24, 0x00	; 0
    1c28:	90 40       	sbci	r25, 0x00	; 0
    1c2a:	e1 f7       	brne	.-8      	; 0x1c24 <Setup_main+0x42>
    1c2c:	00 c0       	rjmp	.+0      	; 0x1c2e <Setup_main+0x4c>
    1c2e:	00 00       	nop
		// sd_file_write(filetext);
		// sd_file_close();

		// struct form main controller functions
		//struct cont *controller;
		printf("Allocate memory menus!\n");
    1c30:	8b e8       	ldi	r24, 0x8B	; 139
    1c32:	91 e2       	ldi	r25, 0x21	; 33
    1c34:	0e 94 51 43 	call	0x86a2	; 0x86a2 <puts>
		sei();
    1c38:	78 94       	sei
    1c3a:	2f ef       	ldi	r18, 0xFF	; 255
    1c3c:	83 ed       	ldi	r24, 0xD3	; 211
    1c3e:	90 e3       	ldi	r25, 0x30	; 48
    1c40:	21 50       	subi	r18, 0x01	; 1
    1c42:	80 40       	sbci	r24, 0x00	; 0
    1c44:	90 40       	sbci	r25, 0x00	; 0
    1c46:	e1 f7       	brne	.-8      	; 0x1c40 <Setup_main+0x5e>
    1c48:	00 c0       	rjmp	.+0      	; 0x1c4a <Setup_main+0x68>
    1c4a:	00 00       	nop

		_delay_ms(500);
		
		printf("System Online!\n");
    1c4c:	82 ea       	ldi	r24, 0xA2	; 162
    1c4e:	91 e2       	ldi	r25, 0x21	; 33
    1c50:	0e 94 51 43 	call	0x86a2	; 0x86a2 <puts>
		clear_alert();
    1c54:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <clear_alert>
		

		setUpSerial_rpt();
    1c58:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <setUpSerial_rpt>
		main_setup();
    1c5c:	0e 94 b4 31 	call	0x6368	; 0x6368 <main_setup>
    1c60:	08 95       	ret

00001c62 <main>:
int y_pos = 0;  // global variable
extern void radio_pull_data_thread();

int main(void)
{	
	rs232radio.enable = 0;
    1c62:	10 92 84 27 	sts	0x2784, r1
    1c66:	10 92 85 27 	sts	0x2785, r1
	rs232radio.rs232_prescale=0;
    1c6a:	10 92 7a 27 	sts	0x277A, r1
    1c6e:	10 92 7b 27 	sts	0x277B, r1
	rs232radio.radio_rs232 = 206;
    1c72:	8e ec       	ldi	r24, 0xCE	; 206
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	80 93 78 27 	sts	0x2778, r24
    1c7a:	90 93 79 27 	sts	0x2779, r25
	rs232radio.model="Yesu ft-8xx";
    1c7e:	81 eb       	ldi	r24, 0xB1	; 177
    1c80:	91 e2       	ldi	r25, 0x21	; 33
    1c82:	80 93 7c 27 	sts	0x277C, r24
    1c86:	90 93 7d 27 	sts	0x277D, r25
	//debug
	rs232radio.amp_id=2;
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	80 93 8a 27 	sts	0x278A, r24
    1c92:	90 93 8b 27 	sts	0x278B, r25

	Setup_main();
    1c96:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <Setup_main>
	scedular_setup();
    1c9a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <scedular_setup>
	beep(60);
    1c9e:	8c e3       	ldi	r24, 0x3C	; 60
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <beep>

	
	
	
	addTask(1, read_system_Task, 2);
    1ca6:	42 e0       	ldi	r20, 0x02	; 2
    1ca8:	50 e0       	ldi	r21, 0x00	; 0
    1caa:	6b e5       	ldi	r22, 0x5B	; 91
    1cac:	7a e0       	ldi	r23, 0x0A	; 10
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <addTask>
	addTask(2, Main_task, 2);
    1cb4:	42 e0       	ldi	r20, 0x02	; 2
    1cb6:	50 e0       	ldi	r21, 0x00	; 0
    1cb8:	68 ee       	ldi	r22, 0xE8	; 232
    1cba:	73 e1       	ldi	r23, 0x13	; 19
    1cbc:	82 e0       	ldi	r24, 0x02	; 2
    1cbe:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <addTask>
	addTask(3, radio_pull_data_thread, 2);
    1cc2:	42 e0       	ldi	r20, 0x02	; 2
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	64 ef       	ldi	r22, 0xF4	; 244
    1cc8:	78 e3       	ldi	r23, 0x38	; 56
    1cca:	83 e0       	ldi	r24, 0x03	; 3
    1ccc:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <addTask>
	addTask(4, Send_can_heartbeat, 4);
    1cd0:	44 e0       	ldi	r20, 0x04	; 4
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	6a e1       	ldi	r22, 0x1A	; 26
    1cd6:	7a e0       	ldi	r23, 0x0A	; 10
    1cd8:	84 e0       	ldi	r24, 0x04	; 4
    1cda:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <addTask>
	addTask(5, print_heartbeat, 20);
    1cde:	44 e1       	ldi	r20, 0x14	; 20
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	67 e4       	ldi	r22, 0x47	; 71
    1ce4:	79 e0       	ldi	r23, 0x09	; 9
    1ce6:	85 e0       	ldi	r24, 0x05	; 5
    1ce8:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <addTask>
	//addTask(6, get_band, 5);
	//set_amp_id(2);


	
	Rxmsg =malloc(sizeof(can_message_t *));
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 cd 40 	call	0x819a	; 0x819a <malloc>
    1cf4:	80 93 66 27 	sts	0x2766, r24
    1cf8:	90 93 67 27 	sts	0x2767, r25
	
	for(;;)	
	{	
		dispatchTasks();	
    1cfc:	0e 94 75 15 	call	0x2aea	; 0x2aea <dispatchTasks>
    1d00:	fd cf       	rjmp	.-6      	; 0x1cfc <main+0x9a>

00001d02 <sendChar_d>:
	
}
void sendChar_d(char c)
{
	
	while( !(USARTD0_STATUS & USART_DREIF_bm) ); //Wait until DATA buffer is empty	
    1d02:	e1 ea       	ldi	r30, 0xA1	; 161
    1d04:	f9 e0       	ldi	r31, 0x09	; 9
    1d06:	90 81       	ld	r25, Z
    1d08:	95 ff       	sbrs	r25, 5
    1d0a:	fd cf       	rjmp	.-6      	; 0x1d06 <sendChar_d+0x4>
	USARTD0_DATA =c;
    1d0c:	80 93 a0 09 	sts	0x09A0, r24
    1d10:	08 95       	ret

00001d12 <sendChar_f>:
}

void sendChar_f(char c)
{
	
	while( !(USARTF0_STATUS & USART_DREIF_bm) ); //Wait until DATA buffer is empty
    1d12:	e1 ea       	ldi	r30, 0xA1	; 161
    1d14:	fb e0       	ldi	r31, 0x0B	; 11
    1d16:	90 81       	ld	r25, Z
    1d18:	95 ff       	sbrs	r25, 5
    1d1a:	fd cf       	rjmp	.-6      	; 0x1d16 <sendChar_f+0x4>
	
	USARTF0_DATA =c;
    1d1c:	80 93 a0 0b 	sts	0x0BA0, r24
    1d20:	08 95       	ret

00001d22 <sendString_f>:
		sendChar_d(*text++);

	}
}
void sendString_f(char *text)
{
    1d22:	cf 93       	push	r28
    1d24:	df 93       	push	r29
    1d26:	ec 01       	movw	r28, r24
	while(*text)
    1d28:	88 81       	ld	r24, Y
    1d2a:	88 23       	and	r24, r24
    1d2c:	31 f0       	breq	.+12     	; 0x1d3a <sendString_f+0x18>
    1d2e:	21 96       	adiw	r28, 0x01	; 1
	{
		sendChar_f(*text++);
    1d30:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <sendChar_f>

	}
}
void sendString_f(char *text)
{
	while(*text)
    1d34:	89 91       	ld	r24, Y+
    1d36:	81 11       	cpse	r24, r1
    1d38:	fb cf       	rjmp	.-10     	; 0x1d30 <sendString_f+0xe>
	{
		sendChar_f(*text++);

	}
}
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	08 95       	ret

00001d40 <easy_com_angel>:
int EL =0;
/*
Funtion för easycom samt yeasu format för rotor med återkoppling
*/
void easy_com_angel(volatile unsigned char  * data_in)
{
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	2f 97       	sbiw	r28, 0x0f	; 15
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	8c 01       	movw	r16, r24
	char print_str[15];

	// easy com
	if (data_in[0] =='A' && data_in[1] =='Z')
    1d54:	fc 01       	movw	r30, r24
    1d56:	80 81       	ld	r24, Z
    1d58:	81 34       	cpi	r24, 0x41	; 65
    1d5a:	09 f0       	breq	.+2      	; 0x1d5e <easy_com_angel+0x1e>
    1d5c:	7d c0       	rjmp	.+250    	; 0x1e58 <easy_com_angel+0x118>
    1d5e:	81 81       	ldd	r24, Z+1	; 0x01
    1d60:	8a 35       	cpi	r24, 0x5A	; 90
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <easy_com_angel+0x26>
    1d64:	79 c0       	rjmp	.+242    	; 0x1e58 <easy_com_angel+0x118>
	{
		if(data_in[4] != '.')
    1d66:	84 81       	ldd	r24, Z+4	; 0x04
    1d68:	8e 32       	cpi	r24, 0x2E	; 46
    1d6a:	e9 f1       	breq	.+122    	; 0x1de6 <easy_com_angel+0xa6>
		{
			AZ = ((data_in[2]-'0')*100)+((data_in[3]-'0')*10)+(data_in[4]-'0');
    1d6c:	62 81       	ldd	r22, Z+2	; 0x02
    1d6e:	83 81       	ldd	r24, Z+3	; 0x03
    1d70:	24 81       	ldd	r18, Z+4	; 0x04
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	60 53       	subi	r22, 0x30	; 48
    1d76:	71 09       	sbc	r23, r1
    1d78:	94 e6       	ldi	r25, 0x64	; 100
    1d7a:	96 9f       	mul	r25, r22
    1d7c:	a0 01       	movw	r20, r0
    1d7e:	97 9f       	mul	r25, r23
    1d80:	50 0d       	add	r21, r0
    1d82:	11 24       	eor	r1, r1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	c0 97       	sbiw	r24, 0x30	; 48
    1d88:	bc 01       	movw	r22, r24
    1d8a:	66 0f       	add	r22, r22
    1d8c:	77 1f       	adc	r23, r23
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	86 0f       	add	r24, r22
    1d9c:	97 1f       	adc	r25, r23
    1d9e:	84 0f       	add	r24, r20
    1da0:	95 1f       	adc	r25, r21
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	20 53       	subi	r18, 0x30	; 48
    1da6:	31 09       	sbc	r19, r1
    1da8:	82 0f       	add	r24, r18
    1daa:	93 1f       	adc	r25, r19
    1dac:	80 93 7a 23 	sts	0x237A, r24
    1db0:	90 93 7b 23 	sts	0x237B, r25
			EL = ((data_in[10]-'0')*10)+((data_in[11]-'0'));
    1db4:	82 85       	ldd	r24, Z+10	; 0x0a
    1db6:	23 85       	ldd	r18, Z+11	; 0x0b
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	c0 97       	sbiw	r24, 0x30	; 48
    1dbc:	ac 01       	movw	r20, r24
    1dbe:	44 0f       	add	r20, r20
    1dc0:	55 1f       	adc	r21, r21
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	84 0f       	add	r24, r20
    1dd0:	95 1f       	adc	r25, r21
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	20 53       	subi	r18, 0x30	; 48
    1dd6:	31 09       	sbc	r19, r1
    1dd8:	82 0f       	add	r24, r18
    1dda:	93 1f       	adc	r25, r19
    1ddc:	80 93 78 23 	sts	0x2378, r24
    1de0:	90 93 79 23 	sts	0x2379, r25
    1de4:	31 c0       	rjmp	.+98     	; 0x1e48 <easy_com_angel+0x108>
		}
		else
		{
			AZ = ((data_in[2]-'0')*10)+((data_in[3]-'0'));
    1de6:	f8 01       	movw	r30, r16
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	23 81       	ldd	r18, Z+3	; 0x03
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	c0 97       	sbiw	r24, 0x30	; 48
    1df0:	ac 01       	movw	r20, r24
    1df2:	44 0f       	add	r20, r20
    1df4:	55 1f       	adc	r21, r21
    1df6:	88 0f       	add	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	84 0f       	add	r24, r20
    1e04:	95 1f       	adc	r25, r21
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	20 53       	subi	r18, 0x30	; 48
    1e0a:	31 09       	sbc	r19, r1
    1e0c:	82 0f       	add	r24, r18
    1e0e:	93 1f       	adc	r25, r19
    1e10:	80 93 7a 23 	sts	0x237A, r24
    1e14:	90 93 7b 23 	sts	0x237B, r25
			EL = ((data_in[9]-'0')*10)+((data_in[10]-'0'));
    1e18:	81 85       	ldd	r24, Z+9	; 0x09
    1e1a:	22 85       	ldd	r18, Z+10	; 0x0a
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	c0 97       	sbiw	r24, 0x30	; 48
    1e20:	ac 01       	movw	r20, r24
    1e22:	44 0f       	add	r20, r20
    1e24:	55 1f       	adc	r21, r21
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	84 0f       	add	r24, r20
    1e34:	95 1f       	adc	r25, r21
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	20 53       	subi	r18, 0x30	; 48
    1e3a:	31 09       	sbc	r19, r1
    1e3c:	82 0f       	add	r24, r18
    1e3e:	93 1f       	adc	r25, r19
    1e40:	80 93 78 23 	sts	0x2378, r24
    1e44:	90 93 79 23 	sts	0x2379, r25
			
		}

/*		printf("AZ %i  EL %i\r",AZ,EL);	*/
		rotor_target  = AZ;
    1e48:	80 91 7a 23 	lds	r24, 0x237A
    1e4c:	90 91 7b 23 	lds	r25, 0x237B
    1e50:	80 93 86 23 	sts	0x2386, r24
    1e54:	90 93 87 23 	sts	0x2387, r25
	}
	// yeasu
	if (data_in[0] =='W')
    1e58:	f8 01       	movw	r30, r16
    1e5a:	80 81       	ld	r24, Z
    1e5c:	87 35       	cpi	r24, 0x57	; 87
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <easy_com_angel+0x122>
    1e60:	42 c0       	rjmp	.+132    	; 0x1ee6 <easy_com_angel+0x1a6>
	{
		AZ = ((data_in[1]-'0')*100)+((data_in[2]-'0')*10)+(data_in[3]-'0');
    1e62:	61 81       	ldd	r22, Z+1	; 0x01
    1e64:	22 81       	ldd	r18, Z+2	; 0x02
    1e66:	43 81       	ldd	r20, Z+3	; 0x03
    1e68:	70 e0       	ldi	r23, 0x00	; 0
    1e6a:	60 53       	subi	r22, 0x30	; 48
    1e6c:	71 09       	sbc	r23, r1
    1e6e:	34 e6       	ldi	r19, 0x64	; 100
    1e70:	36 9f       	mul	r19, r22
    1e72:	c0 01       	movw	r24, r0
    1e74:	37 9f       	mul	r19, r23
    1e76:	90 0d       	add	r25, r0
    1e78:	11 24       	eor	r1, r1
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	20 53       	subi	r18, 0x30	; 48
    1e7e:	31 09       	sbc	r19, r1
    1e80:	b9 01       	movw	r22, r18
    1e82:	66 0f       	add	r22, r22
    1e84:	77 1f       	adc	r23, r23
    1e86:	22 0f       	add	r18, r18
    1e88:	33 1f       	adc	r19, r19
    1e8a:	22 0f       	add	r18, r18
    1e8c:	33 1f       	adc	r19, r19
    1e8e:	22 0f       	add	r18, r18
    1e90:	33 1f       	adc	r19, r19
    1e92:	26 0f       	add	r18, r22
    1e94:	37 1f       	adc	r19, r23
    1e96:	82 0f       	add	r24, r18
    1e98:	93 1f       	adc	r25, r19
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	40 53       	subi	r20, 0x30	; 48
    1e9e:	51 09       	sbc	r21, r1
    1ea0:	84 0f       	add	r24, r20
    1ea2:	95 1f       	adc	r25, r21
    1ea4:	80 93 7a 23 	sts	0x237A, r24
    1ea8:	90 93 7b 23 	sts	0x237B, r25
		EL = ((data_in[6]-'0')*10)+((data_in[7]-'0'));
    1eac:	26 81       	ldd	r18, Z+6	; 0x06
    1eae:	47 81       	ldd	r20, Z+7	; 0x07
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	20 53       	subi	r18, 0x30	; 48
    1eb4:	31 09       	sbc	r19, r1
    1eb6:	b9 01       	movw	r22, r18
    1eb8:	66 0f       	add	r22, r22
    1eba:	77 1f       	adc	r23, r23
    1ebc:	22 0f       	add	r18, r18
    1ebe:	33 1f       	adc	r19, r19
    1ec0:	22 0f       	add	r18, r18
    1ec2:	33 1f       	adc	r19, r19
    1ec4:	22 0f       	add	r18, r18
    1ec6:	33 1f       	adc	r19, r19
    1ec8:	26 0f       	add	r18, r22
    1eca:	37 1f       	adc	r19, r23
    1ecc:	50 e0       	ldi	r21, 0x00	; 0
    1ece:	40 53       	subi	r20, 0x30	; 48
    1ed0:	51 09       	sbc	r21, r1
    1ed2:	24 0f       	add	r18, r20
    1ed4:	35 1f       	adc	r19, r21
    1ed6:	20 93 78 23 	sts	0x2378, r18
    1eda:	30 93 79 23 	sts	0x2379, r19
		rotor_target  = AZ;
    1ede:	80 93 86 23 	sts	0x2386, r24
    1ee2:	90 93 87 23 	sts	0x2387, r25
	}
	if (data_in[0] =='C' && data_in[1] =='2')
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	80 81       	ld	r24, Z
    1eea:	83 34       	cpi	r24, 0x43	; 67
    1eec:	b9 f5       	brne	.+110    	; 0x1f5c <easy_com_angel+0x21c>
    1eee:	81 81       	ldd	r24, Z+1	; 0x01
    1ef0:	82 33       	cpi	r24, 0x32	; 50
    1ef2:	a1 f5       	brne	.+104    	; 0x1f5c <easy_com_angel+0x21c>
	{
		if (rotor_curent  <100)
    1ef4:	80 91 88 23 	lds	r24, 0x2388
    1ef8:	90 91 89 23 	lds	r25, 0x2389
    1efc:	84 36       	cpi	r24, 0x64	; 100
    1efe:	91 05       	cpc	r25, r1
    1f00:	ac f4       	brge	.+42     	; 0x1f2c <easy_com_angel+0x1ec>
		{
			//printf("AZ=0%i EL=0%i\r",rad_test,EL);
			sprintf(print_str, "AZ=0%i EL=0%i\r", rotor_curent ,EL);
    1f02:	20 91 79 23 	lds	r18, 0x2379
    1f06:	2f 93       	push	r18
    1f08:	20 91 78 23 	lds	r18, 0x2378
    1f0c:	2f 93       	push	r18
    1f0e:	9f 93       	push	r25
    1f10:	8f 93       	push	r24
    1f12:	8a ed       	ldi	r24, 0xDA	; 218
    1f14:	91 e2       	ldi	r25, 0x21	; 33
    1f16:	9f 93       	push	r25
    1f18:	8f 93       	push	r24
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	01 96       	adiw	r24, 0x01	; 1
    1f1e:	9f 93       	push	r25
    1f20:	8f 93       	push	r24
    1f22:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	14 c0       	rjmp	.+40     	; 0x1f54 <easy_com_angel+0x214>
			
		}
		else
		{
			//printf("AZ=%i EL=0%i\r",rad_test,EL);
			sprintf(print_str, "AZ=%i EL=0%i\r", rotor_curent ,EL);
    1f2c:	20 91 79 23 	lds	r18, 0x2379
    1f30:	2f 93       	push	r18
    1f32:	20 91 78 23 	lds	r18, 0x2378
    1f36:	2f 93       	push	r18
    1f38:	9f 93       	push	r25
    1f3a:	8f 93       	push	r24
    1f3c:	89 ee       	ldi	r24, 0xE9	; 233
    1f3e:	91 e2       	ldi	r25, 0x21	; 33
    1f40:	9f 93       	push	r25
    1f42:	8f 93       	push	r24
    1f44:	ce 01       	movw	r24, r28
    1f46:	01 96       	adiw	r24, 0x01	; 1
    1f48:	9f 93       	push	r25
    1f4a:	8f 93       	push	r24
    1f4c:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	de bf       	out	0x3e, r29	; 62
		
		}

		//printf(print_str);
		sendString_f(print_str);
    1f54:	ce 01       	movw	r24, r28
    1f56:	01 96       	adiw	r24, 0x01	; 1
    1f58:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <sendString_f>
	// SEND AZ ALONE
	}
	 if(data_in[0] =='C' &&  data_in[1] !='2') 
    1f5c:	f8 01       	movw	r30, r16
    1f5e:	80 81       	ld	r24, Z
    1f60:	83 34       	cpi	r24, 0x43	; 67
    1f62:	99 f5       	brne	.+102    	; 0x1fca <easy_com_angel+0x28a>
    1f64:	81 81       	ldd	r24, Z+1	; 0x01
    1f66:	82 33       	cpi	r24, 0x32	; 50
    1f68:	81 f1       	breq	.+96     	; 0x1fca <easy_com_angel+0x28a>
	{
		if (rotor_curent  <100)
    1f6a:	80 91 88 23 	lds	r24, 0x2388
    1f6e:	90 91 89 23 	lds	r25, 0x2389
    1f72:	84 36       	cpi	r24, 0x64	; 100
    1f74:	91 05       	cpc	r25, r1
    1f76:	9c f4       	brge	.+38     	; 0x1f9e <easy_com_angel+0x25e>
		{
			//printf("AZ=0%i\r",rad_test);
			sprintf(print_str, "AZ=0%i\r", rotor_curent);
    1f78:	9f 93       	push	r25
    1f7a:	8f 93       	push	r24
    1f7c:	87 ef       	ldi	r24, 0xF7	; 247
    1f7e:	91 e2       	ldi	r25, 0x21	; 33
    1f80:	9f 93       	push	r25
    1f82:	8f 93       	push	r24
    1f84:	ce 01       	movw	r24, r28
    1f86:	01 96       	adiw	r24, 0x01	; 1
    1f88:	9f 93       	push	r25
    1f8a:	8f 93       	push	r24
    1f8c:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	12 c0       	rjmp	.+36     	; 0x1fc2 <easy_com_angel+0x282>
		}
		else
		{
			
			sprintf(print_str, "AZ=%i\r", rotor_curent);
    1f9e:	9f 93       	push	r25
    1fa0:	8f 93       	push	r24
    1fa2:	8f ef       	ldi	r24, 0xFF	; 255
    1fa4:	91 e2       	ldi	r25, 0x21	; 33
    1fa6:	9f 93       	push	r25
    1fa8:	8f 93       	push	r24
    1faa:	ce 01       	movw	r24, r28
    1fac:	01 96       	adiw	r24, 0x01	; 1
    1fae:	9f 93       	push	r25
    1fb0:	8f 93       	push	r24
    1fb2:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
			
		}
		sendString_f(print_str);
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	01 96       	adiw	r24, 0x01	; 1
    1fc6:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <sendString_f>
	}
	if(data_in[0] =='B')
    1fca:	f8 01       	movw	r30, r16
    1fcc:	80 81       	ld	r24, Z
    1fce:	82 34       	cpi	r24, 0x42	; 66
    1fd0:	d1 f4       	brne	.+52     	; 0x2006 <easy_com_angel+0x2c6>
	{
		// send EL yeasu
		//printf("EL=0%i",EL);
		sprintf(print_str, "EL=0%i\r", EL);
    1fd2:	80 91 79 23 	lds	r24, 0x2379
    1fd6:	8f 93       	push	r24
    1fd8:	80 91 78 23 	lds	r24, 0x2378
    1fdc:	8f 93       	push	r24
    1fde:	81 ee       	ldi	r24, 0xE1	; 225
    1fe0:	91 e2       	ldi	r25, 0x21	; 33
    1fe2:	9f 93       	push	r25
    1fe4:	8f 93       	push	r24
    1fe6:	8e 01       	movw	r16, r28
    1fe8:	0f 5f       	subi	r16, 0xFF	; 255
    1fea:	1f 4f       	sbci	r17, 0xFF	; 255
    1fec:	1f 93       	push	r17
    1fee:	0f 93       	push	r16
    1ff0:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
		sendString_f(print_str);
    1ff4:	c8 01       	movw	r24, r16
    1ff6:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <sendString_f>
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
	}
	// skriver ut i debugen inkommande data
	//printf(data_in);
	
}
    2006:	2f 96       	adiw	r28, 0x0f	; 15
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	08 95       	ret

00002016 <get_band>:



void get_band()
{
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
	// ft-857d paket
	// get band from freqvensy yeasu
	//printf("%02X%02X\n",message_que.tx[0],message_que.tx[4]);
	
	switch(rs232radio.radio_mode)
    201e:	80 91 92 27 	lds	r24, 0x2792
    2022:	90 91 93 27 	lds	r25, 0x2793
    2026:	86 30       	cpi	r24, 0x06	; 6
    2028:	91 05       	cpc	r25, r1
    202a:	09 f4       	brne	.+2      	; 0x202e <get_band+0x18>
    202c:	74 c0       	rjmp	.+232    	; 0x2116 <get_band+0x100>
    202e:	8c f4       	brge	.+34     	; 0x2052 <get_band+0x3c>
    2030:	82 30       	cpi	r24, 0x02	; 2
    2032:	91 05       	cpc	r25, r1
    2034:	e1 f1       	breq	.+120    	; 0x20ae <get_band+0x98>
    2036:	2c f4       	brge	.+10     	; 0x2042 <get_band+0x2c>
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	09 f1       	breq	.+66     	; 0x207e <get_band+0x68>
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	51 f1       	breq	.+84     	; 0x2094 <get_band+0x7e>
    2040:	ab c0       	rjmp	.+342    	; 0x2198 <get_band+0x182>
    2042:	83 30       	cpi	r24, 0x03	; 3
    2044:	91 05       	cpc	r25, r1
    2046:	09 f4       	brne	.+2      	; 0x204a <get_band+0x34>
    2048:	3f c0       	rjmp	.+126    	; 0x20c8 <get_band+0xb2>
    204a:	04 97       	sbiw	r24, 0x04	; 4
    204c:	09 f4       	brne	.+2      	; 0x2050 <get_band+0x3a>
    204e:	49 c0       	rjmp	.+146    	; 0x20e2 <get_band+0xcc>
    2050:	a3 c0       	rjmp	.+326    	; 0x2198 <get_band+0x182>
    2052:	8c 30       	cpi	r24, 0x0C	; 12
    2054:	91 05       	cpc	r25, r1
    2056:	09 f4       	brne	.+2      	; 0x205a <get_band+0x44>
    2058:	92 c0       	rjmp	.+292    	; 0x217e <get_band+0x168>
    205a:	44 f4       	brge	.+16     	; 0x206c <get_band+0x56>
    205c:	88 30       	cpi	r24, 0x08	; 8
    205e:	91 05       	cpc	r25, r1
    2060:	09 f4       	brne	.+2      	; 0x2064 <get_band+0x4e>
    2062:	66 c0       	rjmp	.+204    	; 0x2130 <get_band+0x11a>
    2064:	0a 97       	sbiw	r24, 0x0a	; 10
    2066:	09 f4       	brne	.+2      	; 0x206a <get_band+0x54>
    2068:	7d c0       	rjmp	.+250    	; 0x2164 <get_band+0x14e>
    206a:	96 c0       	rjmp	.+300    	; 0x2198 <get_band+0x182>
    206c:	82 38       	cpi	r24, 0x82	; 130
    206e:	91 05       	cpc	r25, r1
    2070:	09 f4       	brne	.+2      	; 0x2074 <get_band+0x5e>
    2072:	44 c0       	rjmp	.+136    	; 0x20fc <get_band+0xe6>
    2074:	88 38       	cpi	r24, 0x88	; 136
    2076:	91 05       	cpc	r25, r1
    2078:	09 f4       	brne	.+2      	; 0x207c <get_band+0x66>
    207a:	67 c0       	rjmp	.+206    	; 0x214a <get_band+0x134>
    207c:	8d c0       	rjmp	.+282    	; 0x2198 <get_band+0x182>
	{
		case 0x00:
			rs232radio.mode ="LSB";
    207e:	86 e0       	ldi	r24, 0x06	; 6
    2080:	92 e2       	ldi	r25, 0x22	; 34
    2082:	80 93 94 27 	sts	0x2794, r24
    2086:	90 93 95 27 	sts	0x2795, r25
			rs232radio.mode_id=0;
    208a:	10 92 88 27 	sts	0x2788, r1
    208e:	10 92 89 27 	sts	0x2789, r1
			break;
    2092:	88 c0       	rjmp	.+272    	; 0x21a4 <get_band+0x18e>
		case 0x01:
			rs232radio.mode ="USB";
    2094:	8a e0       	ldi	r24, 0x0A	; 10
    2096:	92 e2       	ldi	r25, 0x22	; 34
    2098:	80 93 94 27 	sts	0x2794, r24
    209c:	90 93 95 27 	sts	0x2795, r25
			rs232radio.mode_id=1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	80 93 88 27 	sts	0x2788, r24
    20a8:	90 93 89 27 	sts	0x2789, r25
			break;
    20ac:	7b c0       	rjmp	.+246    	; 0x21a4 <get_band+0x18e>
		case 0x02:
			rs232radio.mode ="CW";
    20ae:	8e e0       	ldi	r24, 0x0E	; 14
    20b0:	92 e2       	ldi	r25, 0x22	; 34
    20b2:	80 93 94 27 	sts	0x2794, r24
    20b6:	90 93 95 27 	sts	0x2795, r25
			rs232radio.mode_id=2;
    20ba:	82 e0       	ldi	r24, 0x02	; 2
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	80 93 88 27 	sts	0x2788, r24
    20c2:	90 93 89 27 	sts	0x2789, r25
			break;
    20c6:	6e c0       	rjmp	.+220    	; 0x21a4 <get_band+0x18e>
		case 0x03:
			rs232radio.mode ="CW-R";
    20c8:	81 e1       	ldi	r24, 0x11	; 17
    20ca:	92 e2       	ldi	r25, 0x22	; 34
    20cc:	80 93 94 27 	sts	0x2794, r24
    20d0:	90 93 95 27 	sts	0x2795, r25
			rs232radio.mode_id=3;
    20d4:	83 e0       	ldi	r24, 0x03	; 3
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	80 93 88 27 	sts	0x2788, r24
    20dc:	90 93 89 27 	sts	0x2789, r25
			break;
    20e0:	61 c0       	rjmp	.+194    	; 0x21a4 <get_band+0x18e>
		case 0x4:
			rs232radio.mode ="AM";
    20e2:	86 e1       	ldi	r24, 0x16	; 22
    20e4:	92 e2       	ldi	r25, 0x22	; 34
    20e6:	80 93 94 27 	sts	0x2794, r24
    20ea:	90 93 95 27 	sts	0x2795, r25
			rs232radio.mode_id=4;
    20ee:	84 e0       	ldi	r24, 0x04	; 4
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	80 93 88 27 	sts	0x2788, r24
    20f6:	90 93 89 27 	sts	0x2789, r25
			break;
    20fa:	54 c0       	rjmp	.+168    	; 0x21a4 <get_band+0x18e>
		case 0x82:
			rs232radio.mode ="CW-N";
    20fc:	89 e1       	ldi	r24, 0x19	; 25
    20fe:	92 e2       	ldi	r25, 0x22	; 34
    2100:	80 93 94 27 	sts	0x2794, r24
    2104:	90 93 95 27 	sts	0x2795, r25
			rs232radio.mode_id=5;
    2108:	85 e0       	ldi	r24, 0x05	; 5
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	80 93 88 27 	sts	0x2788, r24
    2110:	90 93 89 27 	sts	0x2789, r25
			break;
    2114:	47 c0       	rjmp	.+142    	; 0x21a4 <get_band+0x18e>
		case 0x06:
			rs232radio.mode ="WFM";
    2116:	8e e1       	ldi	r24, 0x1E	; 30
    2118:	92 e2       	ldi	r25, 0x22	; 34
    211a:	80 93 94 27 	sts	0x2794, r24
    211e:	90 93 95 27 	sts	0x2795, r25
			rs232radio.mode_id=6;
    2122:	86 e0       	ldi	r24, 0x06	; 6
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	80 93 88 27 	sts	0x2788, r24
    212a:	90 93 89 27 	sts	0x2789, r25
			break;
    212e:	3a c0       	rjmp	.+116    	; 0x21a4 <get_band+0x18e>
		case 0x08:
			rs232radio.mode_id=7;
    2130:	87 e0       	ldi	r24, 0x07	; 7
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	80 93 88 27 	sts	0x2788, r24
    2138:	90 93 89 27 	sts	0x2789, r25
			rs232radio.mode ="FM";
    213c:	83 e2       	ldi	r24, 0x23	; 35
    213e:	92 e2       	ldi	r25, 0x22	; 34
    2140:	80 93 94 27 	sts	0x2794, r24
    2144:	90 93 95 27 	sts	0x2795, r25
			break;
    2148:	2d c0       	rjmp	.+90     	; 0x21a4 <get_band+0x18e>
		case 0x88:
			rs232radio.mode_id=8;
    214a:	88 e0       	ldi	r24, 0x08	; 8
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	80 93 88 27 	sts	0x2788, r24
    2152:	90 93 89 27 	sts	0x2789, r25
			rs232radio.mode ="NFM";
    2156:	82 e2       	ldi	r24, 0x22	; 34
    2158:	92 e2       	ldi	r25, 0x22	; 34
    215a:	80 93 94 27 	sts	0x2794, r24
    215e:	90 93 95 27 	sts	0x2795, r25
			break;
    2162:	20 c0       	rjmp	.+64     	; 0x21a4 <get_band+0x18e>
					
		case 0x0A:
			rs232radio.mode_id=9;
    2164:	89 e0       	ldi	r24, 0x09	; 9
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	80 93 88 27 	sts	0x2788, r24
    216c:	90 93 89 27 	sts	0x2789, r25
			rs232radio.mode ="DIG";
    2170:	86 e2       	ldi	r24, 0x26	; 38
    2172:	92 e2       	ldi	r25, 0x22	; 34
    2174:	80 93 94 27 	sts	0x2794, r24
    2178:	90 93 95 27 	sts	0x2795, r25
			break;
    217c:	13 c0       	rjmp	.+38     	; 0x21a4 <get_band+0x18e>
					
		case 0x0C:
			rs232radio.mode_id=10;
    217e:	8a e0       	ldi	r24, 0x0A	; 10
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	80 93 88 27 	sts	0x2788, r24
    2186:	90 93 89 27 	sts	0x2789, r25
			rs232radio.mode ="PKT";
    218a:	8a e2       	ldi	r24, 0x2A	; 42
    218c:	92 e2       	ldi	r25, 0x22	; 34
    218e:	80 93 94 27 	sts	0x2794, r24
    2192:	90 93 95 27 	sts	0x2795, r25
			break;			
    2196:	06 c0       	rjmp	.+12     	; 0x21a4 <get_band+0x18e>
		default:
			rs232radio.mode ="";
    2198:	8a ed       	ldi	r24, 0xDA	; 218
    219a:	90 e2       	ldi	r25, 0x20	; 32
    219c:	80 93 94 27 	sts	0x2794, r24
    21a0:	90 93 95 27 	sts	0x2795, r25
			break;

	}
	float band = ((long)30000000 /rs232radio.freqvensy);		
    21a4:	20 91 8e 27 	lds	r18, 0x278E
    21a8:	30 91 8f 27 	lds	r19, 0x278F
    21ac:	40 91 90 27 	lds	r20, 0x2790
    21b0:	50 91 91 27 	lds	r21, 0x2791
    21b4:	60 e8       	ldi	r22, 0x80	; 128
    21b6:	73 ec       	ldi	r23, 0xC3	; 195
    21b8:	89 ec       	ldi	r24, 0xC9	; 201
    21ba:	91 e0       	ldi	r25, 0x01	; 1
    21bc:	0e 94 d7 3f 	call	0x7fae	; 0x7fae <__divmodsi4>
    21c0:	ca 01       	movw	r24, r20
    21c2:	b9 01       	movw	r22, r18
    21c4:	0e 94 45 3a 	call	0x748a	; 0x748a <__floatsisf>
    21c8:	6b 01       	movw	r12, r22
    21ca:	7c 01       	movw	r14, r24
	// sparar frekvensen i struckt
	if (band >-1 && band < 800)
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e8       	ldi	r20, 0x80	; 128
    21d2:	5f eb       	ldi	r21, 0xBF	; 191
    21d4:	0e 94 2e 3b 	call	0x765c	; 0x765c <__gesf2>
    21d8:	18 16       	cp	r1, r24
    21da:	bc f5       	brge	.+110    	; 0x224a <get_band+0x234>
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	48 e4       	ldi	r20, 0x48	; 72
    21e2:	54 e4       	ldi	r21, 0x44	; 68
    21e4:	c7 01       	movw	r24, r14
    21e6:	b6 01       	movw	r22, r12
    21e8:	0e 94 0b 3a 	call	0x7416	; 0x7416 <__cmpsf2>
    21ec:	88 23       	and	r24, r24
    21ee:	6c f5       	brge	.+90     	; 0x224a <get_band+0x234>
	{			
		if((float)band <1)
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e8       	ldi	r20, 0x80	; 128
    21f6:	5f e3       	ldi	r21, 0x3F	; 63
    21f8:	c7 01       	movw	r24, r14
    21fa:	b6 01       	movw	r22, r12
    21fc:	0e 94 0b 3a 	call	0x7416	; 0x7416 <__cmpsf2>
    2200:	88 23       	and	r24, r24
    2202:	8c f4       	brge	.+34     	; 0x2226 <get_band+0x210>
		{
			rs232radio.meter=0;
    2204:	10 92 82 27 	sts	0x2782, r1
    2208:	10 92 83 27 	sts	0x2783, r1
			rs232radio.band = 70;
    220c:	86 e4       	ldi	r24, 0x46	; 70
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	a0 e0       	ldi	r26, 0x00	; 0
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	80 93 7e 27 	sts	0x277E, r24
    2218:	90 93 7f 27 	sts	0x277F, r25
    221c:	a0 93 80 27 	sts	0x2780, r26
    2220:	b0 93 81 27 	sts	0x2781, r27
    2224:	12 c0       	rjmp	.+36     	; 0x224a <get_band+0x234>
		}
		else
		{
			rs232radio.meter=1;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	80 93 82 27 	sts	0x2782, r24
    222e:	90 93 83 27 	sts	0x2783, r25
			rs232radio.band = band;
    2232:	c7 01       	movw	r24, r14
    2234:	b6 01       	movw	r22, r12
    2236:	0e 94 17 3a 	call	0x742e	; 0x742e <__fixunssfsi>
    223a:	60 93 7e 27 	sts	0x277E, r22
    223e:	70 93 7f 27 	sts	0x277F, r23
    2242:	80 93 80 27 	sts	0x2780, r24
    2246:	90 93 81 27 	sts	0x2781, r25
		}
	}
	
}
    224a:	ff 90       	pop	r15
    224c:	ef 90       	pop	r14
    224e:	df 90       	pop	r13
    2250:	cf 90       	pop	r12
    2252:	08 95       	ret

00002254 <main_screen>:
int max_antennas =7;
int meny_selected =0;
int hide_meny =0;

void main_screen()
{
    2254:	3f 92       	push	r3
    2256:	4f 92       	push	r4
    2258:	5f 92       	push	r5
    225a:	6f 92       	push	r6
    225c:	7f 92       	push	r7
    225e:	8f 92       	push	r8
    2260:	9f 92       	push	r9
    2262:	af 92       	push	r10
    2264:	bf 92       	push	r11
    2266:	cf 92       	push	r12
    2268:	df 92       	push	r13
    226a:	ef 92       	push	r14
    226c:	ff 92       	push	r15
    226e:	0f 93       	push	r16
    2270:	1f 93       	push	r17
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	ca 5a       	subi	r28, 0xAA	; 170
    227c:	d1 09       	sbc	r29, r1
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	de bf       	out	0x3e, r29	; 62
	//meny_selectors(menu);
	u8g_FirstPage(&u8g);
    2282:	83 e0       	ldi	r24, 0x03	; 3
    2284:	97 e2       	ldi	r25, 0x27	; 39
    2286:	0e 94 80 2c 	call	0x5900	; 0x5900 <u8g_FirstPage>
	
	char menu_test[7][20] ={"Rotor","Radio","Amplifier","Antenna","Settings"} ;
    228a:	de 01       	movw	r26, r28
    228c:	11 96       	adiw	r26, 0x01	; 1
    228e:	8c e8       	ldi	r24, 0x8C	; 140
    2290:	fd 01       	movw	r30, r26
    2292:	11 92       	st	Z+, r1
    2294:	8a 95       	dec	r24
    2296:	e9 f7       	brne	.-6      	; 0x2292 <main_screen+0x3e>
    2298:	86 e0       	ldi	r24, 0x06	; 6
    229a:	e3 e4       	ldi	r30, 0x43	; 67
    229c:	f0 e2       	ldi	r31, 0x20	; 32
    229e:	01 90       	ld	r0, Z+
    22a0:	0d 92       	st	X+, r0
    22a2:	8a 95       	dec	r24
    22a4:	e1 f7       	brne	.-8      	; 0x229e <main_screen+0x4a>
    22a6:	8e e0       	ldi	r24, 0x0E	; 14
    22a8:	fe 01       	movw	r30, r28
    22aa:	37 96       	adiw	r30, 0x07	; 7
    22ac:	df 01       	movw	r26, r30
    22ae:	28 2f       	mov	r18, r24
    22b0:	1d 92       	st	X+, r1
    22b2:	2a 95       	dec	r18
    22b4:	e9 f7       	brne	.-6      	; 0x22b0 <main_screen+0x5c>
    22b6:	96 e0       	ldi	r25, 0x06	; 6
    22b8:	e7 e5       	ldi	r30, 0x57	; 87
    22ba:	f0 e2       	ldi	r31, 0x20	; 32
    22bc:	de 01       	movw	r26, r28
    22be:	55 96       	adiw	r26, 0x15	; 21
    22c0:	01 90       	ld	r0, Z+
    22c2:	0d 92       	st	X+, r0
    22c4:	9a 95       	dec	r25
    22c6:	e1 f7       	brne	.-8      	; 0x22c0 <main_screen+0x6c>
    22c8:	fe 01       	movw	r30, r28
    22ca:	7b 96       	adiw	r30, 0x1b	; 27
    22cc:	df 01       	movw	r26, r30
    22ce:	1d 92       	st	X+, r1
    22d0:	8a 95       	dec	r24
    22d2:	e9 f7       	brne	.-6      	; 0x22ce <main_screen+0x7a>
    22d4:	8a e0       	ldi	r24, 0x0A	; 10
    22d6:	eb e6       	ldi	r30, 0x6B	; 107
    22d8:	f0 e2       	ldi	r31, 0x20	; 32
    22da:	de 01       	movw	r26, r28
    22dc:	99 96       	adiw	r26, 0x29	; 41
    22de:	01 90       	ld	r0, Z+
    22e0:	0d 92       	st	X+, r0
    22e2:	8a 95       	dec	r24
    22e4:	e1 f7       	brne	.-8      	; 0x22de <main_screen+0x8a>
    22e6:	fe 01       	movw	r30, r28
    22e8:	f3 96       	adiw	r30, 0x33	; 51
    22ea:	8a e0       	ldi	r24, 0x0A	; 10
    22ec:	df 01       	movw	r26, r30
    22ee:	1d 92       	st	X+, r1
    22f0:	8a 95       	dec	r24
    22f2:	e9 f7       	brne	.-6      	; 0x22ee <main_screen+0x9a>
    22f4:	88 e0       	ldi	r24, 0x08	; 8
    22f6:	ef e7       	ldi	r30, 0x7F	; 127
    22f8:	f0 e2       	ldi	r31, 0x20	; 32
    22fa:	de 01       	movw	r26, r28
    22fc:	dd 96       	adiw	r26, 0x3d	; 61
    22fe:	01 90       	ld	r0, Z+
    2300:	0d 92       	st	X+, r0
    2302:	8a 95       	dec	r24
    2304:	e1 f7       	brne	.-8      	; 0x22fe <main_screen+0xaa>
    2306:	fe 01       	movw	r30, r28
    2308:	eb 5b       	subi	r30, 0xBB	; 187
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	8c e0       	ldi	r24, 0x0C	; 12
    230e:	df 01       	movw	r26, r30
    2310:	1d 92       	st	X+, r1
    2312:	8a 95       	dec	r24
    2314:	e9 f7       	brne	.-6      	; 0x2310 <main_screen+0xbc>
    2316:	89 e0       	ldi	r24, 0x09	; 9
    2318:	e3 e9       	ldi	r30, 0x93	; 147
    231a:	f0 e2       	ldi	r31, 0x20	; 32
    231c:	de 01       	movw	r26, r28
    231e:	af 5a       	subi	r26, 0xAF	; 175
    2320:	bf 4f       	sbci	r27, 0xFF	; 255
    2322:	01 90       	ld	r0, Z+
    2324:	0d 92       	st	X+, r0
    2326:	8a 95       	dec	r24
    2328:	e1 f7       	brne	.-8      	; 0x2322 <main_screen+0xce>
    232a:	e1 e5       	ldi	r30, 0x51	; 81
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	ec 0f       	add	r30, r28
    2330:	fd 1f       	adc	r31, r29
    2332:	39 96       	adiw	r30, 0x09	; 9
    2334:	8b e0       	ldi	r24, 0x0B	; 11
    2336:	df 01       	movw	r26, r30
    2338:	1d 92       	st	X+, r1
    233a:	8a 95       	dec	r24
    233c:	e9 f7       	brne	.-6      	; 0x2338 <main_screen+0xe4>
	get_band();
    233e:	0e 94 0b 10 	call	0x2016	; 0x2016 <get_band>
		{
			meny_selected=0;
		}
		if (meny_selected >4)
		{
			meny_selected =4;
    2342:	68 94       	set
    2344:	66 24       	eor	r6, r6
    2346:	62 f8       	bld	r6, 2
    2348:	71 2c       	mov	r7, r1
		  /** button segment */
		  if (buttion_one() == 1 || key_pressed == 'b')
		  {
			  if (hide_meny == 0)
			  {
				  hide_meny = 1;
    234a:	44 24       	eor	r4, r4
    234c:	43 94       	inc	r4
    234e:	51 2c       	mov	r5, r1
	{
		u8g_SetFont(&u8g, u8g_font_6x10);
	

		char freq_basform[10];
			sprintf(freq_basform, "%ld", rs232radio.freqvensy);
    2350:	4e 01       	movw	r8, r28
    2352:	b5 e9       	ldi	r27, 0x95	; 149
    2354:	8b 0e       	add	r8, r27
    2356:	91 1c       	adc	r9, r1
				sprintf(str, "%.3s.%.3s.%.2s",freq_basform,freq_basform+3,freq_basform+6);
			
			}
		
			u8g_DrawStr(&u8g, 2, 2,"Frequency:" );
			u8g_DrawStr(&u8g, 2, 12,str );
    2358:	5e 01       	movw	r10, r28
    235a:	ed e8       	ldi	r30, 0x8D	; 141
    235c:	ae 0e       	add	r10, r30
    235e:	b1 1c       	adc	r11, r1
			{
				sprintf(str, "%.2s.%.3s.%.2s", freq_basform,freq_basform+2,freq_basform+5);
			}
			else
			{
				sprintf(str, "%.3s.%.3s.%.2s",freq_basform,freq_basform+3,freq_basform+6);
    2360:	94 01       	movw	r18, r8
    2362:	2a 5f       	subi	r18, 0xFA	; 250
    2364:	3f 4f       	sbci	r19, 0xFF	; 255
    2366:	c1 56       	subi	r28, 0x61	; 97
    2368:	df 4f       	sbci	r29, 0xFF	; 255
    236a:	28 83       	st	Y, r18
    236c:	39 83       	std	Y+1, r19	; 0x01
    236e:	cf 59       	subi	r28, 0x9F	; 159
    2370:	d0 40       	sbci	r29, 0x00	; 0
    2372:	c4 01       	movw	r24, r8
    2374:	03 96       	adiw	r24, 0x03	; 3
    2376:	cf 55       	subi	r28, 0x5F	; 95
    2378:	df 4f       	sbci	r29, 0xFF	; 255
    237a:	88 83       	st	Y, r24
    237c:	99 83       	std	Y+1, r25	; 0x01
    237e:	c1 5a       	subi	r28, 0xA1	; 161
    2380:	d0 40       	sbci	r29, 0x00	; 0
			{
				sprintf(str, "%.1s.%.3s.%.2s", freq_basform,freq_basform+1,freq_basform+4);
			}
			else if (rs232radio.band >3 && rs232radio.meter == 1)
			{
				sprintf(str, "%.2s.%.3s.%.2s", freq_basform,freq_basform+2,freq_basform+5);
    2382:	d4 01       	movw	r26, r8
    2384:	15 96       	adiw	r26, 0x05	; 5
    2386:	cd 55       	subi	r28, 0x5D	; 93
    2388:	df 4f       	sbci	r29, 0xFF	; 255
    238a:	a8 83       	st	Y, r26
    238c:	b9 83       	std	Y+1, r27	; 0x01
    238e:	c3 5a       	subi	r28, 0xA3	; 163
    2390:	d0 40       	sbci	r29, 0x00	; 0
    2392:	f4 01       	movw	r30, r8
    2394:	32 96       	adiw	r30, 0x02	; 2
    2396:	cb 55       	subi	r28, 0x5B	; 91
    2398:	df 4f       	sbci	r29, 0xFF	; 255
    239a:	e8 83       	st	Y, r30
    239c:	f9 83       	std	Y+1, r31	; 0x01
    239e:	c5 5a       	subi	r28, 0xA5	; 165
    23a0:	d0 40       	sbci	r29, 0x00	; 0
		char freq_basform[10];
			sprintf(freq_basform, "%ld", rs232radio.freqvensy);
	
			if (rs232radio.band >30 && rs232radio.meter == 1)
			{
				sprintf(str, "%.1s.%.3s.%.2s", freq_basform,freq_basform+1,freq_basform+4);
    23a2:	22 50       	subi	r18, 0x02	; 2
    23a4:	31 09       	sbc	r19, r1
    23a6:	c9 55       	subi	r28, 0x59	; 89
    23a8:	df 4f       	sbci	r29, 0xFF	; 255
    23aa:	28 83       	st	Y, r18
    23ac:	39 83       	std	Y+1, r19	; 0x01
    23ae:	c7 5a       	subi	r28, 0xA7	; 167
    23b0:	d0 40       	sbci	r29, 0x00	; 0
    23b2:	02 97       	sbiw	r24, 0x02	; 2
    23b4:	c7 55       	subi	r28, 0x57	; 87
    23b6:	df 4f       	sbci	r29, 0xFF	; 255
    23b8:	88 83       	st	Y, r24
    23ba:	99 83       	std	Y+1, r25	; 0x01
    23bc:	c9 5a       	subi	r28, 0xA9	; 169
    23be:	d0 40       	sbci	r29, 0x00	; 0
	char str[8];
	do
	{
	  
		uint8_t  h;
		if (meny_selected <0)
    23c0:	80 91 7e 23 	lds	r24, 0x237E
    23c4:	90 91 7f 23 	lds	r25, 0x237F
    23c8:	99 23       	and	r25, r25
    23ca:	2c f4       	brge	.+10     	; 0x23d6 <main_screen+0x182>
		{
			meny_selected=0;
    23cc:	10 92 7e 23 	sts	0x237E, r1
    23d0:	10 92 7f 23 	sts	0x237F, r1
    23d4:	06 c0       	rjmp	.+12     	; 0x23e2 <main_screen+0x18e>
		}
		if (meny_selected >4)
    23d6:	05 97       	sbiw	r24, 0x05	; 5
    23d8:	24 f0       	brlt	.+8      	; 0x23e2 <main_screen+0x18e>
		{
			meny_selected =4;
    23da:	60 92 7e 23 	sts	0x237E, r6
    23de:	70 92 7f 23 	sts	0x237F, r7
		}
		
		
		if (hide_meny == 0)
    23e2:	80 91 7c 23 	lds	r24, 0x237C
    23e6:	90 91 7d 23 	lds	r25, 0x237D
    23ea:	89 2b       	or	r24, r25
    23ec:	09 f0       	breq	.+2      	; 0x23f0 <main_screen+0x19c>
    23ee:	59 c0       	rjmp	.+178    	; 0x24a2 <main_screen+0x24e>
		{
		
			  u8g_SetFont(&u8g, u8g_font_6x10);
    23f0:	62 e2       	ldi	r22, 0x22	; 34
    23f2:	73 e0       	ldi	r23, 0x03	; 3
    23f4:	83 e0       	ldi	r24, 0x03	; 3
    23f6:	97 e2       	ldi	r25, 0x27	; 39
    23f8:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <u8g_SetFont>
			  u8g_DrawFrame(&u8g, 70, 0, 58, 64);
    23fc:	00 e4       	ldi	r16, 0x40	; 64
    23fe:	2a e3       	ldi	r18, 0x3A	; 58
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	66 e4       	ldi	r22, 0x46	; 70
    2404:	83 e0       	ldi	r24, 0x03	; 3
    2406:	97 e2       	ldi	r25, 0x27	; 39
    2408:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <u8g_DrawFrame>
			  u8g_SetFontRefHeightText(&u8g);
    240c:	83 e0       	ldi	r24, 0x03	; 3
    240e:	97 e2       	ldi	r25, 0x27	; 39
    2410:	0e 94 bf 2a 	call	0x557e	; 0x557e <u8g_SetFontRefHeightText>
			  u8g_SetFontPosTop(&u8g);
    2414:	83 e0       	ldi	r24, 0x03	; 3
    2416:	97 e2       	ldi	r25, 0x27	; 39
    2418:	0e 94 ca 2a 	call	0x5594	; 0x5594 <u8g_SetFontPosTop>
			  //get_band();
			  //button_test();
	  
			  h = u8g_GetFontAscent(&u8g)-u8g_GetFontDescent(&u8g);
    241c:	ab e1       	ldi	r26, 0x1B	; 27
    241e:	b7 e2       	ldi	r27, 0x27	; 39
    2420:	9c 91       	ld	r25, X
    2422:	ec e1       	ldi	r30, 0x1C	; 28
    2424:	f7 e2       	ldi	r31, 0x27	; 39
    2426:	80 81       	ld	r24, Z
    2428:	39 2e       	mov	r3, r25
    242a:	38 1a       	sub	r3, r24
    242c:	9e 01       	movw	r18, r28
    242e:	2f 5f       	subi	r18, 0xFF	; 255
    2430:	3f 4f       	sbci	r19, 0xFF	; 255
    2432:	69 01       	movw	r12, r18
    2434:	10 e0       	ldi	r17, 0x00	; 0
	  

	  
			  for(int i=0;i <= 4; i++)
    2436:	e1 2c       	mov	r14, r1
    2438:	f1 2c       	mov	r15, r1
			  {
				  u8g_SetDefaultForegroundColor(&u8g);
    243a:	83 e0       	ldi	r24, 0x03	; 3
    243c:	97 e2       	ldi	r25, 0x27	; 39
    243e:	0e 94 bd 2c 	call	0x597a	; 0x597a <u8g_SetDefaultForegroundColor>
				// bakgrund_meny
				 if(meny_selected == i)
    2442:	80 91 7e 23 	lds	r24, 0x237E
    2446:	90 91 7f 23 	lds	r25, 0x237F
    244a:	8e 15       	cp	r24, r14
    244c:	9f 05       	cpc	r25, r15
    244e:	79 f4       	brne	.+30     	; 0x246e <main_screen+0x21a>
				 {
					  u8g_DrawBox(&u8g, 71, i*h+1, 57, 11);     // draw cursor bar
    2450:	38 9e       	mul	r3, r24
    2452:	40 2d       	mov	r20, r0
    2454:	11 24       	eor	r1, r1
    2456:	4f 5f       	subi	r20, 0xFF	; 255
    2458:	0b e0       	ldi	r16, 0x0B	; 11
    245a:	29 e3       	ldi	r18, 0x39	; 57
    245c:	67 e4       	ldi	r22, 0x47	; 71
    245e:	83 e0       	ldi	r24, 0x03	; 3
    2460:	97 e2       	ldi	r25, 0x27	; 39
    2462:	0e 94 cb 2e 	call	0x5d96	; 0x5d96 <u8g_DrawBox>
					  u8g_SetDefaultBackgroundColor(&u8g);	  
    2466:	83 e0       	ldi	r24, 0x03	; 3
    2468:	97 e2       	ldi	r25, 0x27	; 39
    246a:	0e 94 ce 2c 	call	0x599c	; 0x599c <u8g_SetDefaultBackgroundColor>
				 }
				  // skriver ut Antenner
		
				 u8g_DrawStr(&u8g, 72, 10*i, menu_test[i]);
    246e:	96 01       	movw	r18, r12
    2470:	41 2f       	mov	r20, r17
    2472:	68 e4       	ldi	r22, 0x48	; 72
    2474:	83 e0       	ldi	r24, 0x03	; 3
    2476:	97 e2       	ldi	r25, 0x27	; 39
    2478:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
	 
		  
				  if (meny_selected == 4)
    247c:	80 91 7e 23 	lds	r24, 0x237E
    2480:	90 91 7f 23 	lds	r25, 0x237F
    2484:	04 97       	sbiw	r24, 0x04	; 4
    2486:	21 f4       	brne	.+8      	; 0x2490 <main_screen+0x23c>
					u8g_SetDefaultForegroundColor(&u8g);
    2488:	83 e0       	ldi	r24, 0x03	; 3
    248a:	97 e2       	ldi	r25, 0x27	; 39
    248c:	0e 94 bd 2c 	call	0x597a	; 0x597a <u8g_SetDefaultForegroundColor>
	  
			  h = u8g_GetFontAscent(&u8g)-u8g_GetFontDescent(&u8g);
	  

	  
			  for(int i=0;i <= 4; i++)
    2490:	3f ef       	ldi	r19, 0xFF	; 255
    2492:	e3 1a       	sub	r14, r19
    2494:	f3 0a       	sbc	r15, r19
    2496:	16 5f       	subi	r17, 0xF6	; 246
    2498:	84 e1       	ldi	r24, 0x14	; 20
    249a:	c8 0e       	add	r12, r24
    249c:	d1 1c       	adc	r13, r1
    249e:	12 33       	cpi	r17, 0x32	; 50
    24a0:	61 f6       	brne	.-104    	; 0x243a <main_screen+0x1e6>

			  }	  
		  }
		  
		  /** button segment */
		  if (buttion_one() == 1 || key_pressed == 'b')
    24a2:	0e 94 cd 08 	call	0x119a	; 0x119a <buttion_one>
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	21 f0       	breq	.+8      	; 0x24b2 <main_screen+0x25e>
    24aa:	80 91 02 27 	lds	r24, 0x2702
    24ae:	82 36       	cpi	r24, 0x62	; 98
    24b0:	b9 f4       	brne	.+46     	; 0x24e0 <main_screen+0x28c>
		  {
			  if (hide_meny == 0)
    24b2:	80 91 7c 23 	lds	r24, 0x237C
    24b6:	90 91 7d 23 	lds	r25, 0x237D
    24ba:	89 2b       	or	r24, r25
    24bc:	49 f4       	brne	.+18     	; 0x24d0 <main_screen+0x27c>
			  {
				  hide_meny = 1;
    24be:	40 92 7c 23 	sts	0x237C, r4
    24c2:	50 92 7d 23 	sts	0x237D, r5
				  // add a press delay
				  while(buttion_one()  ==1);
    24c6:	0e 94 cd 08 	call	0x119a	; 0x119a <buttion_one>
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	e1 f3       	breq	.-8      	; 0x24c6 <main_screen+0x272>
    24ce:	08 c0       	rjmp	.+16     	; 0x24e0 <main_screen+0x28c>
				  
			  }
			  else
			  {
				  // add a press delay
				  while(buttion_one()  ==1);
    24d0:	0e 94 cd 08 	call	0x119a	; 0x119a <buttion_one>
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	e1 f3       	breq	.-8      	; 0x24d0 <main_screen+0x27c>
				  hide_meny =0;
    24d8:	10 92 7c 23 	sts	0x237C, r1
    24dc:	10 92 7d 23 	sts	0x237D, r1
			  }
		  }
	  

	if(meny_selected == 0)
    24e0:	80 91 7e 23 	lds	r24, 0x237E
    24e4:	90 91 7f 23 	lds	r25, 0x237F
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	09 f0       	breq	.+2      	; 0x24ee <main_screen+0x29a>
    24ec:	46 c0       	rjmp	.+140    	; 0x257a <main_screen+0x326>
	{
			draw_angel_circle(rotor_curent,0);
    24ee:	60 e0       	ldi	r22, 0x00	; 0
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	80 91 88 23 	lds	r24, 0x2388
    24f6:	90 91 89 23 	lds	r25, 0x2389
    24fa:	0e 94 4e 0c 	call	0x189c	; 0x189c <draw_angel_circle>
		// showing the band
		
	
	

		if(rs232radio.meter == 1)
    24fe:	80 91 82 27 	lds	r24, 0x2782
    2502:	90 91 83 27 	lds	r25, 0x2783
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	e1 f4       	brne	.+56     	; 0x2542 <main_screen+0x2ee>
		{
	
			sprintf(str, "%ldM", rs232radio.band);
    250a:	ee e7       	ldi	r30, 0x7E	; 126
    250c:	f7 e2       	ldi	r31, 0x27	; 39
    250e:	83 81       	ldd	r24, Z+3	; 0x03
    2510:	8f 93       	push	r24
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	8f 93       	push	r24
    2516:	81 81       	ldd	r24, Z+1	; 0x01
    2518:	8f 93       	push	r24
    251a:	80 81       	ld	r24, Z
    251c:	8f 93       	push	r24
    251e:	83 e2       	ldi	r24, 0x23	; 35
    2520:	91 e2       	ldi	r25, 0x21	; 33
    2522:	9f 93       	push	r25
    2524:	8f 93       	push	r24
    2526:	bf 92       	push	r11
    2528:	af 92       	push	r10
    252a:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
			u8g_DrawStr(&u8g, 2, 52,str );
    252e:	95 01       	movw	r18, r10
    2530:	44 e3       	ldi	r20, 0x34	; 52
    2532:	62 e0       	ldi	r22, 0x02	; 2
    2534:	83 e0       	ldi	r24, 0x03	; 3
    2536:	97 e2       	ldi	r25, 0x27	; 39
    2538:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	2b c1       	rjmp	.+598    	; 0x2798 <main_screen+0x544>

		}else
		{
			sprintf(str, "%ldcM",rs232radio.band);
    2542:	ee e7       	ldi	r30, 0x7E	; 126
    2544:	f7 e2       	ldi	r31, 0x27	; 39
    2546:	83 81       	ldd	r24, Z+3	; 0x03
    2548:	8f 93       	push	r24
    254a:	82 81       	ldd	r24, Z+2	; 0x02
    254c:	8f 93       	push	r24
    254e:	81 81       	ldd	r24, Z+1	; 0x01
    2550:	8f 93       	push	r24
    2552:	80 81       	ld	r24, Z
    2554:	8f 93       	push	r24
    2556:	88 e2       	ldi	r24, 0x28	; 40
    2558:	91 e2       	ldi	r25, 0x21	; 33
    255a:	9f 93       	push	r25
    255c:	8f 93       	push	r24
    255e:	bf 92       	push	r11
    2560:	af 92       	push	r10
    2562:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
			u8g_DrawStr(&u8g, 2, 52,str );
    2566:	95 01       	movw	r18, r10
    2568:	44 e3       	ldi	r20, 0x34	; 52
    256a:	62 e0       	ldi	r22, 0x02	; 2
    256c:	83 e0       	ldi	r24, 0x03	; 3
    256e:	97 e2       	ldi	r25, 0x27	; 39
    2570:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
    2574:	cd bf       	out	0x3d, r28	; 61
    2576:	de bf       	out	0x3e, r29	; 62
    2578:	0f c1       	rjmp	.+542    	; 0x2798 <main_screen+0x544>
	

		
	
	}
	else if (meny_selected == 1)
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	09 f0       	breq	.+2      	; 0x2580 <main_screen+0x32c>
    257e:	0c c1       	rjmp	.+536    	; 0x2798 <main_screen+0x544>
	{
		u8g_SetFont(&u8g, u8g_font_6x10);
    2580:	62 e2       	ldi	r22, 0x22	; 34
    2582:	73 e0       	ldi	r23, 0x03	; 3
    2584:	83 e0       	ldi	r24, 0x03	; 3
    2586:	97 e2       	ldi	r25, 0x27	; 39
    2588:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <u8g_SetFont>
	

		char freq_basform[10];
			sprintf(freq_basform, "%ld", rs232radio.freqvensy);
    258c:	ee e8       	ldi	r30, 0x8E	; 142
    258e:	f7 e2       	ldi	r31, 0x27	; 39
    2590:	83 81       	ldd	r24, Z+3	; 0x03
    2592:	8f 93       	push	r24
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	8f 93       	push	r24
    2598:	81 81       	ldd	r24, Z+1	; 0x01
    259a:	8f 93       	push	r24
    259c:	80 81       	ld	r24, Z
    259e:	8f 93       	push	r24
    25a0:	8e e2       	ldi	r24, 0x2E	; 46
    25a2:	92 e2       	ldi	r25, 0x22	; 34
    25a4:	9f 93       	push	r25
    25a6:	8f 93       	push	r24
    25a8:	9f 92       	push	r9
    25aa:	8f 92       	push	r8
    25ac:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
	
			if (rs232radio.band >30 && rs232radio.meter == 1)
    25b0:	80 91 7e 27 	lds	r24, 0x277E
    25b4:	90 91 7f 27 	lds	r25, 0x277F
    25b8:	a0 91 80 27 	lds	r26, 0x2780
    25bc:	b0 91 81 27 	lds	r27, 0x2781
    25c0:	cd bf       	out	0x3d, r28	; 61
    25c2:	de bf       	out	0x3e, r29	; 62
    25c4:	8f 31       	cpi	r24, 0x1F	; 31
    25c6:	91 05       	cpc	r25, r1
    25c8:	a1 05       	cpc	r26, r1
    25ca:	b1 05       	cpc	r27, r1
    25cc:	60 f1       	brcs	.+88     	; 0x2626 <main_screen+0x3d2>
    25ce:	20 91 82 27 	lds	r18, 0x2782
    25d2:	30 91 83 27 	lds	r19, 0x2783
    25d6:	21 30       	cpi	r18, 0x01	; 1
    25d8:	31 05       	cpc	r19, r1
    25da:	29 f5       	brne	.+74     	; 0x2626 <main_screen+0x3d2>
			{
				sprintf(str, "%.1s.%.3s.%.2s", freq_basform,freq_basform+1,freq_basform+4);
    25dc:	c8 55       	subi	r28, 0x58	; 88
    25de:	df 4f       	sbci	r29, 0xFF	; 255
    25e0:	38 81       	ld	r19, Y
    25e2:	c8 5a       	subi	r28, 0xA8	; 168
    25e4:	d0 40       	sbci	r29, 0x00	; 0
    25e6:	3f 93       	push	r19
    25e8:	c9 55       	subi	r28, 0x59	; 89
    25ea:	df 4f       	sbci	r29, 0xFF	; 255
    25ec:	88 81       	ld	r24, Y
    25ee:	c7 5a       	subi	r28, 0xA7	; 167
    25f0:	d0 40       	sbci	r29, 0x00	; 0
    25f2:	8f 93       	push	r24
    25f4:	c6 55       	subi	r28, 0x56	; 86
    25f6:	df 4f       	sbci	r29, 0xFF	; 255
    25f8:	98 81       	ld	r25, Y
    25fa:	ca 5a       	subi	r28, 0xAA	; 170
    25fc:	d0 40       	sbci	r29, 0x00	; 0
    25fe:	9f 93       	push	r25
    2600:	c7 55       	subi	r28, 0x57	; 87
    2602:	df 4f       	sbci	r29, 0xFF	; 255
    2604:	a8 81       	ld	r26, Y
    2606:	c9 5a       	subi	r28, 0xA9	; 169
    2608:	d0 40       	sbci	r29, 0x00	; 0
    260a:	af 93       	push	r26
    260c:	9f 92       	push	r9
    260e:	8f 92       	push	r8
    2610:	82 e3       	ldi	r24, 0x32	; 50
    2612:	92 e2       	ldi	r25, 0x22	; 34
    2614:	9f 93       	push	r25
    2616:	8f 93       	push	r24
    2618:	bf 92       	push	r11
    261a:	af 92       	push	r10
    261c:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	53 c0       	rjmp	.+166    	; 0x26cc <main_screen+0x478>
			}
			else if (rs232radio.band >3 && rs232radio.meter == 1)
    2626:	04 97       	sbiw	r24, 0x04	; 4
    2628:	a1 05       	cpc	r26, r1
    262a:	b1 05       	cpc	r27, r1
    262c:	58 f1       	brcs	.+86     	; 0x2684 <main_screen+0x430>
    262e:	80 91 82 27 	lds	r24, 0x2782
    2632:	90 91 83 27 	lds	r25, 0x2783
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	29 f5       	brne	.+74     	; 0x2684 <main_screen+0x430>
			{
				sprintf(str, "%.2s.%.3s.%.2s", freq_basform,freq_basform+2,freq_basform+5);
    263a:	cc 55       	subi	r28, 0x5C	; 92
    263c:	df 4f       	sbci	r29, 0xFF	; 255
    263e:	f8 81       	ld	r31, Y
    2640:	c4 5a       	subi	r28, 0xA4	; 164
    2642:	d0 40       	sbci	r29, 0x00	; 0
    2644:	ff 93       	push	r31
    2646:	cd 55       	subi	r28, 0x5D	; 93
    2648:	df 4f       	sbci	r29, 0xFF	; 255
    264a:	28 81       	ld	r18, Y
    264c:	c3 5a       	subi	r28, 0xA3	; 163
    264e:	d0 40       	sbci	r29, 0x00	; 0
    2650:	2f 93       	push	r18
    2652:	ca 55       	subi	r28, 0x5A	; 90
    2654:	df 4f       	sbci	r29, 0xFF	; 255
    2656:	38 81       	ld	r19, Y
    2658:	c6 5a       	subi	r28, 0xA6	; 166
    265a:	d0 40       	sbci	r29, 0x00	; 0
    265c:	3f 93       	push	r19
    265e:	cb 55       	subi	r28, 0x5B	; 91
    2660:	df 4f       	sbci	r29, 0xFF	; 255
    2662:	88 81       	ld	r24, Y
    2664:	c5 5a       	subi	r28, 0xA5	; 165
    2666:	d0 40       	sbci	r29, 0x00	; 0
    2668:	8f 93       	push	r24
    266a:	9f 92       	push	r9
    266c:	8f 92       	push	r8
    266e:	81 e4       	ldi	r24, 0x41	; 65
    2670:	92 e2       	ldi	r25, 0x22	; 34
    2672:	9f 93       	push	r25
    2674:	8f 93       	push	r24
    2676:	bf 92       	push	r11
    2678:	af 92       	push	r10
    267a:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
    267e:	cd bf       	out	0x3d, r28	; 61
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	24 c0       	rjmp	.+72     	; 0x26cc <main_screen+0x478>
			}
			else
			{
				sprintf(str, "%.3s.%.3s.%.2s",freq_basform,freq_basform+3,freq_basform+6);
    2684:	c0 56       	subi	r28, 0x60	; 96
    2686:	df 4f       	sbci	r29, 0xFF	; 255
    2688:	b8 81       	ld	r27, Y
    268a:	c0 5a       	subi	r28, 0xA0	; 160
    268c:	d0 40       	sbci	r29, 0x00	; 0
    268e:	bf 93       	push	r27
    2690:	c1 56       	subi	r28, 0x61	; 97
    2692:	df 4f       	sbci	r29, 0xFF	; 255
    2694:	e8 81       	ld	r30, Y
    2696:	cf 59       	subi	r28, 0x9F	; 159
    2698:	d0 40       	sbci	r29, 0x00	; 0
    269a:	ef 93       	push	r30
    269c:	ce 55       	subi	r28, 0x5E	; 94
    269e:	df 4f       	sbci	r29, 0xFF	; 255
    26a0:	f8 81       	ld	r31, Y
    26a2:	c2 5a       	subi	r28, 0xA2	; 162
    26a4:	d0 40       	sbci	r29, 0x00	; 0
    26a6:	ff 93       	push	r31
    26a8:	cf 55       	subi	r28, 0x5F	; 95
    26aa:	df 4f       	sbci	r29, 0xFF	; 255
    26ac:	28 81       	ld	r18, Y
    26ae:	c1 5a       	subi	r28, 0xA1	; 161
    26b0:	d0 40       	sbci	r29, 0x00	; 0
    26b2:	2f 93       	push	r18
    26b4:	9f 92       	push	r9
    26b6:	8f 92       	push	r8
    26b8:	80 e5       	ldi	r24, 0x50	; 80
    26ba:	92 e2       	ldi	r25, 0x22	; 34
    26bc:	9f 93       	push	r25
    26be:	8f 93       	push	r24
    26c0:	bf 92       	push	r11
    26c2:	af 92       	push	r10
    26c4:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	de bf       	out	0x3e, r29	; 62
			
			}
		
			u8g_DrawStr(&u8g, 2, 2,"Frequency:" );
    26cc:	2f e5       	ldi	r18, 0x5F	; 95
    26ce:	32 e2       	ldi	r19, 0x22	; 34
    26d0:	42 e0       	ldi	r20, 0x02	; 2
    26d2:	62 e0       	ldi	r22, 0x02	; 2
    26d4:	83 e0       	ldi	r24, 0x03	; 3
    26d6:	97 e2       	ldi	r25, 0x27	; 39
    26d8:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
			u8g_DrawStr(&u8g, 2, 12,str );
    26dc:	95 01       	movw	r18, r10
    26de:	4c e0       	ldi	r20, 0x0C	; 12
    26e0:	62 e0       	ldi	r22, 0x02	; 2
    26e2:	83 e0       	ldi	r24, 0x03	; 3
    26e4:	97 e2       	ldi	r25, 0x27	; 39
    26e6:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
	
		u8g_DrawStr(&u8g, 2, 22,"Band:" );
    26ea:	2a e6       	ldi	r18, 0x6A	; 106
    26ec:	32 e2       	ldi	r19, 0x22	; 34
    26ee:	46 e1       	ldi	r20, 0x16	; 22
    26f0:	62 e0       	ldi	r22, 0x02	; 2
    26f2:	83 e0       	ldi	r24, 0x03	; 3
    26f4:	97 e2       	ldi	r25, 0x27	; 39
    26f6:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
		if(rs232radio.meter == 1)
    26fa:	80 91 82 27 	lds	r24, 0x2782
    26fe:	90 91 83 27 	lds	r25, 0x2783
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	e1 f4       	brne	.+56     	; 0x273e <main_screen+0x4ea>
		{
			sprintf(str, "%ldM", rs232radio.band);
    2706:	ee e7       	ldi	r30, 0x7E	; 126
    2708:	f7 e2       	ldi	r31, 0x27	; 39
    270a:	83 81       	ldd	r24, Z+3	; 0x03
    270c:	8f 93       	push	r24
    270e:	82 81       	ldd	r24, Z+2	; 0x02
    2710:	8f 93       	push	r24
    2712:	81 81       	ldd	r24, Z+1	; 0x01
    2714:	8f 93       	push	r24
    2716:	80 81       	ld	r24, Z
    2718:	8f 93       	push	r24
    271a:	83 e2       	ldi	r24, 0x23	; 35
    271c:	91 e2       	ldi	r25, 0x21	; 33
    271e:	9f 93       	push	r25
    2720:	8f 93       	push	r24
    2722:	bf 92       	push	r11
    2724:	af 92       	push	r10
    2726:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
			u8g_DrawStr(&u8g, 40, 22,str );
    272a:	95 01       	movw	r18, r10
    272c:	46 e1       	ldi	r20, 0x16	; 22
    272e:	68 e2       	ldi	r22, 0x28	; 40
    2730:	83 e0       	ldi	r24, 0x03	; 3
    2732:	97 e2       	ldi	r25, 0x27	; 39
    2734:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	1b c0       	rjmp	.+54     	; 0x2774 <main_screen+0x520>

		}else
		{
			sprintf(str, "%ldcM", rs232radio.band);
    273e:	ee e7       	ldi	r30, 0x7E	; 126
    2740:	f7 e2       	ldi	r31, 0x27	; 39
    2742:	83 81       	ldd	r24, Z+3	; 0x03
    2744:	8f 93       	push	r24
    2746:	82 81       	ldd	r24, Z+2	; 0x02
    2748:	8f 93       	push	r24
    274a:	81 81       	ldd	r24, Z+1	; 0x01
    274c:	8f 93       	push	r24
    274e:	80 81       	ld	r24, Z
    2750:	8f 93       	push	r24
    2752:	88 e2       	ldi	r24, 0x28	; 40
    2754:	91 e2       	ldi	r25, 0x21	; 33
    2756:	9f 93       	push	r25
    2758:	8f 93       	push	r24
    275a:	bf 92       	push	r11
    275c:	af 92       	push	r10
    275e:	0e 94 7e 43 	call	0x86fc	; 0x86fc <sprintf>
			u8g_DrawStr(&u8g, 40, 22,str );
    2762:	95 01       	movw	r18, r10
    2764:	46 e1       	ldi	r20, 0x16	; 22
    2766:	68 e2       	ldi	r22, 0x28	; 40
    2768:	83 e0       	ldi	r24, 0x03	; 3
    276a:	97 e2       	ldi	r25, 0x27	; 39
    276c:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
    2770:	cd bf       	out	0x3d, r28	; 61
    2772:	de bf       	out	0x3e, r29	; 62
		}
		u8g_DrawStr(&u8g, 2, 32,"Mode:" );
    2774:	20 e7       	ldi	r18, 0x70	; 112
    2776:	32 e2       	ldi	r19, 0x22	; 34
    2778:	40 e2       	ldi	r20, 0x20	; 32
    277a:	62 e0       	ldi	r22, 0x02	; 2
    277c:	83 e0       	ldi	r24, 0x03	; 3
    277e:	97 e2       	ldi	r25, 0x27	; 39
    2780:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>
	
		u8g_DrawStr(&u8g, 40, 32,rs232radio.mode);
    2784:	20 91 94 27 	lds	r18, 0x2794
    2788:	30 91 95 27 	lds	r19, 0x2795
    278c:	40 e2       	ldi	r20, 0x20	; 32
    278e:	68 e2       	ldi	r22, 0x28	; 40
    2790:	83 e0       	ldi	r24, 0x03	; 3
    2792:	97 e2       	ldi	r25, 0x27	; 39
    2794:	0e 94 3d 2a 	call	0x547a	; 0x547a <u8g_DrawStr>

	
	
	}
	
} while ( u8g_NextPage(&u8g) );	
    2798:	83 e0       	ldi	r24, 0x03	; 3
    279a:	97 e2       	ldi	r25, 0x27	; 39
    279c:	0e 94 86 2c 	call	0x590c	; 0x590c <u8g_NextPage>
    27a0:	81 11       	cpse	r24, r1
    27a2:	0e ce       	rjmp	.-996    	; 0x23c0 <main_screen+0x16c>
	
}
    27a4:	c6 55       	subi	r28, 0x56	; 86
    27a6:	df 4f       	sbci	r29, 0xFF	; 255
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	df 91       	pop	r29
    27ae:	cf 91       	pop	r28
    27b0:	1f 91       	pop	r17
    27b2:	0f 91       	pop	r16
    27b4:	ff 90       	pop	r15
    27b6:	ef 90       	pop	r14
    27b8:	df 90       	pop	r13
    27ba:	cf 90       	pop	r12
    27bc:	bf 90       	pop	r11
    27be:	af 90       	pop	r10
    27c0:	9f 90       	pop	r9
    27c2:	8f 90       	pop	r8
    27c4:	7f 90       	pop	r7
    27c6:	6f 90       	pop	r6
    27c8:	5f 90       	pop	r5
    27ca:	4f 90       	pop	r4
    27cc:	3f 90       	pop	r3
    27ce:	08 95       	ret

000027d0 <Main_task>:
		//printf("fwd %i \n",Rxmsg.data[0]);
	}
	*/
	

	if ( rs232radio.ptt == 1)
    27d0:	80 91 86 27 	lds	r24, 0x2786
    27d4:	90 91 87 27 	lds	r25, 0x2787
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	91 f5       	brne	.+100    	; 0x2840 <Main_task+0x70>
	{
		if (ptt_test ==0)
    27dc:	80 91 82 23 	lds	r24, 0x2382
    27e0:	90 91 83 23 	lds	r25, 0x2383
    27e4:	89 2b       	or	r24, r25
    27e6:	41 f4       	brne	.+16     	; 0x27f8 <Main_task+0x28>
		{
			//set_amp_id(2);
			TX_sequens();
    27e8:	0e 94 b6 24 	call	0x496c	; 0x496c <TX_sequens>
			ptt_test =1;
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	80 93 82 23 	sts	0x2382, r24
    27f4:	90 93 83 23 	sts	0x2383, r25
		}
			
			
		if (Rxmsg->data[1] == 7)
    27f8:	e0 91 66 27 	lds	r30, 0x2766
    27fc:	f0 91 67 27 	lds	r31, 0x2767
    2800:	83 81       	ldd	r24, Z+3	; 0x03
    2802:	87 30       	cpi	r24, 0x07	; 7
    2804:	a1 f4       	brne	.+40     	; 0x282e <Main_task+0x5e>
		{
			amplifier.power_fwd =((Rxmsg->data[2] << 8) | Rxmsg->data[3]);
    2806:	84 81       	ldd	r24, Z+4	; 0x04
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	98 2f       	mov	r25, r24
    280c:	88 27       	eor	r24, r24
    280e:	25 81       	ldd	r18, Z+5	; 0x05
    2810:	82 2b       	or	r24, r18
    2812:	80 93 72 27 	sts	0x2772, r24
    2816:	90 93 73 27 	sts	0x2773, r25
			amplifier.power_rev =((Rxmsg->data[4] << 8) | Rxmsg->data[5]);
    281a:	86 81       	ldd	r24, Z+6	; 0x06
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	98 2f       	mov	r25, r24
    2820:	88 27       	eor	r24, r24
    2822:	27 81       	ldd	r18, Z+7	; 0x07
    2824:	82 2b       	or	r24, r18
    2826:	80 93 74 27 	sts	0x2774, r24
    282a:	90 93 75 27 	sts	0x2775, r25
				
				
		}
			
		amplifier.power_max = 250;
    282e:	8a ef       	ldi	r24, 0xFA	; 250
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	80 93 76 27 	sts	0x2776, r24
    2836:	90 93 77 27 	sts	0x2777, r25
		trasmit_slide();
    283a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <trasmit_slide>
    283e:	08 95       	ret
	}
	else
	{
		if (ptt_test == 1)
    2840:	80 91 82 23 	lds	r24, 0x2382
    2844:	90 91 83 23 	lds	r25, 0x2383
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	31 f4       	brne	.+12     	; 0x2858 <Main_task+0x88>
		{
			RX_sequens();
    284c:	0e 94 87 24 	call	0x490e	; 0x490e <RX_sequens>
			ptt_test =0;
    2850:	10 92 82 23 	sts	0x2382, r1
    2854:	10 92 83 23 	sts	0x2383, r1
				
		}
		
		read_usb_hid();
    2858:	0e 94 6e 32 	call	0x64dc	; 0x64dc <read_usb_hid>
		main_screen();
    285c:	0e 94 2a 11 	call	0x2254	; 0x2254 <main_screen>
    2860:	08 95       	ret

00002862 <__vector_119>:

volatile unsigned char data_rotor_in[20];

int data_count=0;
ISR(USARTF0_RXC_vect)
{
    2862:	1f 92       	push	r1
    2864:	0f 92       	push	r0
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	0f 92       	push	r0
    286a:	11 24       	eor	r1, r1
    286c:	08 b6       	in	r0, 0x38	; 56
    286e:	0f 92       	push	r0
    2870:	18 be       	out	0x38, r1	; 56
    2872:	09 b6       	in	r0, 0x39	; 57
    2874:	0f 92       	push	r0
    2876:	19 be       	out	0x39, r1	; 57
    2878:	0b b6       	in	r0, 0x3b	; 59
    287a:	0f 92       	push	r0
    287c:	1b be       	out	0x3b, r1	; 59
    287e:	2f 93       	push	r18
    2880:	3f 93       	push	r19
    2882:	4f 93       	push	r20
    2884:	5f 93       	push	r21
    2886:	6f 93       	push	r22
    2888:	7f 93       	push	r23
    288a:	8f 93       	push	r24
    288c:	9f 93       	push	r25
    288e:	af 93       	push	r26
    2890:	bf 93       	push	r27
    2892:	ef 93       	push	r30
    2894:	ff 93       	push	r31
    // Get data from the USART in register
		data_rotor_in[data_count] = USARTF0_DATA;
    2896:	80 91 76 23 	lds	r24, 0x2376
    289a:	90 91 77 23 	lds	r25, 0x2377
    289e:	20 91 a0 0b 	lds	r18, 0x0BA0
    28a2:	fc 01       	movw	r30, r24
    28a4:	ee 5a       	subi	r30, 0xAE	; 174
    28a6:	f8 4d       	sbci	r31, 0xD8	; 216
    28a8:	20 83       	st	Z, r18
	
		// End of line!
		if (data_rotor_in[data_count] == '\r') {
    28aa:	20 81       	ld	r18, Z
    28ac:	2d 30       	cpi	r18, 0x0D	; 13
    28ae:	49 f4       	brne	.+18     	; 0x28c2 <__vector_119+0x60>
			data_count = 0;
    28b0:	10 92 76 23 	sts	0x2376, r1
    28b4:	10 92 77 23 	sts	0x2377, r1
			easy_com_angel(data_rotor_in);
    28b8:	82 e5       	ldi	r24, 0x52	; 82
    28ba:	97 e2       	ldi	r25, 0x27	; 39
    28bc:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <easy_com_angel>
    28c0:	05 c0       	rjmp	.+10     	; 0x28cc <__vector_119+0x6a>
			// Reset to 0, ready to go again
        
		} else {
			data_count++;
    28c2:	01 96       	adiw	r24, 0x01	; 1
    28c4:	80 93 76 23 	sts	0x2376, r24
    28c8:	90 93 77 23 	sts	0x2377, r25
		}

}
    28cc:	ff 91       	pop	r31
    28ce:	ef 91       	pop	r30
    28d0:	bf 91       	pop	r27
    28d2:	af 91       	pop	r26
    28d4:	9f 91       	pop	r25
    28d6:	8f 91       	pop	r24
    28d8:	7f 91       	pop	r23
    28da:	6f 91       	pop	r22
    28dc:	5f 91       	pop	r21
    28de:	4f 91       	pop	r20
    28e0:	3f 91       	pop	r19
    28e2:	2f 91       	pop	r18
    28e4:	0f 90       	pop	r0
    28e6:	0b be       	out	0x3b, r0	; 59
    28e8:	0f 90       	pop	r0
    28ea:	09 be       	out	0x39, r0	; 57
    28ec:	0f 90       	pop	r0
    28ee:	08 be       	out	0x38, r0	; 56
    28f0:	0f 90       	pop	r0
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	0f 90       	pop	r0
    28f6:	1f 90       	pop	r1
    28f8:	18 95       	reti

000028fa <__vector_96>:


// interupt rotar encoder
// rotary encoder
ISR(PORTH_INT0_vect)
{
    28fa:	1f 92       	push	r1
    28fc:	0f 92       	push	r0
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	0f 92       	push	r0
    2902:	11 24       	eor	r1, r1
    2904:	08 b6       	in	r0, 0x38	; 56
    2906:	0f 92       	push	r0
    2908:	18 be       	out	0x38, r1	; 56
    290a:	0b b6       	in	r0, 0x3b	; 59
    290c:	0f 92       	push	r0
    290e:	1b be       	out	0x3b, r1	; 59
    2910:	8f 93       	push	r24
    2912:	9f 93       	push	r25
    2914:	ef 93       	push	r30
    2916:	ff 93       	push	r31
 if (!(PORTH.IN & PIN1_bm))
    2918:	e0 ee       	ldi	r30, 0xE0	; 224
    291a:	f6 e0       	ldi	r31, 0x06	; 6
    291c:	80 85       	ldd	r24, Z+8	; 0x08
    291e:	81 fd       	sbrc	r24, 1
    2920:	0a c0       	rjmp	.+20     	; 0x2936 <__vector_96+0x3c>
 {
	  meny_selected--;
    2922:	80 91 7e 23 	lds	r24, 0x237E
    2926:	90 91 7f 23 	lds	r25, 0x237F
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	80 93 7e 23 	sts	0x237E, r24
    2930:	90 93 7f 23 	sts	0x237F, r25
    2934:	09 c0       	rjmp	.+18     	; 0x2948 <__vector_96+0x4e>
 }else
 {
	  meny_selected++;
    2936:	80 91 7e 23 	lds	r24, 0x237E
    293a:	90 91 7f 23 	lds	r25, 0x237F
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	80 93 7e 23 	sts	0x237E, r24
    2944:	90 93 7f 23 	sts	0x237F, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2948:	8f e1       	ldi	r24, 0x1F	; 31
    294a:	93 e0       	ldi	r25, 0x03	; 3
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <__vector_96+0x52>
    2950:	00 c0       	rjmp	.+0      	; 0x2952 <__vector_96+0x58>
    2952:	00 00       	nop
 }
 _delay_us(100);

}
    2954:	ff 91       	pop	r31
    2956:	ef 91       	pop	r30
    2958:	9f 91       	pop	r25
    295a:	8f 91       	pop	r24
    295c:	0f 90       	pop	r0
    295e:	0b be       	out	0x3b, r0	; 59
    2960:	0f 90       	pop	r0
    2962:	08 be       	out	0x38, r0	; 56
    2964:	0f 90       	pop	r0
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	0f 90       	pop	r0
    296a:	1f 90       	pop	r1
    296c:	18 95       	reti

0000296e <__vector_97>:

// rotary encoder
 ISR(PORTH_INT1_vect)
{
    296e:	1f 92       	push	r1
    2970:	0f 92       	push	r0
    2972:	0f b6       	in	r0, 0x3f	; 63
    2974:	0f 92       	push	r0
    2976:	11 24       	eor	r1, r1
    2978:	08 b6       	in	r0, 0x38	; 56
    297a:	0f 92       	push	r0
    297c:	18 be       	out	0x38, r1	; 56

}
    297e:	0f 90       	pop	r0
    2980:	08 be       	out	0x38, r0	; 56
    2982:	0f 90       	pop	r0
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	0f 90       	pop	r0
    2988:	1f 90       	pop	r1
    298a:	18 95       	reti

0000298c <__vector_64>:

ISR(PORTD_INT0_vect)
{
    298c:	1f 92       	push	r1
    298e:	0f 92       	push	r0
    2990:	0f b6       	in	r0, 0x3f	; 63
    2992:	0f 92       	push	r0
    2994:	11 24       	eor	r1, r1
    2996:	08 b6       	in	r0, 0x38	; 56
    2998:	0f 92       	push	r0
    299a:	18 be       	out	0x38, r1	; 56
    299c:	8f 93       	push	r24
    299e:	9f 93       	push	r25
	new_can_message =1;
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	80 93 84 23 	sts	0x2384, r24
    29a8:	90 93 85 23 	sts	0x2385, r25
}
    29ac:	9f 91       	pop	r25
    29ae:	8f 91       	pop	r24
    29b0:	0f 90       	pop	r0
    29b2:	08 be       	out	0x38, r0	; 56
    29b4:	0f 90       	pop	r0
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	0f 90       	pop	r0
    29ba:	1f 90       	pop	r1
    29bc:	18 95       	reti

000029be <__vector_66>:
ISR(PORTA_INT0_vect)
{
    29be:	1f 92       	push	r1
    29c0:	0f 92       	push	r0
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	0f 92       	push	r0
    29c6:	11 24       	eor	r1, r1
    29c8:	08 b6       	in	r0, 0x38	; 56
    29ca:	0f 92       	push	r0
    29cc:	18 be       	out	0x38, r1	; 56
    29ce:	09 b6       	in	r0, 0x39	; 57
    29d0:	0f 92       	push	r0
    29d2:	19 be       	out	0x39, r1	; 57
    29d4:	0b b6       	in	r0, 0x3b	; 59
    29d6:	0f 92       	push	r0
    29d8:	1b be       	out	0x3b, r1	; 59
    29da:	2f 93       	push	r18
    29dc:	3f 93       	push	r19
    29de:	4f 93       	push	r20
    29e0:	5f 93       	push	r21
    29e2:	6f 93       	push	r22
    29e4:	7f 93       	push	r23
    29e6:	8f 93       	push	r24
    29e8:	9f 93       	push	r25
    29ea:	af 93       	push	r26
    29ec:	bf 93       	push	r27
    29ee:	ef 93       	push	r30
    29f0:	ff 93       	push	r31
	if((PORTA.IN & PIN0_bm) ==0 )
    29f2:	e0 e0       	ldi	r30, 0x00	; 0
    29f4:	f6 e0       	ldi	r31, 0x06	; 6
    29f6:	80 85       	ldd	r24, Z+8	; 0x08
    29f8:	80 fd       	sbrc	r24, 0
    29fa:	0b c0       	rjmp	.+22     	; 0x2a12 <__vector_66+0x54>
	{
		radio_inhibit(1);
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	0e 94 a6 24 	call	0x494c	; 0x494c <radio_inhibit>
		rs232radio.ptt =1;
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	80 93 86 27 	sts	0x2786, r24
    2a0c:	90 93 87 27 	sts	0x2787, r25
    2a10:	04 c0       	rjmp	.+8      	; 0x2a1a <__vector_66+0x5c>
	}
	else
		rs232radio.ptt =0;
    2a12:	10 92 86 27 	sts	0x2786, r1
    2a16:	10 92 87 27 	sts	0x2787, r1
	
    2a1a:	ff 91       	pop	r31
    2a1c:	ef 91       	pop	r30
    2a1e:	bf 91       	pop	r27
    2a20:	af 91       	pop	r26
    2a22:	9f 91       	pop	r25
    2a24:	8f 91       	pop	r24
    2a26:	7f 91       	pop	r23
    2a28:	6f 91       	pop	r22
    2a2a:	5f 91       	pop	r21
    2a2c:	4f 91       	pop	r20
    2a2e:	3f 91       	pop	r19
    2a30:	2f 91       	pop	r18
    2a32:	0f 90       	pop	r0
    2a34:	0b be       	out	0x3b, r0	; 59
    2a36:	0f 90       	pop	r0
    2a38:	09 be       	out	0x39, r0	; 57
    2a3a:	0f 90       	pop	r0
    2a3c:	08 be       	out	0x38, r0	; 56
    2a3e:	0f 90       	pop	r0
    2a40:	0f be       	out	0x3f, r0	; 63
    2a42:	0f 90       	pop	r0
    2a44:	1f 90       	pop	r1
    2a46:	18 95       	reti

00002a48 <SPI_init>:


		
void SPI_init()
{
	PORTD.DIRSET = 0xB0;  // configure MOSI, SS, CLK as outputs on PORTE
    2a48:	e0 e6       	ldi	r30, 0x60	; 96
    2a4a:	f6 e0       	ldi	r31, 0x06	; 6
    2a4c:	80 eb       	ldi	r24, 0xB0	; 176
    2a4e:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET =PIN4_bm;
    2a50:	80 e1       	ldi	r24, 0x10	; 16
    2a52:	85 83       	std	Z+5, r24	; 0x05
	// enable SPI master mode, CLK/64 (@32MHz=>500KHz)
	SPID.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV64_gc;
    2a54:	82 e5       	ldi	r24, 0x52	; 82
    2a56:	80 93 c0 09 	sts	0x09C0, r24
    2a5a:	08 95       	ret

00002a5c <SPI_write>:



void SPI_write(char cData)
{
	SPID.DATA = cData;
    2a5c:	e0 ec       	ldi	r30, 0xC0	; 192
    2a5e:	f9 e0       	ldi	r31, 0x09	; 9
    2a60:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPID.STATUS & (1<<7)));
    2a62:	82 81       	ldd	r24, Z+2	; 0x02
    2a64:	88 23       	and	r24, r24
    2a66:	ec f7       	brge	.-6      	; 0x2a62 <SPI_write+0x6>
    2a68:	8a e6       	ldi	r24, 0x6A	; 106
    2a6a:	8a 95       	dec	r24
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <SPI_write+0xe>
    2a6e:	00 c0       	rjmp	.+0      	; 0x2a70 <SPI_write+0x14>
    2a70:	08 95       	ret

00002a72 <SPI_read>:
}


unsigned char SPI_read()	//Remember that to read something from the slave, the master must transmit a dummy
{
	SPI_write(0xff);
    2a72:	8f ef       	ldi	r24, 0xFF	; 255
    2a74:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SPI_write>
	return SPID.DATA;
    2a78:	e0 ec       	ldi	r30, 0xC0	; 192
    2a7a:	f9 e0       	ldi	r31, 0x09	; 9
    2a7c:	83 81       	ldd	r24, Z+3	; 0x03
}
    2a7e:	08 95       	ret

00002a80 <initScheduler>:

// scheduler function definitions

// initialises the task list
void initScheduler(void)
{
    2a80:	e8 e9       	ldi	r30, 0x98	; 152
    2a82:	f7 e2       	ldi	r31, 0x27	; 39
    2a84:	af e9       	ldi	r26, 0x9F	; 159
    2a86:	b7 e2       	ldi	r27, 0x27	; 39
    2a88:	88 ee       	ldi	r24, 0xE8	; 232
    2a8a:	97 e2       	ldi	r25, 0x27	; 39
	{
		task_list[i].id = 0;
		task_list[i].task = (task_t)0x00;
		task_list[i].delay = 0;
		task_list[i].period = 0;
		task_list[i].status = STOPPED;
    2a8c:	22 e0       	ldi	r18, 0x02	; 2
// initialises the task list
void initScheduler(void)
{
	for(int i=0; i<MAX_TASKS; i++)
	{
		task_list[i].id = 0;
    2a8e:	10 82       	st	Z, r1
		task_list[i].task = (task_t)0x00;
    2a90:	11 82       	std	Z+1, r1	; 0x01
    2a92:	12 82       	std	Z+2, r1	; 0x02
		task_list[i].delay = 0;
    2a94:	13 82       	std	Z+3, r1	; 0x03
    2a96:	14 82       	std	Z+4, r1	; 0x04
		task_list[i].period = 0;
    2a98:	15 82       	std	Z+5, r1	; 0x05
    2a9a:	16 82       	std	Z+6, r1	; 0x06
		task_list[i].status = STOPPED;
    2a9c:	2c 93       	st	X, r18
    2a9e:	38 96       	adiw	r30, 0x08	; 8
    2aa0:	18 96       	adiw	r26, 0x08	; 8
// scheduler function definitions

// initialises the task list
void initScheduler(void)
{
	for(int i=0; i<MAX_TASKS; i++)
    2aa2:	e8 17       	cp	r30, r24
    2aa4:	f9 07       	cpc	r31, r25
    2aa6:	99 f7       	brne	.-26     	; 0x2a8e <initScheduler+0xe>
		task_list[i].task = (task_t)0x00;
		task_list[i].delay = 0;
		task_list[i].period = 0;
		task_list[i].status = STOPPED;
	}
}
    2aa8:	08 95       	ret

00002aaa <addTask>:
// adds a new task to the task list
// scans through the list and
// places the new task data where
// it finds free space
void addTask(uint8_t id, task_t task, uint16_t period)
{
    2aaa:	ef e9       	ldi	r30, 0x9F	; 159
    2aac:	f7 e2       	ldi	r31, 0x27	; 39
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t idx = 0, done = 0x00;
	while( idx < MAX_TASKS )
	{
		if( task_list[idx].status == STOPPED )
    2ab2:	90 81       	ld	r25, Z
    2ab4:	92 30       	cpi	r25, 0x02	; 2
    2ab6:	91 f4       	brne	.+36     	; 0x2adc <addTask+0x32>
		{
			task_list[idx].id = id;
    2ab8:	f9 01       	movw	r30, r18
    2aba:	ee 0f       	add	r30, r30
    2abc:	ff 1f       	adc	r31, r31
    2abe:	ee 0f       	add	r30, r30
    2ac0:	ff 1f       	adc	r31, r31
    2ac2:	ee 0f       	add	r30, r30
    2ac4:	ff 1f       	adc	r31, r31
    2ac6:	e8 56       	subi	r30, 0x68	; 104
    2ac8:	f8 4d       	sbci	r31, 0xD8	; 216
    2aca:	80 83       	st	Z, r24
			task_list[idx].task = task;
    2acc:	61 83       	std	Z+1, r22	; 0x01
    2ace:	72 83       	std	Z+2, r23	; 0x02
			task_list[idx].delay = period;
    2ad0:	43 83       	std	Z+3, r20	; 0x03
    2ad2:	54 83       	std	Z+4, r21	; 0x04
			task_list[idx].period = period;
    2ad4:	45 83       	std	Z+5, r20	; 0x05
    2ad6:	56 83       	std	Z+6, r21	; 0x06
			task_list[idx].status = RUNNABLE;
    2ad8:	17 82       	std	Z+7, r1	; 0x07
    2ada:	08 95       	ret
    2adc:	2f 5f       	subi	r18, 0xFF	; 255
    2ade:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae0:	38 96       	adiw	r30, 0x08	; 8
// places the new task data where
// it finds free space
void addTask(uint8_t id, task_t task, uint16_t period)
{
	uint8_t idx = 0, done = 0x00;
	while( idx < MAX_TASKS )
    2ae2:	2a 30       	cpi	r18, 0x0A	; 10
    2ae4:	31 05       	cpc	r19, r1
    2ae6:	29 f7       	brne	.-54     	; 0x2ab2 <addTask+0x8>
    2ae8:	08 95       	ret

00002aea <dispatchTasks>:
	return ERROR;
}

// dispatches tasks when they are ready to run
void dispatchTasks(void)
{
    2aea:	bf 92       	push	r11
    2aec:	cf 92       	push	r12
    2aee:	df 92       	push	r13
    2af0:	ef 92       	push	r14
    2af2:	ff 92       	push	r15
    2af4:	0f 93       	push	r16
    2af6:	1f 93       	push	r17
    2af8:	cf 93       	push	r28
    2afa:	df 93       	push	r29
    2afc:	0f e9       	ldi	r16, 0x9F	; 159
    2afe:	17 e2       	ldi	r17, 0x27	; 39
    2b00:	c9 e9       	ldi	r28, 0x99	; 153
    2b02:	d7 e2       	ldi	r29, 0x27	; 39
    2b04:	0f 2e       	mov	r0, r31
    2b06:	ff ee       	ldi	r31, 0xEF	; 239
    2b08:	cf 2e       	mov	r12, r31
    2b0a:	f7 e2       	ldi	r31, 0x27	; 39
    2b0c:	df 2e       	mov	r13, r31
    2b0e:	f0 2d       	mov	r31, r0
		// check for a valid task ready to run
		if( !task_list[i].delay && task_list[i].status == RUNNABLE )
		{
			
			// task is now running
			task_list[i].status = RUNNING;
    2b10:	bb 24       	eor	r11, r11
    2b12:	b3 94       	inc	r11
{
	for(uint8_t i=0;i<MAX_TASKS;i++)
	{
		
		// check for a valid task ready to run
		if( !task_list[i].delay && task_list[i].status == RUNNABLE )
    2b14:	8a 81       	ldd	r24, Y+2	; 0x02
    2b16:	9b 81       	ldd	r25, Y+3	; 0x03
    2b18:	89 2b       	or	r24, r25
    2b1a:	71 f4       	brne	.+28     	; 0x2b38 <dispatchTasks+0x4e>
    2b1c:	d8 01       	movw	r26, r16
    2b1e:	8c 91       	ld	r24, X
    2b20:	81 11       	cpse	r24, r1
    2b22:	0a c0       	rjmp	.+20     	; 0x2b38 <dispatchTasks+0x4e>
		{
			
			// task is now running
			task_list[i].status = RUNNING;
    2b24:	bc 92       	st	X, r11
			// call the task
			(*task_list[i].task)();
    2b26:	e8 81       	ld	r30, Y
    2b28:	f9 81       	ldd	r31, Y+1	; 0x01
    2b2a:	09 95       	icall
			

			// reset the delay
			task_list[i].delay =
    2b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b30:	8a 83       	std	Y+2, r24	; 0x02
    2b32:	9b 83       	std	Y+3, r25	; 0x03
			task_list[i].period;
			// task is runnable again
			task_list[i].status = RUNNABLE;
    2b34:	f8 01       	movw	r30, r16
    2b36:	10 82       	st	Z, r1
    2b38:	08 5f       	subi	r16, 0xF8	; 248
    2b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3c:	28 96       	adiw	r28, 0x08	; 8
}

// dispatches tasks when they are ready to run
void dispatchTasks(void)
{
	for(uint8_t i=0;i<MAX_TASKS;i++)
    2b3e:	0c 15       	cp	r16, r12
    2b40:	1d 05       	cpc	r17, r13
    2b42:	41 f7       	brne	.-48     	; 0x2b14 <dispatchTasks+0x2a>
			task_list[i].period;
			// task is runnable again
			task_list[i].status = RUNNABLE;
		}		
	}
}
    2b44:	df 91       	pop	r29
    2b46:	cf 91       	pop	r28
    2b48:	1f 91       	pop	r17
    2b4a:	0f 91       	pop	r16
    2b4c:	ff 90       	pop	r15
    2b4e:	ef 90       	pop	r14
    2b50:	df 90       	pop	r13
    2b52:	cf 90       	pop	r12
    2b54:	bf 90       	pop	r11
    2b56:	08 95       	ret

00002b58 <__vector_20>:

// generates a "tick"
// each tick 50ms apart
ISR(TCC1_OVF_vect)
{
    2b58:	1f 92       	push	r1
    2b5a:	0f 92       	push	r0
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	0f 92       	push	r0
    2b60:	11 24       	eor	r1, r1
    2b62:	08 b6       	in	r0, 0x38	; 56
    2b64:	0f 92       	push	r0
    2b66:	18 be       	out	0x38, r1	; 56
    2b68:	09 b6       	in	r0, 0x39	; 57
    2b6a:	0f 92       	push	r0
    2b6c:	19 be       	out	0x39, r1	; 57
    2b6e:	0b b6       	in	r0, 0x3b	; 59
    2b70:	0f 92       	push	r0
    2b72:	1b be       	out	0x3b, r1	; 59
    2b74:	2f 93       	push	r18
    2b76:	3f 93       	push	r19
    2b78:	8f 93       	push	r24
    2b7a:	9f 93       	push	r25
    2b7c:	af 93       	push	r26
    2b7e:	bf 93       	push	r27
    2b80:	ef 93       	push	r30
    2b82:	ff 93       	push	r31
    2b84:	af e9       	ldi	r26, 0x9F	; 159
    2b86:	b7 e2       	ldi	r27, 0x27	; 39
    2b88:	eb e9       	ldi	r30, 0x9B	; 155
    2b8a:	f7 e2       	ldi	r31, 0x27	; 39
    2b8c:	2b ee       	ldi	r18, 0xEB	; 235
    2b8e:	37 e2       	ldi	r19, 0x27	; 39
	// cycle through available tasks
	for(int i=0;i<MAX_TASKS;i++)
	{
		if( task_list[i].status == RUNNABLE)
    2b90:	8c 91       	ld	r24, X
    2b92:	81 11       	cpse	r24, r1
    2b94:	07 c0       	rjmp	.+14     	; 0x2ba4 <__vector_20+0x4c>
		{
			

			if (task_list[i].delay >0)
    2b96:	80 81       	ld	r24, Z
    2b98:	91 81       	ldd	r25, Z+1	; 0x01
    2b9a:	00 97       	sbiw	r24, 0x00	; 0
    2b9c:	19 f0       	breq	.+6      	; 0x2ba4 <__vector_20+0x4c>
			{
				task_list[i].delay--;
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	80 83       	st	Z, r24
    2ba2:	91 83       	std	Z+1, r25	; 0x01
    2ba4:	18 96       	adiw	r26, 0x08	; 8
    2ba6:	38 96       	adiw	r30, 0x08	; 8
// generates a "tick"
// each tick 50ms apart
ISR(TCC1_OVF_vect)
{
	// cycle through available tasks
	for(int i=0;i<MAX_TASKS;i++)
    2ba8:	e2 17       	cp	r30, r18
    2baa:	f3 07       	cpc	r31, r19
    2bac:	89 f7       	brne	.-30     	; 0x2b90 <__vector_20+0x38>
			
		}
			
	}

}
    2bae:	ff 91       	pop	r31
    2bb0:	ef 91       	pop	r30
    2bb2:	bf 91       	pop	r27
    2bb4:	af 91       	pop	r26
    2bb6:	9f 91       	pop	r25
    2bb8:	8f 91       	pop	r24
    2bba:	3f 91       	pop	r19
    2bbc:	2f 91       	pop	r18
    2bbe:	0f 90       	pop	r0
    2bc0:	0b be       	out	0x3b, r0	; 59
    2bc2:	0f 90       	pop	r0
    2bc4:	09 be       	out	0x39, r0	; 57
    2bc6:	0f 90       	pop	r0
    2bc8:	08 be       	out	0x38, r0	; 56
    2bca:	0f 90       	pop	r0
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	0f 90       	pop	r0
    2bd0:	1f 90       	pop	r1
    2bd2:	18 95       	reti

00002bd4 <scedular_setup>:
	printf("task2\n");
}

void scedular_setup()
{
		TCC1.CNT = 0;// Zeroise count
    2bd4:	e0 e4       	ldi	r30, 0x40	; 64
    2bd6:	f8 e0       	ldi	r31, 0x08	; 8
    2bd8:	10 a2       	std	Z+32, r1	; 0x20
    2bda:	11 a2       	std	Z+33, r1	; 0x21
		TCC1.PER = 1562; //Period
    2bdc:	8a e1       	ldi	r24, 0x1A	; 26
    2bde:	96 e0       	ldi	r25, 0x06	; 6
    2be0:	86 a3       	std	Z+38, r24	; 0x26
    2be2:	97 a3       	std	Z+39, r25	; 0x27
		//TCC1.PER = 4; //Period
		TCC1.CTRLA = TC_CLKSEL_DIV1024_gc; //Divider
    2be4:	87 e0       	ldi	r24, 0x07	; 7
    2be6:	80 83       	st	Z, r24
		TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc; //Liow level interrupt
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	86 83       	std	Z+6, r24	; 0x06
		TCC1.INTFLAGS = 0x01; // clear any initial interrupt flags
    2bec:	84 87       	std	Z+12, r24	; 0x0c
		TCC1.CTRLB = TC_WGMODE_NORMAL_gc; // Normal operation
    2bee:	11 82       	std	Z+1, r1	; 0x01
		// set up the task list		
		initScheduler();
    2bf0:	0e 94 40 15 	call	0x2a80	; 0x2a80 <initScheduler>
		sei();
    2bf4:	78 94       	sei
    2bf6:	08 95       	ret

00002bf8 <fat_get_next_cluster>:
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    2bf8:	8f 92       	push	r8
    2bfa:	9f 92       	push	r9
    2bfc:	af 92       	push	r10
    2bfe:	bf 92       	push	r11
    2c00:	cf 92       	push	r12
    2c02:	df 92       	push	r13
    2c04:	ef 92       	push	r14
    2c06:	ff 92       	push	r15
    2c08:	0f 93       	push	r16
    2c0a:	1f 93       	push	r17
    2c0c:	cf 93       	push	r28
    2c0e:	df 93       	push	r29
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <fat_get_next_cluster+0x1a>
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <fat_get_next_cluster+0x1c>
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	fc 01       	movw	r30, r24
    if(!fs || cluster_num < 2)
    2c1a:	00 97       	sbiw	r24, 0x00	; 0
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <fat_get_next_cluster+0x28>
    2c1e:	84 c0       	rjmp	.+264    	; 0x2d28 <fat_get_next_cluster+0x130>
    2c20:	42 30       	cpi	r20, 0x02	; 2
    2c22:	51 05       	cpc	r21, r1
    2c24:	61 05       	cpc	r22, r1
    2c26:	71 05       	cpc	r23, r1
    2c28:	08 f4       	brcc	.+2      	; 0x2c2c <fat_get_next_cluster+0x34>
    2c2a:	83 c0       	rjmp	.+262    	; 0x2d32 <fat_get_next_cluster+0x13a>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    2c2c:	a0 81       	ld	r26, Z
    2c2e:	b1 81       	ldd	r27, Z+1	; 0x01
    2c30:	18 96       	adiw	r26, 0x08	; 8
    2c32:	8c 91       	ld	r24, X
    2c34:	18 97       	sbiw	r26, 0x08	; 8
    2c36:	8b 30       	cpi	r24, 0x0B	; 11
    2c38:	09 f0       	breq	.+2      	; 0x2c3c <fat_get_next_cluster+0x44>
    2c3a:	40 c0       	rjmp	.+128    	; 0x2cbc <fat_get_next_cluster+0xc4>
    {
        /* read appropriate fat entry */
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    2c3c:	4a 01       	movw	r8, r20
    2c3e:	5b 01       	movw	r10, r22
    2c40:	24 2f       	mov	r18, r20
    2c42:	39 2d       	mov	r19, r9
    2c44:	4a 2d       	mov	r20, r10
    2c46:	5b 2d       	mov	r21, r11
    2c48:	60 e0       	ldi	r22, 0x00	; 0
    2c4a:	70 e0       	ldi	r23, 0x00	; 0
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	02 e0       	ldi	r16, 0x02	; 2
    2c52:	0e 94 6f 40 	call	0x80de	; 0x80de <__ashldi3>
    2c56:	a2 84       	ldd	r10, Z+10	; 0x0a
    2c58:	b3 84       	ldd	r11, Z+11	; 0x0b
    2c5a:	c4 84       	ldd	r12, Z+12	; 0x0c
    2c5c:	d5 84       	ldd	r13, Z+13	; 0x0d
    2c5e:	e6 84       	ldd	r14, Z+14	; 0x0e
    2c60:	f7 84       	ldd	r15, Z+15	; 0x0f
    2c62:	00 89       	ldd	r16, Z+16	; 0x10
    2c64:	11 89       	ldd	r17, Z+17	; 0x11
    2c66:	0e 94 a6 40 	call	0x814c	; 0x814c <__adddi3>
    2c6a:	ed 91       	ld	r30, X+
    2c6c:	fc 91       	ld	r31, X
    2c6e:	68 94       	set
    2c70:	ee 24       	eor	r14, r14
    2c72:	e2 f8       	bld	r14, 2
    2c74:	f1 2c       	mov	r15, r1
    2c76:	8e 01       	movw	r16, r28
    2c78:	0f 5f       	subi	r16, 0xFF	; 255
    2c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7c:	09 95       	icall
    2c7e:	88 23       	and	r24, r24
    2c80:	c1 f0       	breq	.+48     	; 0x2cb2 <fat_get_next_cluster+0xba>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
    2c82:	49 81       	ldd	r20, Y+1	; 0x01
    2c84:	5a 81       	ldd	r21, Y+2	; 0x02
    2c86:	6b 81       	ldd	r22, Y+3	; 0x03
    2c88:	7c 81       	ldd	r23, Y+4	; 0x04
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
    2c8a:	41 15       	cp	r20, r1
    2c8c:	51 05       	cpc	r21, r1
    2c8e:	61 05       	cpc	r22, r1
    2c90:	71 05       	cpc	r23, r1
    2c92:	79 f0       	breq	.+30     	; 0x2cb2 <fat_get_next_cluster+0xba>
           cluster_num == FAT32_CLUSTER_BAD ||
    2c94:	db 01       	movw	r26, r22
    2c96:	ca 01       	movw	r24, r20
    2c98:	80 5f       	subi	r24, 0xF0	; 240
    2c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c9c:	af 4f       	sbci	r26, 0xFF	; 255
    2c9e:	bf 40       	sbci	r27, 0x0F	; 15
    2ca0:	40 97       	sbiw	r24, 0x10	; 16
    2ca2:	a1 05       	cpc	r26, r1
    2ca4:	b1 05       	cpc	r27, r1
    2ca6:	28 f0       	brcs	.+10     	; 0x2cb2 <fat_get_next_cluster+0xba>
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
    2ca8:	34 2f       	mov	r19, r20
    2caa:	25 2f       	mov	r18, r21
    2cac:	86 2f       	mov	r24, r22
    2cae:	97 2f       	mov	r25, r23
    2cb0:	44 c0       	rjmp	.+136    	; 0x2d3a <fat_get_next_cluster+0x142>
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        /* read appropriate fat entry */
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
            return 0;
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	3f c0       	rjmp	.+126    	; 0x2d3a <fat_get_next_cluster+0x142>
    else
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    2cbc:	4a 01       	movw	r8, r20
    2cbe:	5b 01       	movw	r10, r22
    2cc0:	24 2f       	mov	r18, r20
    2cc2:	39 2d       	mov	r19, r9
    2cc4:	4a 2d       	mov	r20, r10
    2cc6:	5b 2d       	mov	r21, r11
    2cc8:	60 e0       	ldi	r22, 0x00	; 0
    2cca:	70 e0       	ldi	r23, 0x00	; 0
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	01 e0       	ldi	r16, 0x01	; 1
    2cd2:	0e 94 6f 40 	call	0x80de	; 0x80de <__ashldi3>
    2cd6:	a2 84       	ldd	r10, Z+10	; 0x0a
    2cd8:	b3 84       	ldd	r11, Z+11	; 0x0b
    2cda:	c4 84       	ldd	r12, Z+12	; 0x0c
    2cdc:	d5 84       	ldd	r13, Z+13	; 0x0d
    2cde:	e6 84       	ldd	r14, Z+14	; 0x0e
    2ce0:	f7 84       	ldd	r15, Z+15	; 0x0f
    2ce2:	00 89       	ldd	r16, Z+16	; 0x10
    2ce4:	11 89       	ldd	r17, Z+17	; 0x11
    2ce6:	0e 94 a6 40 	call	0x814c	; 0x814c <__adddi3>
    2cea:	ed 91       	ld	r30, X+
    2cec:	fc 91       	ld	r31, X
    2cee:	68 94       	set
    2cf0:	ee 24       	eor	r14, r14
    2cf2:	e1 f8       	bld	r14, 1
    2cf4:	f1 2c       	mov	r15, r1
    2cf6:	8e 01       	movw	r16, r28
    2cf8:	0f 5f       	subi	r16, 0xFF	; 255
    2cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfc:	09 95       	icall
    2cfe:	88 23       	and	r24, r24
    2d00:	71 f0       	breq	.+28     	; 0x2d1e <fat_get_next_cluster+0x126>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	9a 81       	ldd	r25, Y+2	; 0x02
    2d06:	ac 01       	movw	r20, r24
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	70 e0       	ldi	r23, 0x00	; 0
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	8f 3e       	cpi	r24, 0xEF	; 239
    2d10:	9f 4f       	sbci	r25, 0xFF	; 255
    2d12:	28 f4       	brcc	.+10     	; 0x2d1e <fat_get_next_cluster+0x126>
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
    2d14:	34 2f       	mov	r19, r20
    2d16:	25 2f       	mov	r18, r21
    2d18:	86 2f       	mov	r24, r22
    2d1a:	97 2f       	mov	r25, r23
    2d1c:	0e c0       	rjmp	.+28     	; 0x2d3a <fat_get_next_cluster+0x142>
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
            return 0;
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	09 c0       	rjmp	.+18     	; 0x2d3a <fat_get_next_cluster+0x142>
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	04 c0       	rjmp	.+8      	; 0x2d3a <fat_get_next_cluster+0x142>
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    }

    return cluster_num;
}
    2d3a:	63 2f       	mov	r22, r19
    2d3c:	72 2f       	mov	r23, r18
    2d3e:	24 96       	adiw	r28, 0x04	; 4
    2d40:	cd bf       	out	0x3d, r28	; 61
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	df 91       	pop	r29
    2d46:	cf 91       	pop	r28
    2d48:	1f 91       	pop	r17
    2d4a:	0f 91       	pop	r16
    2d4c:	ff 90       	pop	r15
    2d4e:	ef 90       	pop	r14
    2d50:	df 90       	pop	r13
    2d52:	cf 90       	pop	r12
    2d54:	bf 90       	pop	r11
    2d56:	af 90       	pop	r10
    2d58:	9f 90       	pop	r9
    2d5a:	8f 90       	pop	r8
    2d5c:	08 95       	ret

00002d5e <fat_cluster_offset>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    2d5e:	2f 92       	push	r2
    2d60:	3f 92       	push	r3
    2d62:	4f 92       	push	r4
    2d64:	5f 92       	push	r5
    2d66:	6f 92       	push	r6
    2d68:	7f 92       	push	r7
    2d6a:	8f 92       	push	r8
    2d6c:	9f 92       	push	r9
    2d6e:	af 92       	push	r10
    2d70:	bf 92       	push	r11
    2d72:	cf 92       	push	r12
    2d74:	df 92       	push	r13
    2d76:	ef 92       	push	r14
    2d78:	ff 92       	push	r15
    2d7a:	0f 93       	push	r16
    2d7c:	1f 93       	push	r17
    2d7e:	cf 93       	push	r28
    2d80:	df 93       	push	r29
    2d82:	ec 01       	movw	r28, r24
    if(!fs || cluster_num < 2)
    2d84:	00 97       	sbiw	r24, 0x00	; 0
    2d86:	51 f1       	breq	.+84     	; 0x2ddc <fat_cluster_offset+0x7e>
    2d88:	42 30       	cpi	r20, 0x02	; 2
    2d8a:	51 05       	cpc	r21, r1
    2d8c:	61 05       	cpc	r22, r1
    2d8e:	71 05       	cpc	r23, r1
    2d90:	70 f1       	brcs	.+92     	; 0x2dee <fat_cluster_offset+0x90>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    2d92:	42 50       	subi	r20, 0x02	; 2
    2d94:	51 09       	sbc	r21, r1
    2d96:	61 09       	sbc	r22, r1
    2d98:	71 09       	sbc	r23, r1
    2d9a:	1a 01       	movw	r2, r20
    2d9c:	2b 01       	movw	r4, r22
    2d9e:	08 8d       	ldd	r16, Y+24	; 0x18
    2da0:	19 8d       	ldd	r17, Y+25	; 0x19
    2da2:	a0 2e       	mov	r10, r16
    2da4:	b1 2e       	mov	r11, r17
    2da6:	c1 2c       	mov	r12, r1
    2da8:	d1 2c       	mov	r13, r1
    2daa:	e1 2c       	mov	r14, r1
    2dac:	f1 2c       	mov	r15, r1
    2dae:	00 e0       	ldi	r16, 0x00	; 0
    2db0:	10 e0       	ldi	r17, 0x00	; 0
    2db2:	22 2d       	mov	r18, r2
    2db4:	33 2d       	mov	r19, r3
    2db6:	44 2d       	mov	r20, r4
    2db8:	55 2d       	mov	r21, r5
    2dba:	60 e0       	ldi	r22, 0x00	; 0
    2dbc:	70 e0       	ldi	r23, 0x00	; 0
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	0e 94 16 40 	call	0x802c	; 0x802c <__muldi3>
    2dc6:	aa 8c       	ldd	r10, Y+26	; 0x1a
    2dc8:	bb 8c       	ldd	r11, Y+27	; 0x1b
    2dca:	cc 8c       	ldd	r12, Y+28	; 0x1c
    2dcc:	dd 8c       	ldd	r13, Y+29	; 0x1d
    2dce:	ee 8c       	ldd	r14, Y+30	; 0x1e
    2dd0:	ff 8c       	ldd	r15, Y+31	; 0x1f
    2dd2:	08 a1       	ldd	r16, Y+32	; 0x20
    2dd4:	19 a1       	ldd	r17, Y+33	; 0x21
    2dd6:	0e 94 a6 40 	call	0x814c	; 0x814c <__adddi3>
    2dda:	11 c0       	rjmp	.+34     	; 0x2dfe <fat_cluster_offset+0xa0>
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e0       	ldi	r20, 0x00	; 0
    2de2:	50 e0       	ldi	r21, 0x00	; 0
    2de4:	60 e0       	ldi	r22, 0x00	; 0
    2de6:	70 e0       	ldi	r23, 0x00	; 0
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	08 c0       	rjmp	.+16     	; 0x2dfe <fat_cluster_offset+0xa0>
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e0       	ldi	r20, 0x00	; 0
    2df4:	50 e0       	ldi	r21, 0x00	; 0
    2df6:	60 e0       	ldi	r22, 0x00	; 0
    2df8:	70 e0       	ldi	r23, 0x00	; 0
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	90 e0       	ldi	r25, 0x00	; 0

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
}
    2dfe:	df 91       	pop	r29
    2e00:	cf 91       	pop	r28
    2e02:	1f 91       	pop	r17
    2e04:	0f 91       	pop	r16
    2e06:	ff 90       	pop	r15
    2e08:	ef 90       	pop	r14
    2e0a:	df 90       	pop	r13
    2e0c:	cf 90       	pop	r12
    2e0e:	bf 90       	pop	r11
    2e10:	af 90       	pop	r10
    2e12:	9f 90       	pop	r9
    2e14:	8f 90       	pop	r8
    2e16:	7f 90       	pop	r7
    2e18:	6f 90       	pop	r6
    2e1a:	5f 90       	pop	r5
    2e1c:	4f 90       	pop	r4
    2e1e:	3f 90       	pop	r3
    2e20:	2f 90       	pop	r2
    2e22:	08 95       	ret

00002e24 <fat_calc_83_checksum>:
 * \param[in] file_name_83 The 11-byte file name buffer.
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    2e24:	fc 01       	movw	r30, r24
    2e26:	81 91       	ld	r24, Z+
    2e28:	9a e0       	ldi	r25, 0x0A	; 10
    for(uint8_t i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
    2e2a:	80 fb       	bst	r24, 0
    2e2c:	87 95       	ror	r24
    2e2e:	87 f9       	bld	r24, 7
    2e30:	21 91       	ld	r18, Z+
    2e32:	82 0f       	add	r24, r18
    2e34:	91 50       	subi	r25, 0x01	; 1
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
    2e36:	c9 f7       	brne	.-14     	; 0x2e2a <fat_calc_83_checksum+0x6>
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];

    return checksum;
}
    2e38:	08 95       	ret

00002e3a <fat_dir_entry_read_callback>:
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
    2e3a:	2f 92       	push	r2
    2e3c:	3f 92       	push	r3
    2e3e:	4f 92       	push	r4
    2e40:	5f 92       	push	r5
    2e42:	6f 92       	push	r6
    2e44:	7f 92       	push	r7
    2e46:	8f 92       	push	r8
    2e48:	9f 92       	push	r9
    2e4a:	af 92       	push	r10
    2e4c:	bf 92       	push	r11
    2e4e:	cf 92       	push	r12
    2e50:	df 92       	push	r13
    2e52:	ef 92       	push	r14
    2e54:	ff 92       	push	r15
    2e56:	0f 93       	push	r16
    2e58:	1f 93       	push	r17
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    2e5e:	cd b7       	in	r28, 0x3d	; 61
    2e60:	de b7       	in	r29, 0x3e	; 62
    2e62:	2d 97       	sbiw	r28, 0x0d	; 13
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	de bf       	out	0x3e, r29	; 62
    2e68:	6c 01       	movw	r12, r24
    2e6a:	42 2e       	mov	r4, r18
    2e6c:	53 2e       	mov	r5, r19
    2e6e:	64 2e       	mov	r6, r20
    2e70:	75 2e       	mov	r7, r21
    2e72:	36 2e       	mov	r3, r22
    2e74:	27 2e       	mov	r2, r23
    struct fat_read_dir_callback_arg* arg = p;
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
    2e76:	d7 01       	movw	r26, r14
    2e78:	ad 90       	ld	r10, X+
    2e7a:	bc 90       	ld	r11, X
    2e7c:	11 97       	sbiw	r26, 0x01	; 1

    arg->bytes_read += 32;
    2e7e:	12 96       	adiw	r26, 0x02	; 2
    2e80:	8d 91       	ld	r24, X+
    2e82:	9c 91       	ld	r25, X
    2e84:	13 97       	sbiw	r26, 0x03	; 3
    2e86:	80 96       	adiw	r24, 0x20	; 32
    2e88:	12 96       	adiw	r26, 0x02	; 2
    2e8a:	8d 93       	st	X+, r24
    2e8c:	9c 93       	st	X, r25
    2e8e:	13 97       	sbiw	r26, 0x03	; 3

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    2e90:	f6 01       	movw	r30, r12
    2e92:	80 81       	ld	r24, Z
    2e94:	85 3e       	cpi	r24, 0xE5	; 229
    2e96:	11 f0       	breq	.+4      	; 0x2e9c <fat_dir_entry_read_callback+0x62>
    2e98:	81 11       	cpse	r24, r1
    2e9a:	05 c0       	rjmp	.+10     	; 0x2ea6 <fat_dir_entry_read_callback+0x6c>
    {
#if FAT_LFN_SUPPORT
        arg->checksum = 0;
    2e9c:	d7 01       	movw	r26, r14
    2e9e:	14 96       	adiw	r26, 0x04	; 4
    2ea0:	1c 92       	st	X, r1
#endif
        return 1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	34 c1       	rjmp	.+616    	; 0x310e <__stack+0x10f>
    /* skip lfn entries */
    if(buffer[11] == 0x0f)
        return 1;
#endif

    char* long_name = dir_entry->long_name;
    2ea6:	45 01       	movw	r8, r10
#if FAT_LFN_SUPPORT
    if(buffer[11] == 0x0f)
    2ea8:	f6 01       	movw	r30, r12
    2eaa:	83 85       	ldd	r24, Z+11	; 0x0b
    2eac:	8f 30       	cpi	r24, 0x0F	; 15
    2eae:	09 f0       	breq	.+2      	; 0x2eb2 <fat_dir_entry_read_callback+0x78>
    2eb0:	55 c0       	rjmp	.+170    	; 0x2f5c <fat_dir_entry_read_callback+0x122>
    {
        /* checksum validation */
        if(arg->checksum == 0 || arg->checksum != buffer[13])
    2eb2:	d7 01       	movw	r26, r14
    2eb4:	14 96       	adiw	r26, 0x04	; 4
    2eb6:	8c 91       	ld	r24, X
    2eb8:	88 23       	and	r24, r24
    2eba:	19 f0       	breq	.+6      	; 0x2ec2 <fat_dir_entry_read_callback+0x88>
    2ebc:	95 85       	ldd	r25, Z+13	; 0x0d
    2ebe:	89 17       	cp	r24, r25
    2ec0:	11 f1       	breq	.+68     	; 0x2f06 <fat_dir_entry_read_callback+0xcc>
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
    2ec2:	81 e3       	ldi	r24, 0x31	; 49
    2ec4:	f5 01       	movw	r30, r10
    2ec6:	11 92       	st	Z+, r1
    2ec8:	8a 95       	dec	r24
    2eca:	e9 f7       	brne	.-6      	; 0x2ec6 <fat_dir_entry_read_callback+0x8c>

            arg->checksum = buffer[13];
    2ecc:	d6 01       	movw	r26, r12
    2ece:	1d 96       	adiw	r26, 0x0d	; 13
    2ed0:	8c 91       	ld	r24, X
    2ed2:	f7 01       	movw	r30, r14
    2ed4:	84 83       	std	Z+4, r24	; 0x04
            dir_entry->entry_offset = offset;
    2ed6:	d5 01       	movw	r26, r10
    2ed8:	99 96       	adiw	r26, 0x29	; 41
    2eda:	0c 93       	st	X, r16
    2edc:	99 97       	sbiw	r26, 0x29	; 41
    2ede:	9a 96       	adiw	r26, 0x2a	; 42
    2ee0:	1c 93       	st	X, r17
    2ee2:	9a 97       	sbiw	r26, 0x2a	; 42
    2ee4:	9b 96       	adiw	r26, 0x2b	; 43
    2ee6:	4c 92       	st	X, r4
    2ee8:	9b 97       	sbiw	r26, 0x2b	; 43
    2eea:	9c 96       	adiw	r26, 0x2c	; 44
    2eec:	5c 92       	st	X, r5
    2eee:	9c 97       	sbiw	r26, 0x2c	; 44
    2ef0:	9d 96       	adiw	r26, 0x2d	; 45
    2ef2:	6c 92       	st	X, r6
    2ef4:	9d 97       	sbiw	r26, 0x2d	; 45
    2ef6:	9e 96       	adiw	r26, 0x2e	; 46
    2ef8:	7c 92       	st	X, r7
    2efa:	9e 97       	sbiw	r26, 0x2e	; 46
    2efc:	9f 96       	adiw	r26, 0x2f	; 47
    2efe:	3c 92       	st	X, r3
    2f00:	9f 97       	sbiw	r26, 0x2f	; 47
    2f02:	d0 96       	adiw	r26, 0x30	; 48
    2f04:	2c 92       	st	X, r2

        /* lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
    2f06:	f6 01       	movw	r30, r12
    2f08:	20 81       	ld	r18, Z
    2f0a:	2f 73       	andi	r18, 0x3F	; 63
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	21 50       	subi	r18, 0x01	; 1
    2f10:	31 09       	sbc	r19, r1
    2f12:	4d e0       	ldi	r20, 0x0D	; 13
    2f14:	42 9f       	mul	r20, r18
    2f16:	c0 01       	movw	r24, r0
    2f18:	43 9f       	mul	r20, r19
    2f1a:	90 0d       	add	r25, r0
    2f1c:	11 24       	eor	r1, r1
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
    2f1e:	2d e0       	ldi	r18, 0x0D	; 13
    2f20:	e7 ea       	ldi	r30, 0xA7	; 167
    2f22:	f0 e2       	ldi	r31, 0x20	; 32
    2f24:	de 01       	movw	r26, r28
    2f26:	11 96       	adiw	r26, 0x01	; 1
    2f28:	01 90       	ld	r0, Z+
    2f2a:	0d 92       	st	X+, r0
    2f2c:	2a 95       	dec	r18
    2f2e:	e1 f7       	brne	.-8      	; 0x2f28 <fat_dir_entry_read_callback+0xee>
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    2f30:	8f 31       	cpi	r24, 0x1F	; 31
    2f32:	91 05       	cpc	r25, r1
    2f34:	08 f4       	brcc	.+2      	; 0x2f38 <fat_dir_entry_read_callback+0xfe>
    2f36:	d3 c0       	rjmp	.+422    	; 0x30de <__stack+0xdf>
    2f38:	0f c0       	rjmp	.+30     	; 0x2f58 <fat_dir_entry_read_callback+0x11e>
            long_name[char_offset + i] = buffer[char_mapping[i]];
    2f3a:	81 91       	ld	r24, Z+
    2f3c:	b6 01       	movw	r22, r12
    2f3e:	68 0f       	add	r22, r24
    2f40:	71 1d       	adc	r23, r1
    2f42:	db 01       	movw	r26, r22
    2f44:	8c 91       	ld	r24, X
    2f46:	d5 01       	movw	r26, r10
    2f48:	8d 93       	st	X+, r24
    2f4a:	5d 01       	movw	r10, r26
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    2f4c:	e4 17       	cp	r30, r20
    2f4e:	f5 07       	cpc	r31, r21
    2f50:	19 f0       	breq	.+6      	; 0x2f58 <fat_dir_entry_read_callback+0x11e>
    2f52:	e2 17       	cp	r30, r18
    2f54:	f3 07       	cpc	r31, r19
    2f56:	89 f7       	brne	.-30     	; 0x2f3a <fat_dir_entry_read_callback+0x100>
            long_name[char_offset + i] = buffer[char_mapping[i]];

        return 1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	d9 c0       	rjmp	.+434    	; 0x310e <__stack+0x10f>
    else
#endif
    {
#if FAT_LFN_SUPPORT
        /* if we do not have a long name or the previous lfn does not match, take the 8.3 name */
        if(long_name[0] == '\0' || arg->checksum != fat_calc_83_checksum(buffer))
    2f5c:	f5 01       	movw	r30, r10
    2f5e:	80 81       	ld	r24, Z
    2f60:	88 23       	and	r24, r24
    2f62:	49 f0       	breq	.+18     	; 0x2f76 <fat_dir_entry_read_callback+0x13c>
    2f64:	c6 01       	movw	r24, r12
    2f66:	0e 94 12 17 	call	0x2e24	; 0x2e24 <fat_calc_83_checksum>
    2f6a:	d7 01       	movw	r26, r14
    2f6c:	14 96       	adiw	r26, 0x04	; 4
    2f6e:	9c 91       	ld	r25, X
    2f70:	98 17       	cp	r25, r24
    2f72:	09 f4       	brne	.+2      	; 0x2f76 <fat_dir_entry_read_callback+0x13c>
    2f74:	85 c0       	rjmp	.+266    	; 0x3080 <__stack+0x81>
#endif
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
    2f76:	81 e3       	ldi	r24, 0x31	; 49
    2f78:	f5 01       	movw	r30, r10
    2f7a:	11 92       	st	Z+, r1
    2f7c:	8a 95       	dec	r24
    2f7e:	e9 f7       	brne	.-6      	; 0x2f7a <fat_dir_entry_read_callback+0x140>
            dir_entry->entry_offset = offset;
    2f80:	d5 01       	movw	r26, r10
    2f82:	99 96       	adiw	r26, 0x29	; 41
    2f84:	0c 93       	st	X, r16
    2f86:	99 97       	sbiw	r26, 0x29	; 41
    2f88:	9a 96       	adiw	r26, 0x2a	; 42
    2f8a:	1c 93       	st	X, r17
    2f8c:	9a 97       	sbiw	r26, 0x2a	; 42
    2f8e:	9b 96       	adiw	r26, 0x2b	; 43
    2f90:	4c 92       	st	X, r4
    2f92:	9b 97       	sbiw	r26, 0x2b	; 43
    2f94:	9c 96       	adiw	r26, 0x2c	; 44
    2f96:	5c 92       	st	X, r5
    2f98:	9c 97       	sbiw	r26, 0x2c	; 44
    2f9a:	9d 96       	adiw	r26, 0x2d	; 45
    2f9c:	6c 92       	st	X, r6
    2f9e:	9d 97       	sbiw	r26, 0x2d	; 45
    2fa0:	9e 96       	adiw	r26, 0x2e	; 46
    2fa2:	7c 92       	st	X, r7
    2fa4:	9e 97       	sbiw	r26, 0x2e	; 46
    2fa6:	9f 96       	adiw	r26, 0x2f	; 47
    2fa8:	3c 92       	st	X, r3
    2faa:	9f 97       	sbiw	r26, 0x2f	; 47
    2fac:	d0 96       	adiw	r26, 0x30	; 48
    2fae:	2c 92       	st	X, r2

            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(buffer[i] == ' ')
    2fb0:	f6 01       	movw	r30, r12
    2fb2:	60 81       	ld	r22, Z
    2fb4:	60 32       	cpi	r22, 0x20	; 32
    2fb6:	39 f1       	breq	.+78     	; 0x3006 <__stack+0x7>
    2fb8:	31 96       	adiw	r30, 0x01	; 1
    2fba:	96 01       	movw	r18, r12
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	a0 e0       	ldi	r26, 0x00	; 0
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	09 c0       	rjmp	.+18     	; 0x2fd8 <fat_dir_entry_read_callback+0x19e>
    2fc6:	9f 01       	movw	r18, r30
    2fc8:	61 91       	ld	r22, Z+
    2fca:	ac 01       	movw	r20, r24
    2fcc:	4f 5f       	subi	r20, 0xFF	; 255
    2fce:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd0:	60 32       	cpi	r22, 0x20	; 32
    2fd2:	d1 f0       	breq	.+52     	; 0x3008 <__stack+0x9>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	ca 01       	movw	r24, r20
                    break;
                long_name[i] = buffer[i];
    2fd8:	8d 01       	movw	r16, r26
    2fda:	08 0d       	add	r16, r8
    2fdc:	19 1d       	adc	r17, r9
    2fde:	d8 01       	movw	r26, r16
    2fe0:	6c 93       	st	X, r22
                /* Windows NT and later versions do not store lfn entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
    2fe2:	d6 01       	movw	r26, r12
    2fe4:	1c 96       	adiw	r26, 0x0c	; 12
    2fe6:	4c 91       	ld	r20, X
    2fe8:	43 ff       	sbrs	r20, 3
    2fea:	08 c0       	rjmp	.+16     	; 0x2ffc <fat_dir_entry_read_callback+0x1c2>
    2fec:	d9 01       	movw	r26, r18
    2fee:	2c 91       	ld	r18, X
    2ff0:	21 54       	subi	r18, 0x41	; 65
    2ff2:	2a 31       	cpi	r18, 0x1A	; 26
    2ff4:	18 f4       	brcc	.+6      	; 0x2ffc <fat_dir_entry_read_callback+0x1c2>
                    long_name[i] += 'a' - 'A';
    2ff6:	60 5e       	subi	r22, 0xE0	; 224
    2ff8:	d8 01       	movw	r26, r16
    2ffa:	6c 93       	st	X, r22
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
    2ffc:	78 2f       	mov	r23, r24
    2ffe:	88 30       	cpi	r24, 0x08	; 8
    3000:	91 05       	cpc	r25, r1
    3002:	09 f7       	brne	.-62     	; 0x2fc6 <fat_dir_entry_read_callback+0x18c>
    3004:	01 c0       	rjmp	.+2      	; 0x3008 <__stack+0x9>
    3006:	70 e0       	ldi	r23, 0x00	; 0
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
    3008:	f5 01       	movw	r30, r10
    300a:	80 81       	ld	r24, Z
    300c:	85 30       	cpi	r24, 0x05	; 5
    300e:	11 f4       	brne	.+4      	; 0x3014 <__stack+0x15>
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
    3010:	85 ee       	ldi	r24, 0xE5	; 229
    3012:	80 83       	st	Z, r24

            if(buffer[8] != ' ')
    3014:	d6 01       	movw	r26, r12
    3016:	18 96       	adiw	r26, 0x08	; 8
    3018:	8c 91       	ld	r24, X
    301a:	18 97       	sbiw	r26, 0x08	; 8
    301c:	80 32       	cpi	r24, 0x20	; 32
    301e:	59 f1       	breq	.+86     	; 0x3076 <__stack+0x77>
            {
                long_name[i++] = '.';
    3020:	21 e0       	ldi	r18, 0x01	; 1
    3022:	27 0f       	add	r18, r23
    3024:	8e e2       	ldi	r24, 0x2E	; 46
    3026:	f5 01       	movw	r30, r10
    3028:	e7 0f       	add	r30, r23
    302a:	f1 1d       	adc	r31, r1
    302c:	80 83       	st	Z, r24

                uint8_t j = 8;
                for(; j < 11; ++j)
                {
                    if(buffer[j] == ' ')
    302e:	c6 01       	movw	r24, r12
    3030:	08 96       	adiw	r24, 0x08	; 8
    3032:	18 96       	adiw	r26, 0x08	; 8
    3034:	3c 91       	ld	r19, X
    3036:	30 32       	cpi	r19, 0x20	; 32
    3038:	f9 f0       	breq	.+62     	; 0x3078 <__stack+0x79>
    303a:	f6 01       	movw	r30, r12
    303c:	39 96       	adiw	r30, 0x09	; 9
    303e:	7c 5f       	subi	r23, 0xFC	; 252
    3040:	04 c0       	rjmp	.+8      	; 0x304a <__stack+0x4b>
    3042:	cf 01       	movw	r24, r30
    3044:	31 91       	ld	r19, Z+
    3046:	30 32       	cpi	r19, 0x20	; 32
    3048:	b9 f0       	breq	.+46     	; 0x3078 <__stack+0x79>
                        break;
                    long_name[i] = buffer[j];
    304a:	84 01       	movw	r16, r8
    304c:	02 0f       	add	r16, r18
    304e:	11 1d       	adc	r17, r1
    3050:	d8 01       	movw	r26, r16
    3052:	3c 93       	st	X, r19

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((buffer[12] & 0x10) && buffer[j] >= 'A' && buffer[j] <= 'Z')
    3054:	d6 01       	movw	r26, r12
    3056:	1c 96       	adiw	r26, 0x0c	; 12
    3058:	4c 91       	ld	r20, X
    305a:	44 ff       	sbrs	r20, 4
    305c:	08 c0       	rjmp	.+16     	; 0x306e <__stack+0x6f>
    305e:	dc 01       	movw	r26, r24
    3060:	8c 91       	ld	r24, X
    3062:	81 54       	subi	r24, 0x41	; 65
    3064:	8a 31       	cpi	r24, 0x1A	; 26
    3066:	18 f4       	brcc	.+6      	; 0x306e <__stack+0x6f>
                        long_name[i] += 'a' - 'A';
    3068:	30 5e       	subi	r19, 0xE0	; 224
    306a:	d8 01       	movw	r26, r16
    306c:	3c 93       	st	X, r19

                    ++i;
    306e:	2f 5f       	subi	r18, 0xFF	; 255
            if(buffer[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
    3070:	27 13       	cpse	r18, r23
    3072:	e7 cf       	rjmp	.-50     	; 0x3042 <__stack+0x43>
    3074:	01 c0       	rjmp	.+2      	; 0x3078 <__stack+0x79>
    3076:	27 2f       	mov	r18, r23

                    ++i;
                }
            } 

            long_name[i] = '\0';
    3078:	f5 01       	movw	r30, r10
    307a:	e2 0f       	add	r30, r18
    307c:	f1 1d       	adc	r31, r1
    307e:	10 82       	st	Z, r1
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = buffer[11];
    3080:	f6 01       	movw	r30, r12
    3082:	83 85       	ldd	r24, Z+11	; 0x0b
    3084:	d5 01       	movw	r26, r10
    3086:	90 96       	adiw	r26, 0x20	; 32
    3088:	8c 93       	st	X, r24
        dir_entry->cluster = read16(&buffer[26]);
    308a:	82 8d       	ldd	r24, Z+26	; 0x1a
    308c:	93 8d       	ldd	r25, Z+27	; 0x1b
    308e:	a0 e0       	ldi	r26, 0x00	; 0
    3090:	b0 e0       	ldi	r27, 0x00	; 0
    3092:	f5 01       	movw	r30, r10
    3094:	81 a3       	std	Z+33, r24	; 0x21
    3096:	92 a3       	std	Z+34, r25	; 0x22
    3098:	a3 a3       	std	Z+35, r26	; 0x23
    309a:	b4 a3       	std	Z+36, r27	; 0x24
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) read16(&buffer[20])) << 16;
    309c:	f6 01       	movw	r30, r12
    309e:	44 89       	ldd	r20, Z+20	; 0x14
    30a0:	55 89       	ldd	r21, Z+21	; 0x15
    30a2:	60 e0       	ldi	r22, 0x00	; 0
    30a4:	70 e0       	ldi	r23, 0x00	; 0
    30a6:	ba 01       	movw	r22, r20
    30a8:	55 27       	eor	r21, r21
    30aa:	44 27       	eor	r20, r20
    30ac:	84 2b       	or	r24, r20
    30ae:	95 2b       	or	r25, r21
    30b0:	a6 2b       	or	r26, r22
    30b2:	b7 2b       	or	r27, r23
    30b4:	f5 01       	movw	r30, r10
    30b6:	81 a3       	std	Z+33, r24	; 0x21
    30b8:	92 a3       	std	Z+34, r25	; 0x22
    30ba:	a3 a3       	std	Z+35, r26	; 0x23
    30bc:	b4 a3       	std	Z+36, r27	; 0x24
#endif
        dir_entry->file_size = read32(&buffer[28]);
    30be:	f6 01       	movw	r30, r12
    30c0:	84 8d       	ldd	r24, Z+28	; 0x1c
    30c2:	95 8d       	ldd	r25, Z+29	; 0x1d
    30c4:	a6 8d       	ldd	r26, Z+30	; 0x1e
    30c6:	b7 8d       	ldd	r27, Z+31	; 0x1f
    30c8:	f5 01       	movw	r30, r10
    30ca:	85 a3       	std	Z+37, r24	; 0x25
    30cc:	96 a3       	std	Z+38, r25	; 0x26
    30ce:	a7 a3       	std	Z+39, r26	; 0x27
    30d0:	b0 a7       	std	Z+40, r27	; 0x28
#if FAT_DATETIME_SUPPORT
        dir_entry->modification_time = read16(&buffer[22]);
        dir_entry->modification_date = read16(&buffer[24]);
#endif

        arg->finished = 1;
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	d7 01       	movw	r26, r14
    30d6:	15 96       	adiw	r26, 0x05	; 5
    30d8:	8c 93       	st	X, r24
        return 0;
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	18 c0       	rjmp	.+48     	; 0x310e <__stack+0x10f>
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = buffer[char_mapping[i]];
    30de:	29 81       	ldd	r18, Y+1	; 0x01
    30e0:	f6 01       	movw	r30, r12
    30e2:	e2 0f       	add	r30, r18
    30e4:	f1 1d       	adc	r31, r1
    30e6:	20 81       	ld	r18, Z
    30e8:	f5 01       	movw	r30, r10
    30ea:	e8 0f       	add	r30, r24
    30ec:	f9 1f       	adc	r31, r25
    30ee:	20 83       	st	Z, r18
    30f0:	fe 01       	movw	r30, r28
    30f2:	32 96       	adiw	r30, 0x02	; 2
    30f4:	dc 01       	movw	r26, r24
    30f6:	11 96       	adiw	r26, 0x01	; 1
    30f8:	aa 0e       	add	r10, r26
    30fa:	bb 1e       	adc	r11, r27
    30fc:	9e 01       	movw	r18, r28
    30fe:	20 5e       	subi	r18, 0xE0	; 224
    3100:	3f 4f       	sbci	r19, 0xFF	; 255
    3102:	28 1b       	sub	r18, r24
    3104:	39 0b       	sbc	r19, r25
    3106:	ae 01       	movw	r20, r28
    3108:	42 5f       	subi	r20, 0xF2	; 242
    310a:	5f 4f       	sbci	r21, 0xFF	; 255
    310c:	22 cf       	rjmp	.-444    	; 0x2f52 <fat_dir_entry_read_callback+0x118>
#endif

        arg->finished = 1;
        return 0;
    }
}
    310e:	2d 96       	adiw	r28, 0x0d	; 13
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	df 91       	pop	r29
    3116:	cf 91       	pop	r28
    3118:	1f 91       	pop	r17
    311a:	0f 91       	pop	r16
    311c:	ff 90       	pop	r15
    311e:	ef 90       	pop	r14
    3120:	df 90       	pop	r13
    3122:	cf 90       	pop	r12
    3124:	bf 90       	pop	r11
    3126:	af 90       	pop	r10
    3128:	9f 90       	pop	r9
    312a:	8f 90       	pop	r8
    312c:	7f 90       	pop	r7
    312e:	6f 90       	pop	r6
    3130:	5f 90       	pop	r5
    3132:	4f 90       	pop	r4
    3134:	3f 90       	pop	r3
    3136:	2f 90       	pop	r2
    3138:	08 95       	ret

0000313a <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
    313a:	2f 92       	push	r2
    313c:	3f 92       	push	r3
    313e:	4f 92       	push	r4
    3140:	5f 92       	push	r5
    3142:	6f 92       	push	r6
    3144:	7f 92       	push	r7
    3146:	8f 92       	push	r8
    3148:	9f 92       	push	r9
    314a:	af 92       	push	r10
    314c:	bf 92       	push	r11
    314e:	cf 92       	push	r12
    3150:	df 92       	push	r13
    3152:	ef 92       	push	r14
    3154:	ff 92       	push	r15
    3156:	0f 93       	push	r16
    3158:	1f 93       	push	r17
    315a:	cf 93       	push	r28
    315c:	df 93       	push	r29
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
    3162:	cd 54       	subi	r28, 0x4D	; 77
    3164:	d1 09       	sbc	r29, r1
    3166:	cd bf       	out	0x3d, r28	; 61
    3168:	de bf       	out	0x3e, r29	; 62
    316a:	1c 01       	movw	r2, r24
    if(!partition ||
    316c:	00 97       	sbiw	r24, 0x00	; 0
    316e:	09 f4       	brne	.+2      	; 0x3172 <fat_open+0x38>
    3170:	25 c2       	rjmp	.+1098   	; 0x35bc <fat_open+0x482>
    3172:	dc 01       	movw	r26, r24
    3174:	14 96       	adiw	r26, 0x04	; 4
    3176:	8d 91       	ld	r24, X+
    3178:	9c 91       	ld	r25, X
    317a:	15 97       	sbiw	r26, 0x05	; 5
    317c:	89 2b       	or	r24, r25
    317e:	09 f4       	brne	.+2      	; 0x3182 <fat_open+0x48>
    3180:	20 c2       	rjmp	.+1088   	; 0x35c2 <fat_open+0x488>
#if FAT_WRITE_SUPPORT
       !partition->device_write ||
    3182:	16 96       	adiw	r26, 0x06	; 6
    3184:	8d 91       	ld	r24, X+
    3186:	9c 91       	ld	r25, X
    3188:	17 97       	sbiw	r26, 0x07	; 7
    318a:	89 2b       	or	r24, r25
    318c:	09 f4       	brne	.+2      	; 0x3190 <fat_open+0x56>
    318e:	1c c2       	rjmp	.+1080   	; 0x35c8 <fat_open+0x48e>
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
    3190:	80 91 fc 23 	lds	r24, 0x23FC
    3194:	90 91 fd 23 	lds	r25, 0x23FD
    3198:	89 2b       	or	r24, r25
    319a:	09 f4       	brne	.+2      	; 0x319e <fat_open+0x64>
    319c:	18 c2       	rjmp	.+1072   	; 0x35ce <fat_open+0x494>
            break;

        ++fs;
    }
    if(i >= FAT_FS_COUNT)
        return 0;
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	50 c2       	rjmp	.+1184   	; 0x3644 <fat_open+0x50a>
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
        return 0;

    uint16_t bytes_per_sector = read16(&buffer[0x00]);
    31a4:	e9 81       	ldd	r30, Y+1	; 0x01
    31a6:	fa 81       	ldd	r31, Y+2	; 0x02
    31a8:	ec ab       	std	Y+52, r30	; 0x34
    31aa:	fd ab       	std	Y+53, r31	; 0x35
    uint16_t reserved_sectors = read16(&buffer[0x03]);
    31ac:	ec 80       	ldd	r14, Y+4	; 0x04
    31ae:	fd 80       	ldd	r15, Y+5	; 0x05
    31b0:	ee aa       	std	Y+54, r14	; 0x36
    31b2:	ff aa       	std	Y+55, r15	; 0x37
    uint8_t sectors_per_cluster = buffer[0x02];
    31b4:	fb 80       	ldd	r15, Y+3	; 0x03
    31b6:	27 96       	adiw	r28, 0x07	; 7
    31b8:	ff ae       	std	Y+63, r15	; 0x3f
    31ba:	27 97       	sbiw	r28, 0x07	; 7
    uint8_t fat_copies = buffer[0x05];
    31bc:	0e 81       	ldd	r16, Y+6	; 0x06
    31be:	28 96       	adiw	r28, 0x08	; 8
    31c0:	0f af       	std	Y+63, r16	; 0x3f
    31c2:	28 97       	sbiw	r28, 0x08	; 8
    uint16_t max_root_entries = read16(&buffer[0x06]);
    31c4:	2f 81       	ldd	r18, Y+7	; 0x07
    31c6:	38 85       	ldd	r19, Y+8	; 0x08
    31c8:	2a 96       	adiw	r28, 0x0a	; 10
    31ca:	2e af       	std	Y+62, r18	; 0x3e
    31cc:	3f af       	std	Y+63, r19	; 0x3f
    31ce:	2a 97       	sbiw	r28, 0x0a	; 10
    uint16_t sector_count_16 = read16(&buffer[0x08]);
    31d0:	89 85       	ldd	r24, Y+9	; 0x09
    31d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    uint16_t sectors_per_fat = read16(&buffer[0x0b]);
    31d4:	4c 85       	ldd	r20, Y+12	; 0x0c
    31d6:	5d 85       	ldd	r21, Y+13	; 0x0d
    31d8:	26 96       	adiw	r28, 0x06	; 6
    31da:	4e af       	std	Y+62, r20	; 0x3e
    31dc:	5f af       	std	Y+63, r21	; 0x3f
    31de:	26 97       	sbiw	r28, 0x06	; 6
    uint32_t sector_count = read32(&buffer[0x15]);
    31e0:	ce 88       	ldd	r12, Y+22	; 0x16
    31e2:	df 88       	ldd	r13, Y+23	; 0x17
    31e4:	e8 8c       	ldd	r14, Y+24	; 0x18
    31e6:	f9 8c       	ldd	r15, Y+25	; 0x19
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = read32(&buffer[0x19]);
    31e8:	0a 8d       	ldd	r16, Y+26	; 0x1a
    31ea:	1b 8d       	ldd	r17, Y+27	; 0x1b
    31ec:	2c 8d       	ldd	r18, Y+28	; 0x1c
    31ee:	3d 8d       	ldd	r19, Y+29	; 0x1d
    31f0:	24 96       	adiw	r28, 0x04	; 4
    31f2:	0c af       	std	Y+60, r16	; 0x3c
    31f4:	1d af       	std	Y+61, r17	; 0x3d
    31f6:	2e af       	std	Y+62, r18	; 0x3e
    31f8:	3f af       	std	Y+63, r19	; 0x3f
    31fa:	24 97       	sbiw	r28, 0x04	; 4
    uint32_t cluster_root_dir = read32(&buffer[0x21]);
    31fc:	2a a1       	ldd	r18, Y+34	; 0x22
    31fe:	3b a1       	ldd	r19, Y+35	; 0x23
    3200:	4c a1       	ldd	r20, Y+36	; 0x24
    3202:	5d a1       	ldd	r21, Y+37	; 0x25
    3204:	2e 96       	adiw	r28, 0x0e	; 14
    3206:	2c af       	std	Y+60, r18	; 0x3c
    3208:	3d af       	std	Y+61, r19	; 0x3d
    320a:	4e af       	std	Y+62, r20	; 0x3e
    320c:	5f af       	std	Y+63, r21	; 0x3f
    320e:	2e 97       	sbiw	r28, 0x0e	; 14
#endif

    if(sector_count == 0)
    3210:	c1 14       	cp	r12, r1
    3212:	d1 04       	cpc	r13, r1
    3214:	e1 04       	cpc	r14, r1
    3216:	f1 04       	cpc	r15, r1
    3218:	31 f4       	brne	.+12     	; 0x3226 <fat_open+0xec>
    {
        if(sector_count_16 == 0)
    321a:	00 97       	sbiw	r24, 0x00	; 0
    321c:	09 f4       	brne	.+2      	; 0x3220 <fat_open+0xe6>
    321e:	09 c2       	rjmp	.+1042   	; 0x3632 <fat_open+0x4f8>
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
    3220:	6c 01       	movw	r12, r24
    3222:	e1 2c       	mov	r14, r1
    3224:	f1 2c       	mov	r15, r1
    }
#if FAT_FAT32_SUPPORT
    if(sectors_per_fat != 0)
    3226:	26 96       	adiw	r28, 0x06	; 6
    3228:	4e ad       	ldd	r20, Y+62	; 0x3e
    322a:	5f ad       	ldd	r21, Y+63	; 0x3f
    322c:	26 97       	sbiw	r28, 0x06	; 6
    322e:	41 15       	cp	r20, r1
    3230:	51 05       	cpc	r21, r1
    3232:	51 f0       	breq	.+20     	; 0x3248 <fat_open+0x10e>
        sectors_per_fat32 = sectors_per_fat;
    3234:	ba 01       	movw	r22, r20
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	24 96       	adiw	r28, 0x04	; 4
    323c:	6c af       	std	Y+60, r22	; 0x3c
    323e:	7d af       	std	Y+61, r23	; 0x3d
    3240:	8e af       	std	Y+62, r24	; 0x3e
    3242:	9f af       	std	Y+63, r25	; 0x3f
    3244:	24 97       	sbiw	r28, 0x04	; 4
    3246:	0b c0       	rjmp	.+22     	; 0x325e <fat_open+0x124>
    else if(sectors_per_fat32 == 0)
    3248:	24 96       	adiw	r28, 0x04	; 4
    324a:	0c ad       	ldd	r16, Y+60	; 0x3c
    324c:	1d ad       	ldd	r17, Y+61	; 0x3d
    324e:	2e ad       	ldd	r18, Y+62	; 0x3e
    3250:	3f ad       	ldd	r19, Y+63	; 0x3f
    3252:	24 97       	sbiw	r28, 0x04	; 4
    3254:	01 2b       	or	r16, r17
    3256:	02 2b       	or	r16, r18
    3258:	03 2b       	or	r16, r19
    325a:	09 f4       	brne	.+2      	; 0x325e <fat_open+0x124>
    325c:	ea c1       	rjmp	.+980    	; 0x3632 <fat_open+0x4f8>

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
                                 - reserved_sectors
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
    325e:	28 96       	adiw	r28, 0x08	; 8
    3260:	1f ad       	ldd	r17, Y+63	; 0x3f
    3262:	28 97       	sbiw	r28, 0x08	; 8
    3264:	a1 2f       	mov	r26, r17
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	24 96       	adiw	r28, 0x04	; 4
    326a:	2c ad       	ldd	r18, Y+60	; 0x3c
    326c:	3d ad       	ldd	r19, Y+61	; 0x3d
    326e:	4e ad       	ldd	r20, Y+62	; 0x3e
    3270:	5f ad       	ldd	r21, Y+63	; 0x3f
    3272:	24 97       	sbiw	r28, 0x04	; 4
    3274:	0e 94 0b 40 	call	0x8016	; 0x8016 <__muluhisi3>
    3278:	26 01       	movw	r4, r12
    327a:	37 01       	movw	r6, r14
    327c:	2e a9       	ldd	r18, Y+54	; 0x36
    327e:	3f a9       	ldd	r19, Y+55	; 0x37
    3280:	42 1a       	sub	r4, r18
    3282:	53 0a       	sbc	r5, r19
    3284:	61 08       	sbc	r6, r1
    3286:	71 08       	sbc	r7, r1
    3288:	46 1a       	sub	r4, r22
    328a:	57 0a       	sbc	r5, r23
    328c:	68 0a       	sbc	r6, r24
    328e:	79 0a       	sbc	r7, r25
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    3290:	2a 96       	adiw	r28, 0x0a	; 10
    3292:	8e ad       	ldd	r24, Y+62	; 0x3e
    3294:	9f ad       	ldd	r25, Y+63	; 0x3f
    3296:	2a 97       	sbiw	r28, 0x0a	; 10
    3298:	88 0f       	add	r24, r24
    329a:	99 1f       	adc	r25, r25
    329c:	82 95       	swap	r24
    329e:	92 95       	swap	r25
    32a0:	90 7f       	andi	r25, 0xF0	; 240
    32a2:	98 27       	eor	r25, r24
    32a4:	80 7f       	andi	r24, 0xF0	; 240
    32a6:	98 27       	eor	r25, r24
    32a8:	2c a9       	ldd	r18, Y+52	; 0x34
    32aa:	3d a9       	ldd	r19, Y+53	; 0x35
    32ac:	21 50       	subi	r18, 0x01	; 1
    32ae:	31 09       	sbc	r19, r1
    32b0:	82 0f       	add	r24, r18
    32b2:	93 1f       	adc	r25, r19
    32b4:	6c a9       	ldd	r22, Y+52	; 0x34
    32b6:	7d a9       	ldd	r23, Y+53	; 0x35
    32b8:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <__udivmodhi4>
        /* this is not a FAT16 */
        return 0;
#endif

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
    32bc:	93 01       	movw	r18, r6
    32be:	82 01       	movw	r16, r4
    32c0:	06 1b       	sub	r16, r22
    32c2:	17 0b       	sbc	r17, r23
    32c4:	21 09       	sbc	r18, r1
    32c6:	31 09       	sbc	r19, r1
    32c8:	c9 01       	movw	r24, r18
    32ca:	b8 01       	movw	r22, r16
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    32cc:	27 96       	adiw	r28, 0x07	; 7
    32ce:	4f ad       	ldd	r20, Y+63	; 0x3f
    32d0:	27 97       	sbiw	r28, 0x07	; 7
    32d2:	04 2f       	mov	r16, r20
    32d4:	10 e0       	ldi	r17, 0x00	; 0
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	a9 01       	movw	r20, r18
    32dc:	98 01       	movw	r18, r16
    32de:	0e 94 b5 3f 	call	0x7f6a	; 0x7f6a <__udivmodsi4>
    32e2:	29 01       	movw	r4, r18
    32e4:	3a 01       	movw	r6, r20
    if(data_cluster_count < 4085)
    32e6:	55 ef       	ldi	r21, 0xF5	; 245
    32e8:	45 16       	cp	r4, r21
    32ea:	5f e0       	ldi	r21, 0x0F	; 15
    32ec:	55 06       	cpc	r5, r21
    32ee:	61 04       	cpc	r6, r1
    32f0:	71 04       	cpc	r7, r1
    32f2:	08 f4       	brcc	.+2      	; 0x32f6 <fat_open+0x1bc>
    32f4:	9e c1       	rjmp	.+828    	; 0x3632 <fat_open+0x4f8>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
    32f6:	65 ef       	ldi	r22, 0xF5	; 245
    32f8:	46 16       	cp	r4, r22
    32fa:	6f ef       	ldi	r22, 0xFF	; 255
    32fc:	56 06       	cpc	r5, r22
    32fe:	61 04       	cpc	r6, r1
    3300:	71 04       	cpc	r7, r1
    3302:	28 f4       	brcc	.+10     	; 0x330e <fat_open+0x1d4>
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
    3304:	86 e0       	ldi	r24, 0x06	; 6
    3306:	d1 01       	movw	r26, r2
    3308:	18 96       	adiw	r26, 0x08	; 8
    330a:	8c 93       	st	X, r24
    330c:	03 c0       	rjmp	.+6      	; 0x3314 <fat_open+0x1da>
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;
    330e:	8b e0       	ldi	r24, 0x0B	; 11
    3310:	f1 01       	movw	r30, r2
    3312:	80 87       	std	Z+8, r24	; 0x08

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    3314:	8c e2       	ldi	r24, 0x2C	; 44
    3316:	ae ef       	ldi	r26, 0xFE	; 254
    3318:	b3 e2       	ldi	r27, 0x23	; 35
    331a:	1d 92       	st	X+, r1
    331c:	8a 95       	dec	r24
    331e:	e9 f7       	brne	.-6      	; 0x331a <fat_open+0x1e0>
    
    header->size = (offset_t) sector_count * bytes_per_sector;
    3320:	2c a9       	ldd	r18, Y+52	; 0x34
    3322:	3d a9       	ldd	r19, Y+53	; 0x35
    3324:	89 01       	movw	r16, r18
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e0       	ldi	r20, 0x00	; 0
    332c:	50 e0       	ldi	r21, 0x00	; 0
    332e:	ba 01       	movw	r22, r20
    3330:	0e a3       	std	Y+38, r16	; 0x26
    3332:	1f a3       	std	Y+39, r17	; 0x27
    3334:	28 a7       	std	Y+40, r18	; 0x28
    3336:	39 a7       	std	Y+41, r19	; 0x29
    3338:	4a a7       	std	Y+42, r20	; 0x2a
    333a:	5b a7       	std	Y+43, r21	; 0x2b
    333c:	6c a7       	std	Y+44, r22	; 0x2c
    333e:	7d a7       	std	Y+45, r23	; 0x2d
    3340:	b7 01       	movw	r22, r14
    3342:	a6 01       	movw	r20, r12
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	dc 01       	movw	r26, r24
    334a:	c8 ae       	std	Y+56, r12	; 0x38
    334c:	59 af       	std	Y+57, r21	; 0x39
    334e:	6a af       	std	Y+58, r22	; 0x3a
    3350:	7b af       	std	Y+59, r23	; 0x3b
    3352:	8c af       	std	Y+60, r24	; 0x3c
    3354:	9d af       	std	Y+61, r25	; 0x3d
    3356:	ae af       	std	Y+62, r26	; 0x3e
    3358:	bf af       	std	Y+63, r27	; 0x3f
    335a:	a0 2e       	mov	r10, r16
    335c:	b1 2e       	mov	r11, r17
    335e:	c1 2c       	mov	r12, r1
    3360:	d1 2c       	mov	r13, r1
    3362:	e1 2c       	mov	r14, r1
    3364:	f1 2c       	mov	r15, r1
    3366:	00 e0       	ldi	r16, 0x00	; 0
    3368:	10 e0       	ldi	r17, 0x00	; 0
    336a:	24 2f       	mov	r18, r20
    336c:	35 2f       	mov	r19, r21
    336e:	46 2f       	mov	r20, r22
    3370:	57 2f       	mov	r21, r23
    3372:	60 e0       	ldi	r22, 0x00	; 0
    3374:	70 e0       	ldi	r23, 0x00	; 0
    3376:	80 e0       	ldi	r24, 0x00	; 0
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	0e 94 16 40 	call	0x802c	; 0x802c <__muldi3>
    337e:	ae ef       	ldi	r26, 0xFE	; 254
    3380:	b3 e2       	ldi	r27, 0x23	; 35
    3382:	2c 93       	st	X, r18
    3384:	30 93 ff 23 	sts	0x23FF, r19
    3388:	40 93 00 24 	sts	0x2400, r20
    338c:	50 93 01 24 	sts	0x2401, r21
    3390:	60 93 02 24 	sts	0x2402, r22
    3394:	70 93 03 24 	sts	0x2403, r23
    3398:	80 93 04 24 	sts	0x2404, r24
    339c:	90 93 05 24 	sts	0x2405, r25

    header->fat_offset = /* jump to partition */
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    33a0:	ee a9       	ldd	r30, Y+54	; 0x36
    33a2:	ff a9       	ldd	r31, Y+55	; 0x37
    33a4:	af 01       	movw	r20, r30
    33a6:	2e 2f       	mov	r18, r30
    33a8:	35 2f       	mov	r19, r21
    33aa:	40 e0       	ldi	r20, 0x00	; 0
    33ac:	50 e0       	ldi	r21, 0x00	; 0
    33ae:	60 e0       	ldi	r22, 0x00	; 0
    33b0:	70 e0       	ldi	r23, 0x00	; 0
    33b2:	80 e0       	ldi	r24, 0x00	; 0
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	0e 94 16 40 	call	0x802c	; 0x802c <__muldi3>
    memset(header, 0, sizeof(*header));
    
    header->size = (offset_t) sector_count * bytes_per_sector;

    header->fat_offset = /* jump to partition */
                         partition_offset +
    33ba:	a9 2c       	mov	r10, r9
    33bc:	b8 2c       	mov	r11, r8
    33be:	ce a4       	ldd	r12, Y+46	; 0x2e
    33c0:	df a4       	ldd	r13, Y+47	; 0x2f
    33c2:	e8 a8       	ldd	r14, Y+48	; 0x30
    33c4:	f9 a8       	ldd	r15, Y+49	; 0x31
    33c6:	0a a9       	ldd	r16, Y+50	; 0x32
    33c8:	1b a9       	ldd	r17, Y+51	; 0x33
    33ca:	0e 94 a6 40 	call	0x814c	; 0x814c <__adddi3>
    33ce:	2e a7       	std	Y+46, r18	; 0x2e
    33d0:	3f a7       	std	Y+47, r19	; 0x2f
    33d2:	48 ab       	std	Y+48, r20	; 0x30
    33d4:	59 ab       	std	Y+49, r21	; 0x31
    33d6:	6a ab       	std	Y+50, r22	; 0x32
    33d8:	7b ab       	std	Y+51, r23	; 0x33
    33da:	8e ab       	std	Y+54, r24	; 0x36
    33dc:	98 af       	std	Y+56, r25	; 0x38
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    
    header->size = (offset_t) sector_count * bytes_per_sector;

    header->fat_offset = /* jump to partition */
    33de:	e6 e0       	ldi	r30, 0x06	; 6
    33e0:	f4 e2       	ldi	r31, 0x24	; 36
    33e2:	20 83       	st	Z, r18
    33e4:	31 83       	std	Z+1, r19	; 0x01
    33e6:	42 83       	std	Z+2, r20	; 0x02
    33e8:	53 83       	std	Z+3, r21	; 0x03
    33ea:	64 83       	std	Z+4, r22	; 0x04
    33ec:	75 83       	std	Z+5, r23	; 0x05
    33ee:	86 83       	std	Z+6, r24	; 0x06
    33f0:	97 83       	std	Z+7, r25	; 0x07
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    33f2:	c3 01       	movw	r24, r6
    33f4:	b2 01       	movw	r22, r4
    33f6:	6e 5f       	subi	r22, 0xFE	; 254
    33f8:	7f 4f       	sbci	r23, 0xFF	; 255
    33fa:	8f 4f       	sbci	r24, 0xFF	; 255
    33fc:	9f 4f       	sbci	r25, 0xFF	; 255
    33fe:	d1 01       	movw	r26, r2
    3400:	18 96       	adiw	r26, 0x08	; 8
    3402:	2c 91       	ld	r18, X
    3404:	26 30       	cpi	r18, 0x06	; 6
    3406:	29 f4       	brne	.+10     	; 0x3412 <fat_open+0x2d8>
    3408:	22 e0       	ldi	r18, 0x02	; 2
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	40 e0       	ldi	r20, 0x00	; 0
    340e:	50 e0       	ldi	r21, 0x00	; 0
    3410:	04 c0       	rjmp	.+8      	; 0x341a <fat_open+0x2e0>
    3412:	24 e0       	ldi	r18, 0x04	; 4
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	40 e0       	ldi	r20, 0x00	; 0
    3418:	50 e0       	ldi	r21, 0x00	; 0
    341a:	0e 94 7d 3f 	call	0x7efa	; 0x7efa <__mulsi3>
    341e:	60 93 0e 24 	sts	0x240E, r22
    3422:	70 93 0f 24 	sts	0x240F, r23
    3426:	80 93 10 24 	sts	0x2410, r24
    342a:	90 93 11 24 	sts	0x2411, r25

    header->sector_size = bytes_per_sector;
    342e:	ec a9       	ldd	r30, Y+52	; 0x34
    3430:	fd a9       	ldd	r31, Y+53	; 0x35
    3432:	e0 93 12 24 	sts	0x2412, r30
    3436:	f0 93 13 24 	sts	0x2413, r31
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    343a:	27 96       	adiw	r28, 0x07	; 7
    343c:	ef ac       	ldd	r14, Y+63	; 0x3f
    343e:	27 97       	sbiw	r28, 0x07	; 7
    3440:	ee 9e       	mul	r14, r30
    3442:	c0 01       	movw	r24, r0
    3444:	ef 9e       	mul	r14, r31
    3446:	90 0d       	add	r25, r0
    3448:	11 24       	eor	r1, r1
    344a:	80 93 14 24 	sts	0x2414, r24
    344e:	90 93 15 24 	sts	0x2415, r25

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
    3452:	d1 01       	movw	r26, r2
    3454:	18 96       	adiw	r26, 0x08	; 8
    3456:	8c 91       	ld	r24, X
    3458:	86 30       	cpi	r24, 0x06	; 6
    345a:	09 f0       	breq	.+2      	; 0x345e <fat_open+0x324>
    345c:	66 c0       	rjmp	.+204    	; 0x352a <fat_open+0x3f0>
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;
    345e:	ae a0       	ldd	r10, Y+38	; 0x26
    3460:	bf a0       	ldd	r11, Y+39	; 0x27
    3462:	c1 2c       	mov	r12, r1
    3464:	d1 2c       	mov	r13, r1
    3466:	e1 2c       	mov	r14, r1
    3468:	f1 2c       	mov	r15, r1
    346a:	00 e0       	ldi	r16, 0x00	; 0
    346c:	10 e0       	ldi	r17, 0x00	; 0
    346e:	28 96       	adiw	r28, 0x08	; 8
    3470:	2f ad       	ldd	r18, Y+63	; 0x3f
    3472:	28 97       	sbiw	r28, 0x08	; 8
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	40 e0       	ldi	r20, 0x00	; 0
    3478:	50 e0       	ldi	r21, 0x00	; 0
    347a:	60 e0       	ldi	r22, 0x00	; 0
    347c:	70 e0       	ldi	r23, 0x00	; 0
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	0e 94 16 40 	call	0x802c	; 0x802c <__muldi3>
    3486:	26 96       	adiw	r28, 0x06	; 6
    3488:	ee ad       	ldd	r30, Y+62	; 0x3e
    348a:	ff ad       	ldd	r31, Y+63	; 0x3f
    348c:	26 97       	sbiw	r28, 0x06	; 6
    348e:	1f 01       	movw	r2, r30
    3490:	ae 2e       	mov	r10, r30
    3492:	b3 2c       	mov	r11, r3
    3494:	0e 94 16 40 	call	0x802c	; 0x802c <__muldi3>
#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
    3498:	ae a4       	ldd	r10, Y+46	; 0x2e
    349a:	bf a4       	ldd	r11, Y+47	; 0x2f
    349c:	c8 a8       	ldd	r12, Y+48	; 0x30
    349e:	d9 a8       	ldd	r13, Y+49	; 0x31
    34a0:	ea a8       	ldd	r14, Y+50	; 0x32
    34a2:	fb a8       	ldd	r15, Y+51	; 0x33
    34a4:	0e a9       	ldd	r16, Y+54	; 0x36
    34a6:	18 ad       	ldd	r17, Y+56	; 0x38
    34a8:	0e 94 a6 40 	call	0x814c	; 0x814c <__adddi3>
    34ac:	42 2e       	mov	r4, r18
    34ae:	53 2e       	mov	r5, r19
    34b0:	64 2e       	mov	r6, r20
    34b2:	75 2e       	mov	r7, r21
    34b4:	b6 2f       	mov	r27, r22
    34b6:	a7 2f       	mov	r26, r23
    34b8:	28 2e       	mov	r2, r24
    34ba:	39 2e       	mov	r3, r25

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
    34bc:	ee e1       	ldi	r30, 0x1E	; 30
    34be:	f4 e2       	ldi	r31, 0x24	; 36
    34c0:	20 83       	st	Z, r18
    34c2:	31 83       	std	Z+1, r19	; 0x01
    34c4:	42 83       	std	Z+2, r20	; 0x02
    34c6:	53 83       	std	Z+3, r21	; 0x03
    34c8:	64 83       	std	Z+4, r22	; 0x04
    34ca:	75 83       	std	Z+5, r23	; 0x05
    34cc:	86 83       	std	Z+6, r24	; 0x06
    34ce:	97 83       	std	Z+7, r25	; 0x07
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
                                      /* skip root directory entries */
                                      (offset_t) max_root_entries * 32;
    34d0:	2a 96       	adiw	r28, 0x0a	; 10
    34d2:	0e ad       	ldd	r16, Y+62	; 0x3e
    34d4:	1f ad       	ldd	r17, Y+63	; 0x3f
    34d6:	2a 97       	sbiw	r28, 0x0a	; 10
    34d8:	48 01       	movw	r8, r16
    34da:	20 2f       	mov	r18, r16
    34dc:	39 2d       	mov	r19, r9
    34de:	40 e0       	ldi	r20, 0x00	; 0
    34e0:	50 e0       	ldi	r21, 0x00	; 0
    34e2:	60 e0       	ldi	r22, 0x00	; 0
    34e4:	70 e0       	ldi	r23, 0x00	; 0
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	05 e0       	ldi	r16, 0x05	; 5
    34ec:	0e 94 6f 40 	call	0x80de	; 0x80de <__ashldi3>
    34f0:	a2 2e       	mov	r10, r18
    34f2:	b3 2e       	mov	r11, r19
    34f4:	c4 2e       	mov	r12, r20
    34f6:	d5 2e       	mov	r13, r21
    34f8:	e6 2e       	mov	r14, r22
    34fa:	f7 2e       	mov	r15, r23
    34fc:	08 2f       	mov	r16, r24
    34fe:	19 2f       	mov	r17, r25
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
    3500:	24 2d       	mov	r18, r4
    3502:	35 2d       	mov	r19, r5
    3504:	46 2d       	mov	r20, r6
    3506:	57 2d       	mov	r21, r7
    3508:	6b 2f       	mov	r22, r27
    350a:	7a 2f       	mov	r23, r26
    350c:	82 2d       	mov	r24, r2
    350e:	93 2d       	mov	r25, r3
    3510:	0e 94 a6 40 	call	0x814c	; 0x814c <__adddi3>
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
    3514:	e6 e1       	ldi	r30, 0x16	; 22
    3516:	f4 e2       	ldi	r31, 0x24	; 36
    3518:	20 83       	st	Z, r18
    351a:	31 83       	std	Z+1, r19	; 0x01
    351c:	42 83       	std	Z+2, r20	; 0x02
    351e:	53 83       	std	Z+3, r21	; 0x03
    3520:	64 83       	std	Z+4, r22	; 0x04
    3522:	75 83       	std	Z+5, r23	; 0x05
    3524:	86 83       	std	Z+6, r24	; 0x06
    3526:	97 83       	std	Z+7, r25	; 0x07
    3528:	8b c0       	rjmp	.+278    	; 0x3640 <fat_open+0x506>
    else
    {
        header->cluster_zero_offset = /* jump to fats */
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;
    352a:	ae a0       	ldd	r10, Y+38	; 0x26
    352c:	bf a0       	ldd	r11, Y+39	; 0x27
    352e:	c1 2c       	mov	r12, r1
    3530:	d1 2c       	mov	r13, r1
    3532:	e1 2c       	mov	r14, r1
    3534:	f1 2c       	mov	r15, r1
    3536:	00 e0       	ldi	r16, 0x00	; 0
    3538:	10 e0       	ldi	r17, 0x00	; 0
    353a:	28 96       	adiw	r28, 0x08	; 8
    353c:	2f ad       	ldd	r18, Y+63	; 0x3f
    353e:	28 97       	sbiw	r28, 0x08	; 8
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e0       	ldi	r20, 0x00	; 0
    3544:	50 e0       	ldi	r21, 0x00	; 0
    3546:	60 e0       	ldi	r22, 0x00	; 0
    3548:	70 e0       	ldi	r23, 0x00	; 0
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	0e 94 16 40 	call	0x802c	; 0x802c <__muldi3>
    3552:	24 96       	adiw	r28, 0x04	; 4
    3554:	ec ac       	ldd	r14, Y+60	; 0x3c
    3556:	fd ac       	ldd	r15, Y+61	; 0x3d
    3558:	0e ad       	ldd	r16, Y+62	; 0x3e
    355a:	1f ad       	ldd	r17, Y+63	; 0x3f
    355c:	24 97       	sbiw	r28, 0x04	; 4
    355e:	17 01       	movw	r2, r14
    3560:	28 01       	movw	r4, r16
    3562:	ae 2c       	mov	r10, r14
    3564:	b3 2c       	mov	r11, r3
    3566:	c4 2c       	mov	r12, r4
    3568:	d5 2c       	mov	r13, r5
    356a:	e1 2c       	mov	r14, r1
    356c:	f1 2c       	mov	r15, r1
    356e:	00 e0       	ldi	r16, 0x00	; 0
    3570:	10 e0       	ldi	r17, 0x00	; 0
    3572:	0e 94 16 40 	call	0x802c	; 0x802c <__muldi3>
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
                                      header->fat_offset +
    3576:	ae a4       	ldd	r10, Y+46	; 0x2e
    3578:	bf a4       	ldd	r11, Y+47	; 0x2f
    357a:	c8 a8       	ldd	r12, Y+48	; 0x30
    357c:	d9 a8       	ldd	r13, Y+49	; 0x31
    357e:	ea a8       	ldd	r14, Y+50	; 0x32
    3580:	fb a8       	ldd	r15, Y+51	; 0x33
    3582:	0e a9       	ldd	r16, Y+54	; 0x36
    3584:	18 ad       	ldd	r17, Y+56	; 0x38
    3586:	0e 94 a6 40 	call	0x814c	; 0x814c <__adddi3>
                                      (offset_t) max_root_entries * 32;
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
    358a:	e6 e1       	ldi	r30, 0x16	; 22
    358c:	f4 e2       	ldi	r31, 0x24	; 36
    358e:	20 83       	st	Z, r18
    3590:	31 83       	std	Z+1, r19	; 0x01
    3592:	42 83       	std	Z+2, r20	; 0x02
    3594:	53 83       	std	Z+3, r21	; 0x03
    3596:	64 83       	std	Z+4, r22	; 0x04
    3598:	75 83       	std	Z+5, r23	; 0x05
    359a:	86 83       	std	Z+6, r24	; 0x06
    359c:	97 83       	std	Z+7, r25	; 0x07
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;

        header->root_dir_cluster = cluster_root_dir;
    359e:	2e 96       	adiw	r28, 0x0e	; 14
    35a0:	0c ad       	ldd	r16, Y+60	; 0x3c
    35a2:	1d ad       	ldd	r17, Y+61	; 0x3d
    35a4:	2e ad       	ldd	r18, Y+62	; 0x3e
    35a6:	3f ad       	ldd	r19, Y+63	; 0x3f
    35a8:	2e 97       	sbiw	r28, 0x0e	; 14
    35aa:	00 93 26 24 	sts	0x2426, r16
    35ae:	10 93 27 24 	sts	0x2427, r17
    35b2:	20 93 28 24 	sts	0x2428, r18
    35b6:	30 93 29 24 	sts	0x2429, r19
    35ba:	42 c0       	rjmp	.+132    	; 0x3640 <fat_open+0x506>
       !partition->device_write_interval
#else
       0
#endif
      )
        return 0;
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	41 c0       	rjmp	.+130    	; 0x3644 <fat_open+0x50a>
    35c2:	80 e0       	ldi	r24, 0x00	; 0
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	3e c0       	rjmp	.+124    	; 0x3644 <fat_open+0x50a>
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	3b c0       	rjmp	.+118    	; 0x3644 <fat_open+0x50a>
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif

    memset(fs, 0, sizeof(*fs));
    35ce:	ec ef       	ldi	r30, 0xFC	; 252
    35d0:	f3 e2       	ldi	r31, 0x23	; 35
    35d2:	82 e3       	ldi	r24, 0x32	; 50
    35d4:	df 01       	movw	r26, r30
    35d6:	1d 92       	st	X+, r1
    35d8:	8a 95       	dec	r24
    35da:	e9 f7       	brne	.-6      	; 0x35d6 <fat_open+0x49c>

    fs->partition = partition;
    35dc:	20 82       	st	Z, r2
    35de:	31 82       	std	Z+1, r3	; 0x01
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    35e0:	f1 01       	movw	r30, r2
    35e2:	81 84       	ldd	r8, Z+9	; 0x09
    35e4:	92 84       	ldd	r9, Z+10	; 0x0a
    35e6:	a3 84       	ldd	r10, Z+11	; 0x0b
    35e8:	b4 84       	ldd	r11, Z+12	; 0x0c
    35ea:	28 2d       	mov	r18, r8
    35ec:	39 2d       	mov	r19, r9
    35ee:	4a 2d       	mov	r20, r10
    35f0:	5b 2d       	mov	r21, r11
    35f2:	60 e0       	ldi	r22, 0x00	; 0
    35f4:	70 e0       	ldi	r23, 0x00	; 0
    35f6:	80 e0       	ldi	r24, 0x00	; 0
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	09 e0       	ldi	r16, 0x09	; 9
    35fc:	0e 94 6f 40 	call	0x80de	; 0x80de <__ashldi3>
    3600:	92 2e       	mov	r9, r18
    3602:	83 2e       	mov	r8, r19
    3604:	4e a7       	std	Y+46, r20	; 0x2e
    3606:	5f a7       	std	Y+47, r21	; 0x2f
    3608:	68 ab       	std	Y+48, r22	; 0x30
    360a:	79 ab       	std	Y+49, r23	; 0x31
    360c:	8a ab       	std	Y+50, r24	; 0x32
    360e:	9b ab       	std	Y+51, r25	; 0x33
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    3610:	ab e0       	ldi	r26, 0x0B	; 11
    3612:	0e 94 af 40 	call	0x815e	; 0x815e <__adddi3_s8>
    3616:	01 90       	ld	r0, Z+
    3618:	f0 81       	ld	r31, Z
    361a:	e0 2d       	mov	r30, r0
    361c:	0f 2e       	mov	r0, r31
    361e:	f5 e2       	ldi	r31, 0x25	; 37
    3620:	ef 2e       	mov	r14, r31
    3622:	f1 2c       	mov	r15, r1
    3624:	f0 2d       	mov	r31, r0
    3626:	8e 01       	movw	r16, r28
    3628:	0f 5f       	subi	r16, 0xFF	; 255
    362a:	1f 4f       	sbci	r17, 0xFF	; 255
    362c:	09 95       	icall
    362e:	81 11       	cpse	r24, r1
    3630:	b9 cd       	rjmp	.-1166   	; 0x31a4 <fat_open+0x6a>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
    3632:	10 92 fc 23 	sts	0x23FC, r1
    3636:	10 92 fd 23 	sts	0x23FD, r1
#endif
        return 0;
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	02 c0       	rjmp	.+4      	; 0x3644 <fat_open+0x50a>
    3640:	8c ef       	ldi	r24, 0xFC	; 252
    3642:	93 e2       	ldi	r25, 0x23	; 35
    }
    
    return fs;
}
    3644:	c3 5b       	subi	r28, 0xB3	; 179
    3646:	df 4f       	sbci	r29, 0xFF	; 255
    3648:	cd bf       	out	0x3d, r28	; 61
    364a:	de bf       	out	0x3e, r29	; 62
    364c:	df 91       	pop	r29
    364e:	cf 91       	pop	r28
    3650:	1f 91       	pop	r17
    3652:	0f 91       	pop	r16
    3654:	ff 90       	pop	r15
    3656:	ef 90       	pop	r14
    3658:	df 90       	pop	r13
    365a:	cf 90       	pop	r12
    365c:	bf 90       	pop	r11
    365e:	af 90       	pop	r10
    3660:	9f 90       	pop	r9
    3662:	8f 90       	pop	r8
    3664:	7f 90       	pop	r7
    3666:	6f 90       	pop	r6
    3668:	5f 90       	pop	r5
    366a:	4f 90       	pop	r4
    366c:	3f 90       	pop	r3
    366e:	2f 90       	pop	r2
    3670:	08 95       	ret

00003672 <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    3672:	cf 93       	push	r28
    3674:	df 93       	push	r29
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    3676:	00 97       	sbiw	r24, 0x00	; 0
    3678:	b1 f0       	breq	.+44     	; 0x36a6 <fat_open_dir+0x34>
    367a:	61 15       	cp	r22, r1
    367c:	71 05       	cpc	r23, r1
    367e:	b1 f0       	breq	.+44     	; 0x36ac <fat_open_dir+0x3a>
    3680:	fb 01       	movw	r30, r22
    3682:	20 a1       	ldd	r18, Z+32	; 0x20
    3684:	24 ff       	sbrs	r18, 4
    3686:	15 c0       	rjmp	.+42     	; 0x36b2 <fat_open_dir+0x40>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    3688:	20 91 8a 23 	lds	r18, 0x238A
    368c:	30 91 8b 23 	lds	r19, 0x238B
    3690:	23 2b       	or	r18, r19
    3692:	91 f0       	breq	.+36     	; 0x36b8 <fat_open_dir+0x46>
    3694:	20 91 c3 23 	lds	r18, 0x23C3
    3698:	30 91 c4 23 	lds	r19, 0x23C4
    369c:	23 2b       	or	r18, r19
    369e:	79 f0       	breq	.+30     	; 0x36be <fat_open_dir+0x4c>
            break;

        ++dd;
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	25 c0       	rjmp	.+74     	; 0x36f0 <fat_open_dir+0x7e>
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
        return 0;
    36a6:	80 e0       	ldi	r24, 0x00	; 0
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	22 c0       	rjmp	.+68     	; 0x36f0 <fat_open_dir+0x7e>
    36ac:	80 e0       	ldi	r24, 0x00	; 0
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	1f c0       	rjmp	.+62     	; 0x36f0 <fat_open_dir+0x7e>
    36b2:	80 e0       	ldi	r24, 0x00	; 0
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	1c c0       	rjmp	.+56     	; 0x36f0 <fat_open_dir+0x7e>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    36b8:	ca e8       	ldi	r28, 0x8A	; 138
    36ba:	d3 e2       	ldi	r29, 0x23	; 35
    36bc:	02 c0       	rjmp	.+4      	; 0x36c2 <fat_open_dir+0x50>
    36be:	c3 ec       	ldi	r28, 0xC3	; 195
    36c0:	d3 e2       	ldi	r29, 0x23	; 35
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    36c2:	de 01       	movw	r26, r28
    36c4:	12 96       	adiw	r26, 0x02	; 2
    36c6:	21 e3       	ldi	r18, 0x31	; 49
    36c8:	fb 01       	movw	r30, r22
    36ca:	01 90       	ld	r0, Z+
    36cc:	0d 92       	st	X+, r0
    36ce:	2a 95       	dec	r18
    36d0:	e1 f7       	brne	.-8      	; 0x36ca <fat_open_dir+0x58>
    dd->fs = fs;
    36d2:	88 83       	st	Y, r24
    36d4:	99 83       	std	Y+1, r25	; 0x01
    dd->entry_cluster = dir_entry->cluster;
    36d6:	fb 01       	movw	r30, r22
    36d8:	81 a1       	ldd	r24, Z+33	; 0x21
    36da:	92 a1       	ldd	r25, Z+34	; 0x22
    36dc:	a3 a1       	ldd	r26, Z+35	; 0x23
    36de:	b4 a1       	ldd	r27, Z+36	; 0x24
    36e0:	8b ab       	std	Y+51, r24	; 0x33
    36e2:	9c ab       	std	Y+52, r25	; 0x34
    36e4:	ad ab       	std	Y+53, r26	; 0x35
    36e6:	be ab       	std	Y+54, r27	; 0x36
    dd->entry_offset = 0;
    36e8:	1f aa       	std	Y+55, r1	; 0x37
    36ea:	18 ae       	std	Y+56, r1	; 0x38

    return dd;
    36ec:	8c 2f       	mov	r24, r28
    36ee:	9d 2f       	mov	r25, r29
}
    36f0:	df 91       	pop	r29
    36f2:	cf 91       	pop	r28
    36f4:	08 95       	ret

000036f6 <fat_close_dir>:
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    if(dd)
    36f6:	00 97       	sbiw	r24, 0x00	; 0
    36f8:	19 f0       	breq	.+6      	; 0x3700 <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    36fa:	fc 01       	movw	r30, r24
    36fc:	10 82       	st	Z, r1
    36fe:	11 82       	std	Z+1, r1	; 0x01
    3700:	08 95       	ret

00003702 <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    3702:	fc 01       	movw	r30, r24
    if(!dd)
    3704:	00 97       	sbiw	r24, 0x00	; 0
    3706:	61 f0       	breq	.+24     	; 0x3720 <fat_reset_dir+0x1e>
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    3708:	43 a1       	ldd	r20, Z+35	; 0x23
    370a:	54 a1       	ldd	r21, Z+36	; 0x24
    370c:	65 a1       	ldd	r22, Z+37	; 0x25
    370e:	76 a1       	ldd	r23, Z+38	; 0x26
    3710:	43 ab       	std	Z+51, r20	; 0x33
    3712:	54 ab       	std	Z+52, r21	; 0x34
    3714:	65 ab       	std	Z+53, r22	; 0x35
    3716:	76 ab       	std	Z+54, r23	; 0x36
    dd->entry_offset = 0;
    3718:	17 aa       	std	Z+55, r1	; 0x37
    371a:	10 ae       	std	Z+56, r1	; 0x38
    return 1;
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	08 95       	ret
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;
    3720:	80 e0       	ldi	r24, 0x00	; 0

    dd->entry_cluster = dd->dir_entry.cluster;
    dd->entry_offset = 0;
    return 1;
}
    3722:	08 95       	ret

00003724 <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    3724:	2f 92       	push	r2
    3726:	3f 92       	push	r3
    3728:	4f 92       	push	r4
    372a:	5f 92       	push	r5
    372c:	6f 92       	push	r6
    372e:	7f 92       	push	r7
    3730:	8f 92       	push	r8
    3732:	9f 92       	push	r9
    3734:	af 92       	push	r10
    3736:	bf 92       	push	r11
    3738:	cf 92       	push	r12
    373a:	df 92       	push	r13
    373c:	ef 92       	push	r14
    373e:	ff 92       	push	r15
    3740:	0f 93       	push	r16
    3742:	1f 93       	push	r17
    3744:	cf 93       	push	r28
    3746:	df 93       	push	r29
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    374c:	e8 97       	sbiw	r28, 0x38	; 56
    374e:	cd bf       	out	0x3d, r28	; 61
    3750:	de bf       	out	0x3e, r29	; 62
    3752:	8d ab       	std	Y+53, r24	; 0x35
    3754:	9e ab       	std	Y+54, r25	; 0x36
    if(!dd || !dir_entry)
    3756:	00 97       	sbiw	r24, 0x00	; 0
    3758:	09 f4       	brne	.+2      	; 0x375c <fat_read_dir+0x38>
    375a:	fb c0       	rjmp	.+502    	; 0x3952 <fat_read_dir+0x22e>
    375c:	61 15       	cp	r22, r1
    375e:	71 05       	cpc	r23, r1
    3760:	09 f4       	brne	.+2      	; 0x3764 <fat_read_dir+0x40>
    3762:	f9 c0       	rjmp	.+498    	; 0x3956 <fat_read_dir+0x232>
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    3764:	dc 01       	movw	r26, r24
    3766:	0d 90       	ld	r0, X+
    3768:	bc 91       	ld	r27, X
    376a:	a0 2d       	mov	r26, r0
    376c:	af ab       	std	Y+55, r26	; 0x37
    376e:	b8 af       	std	Y+56, r27	; 0x38
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    3770:	58 96       	adiw	r26, 0x18	; 24
    3772:	ed 91       	ld	r30, X+
    3774:	fc 91       	ld	r31, X
    3776:	59 97       	sbiw	r26, 0x19	; 25
    3778:	ef a7       	std	Y+47, r30	; 0x2f
    377a:	f8 ab       	std	Y+48, r31	; 0x30
    cluster_t cluster_num = dd->entry_cluster;
    377c:	dc 01       	movw	r26, r24
    377e:	d3 96       	adiw	r26, 0x33	; 51
    3780:	4d 90       	ld	r4, X+
    3782:	5d 90       	ld	r5, X+
    3784:	6d 90       	ld	r6, X+
    3786:	7c 90       	ld	r7, X
    3788:	d6 97       	sbiw	r26, 0x36	; 54
    uint16_t cluster_offset = dd->entry_offset;
    378a:	d7 96       	adiw	r26, 0x37	; 55
    378c:	2d 90       	ld	r2, X+
    378e:	3c 90       	ld	r3, X
    3790:	d8 97       	sbiw	r26, 0x38	; 56
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
    3792:	2e 16       	cp	r2, r30
    3794:	3f 06       	cpc	r3, r31
    3796:	20 f0       	brcs	.+8      	; 0x37a0 <fat_read_dir+0x7c>
        /* The latest call hit the border of the last cluster in
         * the chain, but it still returned a directory entry.
         * So we now reset the handle and signal the caller the
         * end of the listing.
         */
        fat_reset_dir(dd);
    3798:	0e 94 81 1b 	call	0x3702	; 0x3702 <fat_reset_dir>
        return 0;
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	de c0       	rjmp	.+444    	; 0x395c <fat_read_dir+0x238>
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    37a0:	fe 01       	movw	r30, r28
    37a2:	31 96       	adiw	r30, 0x01	; 1
    37a4:	86 e0       	ldi	r24, 0x06	; 6
    37a6:	df 01       	movw	r26, r30
    37a8:	1d 92       	st	X+, r1
    37aa:	8a 95       	dec	r24
    37ac:	e9 f7       	brne	.-6      	; 0x37a8 <fat_read_dir+0x84>
    memset(dir_entry, 0, sizeof(*dir_entry));
    37ae:	81 e3       	ldi	r24, 0x31	; 49
    37b0:	fb 01       	movw	r30, r22
    37b2:	11 92       	st	Z+, r1
    37b4:	8a 95       	dec	r24
    37b6:	e9 f7       	brne	.-6      	; 0x37b2 <fat_read_dir+0x8e>
    arg.dir_entry = dir_entry;
    37b8:	69 83       	std	Y+1, r22	; 0x01
    37ba:	7a 83       	std	Y+2, r23	; 0x02

    /* check if we read from the root directory */
    if(cluster_num == 0)
    37bc:	41 14       	cp	r4, r1
    37be:	51 04       	cpc	r5, r1
    37c0:	61 04       	cpc	r6, r1
    37c2:	71 04       	cpc	r7, r1
    37c4:	09 f0       	breq	.+2      	; 0x37c8 <fat_read_dir+0xa4>
    37c6:	a9 c0       	rjmp	.+338    	; 0x391a <fat_read_dir+0x1f6>
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
    37c8:	af a9       	ldd	r26, Y+55	; 0x37
    37ca:	b8 ad       	ldd	r27, Y+56	; 0x38
    37cc:	ed 91       	ld	r30, X+
    37ce:	fc 91       	ld	r31, X
    37d0:	11 97       	sbiw	r26, 0x01	; 1
    37d2:	80 85       	ldd	r24, Z+8	; 0x08
    37d4:	8b 30       	cpi	r24, 0x0B	; 11
    37d6:	39 f4       	brne	.+14     	; 0x37e6 <fat_read_dir+0xc2>
            cluster_num = header->root_dir_cluster;
    37d8:	9a 96       	adiw	r26, 0x2a	; 42
    37da:	4d 90       	ld	r4, X+
    37dc:	5d 90       	ld	r5, X+
    37de:	6d 90       	ld	r6, X+
    37e0:	7c 90       	ld	r7, X
    37e2:	9d 97       	sbiw	r26, 0x2d	; 45
    37e4:	9a c0       	rjmp	.+308    	; 0x391a <fat_read_dir+0x1f6>
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    37e6:	ef a9       	ldd	r30, Y+55	; 0x37
    37e8:	f8 ad       	ldd	r31, Y+56	; 0x38
    37ea:	22 8d       	ldd	r18, Z+26	; 0x1a
    37ec:	33 8d       	ldd	r19, Z+27	; 0x1b
    37ee:	82 a1       	ldd	r24, Z+34	; 0x22
    37f0:	93 a1       	ldd	r25, Z+35	; 0x23
    37f2:	a9 01       	movw	r20, r18
    37f4:	48 1b       	sub	r20, r24
    37f6:	59 0b       	sbc	r21, r25
    37f8:	4f a7       	std	Y+47, r20	; 0x2f
    37fa:	58 ab       	std	Y+48, r21	; 0x30
    37fc:	8e c0       	rjmp	.+284    	; 0x391a <fat_read_dir+0x1f6>
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
    37fe:	6f a4       	ldd	r6, Y+47	; 0x2f
    3800:	78 a8       	ldd	r7, Y+48	; 0x30
    3802:	62 18       	sub	r6, r2
    3804:	73 08       	sbc	r7, r3
        offset_t pos = cluster_offset;
    3806:	91 01       	movw	r18, r2
    3808:	40 e0       	ldi	r20, 0x00	; 0
    380a:	50 e0       	ldi	r21, 0x00	; 0
    380c:	60 e0       	ldi	r22, 0x00	; 0
    380e:	70 e0       	ldi	r23, 0x00	; 0
    3810:	cb 01       	movw	r24, r22
    3812:	2f a2       	std	Y+39, r2	; 0x27
    3814:	38 a7       	std	Y+40, r19	; 0x28
    3816:	49 a7       	std	Y+41, r20	; 0x29
    3818:	5a a7       	std	Y+42, r21	; 0x2a
    381a:	6b a7       	std	Y+43, r22	; 0x2b
    381c:	7c a7       	std	Y+44, r23	; 0x2c
    381e:	8d a7       	std	Y+45, r24	; 0x2d
    3820:	9e a7       	std	Y+46, r25	; 0x2e
        if(cluster_num == 0)
    3822:	49 a9       	ldd	r20, Y+49	; 0x31
    3824:	5a a9       	ldd	r21, Y+50	; 0x32
    3826:	6b a9       	ldd	r22, Y+51	; 0x33
    3828:	7c a9       	ldd	r23, Y+52	; 0x34
    382a:	45 2b       	or	r20, r21
    382c:	46 2b       	or	r20, r22
    382e:	47 2b       	or	r20, r23
    3830:	09 f5       	brne	.+66     	; 0x3874 <fat_read_dir+0x150>
            pos += header->root_dir_offset;
    3832:	40 e0       	ldi	r20, 0x00	; 0
    3834:	50 e0       	ldi	r21, 0x00	; 0
    3836:	60 e0       	ldi	r22, 0x00	; 0
    3838:	70 e0       	ldi	r23, 0x00	; 0
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	d2 01       	movw	r26, r4
    3840:	92 96       	adiw	r26, 0x22	; 34
    3842:	ac 90       	ld	r10, X
    3844:	92 97       	sbiw	r26, 0x22	; 34
    3846:	93 96       	adiw	r26, 0x23	; 35
    3848:	bc 90       	ld	r11, X
    384a:	93 97       	sbiw	r26, 0x23	; 35
    384c:	94 96       	adiw	r26, 0x24	; 36
    384e:	cc 90       	ld	r12, X
    3850:	94 97       	sbiw	r26, 0x24	; 36
    3852:	95 96       	adiw	r26, 0x25	; 37
    3854:	dc 90       	ld	r13, X
    3856:	95 97       	sbiw	r26, 0x25	; 37
    3858:	96 96       	adiw	r26, 0x26	; 38
    385a:	ec 90       	ld	r14, X
    385c:	96 97       	sbiw	r26, 0x26	; 38
    385e:	97 96       	adiw	r26, 0x27	; 39
    3860:	fc 90       	ld	r15, X
    3862:	97 97       	sbiw	r26, 0x27	; 39
    3864:	98 96       	adiw	r26, 0x28	; 40
    3866:	0c 91       	ld	r16, X
    3868:	98 97       	sbiw	r26, 0x28	; 40
    386a:	99 96       	adiw	r26, 0x29	; 41
    386c:	1c 91       	ld	r17, X
    386e:	0e 94 a6 40 	call	0x814c	; 0x814c <__adddi3>
    3872:	11 c0       	rjmp	.+34     	; 0x3896 <fat_read_dir+0x172>
        else
            pos += fat_cluster_offset(fs, cluster_num);
    3874:	49 a9       	ldd	r20, Y+49	; 0x31
    3876:	5a a9       	ldd	r21, Y+50	; 0x32
    3878:	6b a9       	ldd	r22, Y+51	; 0x33
    387a:	7c a9       	ldd	r23, Y+52	; 0x34
    387c:	c2 01       	movw	r24, r4
    387e:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <fat_cluster_offset>
    3882:	af a0       	ldd	r10, Y+39	; 0x27
    3884:	b8 a4       	ldd	r11, Y+40	; 0x28
    3886:	c1 2c       	mov	r12, r1
    3888:	d1 2c       	mov	r13, r1
    388a:	e1 2c       	mov	r14, r1
    388c:	f1 2c       	mov	r15, r1
    388e:	00 e0       	ldi	r16, 0x00	; 0
    3890:	10 e0       	ldi	r17, 0x00	; 0
    3892:	0e 94 a6 40 	call	0x814c	; 0x814c <__adddi3>

        arg.bytes_read = 0;
    3896:	1b 82       	std	Y+3, r1	; 0x03
    3898:	1c 82       	std	Y+4, r1	; 0x04
        if(!fs->partition->device_read_interval(pos,
    389a:	d2 01       	movw	r26, r4
    389c:	ed 91       	ld	r30, X+
    389e:	fc 91       	ld	r31, X
    38a0:	02 80       	ldd	r0, Z+2	; 0x02
    38a2:	f3 81       	ldd	r31, Z+3	; 0x03
    38a4:	e0 2d       	mov	r30, r0
    38a6:	de 01       	movw	r26, r28
    38a8:	11 96       	adiw	r26, 0x01	; 1
    38aa:	4d 01       	movw	r8, r26
    38ac:	0f 2e       	mov	r0, r31
    38ae:	fd e1       	ldi	r31, 0x1D	; 29
    38b0:	af 2e       	mov	r10, r31
    38b2:	f7 e1       	ldi	r31, 0x17	; 23
    38b4:	bf 2e       	mov	r11, r31
    38b6:	f0 2d       	mov	r31, r0
    38b8:	63 01       	movw	r12, r6
    38ba:	68 94       	set
    38bc:	ee 24       	eor	r14, r14
    38be:	e5 f8       	bld	r14, 5
    38c0:	f1 2c       	mov	r15, r1
    38c2:	8e 01       	movw	r16, r28
    38c4:	09 5f       	subi	r16, 0xF9	; 249
    38c6:	1f 4f       	sbci	r17, 0xFF	; 255
    38c8:	09 95       	icall
    38ca:	88 23       	and	r24, r24
    38cc:	09 f4       	brne	.+2      	; 0x38d0 <fat_read_dir+0x1ac>
    38ce:	45 c0       	rjmp	.+138    	; 0x395a <fat_read_dir+0x236>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    38d0:	8b 81       	ldd	r24, Y+3	; 0x03
    38d2:	9c 81       	ldd	r25, Y+4	; 0x04
    38d4:	28 0e       	add	r2, r24
    38d6:	39 1e       	adc	r3, r25

        if(cluster_offset >= cluster_size)
    38d8:	ef a5       	ldd	r30, Y+47	; 0x2f
    38da:	f8 a9       	ldd	r31, Y+48	; 0x30
    38dc:	2e 16       	cp	r2, r30
    38de:	3f 06       	cpc	r3, r31
    38e0:	10 f1       	brcs	.+68     	; 0x3926 <fat_read_dir+0x202>
    38e2:	49 a8       	ldd	r4, Y+49	; 0x31
    38e4:	5a a8       	ldd	r5, Y+50	; 0x32
    38e6:	6b a8       	ldd	r6, Y+51	; 0x33
    38e8:	7c a8       	ldd	r7, Y+52	; 0x34
        {
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
    38ea:	b3 01       	movw	r22, r6
    38ec:	a2 01       	movw	r20, r4
    38ee:	8f a9       	ldd	r24, Y+55	; 0x37
    38f0:	98 ad       	ldd	r25, Y+56	; 0x38
    38f2:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <fat_get_next_cluster>
    38f6:	2b 01       	movw	r4, r22
    38f8:	3c 01       	movw	r6, r24
    38fa:	61 15       	cp	r22, r1
    38fc:	71 05       	cpc	r23, r1
    38fe:	81 05       	cpc	r24, r1
    3900:	91 05       	cpc	r25, r1
    3902:	49 f4       	brne	.+18     	; 0x3916 <fat_read_dir+0x1f2>
                cluster_offset = 0;
                continue;
            }

            /* we are at the end of the cluster chain */
            if(!arg.finished)
    3904:	8e 81       	ldd	r24, Y+6	; 0x06
    3906:	81 11       	cpse	r24, r1
    3908:	16 c0       	rjmp	.+44     	; 0x3936 <fat_read_dir+0x212>
            {
                /* directory entry not found, reset directory handle */
                fat_reset_dir(dd);
    390a:	8d a9       	ldd	r24, Y+53	; 0x35
    390c:	9e a9       	ldd	r25, Y+54	; 0x36
    390e:	0e 94 81 1b 	call	0x3702	; 0x3702 <fat_reset_dir>
                return 0;
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	23 c0       	rjmp	.+70     	; 0x395c <fat_read_dir+0x238>
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
            {
                cluster_offset = 0;
    3916:	21 2c       	mov	r2, r1
    3918:	31 2c       	mov	r3, r1
    391a:	49 aa       	std	Y+49, r4	; 0x31
    391c:	5a aa       	std	Y+50, r5	; 0x32
    391e:	6b aa       	std	Y+51, r6	; 0x33
    3920:	7c aa       	std	Y+52, r7	; 0x34
    3922:	4f a8       	ldd	r4, Y+55	; 0x37
    3924:	58 ac       	ldd	r5, Y+56	; 0x38
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    3926:	8e 81       	ldd	r24, Y+6	; 0x06
    3928:	88 23       	and	r24, r24
    392a:	09 f4       	brne	.+2      	; 0x392e <fat_read_dir+0x20a>
    392c:	68 cf       	rjmp	.-304    	; 0x37fe <fat_read_dir+0xda>
    392e:	49 a8       	ldd	r4, Y+49	; 0x31
    3930:	5a a8       	ldd	r5, Y+50	; 0x32
    3932:	6b a8       	ldd	r6, Y+51	; 0x33
    3934:	7c a8       	ldd	r7, Y+52	; 0x34

            break;
        }
    }

    dd->entry_cluster = cluster_num;
    3936:	ad a9       	ldd	r26, Y+53	; 0x35
    3938:	be a9       	ldd	r27, Y+54	; 0x36
    393a:	d3 96       	adiw	r26, 0x33	; 51
    393c:	4d 92       	st	X+, r4
    393e:	5d 92       	st	X+, r5
    3940:	6d 92       	st	X+, r6
    3942:	7c 92       	st	X, r7
    3944:	d6 97       	sbiw	r26, 0x36	; 54
    dd->entry_offset = cluster_offset;
    3946:	d7 96       	adiw	r26, 0x37	; 55
    3948:	2d 92       	st	X+, r2
    394a:	3c 92       	st	X, r3
    394c:	d8 97       	sbiw	r26, 0x38	; 56

    return arg.finished;
    394e:	8e 81       	ldd	r24, Y+6	; 0x06
    3950:	05 c0       	rjmp	.+10     	; 0x395c <fat_read_dir+0x238>
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    if(!dd || !dir_entry)
        return 0;
    3952:	80 e0       	ldi	r24, 0x00	; 0
    3954:	03 c0       	rjmp	.+6      	; 0x395c <fat_read_dir+0x238>
    3956:	80 e0       	ldi	r24, 0x00	; 0
    3958:	01 c0       	rjmp	.+2      	; 0x395c <fat_read_dir+0x238>
                                                sizeof(buffer),
                                                cluster_left,
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;
    395a:	80 e0       	ldi	r24, 0x00	; 0

    dd->entry_cluster = cluster_num;
    dd->entry_offset = cluster_offset;

    return arg.finished;
}
    395c:	e8 96       	adiw	r28, 0x38	; 56
    395e:	cd bf       	out	0x3d, r28	; 61
    3960:	de bf       	out	0x3e, r29	; 62
    3962:	df 91       	pop	r29
    3964:	cf 91       	pop	r28
    3966:	1f 91       	pop	r17
    3968:	0f 91       	pop	r16
    396a:	ff 90       	pop	r15
    396c:	ef 90       	pop	r14
    396e:	df 90       	pop	r13
    3970:	cf 90       	pop	r12
    3972:	bf 90       	pop	r11
    3974:	af 90       	pop	r10
    3976:	9f 90       	pop	r9
    3978:	8f 90       	pop	r8
    397a:	7f 90       	pop	r7
    397c:	6f 90       	pop	r6
    397e:	5f 90       	pop	r5
    3980:	4f 90       	pop	r4
    3982:	3f 90       	pop	r3
    3984:	2f 90       	pop	r2
    3986:	08 95       	ret

00003988 <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    3988:	6f 92       	push	r6
    398a:	7f 92       	push	r7
    398c:	8f 92       	push	r8
    398e:	9f 92       	push	r9
    3990:	af 92       	push	r10
    3992:	bf 92       	push	r11
    3994:	cf 92       	push	r12
    3996:	df 92       	push	r13
    3998:	ef 92       	push	r14
    399a:	ff 92       	push	r15
    399c:	0f 93       	push	r16
    399e:	1f 93       	push	r17
    39a0:	cf 93       	push	r28
    39a2:	df 93       	push	r29
    39a4:	5c 01       	movw	r10, r24
    39a6:	6b 01       	movw	r12, r22
    39a8:	ea 01       	movw	r28, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    39aa:	00 97       	sbiw	r24, 0x00	; 0
    39ac:	09 f4       	brne	.+2      	; 0x39b0 <fat_get_dir_entry_of_path+0x28>
    39ae:	72 c0       	rjmp	.+228    	; 0x3a94 <fat_get_dir_entry_of_path+0x10c>
    39b0:	61 15       	cp	r22, r1
    39b2:	71 05       	cpc	r23, r1
    39b4:	09 f4       	brne	.+2      	; 0x39b8 <fat_get_dir_entry_of_path+0x30>
    39b6:	70 c0       	rjmp	.+224    	; 0x3a98 <fat_get_dir_entry_of_path+0x110>
    39b8:	fb 01       	movw	r30, r22
    39ba:	80 81       	ld	r24, Z
    39bc:	88 23       	and	r24, r24
    39be:	09 f4       	brne	.+2      	; 0x39c2 <fat_get_dir_entry_of_path+0x3a>
    39c0:	6d c0       	rjmp	.+218    	; 0x3a9c <fat_get_dir_entry_of_path+0x114>
    39c2:	20 97       	sbiw	r28, 0x00	; 0
    39c4:	09 f4       	brne	.+2      	; 0x39c8 <fat_get_dir_entry_of_path+0x40>
    39c6:	6c c0       	rjmp	.+216    	; 0x3aa0 <fat_get_dir_entry_of_path+0x118>
        return 0;

    if(path[0] == '/')
    39c8:	8f 32       	cpi	r24, 0x2F	; 47
    39ca:	19 f4       	brne	.+6      	; 0x39d2 <fat_get_dir_entry_of_path+0x4a>
        ++path;
    39cc:	ff ef       	ldi	r31, 0xFF	; 255
    39ce:	cf 1a       	sub	r12, r31
    39d0:	df 0a       	sbc	r13, r31

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    39d2:	81 e3       	ldi	r24, 0x31	; 49
    39d4:	fe 01       	movw	r30, r28
    39d6:	11 92       	st	Z+, r1
    39d8:	8a 95       	dec	r24
    39da:	e9 f7       	brne	.-6      	; 0x39d6 <fat_get_dir_entry_of_path+0x4e>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    39dc:	80 e1       	ldi	r24, 0x10	; 16
    39de:	88 a3       	std	Y+32, r24	; 0x20

    while(1)
    {
        if(path[0] == '\0')
    39e0:	f6 01       	movw	r30, r12
    39e2:	80 81       	ld	r24, Z
    39e4:	88 23       	and	r24, r24
    39e6:	09 f4       	brne	.+2      	; 0x39ea <fat_get_dir_entry_of_path+0x62>
    39e8:	5d c0       	rjmp	.+186    	; 0x3aa4 <fat_get_dir_entry_of_path+0x11c>
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    39ea:	be 01       	movw	r22, r28
    39ec:	c5 01       	movw	r24, r10
    39ee:	0e 94 39 1b 	call	0x3672	; 0x3672 <fat_open_dir>
    39f2:	8c 01       	movw	r16, r24
        if(!dd)
    39f4:	00 97       	sbiw	r24, 0x00	; 0
    39f6:	09 f4       	brne	.+2      	; 0x39fa <fat_get_dir_entry_of_path+0x72>
    39f8:	57 c0       	rjmp	.+174    	; 0x3aa8 <fat_get_dir_entry_of_path+0x120>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    39fa:	6f e2       	ldi	r22, 0x2F	; 47
    39fc:	70 e0       	ldi	r23, 0x00	; 0
    39fe:	c6 01       	movw	r24, r12
    3a00:	0e 94 e9 42 	call	0x85d2	; 0x85d2 <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    3a04:	00 97       	sbiw	r24, 0x00	; 0
    3a06:	41 f0       	breq	.+16     	; 0x3a18 <fat_get_dir_entry_of_path+0x90>
        {
            length_to_sep = sub_path - path;
    3a08:	e8 2e       	mov	r14, r24
    3a0a:	ec 18       	sub	r14, r12
            ++sub_path;
    3a0c:	4c 01       	movw	r8, r24
    3a0e:	ff ef       	ldi	r31, 0xFF	; 255
    3a10:	8f 1a       	sub	r8, r31
    3a12:	9f 0a       	sbc	r9, r31
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    3a14:	f1 2c       	mov	r15, r1
    3a16:	2c c0       	rjmp	.+88     	; 0x3a70 <fat_get_dir_entry_of_path+0xe8>
            length_to_sep = sub_path - path;
            ++sub_path;
        }
        else
        {
            length_to_sep = strlen(path);
    3a18:	f6 01       	movw	r30, r12
    3a1a:	01 90       	ld	r0, Z+
    3a1c:	00 20       	and	r0, r0
    3a1e:	e9 f7       	brne	.-6      	; 0x3a1a <fat_get_dir_entry_of_path+0x92>
    3a20:	31 97       	sbiw	r30, 0x01	; 1
    3a22:	ec 19       	sub	r30, r12
    3a24:	fd 09       	sbc	r31, r13
    3a26:	ee 2e       	mov	r14, r30
            sub_path = path + length_to_sep;
    3a28:	46 01       	movw	r8, r12
    3a2a:	8e 0e       	add	r8, r30
    3a2c:	91 1c       	adc	r9, r1
    3a2e:	f2 cf       	rjmp	.-28     	; 0x3a14 <fat_get_dir_entry_of_path+0x8c>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    3a30:	fe 01       	movw	r30, r28
    3a32:	01 90       	ld	r0, Z+
    3a34:	00 20       	and	r0, r0
    3a36:	e9 f7       	brne	.-6      	; 0x3a32 <fat_get_dir_entry_of_path+0xaa>
    3a38:	31 97       	sbiw	r30, 0x01	; 1
    3a3a:	3f 01       	movw	r6, r30
    3a3c:	6c 1a       	sub	r6, r28
    3a3e:	7d 0a       	sbc	r7, r29
    3a40:	6e 14       	cp	r6, r14
    3a42:	7f 04       	cpc	r7, r15
    3a44:	a9 f4       	brne	.+42     	; 0x3a70 <fat_get_dir_entry_of_path+0xe8>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
    3a46:	a3 01       	movw	r20, r6
    3a48:	be 01       	movw	r22, r28
    3a4a:	c6 01       	movw	r24, r12
    3a4c:	0e 94 f4 42 	call	0x85e8	; 0x85e8 <strncmp>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    3a50:	89 2b       	or	r24, r25
    3a52:	71 f4       	brne	.+28     	; 0x3a70 <fat_get_dir_entry_of_path+0xe8>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
    3a54:	c8 01       	movw	r24, r16
    3a56:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <fat_close_dir>
            dd = 0;

            if(path[length_to_sep] == '\0')
    3a5a:	f6 01       	movw	r30, r12
    3a5c:	e6 0d       	add	r30, r6
    3a5e:	f7 1d       	adc	r31, r7
    3a60:	80 81       	ld	r24, Z
    3a62:	88 23       	and	r24, r24
    3a64:	19 f1       	breq	.+70     	; 0x3aac <fat_get_dir_entry_of_path+0x124>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    3a66:	88 a1       	ldd	r24, Y+32	; 0x20
    3a68:	84 fd       	sbrc	r24, 4
    3a6a:	09 c0       	rjmp	.+18     	; 0x3a7e <fat_get_dir_entry_of_path+0xf6>
                path = sub_path;
                break;
            }

            /* a parent of the file exists, but not the file itself */
            return 0;
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
    3a6e:	21 c0       	rjmp	.+66     	; 0x3ab2 <fat_get_dir_entry_of_path+0x12a>
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    3a70:	be 01       	movw	r22, r28
    3a72:	c8 01       	movw	r24, r16
    3a74:	0e 94 92 1b 	call	0x3724	; 0x3724 <fat_read_dir>
    3a78:	81 11       	cpse	r24, r1
    3a7a:	da cf       	rjmp	.-76     	; 0x3a30 <fat_get_dir_entry_of_path+0xa8>
    3a7c:	03 c0       	rjmp	.+6      	; 0x3a84 <fat_get_dir_entry_of_path+0xfc>
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
            {
                /* we found a parent directory of the file we are searching for */
                path = sub_path;
    3a7e:	64 01       	movw	r12, r8
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
    3a80:	00 e0       	ldi	r16, 0x00	; 0
    3a82:	10 e0       	ldi	r17, 0x00	; 0

            /* a parent of the file exists, but not the file itself */
            return 0;
        }

        fat_close_dir(dd);
    3a84:	c8 01       	movw	r24, r16
    3a86:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <fat_close_dir>
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    3a8a:	f6 01       	movw	r30, r12
    3a8c:	80 81       	ld	r24, Z
    3a8e:	81 11       	cpse	r24, r1
    3a90:	ac cf       	rjmp	.-168    	; 0x39ea <fat_get_dir_entry_of_path+0x62>
    3a92:	0e c0       	rjmp	.+28     	; 0x3ab0 <fat_get_dir_entry_of_path+0x128>
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
        return 0;
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	0d c0       	rjmp	.+26     	; 0x3ab2 <fat_get_dir_entry_of_path+0x12a>
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	0b c0       	rjmp	.+22     	; 0x3ab2 <fat_get_dir_entry_of_path+0x12a>
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	09 c0       	rjmp	.+18     	; 0x3ab2 <fat_get_dir_entry_of_path+0x12a>
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	07 c0       	rjmp	.+14     	; 0x3ab2 <fat_get_dir_entry_of_path+0x12a>
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
            return 1;
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	05 c0       	rjmp	.+10     	; 0x3ab2 <fat_get_dir_entry_of_path+0x12a>
        }

        fat_close_dir(dd);
    }
    
    return 0;
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	03 c0       	rjmp	.+6      	; 0x3ab2 <fat_get_dir_entry_of_path+0x12a>
            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
                /* we iterated through the whole path and have found the file */
                return 1;
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	01 c0       	rjmp	.+2      	; 0x3ab2 <fat_get_dir_entry_of_path+0x12a>
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
            return 1;
    3ab0:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    3ab2:	df 91       	pop	r29
    3ab4:	cf 91       	pop	r28
    3ab6:	1f 91       	pop	r17
    3ab8:	0f 91       	pop	r16
    3aba:	ff 90       	pop	r15
    3abc:	ef 90       	pop	r14
    3abe:	df 90       	pop	r13
    3ac0:	cf 90       	pop	r12
    3ac2:	bf 90       	pop	r11
    3ac4:	af 90       	pop	r10
    3ac6:	9f 90       	pop	r9
    3ac8:	8f 90       	pop	r8
    3aca:	7f 90       	pop	r7
    3acc:	6f 90       	pop	r6
    3ace:	08 95       	ret

00003ad0 <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    3ad0:	5f 92       	push	r5
    3ad2:	6f 92       	push	r6
    3ad4:	7f 92       	push	r7
    3ad6:	8f 92       	push	r8
    3ad8:	9f 92       	push	r9
    3ada:	af 92       	push	r10
    3adc:	bf 92       	push	r11
    3ade:	cf 92       	push	r12
    3ae0:	df 92       	push	r13
    3ae2:	ef 92       	push	r14
    3ae4:	ff 92       	push	r15
    3ae6:	0f 93       	push	r16
    3ae8:	1f 93       	push	r17
    3aea:	cf 93       	push	r28
    3aec:	df 93       	push	r29
    3aee:	cd b7       	in	r28, 0x3d	; 61
    3af0:	de b7       	in	r29, 0x3e	; 62
    3af2:	60 97       	sbiw	r28, 0x10	; 16
    3af4:	cd bf       	out	0x3d, r28	; 61
    3af6:	de bf       	out	0x3e, r29	; 62
    3af8:	6c 01       	movw	r12, r24
    3afa:	5b 01       	movw	r10, r22
    3afc:	3a 01       	movw	r6, r20
    3afe:	49 01       	movw	r8, r18
    3b00:	50 2e       	mov	r5, r16
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    3b02:	00 97       	sbiw	r24, 0x00	; 0
    3b04:	09 f4       	brne	.+2      	; 0x3b08 <partition_open+0x38>
    3b06:	53 c0       	rjmp	.+166    	; 0x3bae <partition_open+0xde>
    3b08:	61 15       	cp	r22, r1
    3b0a:	71 05       	cpc	r23, r1
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <partition_open+0x40>
    3b0e:	52 c0       	rjmp	.+164    	; 0x3bb4 <partition_open+0xe4>
    3b10:	83 e0       	ldi	r24, 0x03	; 3
    3b12:	80 17       	cp	r24, r16
    3b14:	0c f4       	brge	.+2      	; 0x3b18 <partition_open+0x48>
    3b16:	51 c0       	rjmp	.+162    	; 0x3bba <partition_open+0xea>
        return 0;

    if(index >= 0)
    3b18:	00 23       	and	r16, r16
    3b1a:	f4 f0       	brlt	.+60     	; 0x3b58 <partition_open+0x88>
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    3b1c:	90 e1       	ldi	r25, 0x10	; 16
    3b1e:	09 02       	muls	r16, r25
    3b20:	f0 01       	movw	r30, r0
    3b22:	11 24       	eor	r1, r1
    3b24:	e2 54       	subi	r30, 0x42	; 66
    3b26:	fe 4f       	sbci	r31, 0xFE	; 254
    3b28:	9f 2f       	mov	r25, r31
    3b2a:	99 0f       	add	r25, r25
    3b2c:	99 0b       	sbc	r25, r25
    3b2e:	68 94       	set
    3b30:	ee 24       	eor	r14, r14
    3b32:	e4 f8       	bld	r14, 4
    3b34:	f1 2c       	mov	r15, r1
    3b36:	8e 01       	movw	r16, r28
    3b38:	0f 5f       	subi	r16, 0xFF	; 255
    3b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b3c:	2e 2f       	mov	r18, r30
    3b3e:	3f 2f       	mov	r19, r31
    3b40:	49 2f       	mov	r20, r25
    3b42:	59 2f       	mov	r21, r25
    3b44:	69 2f       	mov	r22, r25
    3b46:	79 2f       	mov	r23, r25
    3b48:	89 2f       	mov	r24, r25
    3b4a:	f6 01       	movw	r30, r12
    3b4c:	09 95       	icall
    3b4e:	88 23       	and	r24, r24
    3b50:	b9 f1       	breq	.+110    	; 0x3bc0 <partition_open+0xf0>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    3b52:	8d 81       	ldd	r24, Y+5	; 0x05
    3b54:	88 23       	and	r24, r24
    3b56:	b9 f1       	breq	.+110    	; 0x3bc6 <partition_open+0xf6>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    3b58:	80 91 36 24 	lds	r24, 0x2436
    3b5c:	88 23       	and	r24, r24
    3b5e:	b1 f1       	breq	.+108    	; 0x3bcc <partition_open+0xfc>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    3b60:	80 e0       	ldi	r24, 0x00	; 0
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	4c c0       	rjmp	.+152    	; 0x3bfe <partition_open+0x12e>
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    3b66:	8d 81       	ldd	r24, Y+5	; 0x05
    3b68:	80 93 36 24 	sts	0x2436, r24
        new_partition->offset = read32(&buffer[8]);
    3b6c:	89 85       	ldd	r24, Y+9	; 0x09
    3b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b70:	ab 85       	ldd	r26, Y+11	; 0x0b
    3b72:	bc 85       	ldd	r27, Y+12	; 0x0c
    3b74:	80 93 37 24 	sts	0x2437, r24
    3b78:	90 93 38 24 	sts	0x2438, r25
    3b7c:	a0 93 39 24 	sts	0x2439, r26
    3b80:	b0 93 3a 24 	sts	0x243A, r27
        new_partition->length = read32(&buffer[12]);
    3b84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b88:	af 85       	ldd	r26, Y+15	; 0x0f
    3b8a:	b8 89       	ldd	r27, Y+16	; 0x10
    3b8c:	80 93 3b 24 	sts	0x243B, r24
    3b90:	90 93 3c 24 	sts	0x243C, r25
    3b94:	a0 93 3d 24 	sts	0x243D, r26
    3b98:	b0 93 3e 24 	sts	0x243E, r27
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    3b9c:	8e e2       	ldi	r24, 0x2E	; 46
    3b9e:	94 e2       	ldi	r25, 0x24	; 36
    3ba0:	2e c0       	rjmp	.+92     	; 0x3bfe <partition_open+0x12e>
        new_partition->offset = read32(&buffer[8]);
        new_partition->length = read32(&buffer[12]);
    }
    else
    {
        new_partition->type = 0xff;
    3ba2:	8f ef       	ldi	r24, 0xFF	; 255
    3ba4:	80 93 36 24 	sts	0x2436, r24
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    3ba8:	8e e2       	ldi	r24, 0x2E	; 46
    3baa:	94 e2       	ldi	r25, 0x24	; 36
    3bac:	28 c0       	rjmp	.+80     	; 0x3bfe <partition_open+0x12e>
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
        return 0;
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	25 c0       	rjmp	.+74     	; 0x3bfe <partition_open+0x12e>
    3bb4:	80 e0       	ldi	r24, 0x00	; 0
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	22 c0       	rjmp	.+68     	; 0x3bfe <partition_open+0x12e>
    3bba:	80 e0       	ldi	r24, 0x00	; 0
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	1f c0       	rjmp	.+62     	; 0x3bfe <partition_open+0x12e>

    if(index >= 0)
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
            return 0;
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	1c c0       	rjmp	.+56     	; 0x3bfe <partition_open+0x12e>

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
            return 0;
    3bc6:	80 e0       	ldi	r24, 0x00	; 0
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	19 c0       	rjmp	.+50     	; 0x3bfe <partition_open+0x12e>
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    3bcc:	ee e2       	ldi	r30, 0x2E	; 46
    3bce:	f4 e2       	ldi	r31, 0x24	; 36
    3bd0:	81 e1       	ldi	r24, 0x11	; 17
    3bd2:	df 01       	movw	r26, r30
    3bd4:	1d 92       	st	X+, r1
    3bd6:	8a 95       	dec	r24
    3bd8:	e9 f7       	brne	.-6      	; 0x3bd4 <partition_open+0x104>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    3bda:	c0 82       	st	Z, r12
    3bdc:	d1 82       	std	Z+1, r13	; 0x01
    new_partition->device_read_interval = device_read_interval;
    3bde:	a0 92 30 24 	sts	0x2430, r10
    3be2:	b0 92 31 24 	sts	0x2431, r11
    new_partition->device_write = device_write;
    3be6:	60 92 32 24 	sts	0x2432, r6
    3bea:	70 92 33 24 	sts	0x2433, r7
    new_partition->device_write_interval = device_write_interval;
    3bee:	80 92 34 24 	sts	0x2434, r8
    3bf2:	90 92 35 24 	sts	0x2435, r9

    if(index >= 0)
    3bf6:	55 20       	and	r5, r5
    3bf8:	0c f0       	brlt	.+2      	; 0x3bfc <partition_open+0x12c>
    3bfa:	b5 cf       	rjmp	.-150    	; 0x3b66 <partition_open+0x96>
    3bfc:	d2 cf       	rjmp	.-92     	; 0x3ba2 <partition_open+0xd2>
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
    3bfe:	60 96       	adiw	r28, 0x10	; 16
    3c00:	cd bf       	out	0x3d, r28	; 61
    3c02:	de bf       	out	0x3e, r29	; 62
    3c04:	df 91       	pop	r29
    3c06:	cf 91       	pop	r28
    3c08:	1f 91       	pop	r17
    3c0a:	0f 91       	pop	r16
    3c0c:	ff 90       	pop	r15
    3c0e:	ef 90       	pop	r14
    3c10:	df 90       	pop	r13
    3c12:	cf 90       	pop	r12
    3c14:	bf 90       	pop	r11
    3c16:	af 90       	pop	r10
    3c18:	9f 90       	pop	r9
    3c1a:	8f 90       	pop	r8
    3c1c:	7f 90       	pop	r7
    3c1e:	6f 90       	pop	r6
    3c20:	5f 90       	pop	r5
    3c22:	08 95       	ret

00003c24 <sd_raw_send_byte>:
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
#if XMEGA
    SPIE.DATA = b;
    3c24:	e0 ec       	ldi	r30, 0xC0	; 192
    3c26:	fa e0       	ldi	r31, 0x0A	; 10
    3c28:	83 83       	std	Z+3, r24	; 0x03
    /* wait for byte to be shifted out */
    while(!(SPIE.STATUS & 0x80));
    3c2a:	82 81       	ldd	r24, Z+2	; 0x02
    3c2c:	88 23       	and	r24, r24
    3c2e:	ec f7       	brge	.-6      	; 0x3c2a <sd_raw_send_byte+0x6>
    SPDR = b;
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    SPSR &= ~(1 << SPIF);
#endif
}
    3c30:	08 95       	ret

00003c32 <sd_raw_rec_byte>:
 */
uint8_t sd_raw_rec_byte()
{
#if XMEGA
    /* send dummy data for receiving some */
    SPIE.DATA = 0xff;
    3c32:	8f ef       	ldi	r24, 0xFF	; 255
    3c34:	e0 ec       	ldi	r30, 0xC0	; 192
    3c36:	fa e0       	ldi	r31, 0x0A	; 10
    3c38:	83 83       	std	Z+3, r24	; 0x03
    while(!(SPIE.STATUS & (1<<7)));
    3c3a:	82 81       	ldd	r24, Z+2	; 0x02
    3c3c:	88 23       	and	r24, r24
    3c3e:	ec f7       	brge	.-6      	; 0x3c3a <sd_raw_rec_byte+0x8>

    return SPIE.DATA;
    3c40:	e0 ec       	ldi	r30, 0xC0	; 192
    3c42:	fa e0       	ldi	r31, 0x0A	; 10
    3c44:	83 81       	ldd	r24, Z+3	; 0x03
    while(!(SPSR & (1 << SPIF)));
    SPSR &= ~(1 << SPIF);

    return SPDR;
#endif
}
    3c46:	08 95       	ret

00003c48 <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    3c48:	ff 92       	push	r15
    3c4a:	0f 93       	push	r16
    3c4c:	1f 93       	push	r17
    3c4e:	cf 93       	push	r28
    3c50:	df 93       	push	r29
    3c52:	c8 2f       	mov	r28, r24
    3c54:	d4 2f       	mov	r29, r20
    3c56:	15 2f       	mov	r17, r21
    3c58:	06 2f       	mov	r16, r22
    3c5a:	f7 2e       	mov	r15, r23
    uint8_t response;

    /* wait some clock cycles */
    sd_raw_rec_byte();
    3c5c:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    3c60:	8c 2f       	mov	r24, r28
    3c62:	80 64       	ori	r24, 0x40	; 64
    3c64:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 24) & 0xff);
    3c68:	8f 2d       	mov	r24, r15
    3c6a:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 16) & 0xff);
    3c6e:	80 2f       	mov	r24, r16
    3c70:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 8) & 0xff);
    3c74:	81 2f       	mov	r24, r17
    3c76:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 0) & 0xff);
    3c7a:	8d 2f       	mov	r24, r29
    3c7c:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <sd_raw_send_byte>
    switch(command)
    3c80:	cc 23       	and	r28, r28
    3c82:	19 f0       	breq	.+6      	; 0x3c8a <sd_raw_send_command+0x42>
    3c84:	c8 30       	cpi	r28, 0x08	; 8
    3c86:	29 f0       	breq	.+10     	; 0x3c92 <sd_raw_send_command+0x4a>
    3c88:	08 c0       	rjmp	.+16     	; 0x3c9a <sd_raw_send_command+0x52>
    {
        case CMD_GO_IDLE_STATE:
           sd_raw_send_byte(0x95);
    3c8a:	85 e9       	ldi	r24, 0x95	; 149
    3c8c:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <sd_raw_send_byte>
           break;
    3c90:	0f c0       	rjmp	.+30     	; 0x3cb0 <sd_raw_send_command+0x68>
        case CMD_SEND_IF_COND:
           sd_raw_send_byte(0x87);
    3c92:	87 e8       	ldi	r24, 0x87	; 135
    3c94:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <sd_raw_send_byte>
           break;
    3c98:	0b c0       	rjmp	.+22     	; 0x3cb0 <sd_raw_send_command+0x68>
        default:
           sd_raw_send_byte(0xff);
    3c9a:	8f ef       	ldi	r24, 0xFF	; 255
    3c9c:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <sd_raw_send_byte>
           break;
    3ca0:	07 c0       	rjmp	.+14     	; 0x3cb0 <sd_raw_send_command+0x68>
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
    3ca2:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>
        if(response != 0xff)
    3ca6:	8f 3f       	cpi	r24, 0xFF	; 255
    3ca8:	29 f4       	brne	.+10     	; 0x3cb4 <sd_raw_send_command+0x6c>
    3caa:	c1 50       	subi	r28, 0x01	; 1
           sd_raw_send_byte(0xff);
           break;
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    3cac:	d1 f7       	brne	.-12     	; 0x3ca2 <sd_raw_send_command+0x5a>
    3cae:	02 c0       	rjmp	.+4      	; 0x3cb4 <sd_raw_send_command+0x6c>
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    3cb0:	ca e0       	ldi	r28, 0x0A	; 10
    3cb2:	f7 cf       	rjmp	.-18     	; 0x3ca2 <sd_raw_send_command+0x5a>
        if(response != 0xff)
            break;
    }

    return response;
}
    3cb4:	df 91       	pop	r29
    3cb6:	cf 91       	pop	r28
    3cb8:	1f 91       	pop	r17
    3cba:	0f 91       	pop	r16
    3cbc:	ff 90       	pop	r15
    3cbe:	08 95       	ret

00003cc0 <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
    3cc0:	ef 92       	push	r14
    3cc2:	ff 92       	push	r15
    3cc4:	0f 93       	push	r16
    3cc6:	1f 93       	push	r17
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    3cc8:	80 91 40 24 	lds	r24, 0x2440
    3ccc:	81 11       	cpse	r24, r1
    3cce:	1e c0       	rjmp	.+60     	; 0x3d0c <sd_raw_sync+0x4c>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    3cd0:	20 91 41 24 	lds	r18, 0x2441
    3cd4:	30 91 42 24 	lds	r19, 0x2442
    3cd8:	40 91 43 24 	lds	r20, 0x2443
    3cdc:	50 91 44 24 	lds	r21, 0x2444
    3ce0:	60 91 45 24 	lds	r22, 0x2445
    3ce4:	70 91 46 24 	lds	r23, 0x2446
    3ce8:	e1 2c       	mov	r14, r1
    3cea:	68 94       	set
    3cec:	ff 24       	eor	r15, r15
    3cee:	f1 f8       	bld	r15, 1
    3cf0:	09 e4       	ldi	r16, 0x49	; 73
    3cf2:	14 e2       	ldi	r17, 0x24	; 36
    3cf4:	80 91 47 24 	lds	r24, 0x2447
    3cf8:	90 91 48 24 	lds	r25, 0x2448
    3cfc:	0e 94 77 21 	call	0x42ee	; 0x42ee <sd_raw_write>
    3d00:	88 23       	and	r24, r24
    3d02:	31 f0       	breq	.+12     	; 0x3d10 <sd_raw_sync+0x50>
        return 0;
    raw_block_written = 1;
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	80 93 40 24 	sts	0x2440, r24
#endif
    return 1;
    3d0a:	03 c0       	rjmp	.+6      	; 0x3d12 <sd_raw_sync+0x52>
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
        return 1;
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	01 c0       	rjmp	.+2      	; 0x3d12 <sd_raw_sync+0x52>
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
        return 0;
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    raw_block_written = 1;
#endif
    return 1;
}
    3d12:	1f 91       	pop	r17
    3d14:	0f 91       	pop	r16
    3d16:	ff 90       	pop	r15
    3d18:	ef 90       	pop	r14
    3d1a:	08 95       	ret

00003d1c <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    3d1c:	2f 92       	push	r2
    3d1e:	3f 92       	push	r3
    3d20:	4f 92       	push	r4
    3d22:	5f 92       	push	r5
    3d24:	6f 92       	push	r6
    3d26:	7f 92       	push	r7
    3d28:	8f 92       	push	r8
    3d2a:	9f 92       	push	r9
    3d2c:	af 92       	push	r10
    3d2e:	bf 92       	push	r11
    3d30:	cf 92       	push	r12
    3d32:	df 92       	push	r13
    3d34:	ef 92       	push	r14
    3d36:	ff 92       	push	r15
    3d38:	0f 93       	push	r16
    3d3a:	1f 93       	push	r17
    3d3c:	cf 93       	push	r28
    3d3e:	df 93       	push	r29
    3d40:	cd b7       	in	r28, 0x3d	; 61
    3d42:	de b7       	in	r29, 0x3e	; 62
    3d44:	68 97       	sbiw	r28, 0x18	; 24
    3d46:	cd bf       	out	0x3d, r28	; 61
    3d48:	de bf       	out	0x3e, r29	; 62
    3d4a:	29 83       	std	Y+1, r18	; 0x01
    3d4c:	3a 83       	std	Y+2, r19	; 0x02
    3d4e:	4b 83       	std	Y+3, r20	; 0x03
    3d50:	5c 83       	std	Y+4, r21	; 0x04
    3d52:	6d 83       	std	Y+5, r22	; 0x05
    3d54:	7e 83       	std	Y+6, r23	; 0x06
    3d56:	8f 83       	std	Y+7, r24	; 0x07
    3d58:	98 87       	std	Y+8, r25	; 0x08
    3d5a:	17 01       	movw	r2, r14
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    3d5c:	e1 14       	cp	r14, r1
    3d5e:	f1 04       	cpc	r15, r1
    3d60:	09 f4       	brne	.+2      	; 0x3d64 <sd_raw_read+0x48>
    3d62:	fa c0       	rjmp	.+500    	; 0x3f58 <sd_raw_read+0x23c>
    3d64:	0f 2e       	mov	r0, r31
    3d66:	f9 e4       	ldi	r31, 0x49	; 73
    3d68:	8f 2e       	mov	r8, r31
    3d6a:	f6 e2       	ldi	r31, 0x26	; 38
    3d6c:	9f 2e       	mov	r9, r31
    3d6e:	f0 2d       	mov	r31, r0
    3d70:	0f 8b       	std	Y+23, r16	; 0x17
    3d72:	18 8f       	std	Y+24, r17	; 0x18
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    3d74:	69 80       	ldd	r6, Y+1	; 0x01
    3d76:	7a 80       	ldd	r7, Y+2	; 0x02
    3d78:	21 e0       	ldi	r18, 0x01	; 1
    3d7a:	72 22       	and	r7, r18
        block_address = offset - block_offset;
    3d7c:	93 01       	movw	r18, r6
    3d7e:	40 e0       	ldi	r20, 0x00	; 0
    3d80:	50 e0       	ldi	r21, 0x00	; 0
    3d82:	60 e0       	ldi	r22, 0x00	; 0
    3d84:	70 e0       	ldi	r23, 0x00	; 0
    3d86:	cb 01       	movw	r24, r22
    3d88:	69 86       	std	Y+9, r6	; 0x09
    3d8a:	3a 87       	std	Y+10, r19	; 0x0a
    3d8c:	4b 87       	std	Y+11, r20	; 0x0b
    3d8e:	5c 87       	std	Y+12, r21	; 0x0c
    3d90:	6d 87       	std	Y+13, r22	; 0x0d
    3d92:	7e 87       	std	Y+14, r23	; 0x0e
    3d94:	8f 87       	std	Y+15, r24	; 0x0f
    3d96:	98 8b       	std	Y+16, r25	; 0x10
    3d98:	29 81       	ldd	r18, Y+1	; 0x01
    3d9a:	3a 81       	ldd	r19, Y+2	; 0x02
    3d9c:	4b 81       	ldd	r20, Y+3	; 0x03
    3d9e:	5c 81       	ldd	r21, Y+4	; 0x04
    3da0:	6d 81       	ldd	r22, Y+5	; 0x05
    3da2:	7e 81       	ldd	r23, Y+6	; 0x06
    3da4:	8f 81       	ldd	r24, Y+7	; 0x07
    3da6:	98 85       	ldd	r25, Y+8	; 0x08
    3da8:	a9 84       	ldd	r10, Y+9	; 0x09
    3daa:	ba 84       	ldd	r11, Y+10	; 0x0a
    3dac:	c1 2c       	mov	r12, r1
    3dae:	d1 2c       	mov	r13, r1
    3db0:	e1 2c       	mov	r14, r1
    3db2:	f1 2c       	mov	r15, r1
    3db4:	00 e0       	ldi	r16, 0x00	; 0
    3db6:	10 e0       	ldi	r17, 0x00	; 0
    3db8:	0e 94 bb 40 	call	0x8176	; 0x8176 <__subdi3>
    3dbc:	52 2e       	mov	r5, r18
    3dbe:	43 2e       	mov	r4, r19
    3dc0:	49 8b       	std	Y+17, r20	; 0x11
    3dc2:	5a 8b       	std	Y+18, r21	; 0x12
    3dc4:	6b 8b       	std	Y+19, r22	; 0x13
    3dc6:	7c 8b       	std	Y+20, r23	; 0x14
    3dc8:	8d 8b       	std	Y+21, r24	; 0x15
    3dca:	9e 8b       	std	Y+22, r25	; 0x16
    3dcc:	40 e0       	ldi	r20, 0x00	; 0
    3dce:	52 e0       	ldi	r21, 0x02	; 2
    3dd0:	46 19       	sub	r20, r6
    3dd2:	57 09       	sbc	r21, r7
    3dd4:	49 87       	std	Y+9, r20	; 0x09
    3dd6:	5a 87       	std	Y+10, r21	; 0x0a
    3dd8:	24 16       	cp	r2, r20
    3dda:	35 06       	cpc	r3, r21
    3ddc:	10 f4       	brcc	.+4      	; 0x3de2 <sd_raw_read+0xc6>
    3dde:	29 86       	std	Y+9, r2	; 0x09
    3de0:	3a 86       	std	Y+10, r3	; 0x0a
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    3de2:	a0 90 41 24 	lds	r10, 0x2441
    3de6:	b0 90 42 24 	lds	r11, 0x2442
    3dea:	c0 90 43 24 	lds	r12, 0x2443
    3dee:	d0 90 44 24 	lds	r13, 0x2444
    3df2:	e0 90 45 24 	lds	r14, 0x2445
    3df6:	f0 90 46 24 	lds	r15, 0x2446
    3dfa:	00 91 47 24 	lds	r16, 0x2447
    3dfe:	10 91 48 24 	lds	r17, 0x2448
    3e02:	25 2d       	mov	r18, r5
    3e04:	34 2d       	mov	r19, r4
    3e06:	49 89       	ldd	r20, Y+17	; 0x11
    3e08:	5a 89       	ldd	r21, Y+18	; 0x12
    3e0a:	6b 89       	ldd	r22, Y+19	; 0x13
    3e0c:	7c 89       	ldd	r23, Y+20	; 0x14
    3e0e:	8d 89       	ldd	r24, Y+21	; 0x15
    3e10:	9e 89       	ldd	r25, Y+22	; 0x16
    3e12:	0e 94 c4 40 	call	0x8188	; 0x8188 <__cmpdi2>
    3e16:	09 f4       	brne	.+2      	; 0x3e1a <sd_raw_read+0xfe>
    3e18:	6a c0       	rjmp	.+212    	; 0x3eee <sd_raw_read+0x1d2>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    3e1a:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <sd_raw_sync>
    3e1e:	88 23       	and	r24, r24
    3e20:	09 f4       	brne	.+2      	; 0x3e24 <sd_raw_read+0x108>
    3e22:	9c c0       	rjmp	.+312    	; 0x3f5c <sd_raw_read+0x240>
                return 0;
#endif

            /* address card */
            select_card();
    3e24:	50 e1       	ldi	r21, 0x10	; 16
    3e26:	50 93 86 06 	sts	0x0686, r21

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    3e2a:	80 91 3f 24 	lds	r24, 0x243F
    3e2e:	82 ff       	sbrs	r24, 2
    3e30:	10 c0       	rjmp	.+32     	; 0x3e52 <sd_raw_read+0x136>
    3e32:	25 2d       	mov	r18, r5
    3e34:	34 2d       	mov	r19, r4
    3e36:	49 89       	ldd	r20, Y+17	; 0x11
    3e38:	5a 89       	ldd	r21, Y+18	; 0x12
    3e3a:	6b 89       	ldd	r22, Y+19	; 0x13
    3e3c:	7c 89       	ldd	r23, Y+20	; 0x14
    3e3e:	8d 89       	ldd	r24, Y+21	; 0x15
    3e40:	9e 89       	ldd	r25, Y+22	; 0x16
    3e42:	09 e0       	ldi	r16, 0x09	; 9
    3e44:	0e 94 8a 40 	call	0x8114	; 0x8114 <__lshrdi3>
    3e48:	64 2f       	mov	r22, r20
    3e4a:	75 2f       	mov	r23, r21
    3e4c:	42 2f       	mov	r20, r18
    3e4e:	53 2f       	mov	r21, r19
    3e50:	04 c0       	rjmp	.+8      	; 0x3e5a <sd_raw_read+0x13e>
    3e52:	45 2d       	mov	r20, r5
    3e54:	54 2d       	mov	r21, r4
    3e56:	69 89       	ldd	r22, Y+17	; 0x11
    3e58:	7a 89       	ldd	r23, Y+18	; 0x12
    3e5a:	81 e1       	ldi	r24, 0x11	; 17
    3e5c:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <sd_raw_send_command>
    3e60:	88 23       	and	r24, r24
    3e62:	31 f0       	breq	.+12     	; 0x3e70 <sd_raw_read+0x154>
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
#endif
            {
                unselect_card();
    3e64:	80 e1       	ldi	r24, 0x10	; 16
    3e66:	e0 e8       	ldi	r30, 0x80	; 128
    3e68:	f6 e0       	ldi	r31, 0x06	; 6
    3e6a:	85 83       	std	Z+5, r24	; 0x05
                return 0;
    3e6c:	80 e0       	ldi	r24, 0x00	; 0
    3e6e:	79 c0       	rjmp	.+242    	; 0x3f62 <sd_raw_read+0x246>
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    3e70:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>
    3e74:	8e 3f       	cpi	r24, 0xFE	; 254
    3e76:	e1 f7       	brne	.-8      	; 0x3e70 <sd_raw_read+0x154>
    3e78:	09 e4       	ldi	r16, 0x49	; 73
    3e7a:	14 e2       	ldi	r17, 0x24	; 36
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    3e7c:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>
    3e80:	f8 01       	movw	r30, r16
    3e82:	81 93       	st	Z+, r24
    3e84:	8f 01       	movw	r16, r30
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    3e86:	e8 15       	cp	r30, r8
    3e88:	f9 05       	cpc	r31, r9
    3e8a:	c1 f7       	brne	.-16     	; 0x3e7c <sd_raw_read+0x160>
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;
    3e8c:	50 92 41 24 	sts	0x2441, r5
    3e90:	40 92 42 24 	sts	0x2442, r4
    3e94:	f9 89       	ldd	r31, Y+17	; 0x11
    3e96:	f0 93 43 24 	sts	0x2443, r31
    3e9a:	2a 89       	ldd	r18, Y+18	; 0x12
    3e9c:	20 93 44 24 	sts	0x2444, r18
    3ea0:	3b 89       	ldd	r19, Y+19	; 0x13
    3ea2:	30 93 45 24 	sts	0x2445, r19
    3ea6:	4c 89       	ldd	r20, Y+20	; 0x14
    3ea8:	40 93 46 24 	sts	0x2446, r20
    3eac:	5d 89       	ldd	r21, Y+21	; 0x15
    3eae:	50 93 47 24 	sts	0x2447, r21
    3eb2:	6e 89       	ldd	r22, Y+22	; 0x16
    3eb4:	60 93 48 24 	sts	0x2448, r22

            memcpy(buffer, raw_block + block_offset, read_length);
    3eb8:	b3 01       	movw	r22, r6
    3eba:	67 5b       	subi	r22, 0xB7	; 183
    3ebc:	7b 4d       	sbci	r23, 0xDB	; 219
    3ebe:	49 85       	ldd	r20, Y+9	; 0x09
    3ec0:	5a 85       	ldd	r21, Y+10	; 0x0a
    3ec2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ec4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ec6:	0e 94 e0 42 	call	0x85c0	; 0x85c0 <memcpy>
            buffer += read_length;
    3eca:	8f 89       	ldd	r24, Y+23	; 0x17
    3ecc:	98 8d       	ldd	r25, Y+24	; 0x18
    3ece:	e9 85       	ldd	r30, Y+9	; 0x09
    3ed0:	fa 85       	ldd	r31, Y+10	; 0x0a
    3ed2:	8e 0f       	add	r24, r30
    3ed4:	9f 1f       	adc	r25, r31
    3ed6:	8f 8b       	std	Y+23, r24	; 0x17
    3ed8:	98 8f       	std	Y+24, r25	; 0x18
#endif
            
            /* read crc16 */
            sd_raw_rec_byte();
    3eda:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>
            sd_raw_rec_byte();
    3ede:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>
            
            /* deaddress card */
            unselect_card();
    3ee2:	f0 e1       	ldi	r31, 0x10	; 16
    3ee4:	f0 93 85 06 	sts	0x0685, r31

            /* let card some time to finish */
            sd_raw_rec_byte();
    3ee8:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>
    3eec:	11 c0       	rjmp	.+34     	; 0x3f10 <sd_raw_read+0x1f4>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    3eee:	b3 01       	movw	r22, r6
    3ef0:	67 5b       	subi	r22, 0xB7	; 183
    3ef2:	7b 4d       	sbci	r23, 0xDB	; 219
    3ef4:	49 85       	ldd	r20, Y+9	; 0x09
    3ef6:	5a 85       	ldd	r21, Y+10	; 0x0a
    3ef8:	8f 89       	ldd	r24, Y+23	; 0x17
    3efa:	98 8d       	ldd	r25, Y+24	; 0x18
    3efc:	0e 94 e0 42 	call	0x85c0	; 0x85c0 <memcpy>
            buffer += read_length;
    3f00:	2f 89       	ldd	r18, Y+23	; 0x17
    3f02:	38 8d       	ldd	r19, Y+24	; 0x18
    3f04:	49 85       	ldd	r20, Y+9	; 0x09
    3f06:	5a 85       	ldd	r21, Y+10	; 0x0a
    3f08:	24 0f       	add	r18, r20
    3f0a:	35 1f       	adc	r19, r21
    3f0c:	2f 8b       	std	Y+23, r18	; 0x17
    3f0e:	38 8f       	std	Y+24, r19	; 0x18
        }
#endif

        length -= read_length;
    3f10:	69 85       	ldd	r22, Y+9	; 0x09
    3f12:	7a 85       	ldd	r23, Y+10	; 0x0a
    3f14:	26 1a       	sub	r2, r22
    3f16:	37 0a       	sbc	r3, r23
        offset += read_length;
    3f18:	5b 01       	movw	r10, r22
    3f1a:	26 2f       	mov	r18, r22
    3f1c:	3b 2d       	mov	r19, r11
    3f1e:	40 e0       	ldi	r20, 0x00	; 0
    3f20:	50 e0       	ldi	r21, 0x00	; 0
    3f22:	60 e0       	ldi	r22, 0x00	; 0
    3f24:	70 e0       	ldi	r23, 0x00	; 0
    3f26:	80 e0       	ldi	r24, 0x00	; 0
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	a9 80       	ldd	r10, Y+1	; 0x01
    3f2c:	ba 80       	ldd	r11, Y+2	; 0x02
    3f2e:	cb 80       	ldd	r12, Y+3	; 0x03
    3f30:	dc 80       	ldd	r13, Y+4	; 0x04
    3f32:	ed 80       	ldd	r14, Y+5	; 0x05
    3f34:	fe 80       	ldd	r15, Y+6	; 0x06
    3f36:	0f 81       	ldd	r16, Y+7	; 0x07
    3f38:	18 85       	ldd	r17, Y+8	; 0x08
    3f3a:	0e 94 a6 40 	call	0x814c	; 0x814c <__adddi3>
    3f3e:	29 83       	std	Y+1, r18	; 0x01
    3f40:	3a 83       	std	Y+2, r19	; 0x02
    3f42:	4b 83       	std	Y+3, r20	; 0x03
    3f44:	5c 83       	std	Y+4, r21	; 0x04
    3f46:	6d 83       	std	Y+5, r22	; 0x05
    3f48:	7e 83       	std	Y+6, r23	; 0x06
    3f4a:	8f 83       	std	Y+7, r24	; 0x07
    3f4c:	98 87       	std	Y+8, r25	; 0x08
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    3f4e:	21 14       	cp	r2, r1
    3f50:	31 04       	cpc	r3, r1
    3f52:	09 f0       	breq	.+2      	; 0x3f56 <sd_raw_read+0x23a>
    3f54:	0f cf       	rjmp	.-482    	; 0x3d74 <sd_raw_read+0x58>
    3f56:	04 c0       	rjmp	.+8      	; 0x3f60 <sd_raw_read+0x244>

        length -= read_length;
        offset += read_length;
    }

    return 1;
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	03 c0       	rjmp	.+6      	; 0x3f62 <sd_raw_read+0x246>
        if(block_address != raw_block_address)
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
                return 0;
    3f5c:	80 e0       	ldi	r24, 0x00	; 0
    3f5e:	01 c0       	rjmp	.+2      	; 0x3f62 <sd_raw_read+0x246>

        length -= read_length;
        offset += read_length;
    }

    return 1;
    3f60:	81 e0       	ldi	r24, 0x01	; 1
}
    3f62:	68 96       	adiw	r28, 0x18	; 24
    3f64:	cd bf       	out	0x3d, r28	; 61
    3f66:	de bf       	out	0x3e, r29	; 62
    3f68:	df 91       	pop	r29
    3f6a:	cf 91       	pop	r28
    3f6c:	1f 91       	pop	r17
    3f6e:	0f 91       	pop	r16
    3f70:	ff 90       	pop	r15
    3f72:	ef 90       	pop	r14
    3f74:	df 90       	pop	r13
    3f76:	cf 90       	pop	r12
    3f78:	bf 90       	pop	r11
    3f7a:	af 90       	pop	r10
    3f7c:	9f 90       	pop	r9
    3f7e:	8f 90       	pop	r8
    3f80:	7f 90       	pop	r7
    3f82:	6f 90       	pop	r6
    3f84:	5f 90       	pop	r5
    3f86:	4f 90       	pop	r4
    3f88:	3f 90       	pop	r3
    3f8a:	2f 90       	pop	r2
    3f8c:	08 95       	ret

00003f8e <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    3f8e:	9f 92       	push	r9
    3f90:	af 92       	push	r10
    3f92:	bf 92       	push	r11
    3f94:	cf 92       	push	r12
    3f96:	df 92       	push	r13
    3f98:	ef 92       	push	r14
    3f9a:	ff 92       	push	r15
    3f9c:	0f 93       	push	r16
    3f9e:	1f 93       	push	r17
    3fa0:	cf 93       	push	r28
    3fa2:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    3fa4:	e0 e8       	ldi	r30, 0x80	; 128
    3fa6:	f6 e0       	ldi	r31, 0x06	; 6
    3fa8:	80 e2       	ldi	r24, 0x20	; 32
    3faa:	81 83       	std	Z+1, r24	; 0x01
    configure_pin_sck();
    3fac:	80 e8       	ldi	r24, 0x80	; 128
    3fae:	81 83       	std	Z+1, r24	; 0x01
    configure_pin_ss();
    3fb0:	80 e1       	ldi	r24, 0x10	; 16
    3fb2:	81 83       	std	Z+1, r24	; 0x01
    configure_pin_miso();
    3fb4:	90 e4       	ldi	r25, 0x40	; 64
    3fb6:	92 83       	std	Z+2, r25	; 0x02

    unselect_card();
    3fb8:	85 83       	std	Z+5, r24	; 0x05

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
#if XMEGA
    SPIE.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV16_gc;
    3fba:	81 e5       	ldi	r24, 0x51	; 81
    3fbc:	80 93 c0 0a 	sts	0x0AC0, r24
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
#endif
    /* initialization procedure */
    sd_raw_card_type = 0;
    3fc0:	10 92 3f 24 	sts	0x243F, r1
    3fc4:	1a e0       	ldi	r17, 0x0A	; 10

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    3fc6:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>
    3fca:	11 50       	subi	r17, 0x01	; 1
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    3fcc:	e1 f7       	brne	.-8      	; 0x3fc6 <sd_raw_init+0x38>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    3fce:	80 e1       	ldi	r24, 0x10	; 16
    3fd0:	e0 e8       	ldi	r30, 0x80	; 128
    3fd2:	f6 e0       	ldi	r31, 0x06	; 6
    3fd4:	86 83       	std	Z+6, r24	; 0x06
    3fd6:	c0 e0       	ldi	r28, 0x00	; 0
    3fd8:	d2 e0       	ldi	r29, 0x02	; 2

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    3fda:	40 e0       	ldi	r20, 0x00	; 0
    3fdc:	50 e0       	ldi	r21, 0x00	; 0
    3fde:	ba 01       	movw	r22, r20
    3fe0:	80 e0       	ldi	r24, 0x00	; 0
    3fe2:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
    3fe6:	81 30       	cpi	r24, 0x01	; 1
    3fe8:	49 f0       	breq	.+18     	; 0x3ffc <sd_raw_init+0x6e>
    3fea:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x1ff)
    3fec:	20 97       	sbiw	r28, 0x00	; 0
    3fee:	a9 f7       	brne	.-22     	; 0x3fda <sd_raw_init+0x4c>
        {
            unselect_card();
    3ff0:	80 e1       	ldi	r24, 0x10	; 16
    3ff2:	e0 e8       	ldi	r30, 0x80	; 128
    3ff4:	f6 e0       	ldi	r31, 0x06	; 6
    3ff6:	85 83       	std	Z+5, r24	; 0x05
            return 0;
    3ff8:	01 2f       	mov	r16, r17
    3ffa:	c2 c0       	rjmp	.+388    	; 0x4180 <sd_raw_init+0x1f2>
        }
    }

#if SD_RAW_SDHC
    /* check for version of SD card specification */
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    3ffc:	4a ea       	ldi	r20, 0xAA	; 170
    3ffe:	51 e0       	ldi	r21, 0x01	; 1
    4000:	60 e0       	ldi	r22, 0x00	; 0
    4002:	70 e0       	ldi	r23, 0x00	; 0
    4004:	88 e0       	ldi	r24, 0x08	; 8
    4006:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    400a:	08 2f       	mov	r16, r24
    400c:	04 70       	andi	r16, 0x04	; 4
    400e:	82 fd       	sbrc	r24, 2
    4010:	19 c0       	rjmp	.+50     	; 0x4044 <sd_raw_init+0xb6>
    {
        sd_raw_rec_byte();
    4012:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    4016:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>
        if((sd_raw_rec_byte() & 0x01) == 0)
    401a:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>
    401e:	80 ff       	sbrs	r24, 0
    4020:	af c0       	rjmp	.+350    	; 0x4180 <sd_raw_init+0x1f2>
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
    4022:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>
    4026:	8a 3a       	cpi	r24, 0xAA	; 170
    4028:	09 f0       	breq	.+2      	; 0x402c <sd_raw_init+0x9e>
    402a:	aa c0       	rjmp	.+340    	; 0x4180 <sd_raw_init+0x1f2>
            return 0; /* wrong test pattern */

        /* card conforms to SD 2 card specification */
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
    402c:	82 e0       	ldi	r24, 0x02	; 2
    402e:	80 93 3f 24 	sts	0x243F, r24
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    4032:	c0 e0       	ldi	r28, 0x00	; 0
    4034:	d0 e8       	ldi	r29, 0x80	; 128
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
    4036:	91 2c       	mov	r9, r1
    4038:	a1 2c       	mov	r10, r1
    403a:	b1 2c       	mov	r11, r1
    403c:	68 94       	set
    403e:	cc 24       	eor	r12, r12
    4040:	c6 f8       	bld	r12, 6
    4042:	12 c0       	rjmp	.+36     	; 0x4068 <sd_raw_init+0xda>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    4044:	40 e0       	ldi	r20, 0x00	; 0
    4046:	50 e0       	ldi	r21, 0x00	; 0
    4048:	ba 01       	movw	r22, r20
    404a:	87 e3       	ldi	r24, 0x37	; 55
    404c:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    4050:	40 e0       	ldi	r20, 0x00	; 0
    4052:	50 e0       	ldi	r21, 0x00	; 0
    4054:	ba 01       	movw	r22, r20
    4056:	89 e2       	ldi	r24, 0x29	; 41
    4058:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    405c:	82 fd       	sbrc	r24, 2
    405e:	e9 cf       	rjmp	.-46     	; 0x4032 <sd_raw_init+0xa4>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	80 93 3f 24 	sts	0x243F, r24
    4066:	e5 cf       	rjmp	.-54     	; 0x4032 <sd_raw_init+0xa4>
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    4068:	80 91 3f 24 	lds	r24, 0x243F
    406c:	98 2f       	mov	r25, r24
    406e:	93 70       	andi	r25, 0x03	; 3
    4070:	c9 f0       	breq	.+50     	; 0x40a4 <sd_raw_init+0x116>
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    4072:	81 fd       	sbrc	r24, 1
    4074:	05 c0       	rjmp	.+10     	; 0x4080 <sd_raw_init+0xf2>
    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
    4076:	d1 2c       	mov	r13, r1
    4078:	e1 2c       	mov	r14, r1
    407a:	f1 2c       	mov	r15, r1
    407c:	00 e0       	ldi	r16, 0x00	; 0
    407e:	04 c0       	rjmp	.+8      	; 0x4088 <sd_raw_init+0xfa>
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
    4080:	d9 2c       	mov	r13, r9
    4082:	ea 2c       	mov	r14, r10
    4084:	fb 2c       	mov	r15, r11
    4086:	0c 2d       	mov	r16, r12
#endif
            sd_raw_send_command(CMD_APP, 0);
    4088:	40 e0       	ldi	r20, 0x00	; 0
    408a:	50 e0       	ldi	r21, 0x00	; 0
    408c:	ba 01       	movw	r22, r20
    408e:	87 e3       	ldi	r24, 0x37	; 55
    4090:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    4094:	4d 2d       	mov	r20, r13
    4096:	5e 2d       	mov	r21, r14
    4098:	6f 2d       	mov	r22, r15
    409a:	70 2f       	mov	r23, r16
    409c:	89 e2       	ldi	r24, 0x29	; 41
    409e:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <sd_raw_send_command>
    40a2:	06 c0       	rjmp	.+12     	; 0x40b0 <sd_raw_init+0x122>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    40a4:	40 e0       	ldi	r20, 0x00	; 0
    40a6:	50 e0       	ldi	r21, 0x00	; 0
    40a8:	ba 01       	movw	r22, r20
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    40b0:	08 2f       	mov	r16, r24
    40b2:	01 70       	andi	r16, 0x01	; 1
    40b4:	80 ff       	sbrs	r24, 0
    40b6:	09 c0       	rjmp	.+18     	; 0x40ca <sd_raw_init+0x13c>
    40b8:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x7fff)
    40ba:	20 97       	sbiw	r28, 0x00	; 0
    40bc:	a9 f6       	brne	.-86     	; 0x4068 <sd_raw_init+0xda>
        {
            unselect_card();
    40be:	80 e1       	ldi	r24, 0x10	; 16
    40c0:	e0 e8       	ldi	r30, 0x80	; 128
    40c2:	f6 e0       	ldi	r31, 0x06	; 6
    40c4:	85 83       	std	Z+5, r24	; 0x05
            return 0;
    40c6:	01 2f       	mov	r16, r17
    40c8:	5b c0       	rjmp	.+182    	; 0x4180 <sd_raw_init+0x1f2>
        }
    }

#if SD_RAW_SDHC
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    40ca:	c0 91 3f 24 	lds	r28, 0x243F
    40ce:	c1 ff       	sbrs	r28, 1
    40d0:	1a c0       	rjmp	.+52     	; 0x4106 <sd_raw_init+0x178>
    {
        if(sd_raw_send_command(CMD_READ_OCR, 0))
    40d2:	40 e0       	ldi	r20, 0x00	; 0
    40d4:	50 e0       	ldi	r21, 0x00	; 0
    40d6:	ba 01       	movw	r22, r20
    40d8:	8a e3       	ldi	r24, 0x3A	; 58
    40da:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <sd_raw_send_command>
    40de:	88 23       	and	r24, r24
    40e0:	29 f0       	breq	.+10     	; 0x40ec <sd_raw_init+0x15e>
        {
            unselect_card();
    40e2:	80 e1       	ldi	r24, 0x10	; 16
    40e4:	e0 e8       	ldi	r30, 0x80	; 128
    40e6:	f6 e0       	ldi	r31, 0x06	; 6
    40e8:	85 83       	std	Z+5, r24	; 0x05
            return 0;
    40ea:	4a c0       	rjmp	.+148    	; 0x4180 <sd_raw_init+0x1f2>
        }

        if(sd_raw_rec_byte() & 0x40)
    40ec:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>
    40f0:	86 ff       	sbrs	r24, 6
    40f2:	03 c0       	rjmp	.+6      	; 0x40fa <sd_raw_init+0x16c>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
    40f4:	c4 60       	ori	r28, 0x04	; 4
    40f6:	c0 93 3f 24 	sts	0x243F, r28

        sd_raw_rec_byte();
    40fa:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    40fe:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    4102:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    4106:	40 e0       	ldi	r20, 0x00	; 0
    4108:	52 e0       	ldi	r21, 0x02	; 2
    410a:	60 e0       	ldi	r22, 0x00	; 0
    410c:	70 e0       	ldi	r23, 0x00	; 0
    410e:	80 e1       	ldi	r24, 0x10	; 16
    4110:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <sd_raw_send_command>
    4114:	88 23       	and	r24, r24
    4116:	29 f0       	breq	.+10     	; 0x4122 <sd_raw_init+0x194>
    {
        unselect_card();
    4118:	80 e1       	ldi	r24, 0x10	; 16
    411a:	e0 e8       	ldi	r30, 0x80	; 128
    411c:	f6 e0       	ldi	r31, 0x06	; 6
    411e:	85 83       	std	Z+5, r24	; 0x05
        return 0;
    4120:	2f c0       	rjmp	.+94     	; 0x4180 <sd_raw_init+0x1f2>
    }

    /* deaddress card */
    unselect_card();
    4122:	80 e1       	ldi	r24, 0x10	; 16
    4124:	e0 e8       	ldi	r30, 0x80	; 128
    4126:	f6 e0       	ldi	r31, 0x06	; 6
    4128:	85 83       	std	Z+5, r24	; 0x05

    /* switch to highest SPI frequency possible */
#if XMEGA
    SPID.CTRL = 0b11010000;
    412a:	80 ed       	ldi	r24, 0xD0	; 208
    412c:	80 93 c0 09 	sts	0x09C0, r24
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
#endif

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    4130:	8f ef       	ldi	r24, 0xFF	; 255
    4132:	80 93 41 24 	sts	0x2441, r24
    4136:	80 93 42 24 	sts	0x2442, r24
    413a:	80 93 43 24 	sts	0x2443, r24
    413e:	80 93 44 24 	sts	0x2444, r24
    4142:	80 93 45 24 	sts	0x2445, r24
    4146:	80 93 46 24 	sts	0x2446, r24
    414a:	80 93 47 24 	sts	0x2447, r24
    414e:	80 93 48 24 	sts	0x2448, r24
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    4152:	81 e0       	ldi	r24, 0x01	; 1
    4154:	80 93 40 24 	sts	0x2440, r24
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    4158:	e1 2c       	mov	r14, r1
    415a:	68 94       	set
    415c:	ff 24       	eor	r15, r15
    415e:	f1 f8       	bld	r15, 1
    4160:	09 e4       	ldi	r16, 0x49	; 73
    4162:	14 e2       	ldi	r17, 0x24	; 36
    4164:	20 e0       	ldi	r18, 0x00	; 0
    4166:	30 e0       	ldi	r19, 0x00	; 0
    4168:	40 e0       	ldi	r20, 0x00	; 0
    416a:	50 e0       	ldi	r21, 0x00	; 0
    416c:	60 e0       	ldi	r22, 0x00	; 0
    416e:	70 e0       	ldi	r23, 0x00	; 0
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <sd_raw_read>
    4178:	01 e0       	ldi	r16, 0x01	; 1
    417a:	81 11       	cpse	r24, r1
    417c:	01 c0       	rjmp	.+2      	; 0x4180 <sd_raw_init+0x1f2>
    417e:	00 e0       	ldi	r16, 0x00	; 0
        return 0;
#endif

    return 1;
}
    4180:	80 2f       	mov	r24, r16
    4182:	df 91       	pop	r29
    4184:	cf 91       	pop	r28
    4186:	1f 91       	pop	r17
    4188:	0f 91       	pop	r16
    418a:	ff 90       	pop	r15
    418c:	ef 90       	pop	r14
    418e:	df 90       	pop	r13
    4190:	cf 90       	pop	r12
    4192:	bf 90       	pop	r11
    4194:	af 90       	pop	r10
    4196:	9f 90       	pop	r9
    4198:	08 95       	ret

0000419a <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    419a:	2f 92       	push	r2
    419c:	3f 92       	push	r3
    419e:	4f 92       	push	r4
    41a0:	5f 92       	push	r5
    41a2:	6f 92       	push	r6
    41a4:	7f 92       	push	r7
    41a6:	8f 92       	push	r8
    41a8:	9f 92       	push	r9
    41aa:	af 92       	push	r10
    41ac:	bf 92       	push	r11
    41ae:	cf 92       	push	r12
    41b0:	df 92       	push	r13
    41b2:	ef 92       	push	r14
    41b4:	ff 92       	push	r15
    41b6:	0f 93       	push	r16
    41b8:	1f 93       	push	r17
    41ba:	cf 93       	push	r28
    41bc:	df 93       	push	r29
    41be:	cd b7       	in	r28, 0x3d	; 61
    41c0:	de b7       	in	r29, 0x3e	; 62
    41c2:	62 97       	sbiw	r28, 0x12	; 18
    41c4:	cd bf       	out	0x3d, r28	; 61
    41c6:	de bf       	out	0x3e, r29	; 62
    41c8:	2f 87       	std	Y+15, r18	; 0x0f
    41ca:	38 8b       	std	Y+16, r19	; 0x10
    41cc:	49 8b       	std	Y+17, r20	; 0x11
    41ce:	5a 8b       	std	Y+18, r21	; 0x12
    41d0:	56 2e       	mov	r5, r22
    41d2:	47 2e       	mov	r4, r23
    41d4:	38 2e       	mov	r3, r24
    41d6:	29 2e       	mov	r2, r25
    41d8:	09 83       	std	Y+1, r16	; 0x01
    41da:	1a 83       	std	Y+2, r17	; 0x02
    41dc:	36 01       	movw	r6, r12
    41de:	ab 86       	std	Y+11, r10	; 0x0b
    41e0:	bc 86       	std	Y+12, r11	; 0x0c
    if(!buffer || interval == 0 || length < interval || !callback)
    41e2:	01 2b       	or	r16, r17
    41e4:	09 f4       	brne	.+2      	; 0x41e8 <sd_raw_read_interval+0x4e>
    41e6:	60 c0       	rjmp	.+192    	; 0x42a8 <sd_raw_read_interval+0x10e>
    41e8:	e1 14       	cp	r14, r1
    41ea:	f1 04       	cpc	r15, r1
    41ec:	09 f4       	brne	.+2      	; 0x41f0 <sd_raw_read_interval+0x56>
    41ee:	5e c0       	rjmp	.+188    	; 0x42ac <sd_raw_read_interval+0x112>
    41f0:	ce 14       	cp	r12, r14
    41f2:	df 04       	cpc	r13, r15
    41f4:	08 f4       	brcc	.+2      	; 0x41f8 <sd_raw_read_interval+0x5e>
    41f6:	5c c0       	rjmp	.+184    	; 0x42b0 <sd_raw_read_interval+0x116>
    41f8:	ab 28       	or	r10, r11
    41fa:	09 f4       	brne	.+2      	; 0x41fe <sd_raw_read_interval+0x64>
    41fc:	5b c0       	rjmp	.+182    	; 0x42b4 <sd_raw_read_interval+0x11a>
         */
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
        if(!callback(buffer, offset, p))
            break;
        offset += interval;
    41fe:	97 01       	movw	r18, r14
    4200:	40 e0       	ldi	r20, 0x00	; 0
    4202:	50 e0       	ldi	r21, 0x00	; 0
    4204:	60 e0       	ldi	r22, 0x00	; 0
    4206:	70 e0       	ldi	r23, 0x00	; 0
    4208:	cb 01       	movw	r24, r22
    420a:	eb 82       	std	Y+3, r14	; 0x03
    420c:	3c 83       	std	Y+4, r19	; 0x04
    420e:	4d 83       	std	Y+5, r20	; 0x05
    4210:	5e 83       	std	Y+6, r21	; 0x06
    4212:	6f 83       	std	Y+7, r22	; 0x07
    4214:	78 87       	std	Y+8, r23	; 0x08
    4216:	89 87       	std	Y+9, r24	; 0x09
    4218:	9a 87       	std	Y+10, r25	; 0x0a
    421a:	8d 86       	std	Y+13, r8	; 0x0d
    421c:	9e 86       	std	Y+14, r9	; 0x0e
    421e:	47 01       	movw	r8, r14
    4220:	df 84       	ldd	r13, Y+15	; 0x0f
    4222:	c8 88       	ldd	r12, Y+16	; 0x10
    4224:	b9 88       	ldd	r11, Y+17	; 0x11
    4226:	aa 88       	ldd	r10, Y+18	; 0x12
    while(length >= interval)
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    4228:	74 01       	movw	r14, r8
    422a:	09 81       	ldd	r16, Y+1	; 0x01
    422c:	1a 81       	ldd	r17, Y+2	; 0x02
    422e:	2d 2d       	mov	r18, r13
    4230:	3c 2d       	mov	r19, r12
    4232:	4b 2d       	mov	r20, r11
    4234:	5a 2d       	mov	r21, r10
    4236:	65 2d       	mov	r22, r5
    4238:	74 2d       	mov	r23, r4
    423a:	83 2d       	mov	r24, r3
    423c:	92 2d       	mov	r25, r2
    423e:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <sd_raw_read>
    4242:	88 23       	and	r24, r24
    4244:	c9 f1       	breq	.+114    	; 0x42b8 <sd_raw_read_interval+0x11e>
            return 0;
        if(!callback(buffer, offset, p))
    4246:	ed 84       	ldd	r14, Y+13	; 0x0d
    4248:	fe 84       	ldd	r15, Y+14	; 0x0e
    424a:	0d 2d       	mov	r16, r13
    424c:	1c 2d       	mov	r17, r12
    424e:	2b 2d       	mov	r18, r11
    4250:	3a 2d       	mov	r19, r10
    4252:	45 2d       	mov	r20, r5
    4254:	54 2d       	mov	r21, r4
    4256:	63 2d       	mov	r22, r3
    4258:	72 2d       	mov	r23, r2
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	9a 81       	ldd	r25, Y+2	; 0x02
    425e:	eb 85       	ldd	r30, Y+11	; 0x0b
    4260:	fc 85       	ldd	r31, Y+12	; 0x0c
    4262:	09 95       	icall
    4264:	88 23       	and	r24, r24
    4266:	51 f1       	breq	.+84     	; 0x42bc <sd_raw_read_interval+0x122>
            break;
        offset += interval;
    4268:	2d 2d       	mov	r18, r13
    426a:	3c 2d       	mov	r19, r12
    426c:	4b 2d       	mov	r20, r11
    426e:	5a 2d       	mov	r21, r10
    4270:	65 2d       	mov	r22, r5
    4272:	74 2d       	mov	r23, r4
    4274:	83 2d       	mov	r24, r3
    4276:	92 2d       	mov	r25, r2
    4278:	ab 80       	ldd	r10, Y+3	; 0x03
    427a:	bc 80       	ldd	r11, Y+4	; 0x04
    427c:	c1 2c       	mov	r12, r1
    427e:	d1 2c       	mov	r13, r1
    4280:	e1 2c       	mov	r14, r1
    4282:	f1 2c       	mov	r15, r1
    4284:	00 e0       	ldi	r16, 0x00	; 0
    4286:	10 e0       	ldi	r17, 0x00	; 0
    4288:	0e 94 a6 40 	call	0x814c	; 0x814c <__adddi3>
    428c:	d2 2e       	mov	r13, r18
    428e:	c3 2e       	mov	r12, r19
    4290:	b4 2e       	mov	r11, r20
    4292:	a5 2e       	mov	r10, r21
    4294:	56 2e       	mov	r5, r22
    4296:	47 2e       	mov	r4, r23
    4298:	38 2e       	mov	r3, r24
    429a:	29 2e       	mov	r2, r25
        length -= interval;
    429c:	68 18       	sub	r6, r8
    429e:	79 08       	sbc	r7, r9
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    42a0:	68 14       	cp	r6, r8
    42a2:	79 04       	cpc	r7, r9
    42a4:	08 f6       	brcc	.-126    	; 0x4228 <sd_raw_read_interval+0x8e>
    42a6:	0c c0       	rjmp	.+24     	; 0x42c0 <sd_raw_read_interval+0x126>
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;
    42a8:	80 e0       	ldi	r24, 0x00	; 0
    42aa:	0b c0       	rjmp	.+22     	; 0x42c2 <sd_raw_read_interval+0x128>
    42ac:	80 e0       	ldi	r24, 0x00	; 0
    42ae:	09 c0       	rjmp	.+18     	; 0x42c2 <sd_raw_read_interval+0x128>
    42b0:	80 e0       	ldi	r24, 0x00	; 0
    42b2:	07 c0       	rjmp	.+14     	; 0x42c2 <sd_raw_read_interval+0x128>
    42b4:	80 e0       	ldi	r24, 0x00	; 0
    42b6:	05 c0       	rjmp	.+10     	; 0x42c2 <sd_raw_read_interval+0x128>
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
    42b8:	80 e0       	ldi	r24, 0x00	; 0
    42ba:	03 c0       	rjmp	.+6      	; 0x42c2 <sd_raw_read_interval+0x128>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    42bc:	81 e0       	ldi	r24, 0x01	; 1
    42be:	01 c0       	rjmp	.+2      	; 0x42c2 <sd_raw_read_interval+0x128>
    42c0:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    42c2:	62 96       	adiw	r28, 0x12	; 18
    42c4:	cd bf       	out	0x3d, r28	; 61
    42c6:	de bf       	out	0x3e, r29	; 62
    42c8:	df 91       	pop	r29
    42ca:	cf 91       	pop	r28
    42cc:	1f 91       	pop	r17
    42ce:	0f 91       	pop	r16
    42d0:	ff 90       	pop	r15
    42d2:	ef 90       	pop	r14
    42d4:	df 90       	pop	r13
    42d6:	cf 90       	pop	r12
    42d8:	bf 90       	pop	r11
    42da:	af 90       	pop	r10
    42dc:	9f 90       	pop	r9
    42de:	8f 90       	pop	r8
    42e0:	7f 90       	pop	r7
    42e2:	6f 90       	pop	r6
    42e4:	5f 90       	pop	r5
    42e6:	4f 90       	pop	r4
    42e8:	3f 90       	pop	r3
    42ea:	2f 90       	pop	r2
    42ec:	08 95       	ret

000042ee <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    42ee:	2f 92       	push	r2
    42f0:	3f 92       	push	r3
    42f2:	4f 92       	push	r4
    42f4:	5f 92       	push	r5
    42f6:	6f 92       	push	r6
    42f8:	7f 92       	push	r7
    42fa:	8f 92       	push	r8
    42fc:	9f 92       	push	r9
    42fe:	af 92       	push	r10
    4300:	bf 92       	push	r11
    4302:	cf 92       	push	r12
    4304:	df 92       	push	r13
    4306:	ef 92       	push	r14
    4308:	ff 92       	push	r15
    430a:	0f 93       	push	r16
    430c:	1f 93       	push	r17
    430e:	cf 93       	push	r28
    4310:	df 93       	push	r29
    4312:	cd b7       	in	r28, 0x3d	; 61
    4314:	de b7       	in	r29, 0x3e	; 62
    4316:	69 97       	sbiw	r28, 0x19	; 25
    4318:	cd bf       	out	0x3d, r28	; 61
    431a:	de bf       	out	0x3e, r29	; 62
    431c:	29 83       	std	Y+1, r18	; 0x01
    431e:	3a 83       	std	Y+2, r19	; 0x02
    4320:	4b 83       	std	Y+3, r20	; 0x03
    4322:	5c 83       	std	Y+4, r21	; 0x04
    4324:	6d 83       	std	Y+5, r22	; 0x05
    4326:	7e 83       	std	Y+6, r23	; 0x06
    4328:	8f 83       	std	Y+7, r24	; 0x07
    432a:	98 87       	std	Y+8, r25	; 0x08
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    432c:	e1 14       	cp	r14, r1
    432e:	f1 04       	cpc	r15, r1
    4330:	09 f4       	brne	.+2      	; 0x4334 <sd_raw_write+0x46>
    4332:	0f c1       	rjmp	.+542    	; 0x4552 <sd_raw_write+0x264>
    4334:	0f 2e       	mov	r0, r31
    4336:	f9 e4       	ldi	r31, 0x49	; 73
    4338:	8f 2e       	mov	r8, r31
    433a:	f6 e2       	ldi	r31, 0x26	; 38
    433c:	9f 2e       	mov	r9, r31
    433e:	f0 2d       	mov	r31, r0
        buffer += write_length;
        offset += write_length;
        length -= write_length;

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    4340:	17 01       	movw	r2, r14
    4342:	28 01       	movw	r4, r16
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    4344:	29 81       	ldd	r18, Y+1	; 0x01
    4346:	3a 81       	ldd	r19, Y+2	; 0x02
    4348:	31 70       	andi	r19, 0x01	; 1
    434a:	28 8f       	std	Y+24, r18	; 0x18
    434c:	39 8f       	std	Y+25, r19	; 0x19
        block_address = offset - block_offset;
    434e:	40 e0       	ldi	r20, 0x00	; 0
    4350:	50 e0       	ldi	r21, 0x00	; 0
    4352:	60 e0       	ldi	r22, 0x00	; 0
    4354:	70 e0       	ldi	r23, 0x00	; 0
    4356:	cb 01       	movw	r24, r22
    4358:	29 87       	std	Y+9, r18	; 0x09
    435a:	3a 87       	std	Y+10, r19	; 0x0a
    435c:	4b 87       	std	Y+11, r20	; 0x0b
    435e:	5c 87       	std	Y+12, r21	; 0x0c
    4360:	6d 87       	std	Y+13, r22	; 0x0d
    4362:	7e 87       	std	Y+14, r23	; 0x0e
    4364:	8f 87       	std	Y+15, r24	; 0x0f
    4366:	98 8b       	std	Y+16, r25	; 0x10
    4368:	29 81       	ldd	r18, Y+1	; 0x01
    436a:	3a 81       	ldd	r19, Y+2	; 0x02
    436c:	4b 81       	ldd	r20, Y+3	; 0x03
    436e:	5c 81       	ldd	r21, Y+4	; 0x04
    4370:	6d 81       	ldd	r22, Y+5	; 0x05
    4372:	7e 81       	ldd	r23, Y+6	; 0x06
    4374:	8f 81       	ldd	r24, Y+7	; 0x07
    4376:	98 85       	ldd	r25, Y+8	; 0x08
    4378:	a9 84       	ldd	r10, Y+9	; 0x09
    437a:	ba 84       	ldd	r11, Y+10	; 0x0a
    437c:	c1 2c       	mov	r12, r1
    437e:	d1 2c       	mov	r13, r1
    4380:	e1 2c       	mov	r14, r1
    4382:	f1 2c       	mov	r15, r1
    4384:	00 e0       	ldi	r16, 0x00	; 0
    4386:	10 e0       	ldi	r17, 0x00	; 0
    4388:	0e 94 bb 40 	call	0x8176	; 0x8176 <__subdi3>
    438c:	29 87       	std	Y+9, r18	; 0x09
    438e:	39 8b       	std	Y+17, r19	; 0x11
    4390:	4a 8b       	std	Y+18, r20	; 0x12
    4392:	5b 8b       	std	Y+19, r21	; 0x13
    4394:	6c 8b       	std	Y+20, r22	; 0x14
    4396:	7d 8b       	std	Y+21, r23	; 0x15
    4398:	8e 8b       	std	Y+22, r24	; 0x16
    439a:	9f 8b       	std	Y+23, r25	; 0x17
    439c:	61 2c       	mov	r6, r1
    439e:	68 94       	set
    43a0:	77 24       	eor	r7, r7
    43a2:	71 f8       	bld	r7, 1
    43a4:	68 8d       	ldd	r22, Y+24	; 0x18
    43a6:	79 8d       	ldd	r23, Y+25	; 0x19
    43a8:	66 1a       	sub	r6, r22
    43aa:	77 0a       	sbc	r7, r23
    43ac:	26 14       	cp	r2, r6
    43ae:	37 04       	cpc	r3, r7
    43b0:	08 f4       	brcc	.+2      	; 0x43b4 <sd_raw_write+0xc6>
    43b2:	31 01       	movw	r6, r2
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    43b4:	a0 90 41 24 	lds	r10, 0x2441
    43b8:	b0 90 42 24 	lds	r11, 0x2442
    43bc:	c0 90 43 24 	lds	r12, 0x2443
    43c0:	d0 90 44 24 	lds	r13, 0x2444
    43c4:	e0 90 45 24 	lds	r14, 0x2445
    43c8:	f0 90 46 24 	lds	r15, 0x2446
    43cc:	00 91 47 24 	lds	r16, 0x2447
    43d0:	10 91 48 24 	lds	r17, 0x2448
    43d4:	29 85       	ldd	r18, Y+9	; 0x09
    43d6:	39 89       	ldd	r19, Y+17	; 0x11
    43d8:	4a 89       	ldd	r20, Y+18	; 0x12
    43da:	5b 89       	ldd	r21, Y+19	; 0x13
    43dc:	6c 89       	ldd	r22, Y+20	; 0x14
    43de:	7d 89       	ldd	r23, Y+21	; 0x15
    43e0:	8e 89       	ldd	r24, Y+22	; 0x16
    43e2:	9f 89       	ldd	r25, Y+23	; 0x17
    43e4:	0e 94 c4 40 	call	0x8188	; 0x8188 <__cmpdi2>
    43e8:	c1 f1       	breq	.+112    	; 0x445a <sd_raw_write+0x16c>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    43ea:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <sd_raw_sync>
    43ee:	88 23       	and	r24, r24
    43f0:	09 f4       	brne	.+2      	; 0x43f4 <sd_raw_write+0x106>
    43f2:	b1 c0       	rjmp	.+354    	; 0x4556 <sd_raw_write+0x268>
                return 0;
#endif

            if(block_offset || write_length < 512)
    43f4:	88 8d       	ldd	r24, Y+24	; 0x18
    43f6:	99 8d       	ldd	r25, Y+25	; 0x19
    43f8:	89 2b       	or	r24, r25
    43fa:	21 f4       	brne	.+8      	; 0x4404 <sd_raw_write+0x116>
    43fc:	61 14       	cp	r6, r1
    43fe:	92 e0       	ldi	r25, 0x02	; 2
    4400:	79 06       	cpc	r7, r25
    4402:	98 f4       	brcc	.+38     	; 0x442a <sd_raw_write+0x13c>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    4404:	e1 2c       	mov	r14, r1
    4406:	68 94       	set
    4408:	ff 24       	eor	r15, r15
    440a:	f1 f8       	bld	r15, 1
    440c:	09 e4       	ldi	r16, 0x49	; 73
    440e:	14 e2       	ldi	r17, 0x24	; 36
    4410:	29 85       	ldd	r18, Y+9	; 0x09
    4412:	39 89       	ldd	r19, Y+17	; 0x11
    4414:	4a 89       	ldd	r20, Y+18	; 0x12
    4416:	5b 89       	ldd	r21, Y+19	; 0x13
    4418:	6c 89       	ldd	r22, Y+20	; 0x14
    441a:	7d 89       	ldd	r23, Y+21	; 0x15
    441c:	8e 89       	ldd	r24, Y+22	; 0x16
    441e:	9f 89       	ldd	r25, Y+23	; 0x17
    4420:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <sd_raw_read>
    4424:	88 23       	and	r24, r24
    4426:	09 f4       	brne	.+2      	; 0x442a <sd_raw_write+0x13c>
    4428:	98 c0       	rjmp	.+304    	; 0x455a <sd_raw_write+0x26c>
                    return 0;
            }
            raw_block_address = block_address;
    442a:	e9 85       	ldd	r30, Y+9	; 0x09
    442c:	e0 93 41 24 	sts	0x2441, r30
    4430:	f9 89       	ldd	r31, Y+17	; 0x11
    4432:	f0 93 42 24 	sts	0x2442, r31
    4436:	2a 89       	ldd	r18, Y+18	; 0x12
    4438:	20 93 43 24 	sts	0x2443, r18
    443c:	3b 89       	ldd	r19, Y+19	; 0x13
    443e:	30 93 44 24 	sts	0x2444, r19
    4442:	4c 89       	ldd	r20, Y+20	; 0x14
    4444:	40 93 45 24 	sts	0x2445, r20
    4448:	5d 89       	ldd	r21, Y+21	; 0x15
    444a:	50 93 46 24 	sts	0x2446, r21
    444e:	6e 89       	ldd	r22, Y+22	; 0x16
    4450:	60 93 47 24 	sts	0x2447, r22
    4454:	7f 89       	ldd	r23, Y+23	; 0x17
    4456:	70 93 48 24 	sts	0x2448, r23
        }

        if(buffer != raw_block)
    445a:	89 e4       	ldi	r24, 0x49	; 73
    445c:	48 16       	cp	r4, r24
    445e:	84 e2       	ldi	r24, 0x24	; 36
    4460:	58 06       	cpc	r5, r24
    4462:	71 f0       	breq	.+28     	; 0x4480 <sd_raw_write+0x192>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    4464:	a3 01       	movw	r20, r6
    4466:	b2 01       	movw	r22, r4
    4468:	88 8d       	ldd	r24, Y+24	; 0x18
    446a:	99 8d       	ldd	r25, Y+25	; 0x19
    446c:	87 5b       	subi	r24, 0xB7	; 183
    446e:	9b 4d       	sbci	r25, 0xDB	; 219
    4470:	0e 94 e0 42 	call	0x85c0	; 0x85c0 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    4474:	10 92 40 24 	sts	0x2440, r1

            if(length == write_length)
    4478:	26 14       	cp	r2, r6
    447a:	37 04       	cpc	r3, r7
    447c:	09 f4       	brne	.+2      	; 0x4480 <sd_raw_write+0x192>
    447e:	6f c0       	rjmp	.+222    	; 0x455e <sd_raw_write+0x270>
                return 1;
#endif
        }

        /* address card */
        select_card();
    4480:	90 e1       	ldi	r25, 0x10	; 16
    4482:	90 93 86 06 	sts	0x0686, r25

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    4486:	80 91 3f 24 	lds	r24, 0x243F
    448a:	82 ff       	sbrs	r24, 2
    448c:	10 c0       	rjmp	.+32     	; 0x44ae <sd_raw_write+0x1c0>
    448e:	29 85       	ldd	r18, Y+9	; 0x09
    4490:	39 89       	ldd	r19, Y+17	; 0x11
    4492:	4a 89       	ldd	r20, Y+18	; 0x12
    4494:	5b 89       	ldd	r21, Y+19	; 0x13
    4496:	6c 89       	ldd	r22, Y+20	; 0x14
    4498:	7d 89       	ldd	r23, Y+21	; 0x15
    449a:	8e 89       	ldd	r24, Y+22	; 0x16
    449c:	9f 89       	ldd	r25, Y+23	; 0x17
    449e:	09 e0       	ldi	r16, 0x09	; 9
    44a0:	0e 94 8a 40 	call	0x8114	; 0x8114 <__lshrdi3>
    44a4:	64 2f       	mov	r22, r20
    44a6:	75 2f       	mov	r23, r21
    44a8:	42 2f       	mov	r20, r18
    44aa:	53 2f       	mov	r21, r19
    44ac:	04 c0       	rjmp	.+8      	; 0x44b6 <sd_raw_write+0x1c8>
    44ae:	49 85       	ldd	r20, Y+9	; 0x09
    44b0:	59 89       	ldd	r21, Y+17	; 0x11
    44b2:	6a 89       	ldd	r22, Y+18	; 0x12
    44b4:	7b 89       	ldd	r23, Y+19	; 0x13
    44b6:	88 e1       	ldi	r24, 0x18	; 24
    44b8:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <sd_raw_send_command>
    44bc:	88 23       	and	r24, r24
    44be:	31 f0       	breq	.+12     	; 0x44cc <sd_raw_write+0x1de>
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
#endif
        {
            unselect_card();
    44c0:	80 e1       	ldi	r24, 0x10	; 16
    44c2:	e0 e8       	ldi	r30, 0x80	; 128
    44c4:	f6 e0       	ldi	r31, 0x06	; 6
    44c6:	85 83       	std	Z+5, r24	; 0x05
            return 0;
    44c8:	80 e0       	ldi	r24, 0x00	; 0
    44ca:	4c c0       	rjmp	.+152    	; 0x4564 <sd_raw_write+0x276>
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
    44cc:	8e ef       	ldi	r24, 0xFE	; 254
    44ce:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <sd_raw_send_byte>
    44d2:	09 e4       	ldi	r16, 0x49	; 73
    44d4:	14 e2       	ldi	r17, 0x24	; 36

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    44d6:	f8 01       	movw	r30, r16
    44d8:	81 91       	ld	r24, Z+
    44da:	8f 01       	movw	r16, r30
    44dc:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <sd_raw_send_byte>
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    44e0:	08 15       	cp	r16, r8
    44e2:	19 05       	cpc	r17, r9
    44e4:	c1 f7       	brne	.-16     	; 0x44d6 <sd_raw_write+0x1e8>
            sd_raw_send_byte(*cache++);

        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
    44e6:	8f ef       	ldi	r24, 0xFF	; 255
    44e8:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
    44ec:	8f ef       	ldi	r24, 0xFF	; 255
    44ee:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <sd_raw_send_byte>

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    44f2:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>
    44f6:	8f 3f       	cpi	r24, 0xFF	; 255
    44f8:	e1 f7       	brne	.-8      	; 0x44f2 <sd_raw_write+0x204>
        sd_raw_rec_byte();
    44fa:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <sd_raw_rec_byte>

        /* deaddress card */
        unselect_card();
    44fe:	f0 e1       	ldi	r31, 0x10	; 16
    4500:	f0 93 85 06 	sts	0x0685, r31

        buffer += write_length;
    4504:	46 0c       	add	r4, r6
    4506:	57 1c       	adc	r5, r7
        offset += write_length;
    4508:	53 01       	movw	r10, r6
    450a:	26 2d       	mov	r18, r6
    450c:	3b 2d       	mov	r19, r11
    450e:	40 e0       	ldi	r20, 0x00	; 0
    4510:	50 e0       	ldi	r21, 0x00	; 0
    4512:	60 e0       	ldi	r22, 0x00	; 0
    4514:	70 e0       	ldi	r23, 0x00	; 0
    4516:	80 e0       	ldi	r24, 0x00	; 0
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	a9 80       	ldd	r10, Y+1	; 0x01
    451c:	ba 80       	ldd	r11, Y+2	; 0x02
    451e:	cb 80       	ldd	r12, Y+3	; 0x03
    4520:	dc 80       	ldd	r13, Y+4	; 0x04
    4522:	ed 80       	ldd	r14, Y+5	; 0x05
    4524:	fe 80       	ldd	r15, Y+6	; 0x06
    4526:	0f 81       	ldd	r16, Y+7	; 0x07
    4528:	18 85       	ldd	r17, Y+8	; 0x08
    452a:	0e 94 a6 40 	call	0x814c	; 0x814c <__adddi3>
    452e:	29 83       	std	Y+1, r18	; 0x01
    4530:	3a 83       	std	Y+2, r19	; 0x02
    4532:	4b 83       	std	Y+3, r20	; 0x03
    4534:	5c 83       	std	Y+4, r21	; 0x04
    4536:	6d 83       	std	Y+5, r22	; 0x05
    4538:	7e 83       	std	Y+6, r23	; 0x06
    453a:	8f 83       	std	Y+7, r24	; 0x07
    453c:	98 87       	std	Y+8, r25	; 0x08
        length -= write_length;
    453e:	26 18       	sub	r2, r6
    4540:	37 08       	sbc	r3, r7

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    4542:	21 e0       	ldi	r18, 0x01	; 1
    4544:	20 93 40 24 	sts	0x2440, r18
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    4548:	21 14       	cp	r2, r1
    454a:	31 04       	cpc	r3, r1
    454c:	09 f0       	breq	.+2      	; 0x4550 <sd_raw_write+0x262>
    454e:	fa ce       	rjmp	.-524    	; 0x4344 <sd_raw_write+0x56>
    4550:	08 c0       	rjmp	.+16     	; 0x4562 <sd_raw_write+0x274>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	07 c0       	rjmp	.+14     	; 0x4564 <sd_raw_write+0x276>
         */
        if(block_address != raw_block_address)
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
                return 0;
    4556:	80 e0       	ldi	r24, 0x00	; 0
    4558:	05 c0       	rjmp	.+10     	; 0x4564 <sd_raw_write+0x276>
#endif

            if(block_offset || write_length < 512)
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
                    return 0;
    455a:	80 e0       	ldi	r24, 0x00	; 0
    455c:	03 c0       	rjmp	.+6      	; 0x4564 <sd_raw_write+0x276>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;

            if(length == write_length)
                return 1;
    455e:	81 e0       	ldi	r24, 0x01	; 1
    4560:	01 c0       	rjmp	.+2      	; 0x4564 <sd_raw_write+0x276>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
    4562:	81 e0       	ldi	r24, 0x01	; 1
}
    4564:	69 96       	adiw	r28, 0x19	; 25
    4566:	cd bf       	out	0x3d, r28	; 61
    4568:	de bf       	out	0x3e, r29	; 62
    456a:	df 91       	pop	r29
    456c:	cf 91       	pop	r28
    456e:	1f 91       	pop	r17
    4570:	0f 91       	pop	r16
    4572:	ff 90       	pop	r15
    4574:	ef 90       	pop	r14
    4576:	df 90       	pop	r13
    4578:	cf 90       	pop	r12
    457a:	bf 90       	pop	r11
    457c:	af 90       	pop	r10
    457e:	9f 90       	pop	r9
    4580:	8f 90       	pop	r8
    4582:	7f 90       	pop	r7
    4584:	6f 90       	pop	r6
    4586:	5f 90       	pop	r5
    4588:	4f 90       	pop	r4
    458a:	3f 90       	pop	r3
    458c:	2f 90       	pop	r2
    458e:	08 95       	ret

00004590 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    4590:	2f 92       	push	r2
    4592:	3f 92       	push	r3
    4594:	4f 92       	push	r4
    4596:	5f 92       	push	r5
    4598:	6f 92       	push	r6
    459a:	7f 92       	push	r7
    459c:	8f 92       	push	r8
    459e:	9f 92       	push	r9
    45a0:	af 92       	push	r10
    45a2:	bf 92       	push	r11
    45a4:	cf 92       	push	r12
    45a6:	df 92       	push	r13
    45a8:	ef 92       	push	r14
    45aa:	ff 92       	push	r15
    45ac:	0f 93       	push	r16
    45ae:	1f 93       	push	r17
    45b0:	cf 93       	push	r28
    45b2:	df 93       	push	r29
    45b4:	cd b7       	in	r28, 0x3d	; 61
    45b6:	de b7       	in	r29, 0x3e	; 62
    45b8:	29 97       	sbiw	r28, 0x09	; 9
    45ba:	cd bf       	out	0x3d, r28	; 61
    45bc:	de bf       	out	0x3e, r29	; 62
    45be:	28 87       	std	Y+8, r18	; 0x08
    45c0:	3d 83       	std	Y+5, r19	; 0x05
    45c2:	56 2e       	mov	r5, r22
    45c4:	47 2e       	mov	r4, r23
    45c6:	09 83       	std	Y+1, r16	; 0x01
    45c8:	1a 83       	std	Y+2, r17	; 0x02
    45ca:	cb 82       	std	Y+3, r12	; 0x03
    45cc:	dc 82       	std	Y+4, r13	; 0x04
    45ce:	ae 82       	std	Y+6, r10	; 0x06
    45d0:	bf 82       	std	Y+7, r11	; 0x07
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    45d2:	01 2b       	or	r16, r17
    45d4:	09 f4       	brne	.+2      	; 0x45d8 <sd_raw_write_interval+0x48>
    45d6:	46 c0       	rjmp	.+140    	; 0x4664 <sd_raw_write_interval+0xd4>
    45d8:	cd 28       	or	r12, r13
    45da:	09 f4       	brne	.+2      	; 0x45de <sd_raw_write_interval+0x4e>
    45dc:	45 c0       	rjmp	.+138    	; 0x4668 <sd_raw_write_interval+0xd8>
    45de:	47 01       	movw	r8, r14
    45e0:	a2 2e       	mov	r10, r18
    45e2:	b3 2e       	mov	r11, r19
    45e4:	c4 2e       	mov	r12, r20
    45e6:	d5 2e       	mov	r13, r21
    45e8:	78 2e       	mov	r7, r24
    45ea:	69 2e       	mov	r6, r25
    45ec:	17 01       	movw	r2, r14
    45ee:	32 c0       	rjmp	.+100    	; 0x4654 <sd_raw_write_interval+0xc4>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
    45f0:	28 85       	ldd	r18, Y+8	; 0x08
    45f2:	39 85       	ldd	r19, Y+9	; 0x09
    45f4:	82 16       	cp	r8, r18
    45f6:	93 06       	cpc	r9, r19
    45f8:	c8 f1       	brcs	.+114    	; 0x466c <sd_raw_write_interval+0xdc>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    45fa:	e8 84       	ldd	r14, Y+8	; 0x08
    45fc:	f9 84       	ldd	r15, Y+9	; 0x09
    45fe:	09 81       	ldd	r16, Y+1	; 0x01
    4600:	1a 81       	ldd	r17, Y+2	; 0x02
    4602:	2a 2d       	mov	r18, r10
    4604:	3b 2d       	mov	r19, r11
    4606:	4c 2d       	mov	r20, r12
    4608:	5d 2d       	mov	r21, r13
    460a:	65 2d       	mov	r22, r5
    460c:	74 2d       	mov	r23, r4
    460e:	87 2d       	mov	r24, r7
    4610:	96 2d       	mov	r25, r6
    4612:	0e 94 77 21 	call	0x42ee	; 0x42ee <sd_raw_write>
    4616:	88 23       	and	r24, r24
    4618:	59 f1       	breq	.+86     	; 0x4670 <sd_raw_write_interval+0xe0>
            return 0;

        offset += bytes_to_write;
    461a:	e8 84       	ldd	r14, Y+8	; 0x08
    461c:	f9 84       	ldd	r15, Y+9	; 0x09
    461e:	a7 01       	movw	r20, r14
    4620:	2e 2d       	mov	r18, r14
    4622:	35 2f       	mov	r19, r21
    4624:	40 e0       	ldi	r20, 0x00	; 0
    4626:	50 e0       	ldi	r21, 0x00	; 0
    4628:	60 e0       	ldi	r22, 0x00	; 0
    462a:	70 e0       	ldi	r23, 0x00	; 0
    462c:	80 e0       	ldi	r24, 0x00	; 0
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	e5 2c       	mov	r14, r5
    4632:	f4 2c       	mov	r15, r4
    4634:	07 2d       	mov	r16, r7
    4636:	16 2d       	mov	r17, r6
    4638:	0e 94 a6 40 	call	0x814c	; 0x814c <__adddi3>
    463c:	a2 2e       	mov	r10, r18
    463e:	b3 2e       	mov	r11, r19
    4640:	c4 2e       	mov	r12, r20
    4642:	d5 2e       	mov	r13, r21
    4644:	56 2e       	mov	r5, r22
    4646:	47 2e       	mov	r4, r23
    4648:	78 2e       	mov	r7, r24
    464a:	69 2e       	mov	r6, r25
        length -= bytes_to_write;
    464c:	88 85       	ldd	r24, Y+8	; 0x08
    464e:	99 85       	ldd	r25, Y+9	; 0x09
    4650:	88 1a       	sub	r8, r24
    4652:	99 0a       	sbc	r9, r25

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    4654:	21 14       	cp	r2, r1
    4656:	31 04       	cpc	r3, r1
    4658:	31 f1       	breq	.+76     	; 0x46a6 <sd_raw_write_interval+0x116>
    465a:	81 14       	cp	r8, r1
    465c:	91 04       	cpc	r9, r1
    465e:	71 f4       	brne	.+28     	; 0x467c <sd_raw_write_interval+0xec>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    4660:	81 e0       	ldi	r24, 0x01	; 1
    4662:	36 c0       	rjmp	.+108    	; 0x46d0 <sd_raw_write_interval+0x140>
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
        return 0;
    4664:	80 e0       	ldi	r24, 0x00	; 0
    4666:	34 c0       	rjmp	.+104    	; 0x46d0 <sd_raw_write_interval+0x140>
    4668:	80 e0       	ldi	r24, 0x00	; 0
    466a:	32 c0       	rjmp	.+100    	; 0x46d0 <sd_raw_write_interval+0x140>
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
            return 0;
    466c:	80 e0       	ldi	r24, 0x00	; 0
    466e:	30 c0       	rjmp	.+96     	; 0x46d0 <sd_raw_write_interval+0x140>

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
            return 0;
    4670:	80 e0       	ldi	r24, 0x00	; 0
    4672:	2e c0       	rjmp	.+92     	; 0x46d0 <sd_raw_write_interval+0x140>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    4674:	81 e0       	ldi	r24, 0x01	; 1
    4676:	2c c0       	rjmp	.+88     	; 0x46d0 <sd_raw_write_interval+0x140>
    4678:	81 e0       	ldi	r24, 0x01	; 1
    467a:	2a c0       	rjmp	.+84     	; 0x46d0 <sd_raw_write_interval+0x140>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    467c:	ee 80       	ldd	r14, Y+6	; 0x06
    467e:	ff 80       	ldd	r15, Y+7	; 0x07
    4680:	0a 2d       	mov	r16, r10
    4682:	1b 2d       	mov	r17, r11
    4684:	2c 2d       	mov	r18, r12
    4686:	3d 2d       	mov	r19, r13
    4688:	45 2d       	mov	r20, r5
    468a:	54 2d       	mov	r21, r4
    468c:	67 2d       	mov	r22, r7
    468e:	76 2d       	mov	r23, r6
    4690:	89 81       	ldd	r24, Y+1	; 0x01
    4692:	9a 81       	ldd	r25, Y+2	; 0x02
    4694:	eb 81       	ldd	r30, Y+3	; 0x03
    4696:	fc 81       	ldd	r31, Y+4	; 0x04
    4698:	09 95       	icall
    469a:	88 87       	std	Y+8, r24	; 0x08
    469c:	99 87       	std	Y+9, r25	; 0x09
        if(!bytes_to_write)
    469e:	89 2b       	or	r24, r25
    46a0:	09 f0       	breq	.+2      	; 0x46a4 <sd_raw_write_interval+0x114>
    46a2:	a6 cf       	rjmp	.-180    	; 0x45f0 <sd_raw_write_interval+0x60>
    46a4:	e7 cf       	rjmp	.-50     	; 0x4674 <sd_raw_write_interval+0xe4>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    46a6:	ee 80       	ldd	r14, Y+6	; 0x06
    46a8:	ff 80       	ldd	r15, Y+7	; 0x07
    46aa:	0a 2d       	mov	r16, r10
    46ac:	1b 2d       	mov	r17, r11
    46ae:	2c 2d       	mov	r18, r12
    46b0:	3d 2d       	mov	r19, r13
    46b2:	45 2d       	mov	r20, r5
    46b4:	54 2d       	mov	r21, r4
    46b6:	67 2d       	mov	r22, r7
    46b8:	76 2d       	mov	r23, r6
    46ba:	89 81       	ldd	r24, Y+1	; 0x01
    46bc:	9a 81       	ldd	r25, Y+2	; 0x02
    46be:	eb 81       	ldd	r30, Y+3	; 0x03
    46c0:	fc 81       	ldd	r31, Y+4	; 0x04
    46c2:	09 95       	icall
    46c4:	88 87       	std	Y+8, r24	; 0x08
    46c6:	99 87       	std	Y+9, r25	; 0x09
        if(!bytes_to_write)
    46c8:	89 2b       	or	r24, r25
    46ca:	09 f0       	breq	.+2      	; 0x46ce <sd_raw_write_interval+0x13e>
    46cc:	96 cf       	rjmp	.-212    	; 0x45fa <sd_raw_write_interval+0x6a>
    46ce:	d4 cf       	rjmp	.-88     	; 0x4678 <sd_raw_write_interval+0xe8>
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    46d0:	29 96       	adiw	r28, 0x09	; 9
    46d2:	cd bf       	out	0x3d, r28	; 61
    46d4:	de bf       	out	0x3e, r29	; 62
    46d6:	df 91       	pop	r29
    46d8:	cf 91       	pop	r28
    46da:	1f 91       	pop	r17
    46dc:	0f 91       	pop	r16
    46de:	ff 90       	pop	r15
    46e0:	ef 90       	pop	r14
    46e2:	df 90       	pop	r13
    46e4:	cf 90       	pop	r12
    46e6:	bf 90       	pop	r11
    46e8:	af 90       	pop	r10
    46ea:	9f 90       	pop	r9
    46ec:	8f 90       	pop	r8
    46ee:	7f 90       	pop	r7
    46f0:	6f 90       	pop	r6
    46f2:	5f 90       	pop	r5
    46f4:	4f 90       	pop	r4
    46f6:	3f 90       	pop	r3
    46f8:	2f 90       	pop	r2
    46fa:	08 95       	ret

000046fc <sd_card_open>:
	
	
}	
//########################################################################################## 
void sd_card_open(void) //Logging File auf SD-Karte oeffnen und auf das Ende positionieren. 
{
    46fc:	0f 93       	push	r16
	if (card_open == 1) return;
    46fe:	80 91 49 26 	lds	r24, 0x2649
    4702:	81 30       	cpi	r24, 0x01	; 1
    4704:	09 f4       	brne	.+2      	; 0x4708 <sd_card_open+0xc>
    4706:	54 c0       	rjmp	.+168    	; 0x47b0 <sd_card_open+0xb4>
	
    //############# setup sd card slot 
	if(!sd_raw_init())	
    4708:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <sd_raw_init>
    470c:	81 11       	cpse	r24, r1
    470e:	09 c0       	rjmp	.+18     	; 0x4722 <sd_card_open+0x26>
	{
		printf("#MMC/SD initialization failed\r");
    4710:	86 e7       	ldi	r24, 0x76	; 118
    4712:	92 e2       	ldi	r25, 0x22	; 34
    4714:	9f 93       	push	r25
    4716:	8f 93       	push	r24
    4718:	0e 94 3f 43 	call	0x867e	; 0x867e <printf>
    471c:	0f 90       	pop	r0
    471e:	0f 90       	pop	r0
    4720:	47 c0       	rjmp	.+142    	; 0x47b0 <sd_card_open+0xb4>
	}
	else
	{   
	card_open=1;
    4722:	81 e0       	ldi	r24, 0x01	; 1
    4724:	80 93 49 26 	sts	0x2649, r24
//############# open first partition 
	partition = partition_open(	sd_raw_read,sd_raw_read_interval,sd_raw_write,sd_raw_write_interval,0);
    4728:	00 e0       	ldi	r16, 0x00	; 0
    472a:	28 ec       	ldi	r18, 0xC8	; 200
    472c:	32 e2       	ldi	r19, 0x22	; 34
    472e:	47 e7       	ldi	r20, 0x77	; 119
    4730:	51 e2       	ldi	r21, 0x21	; 33
    4732:	6d ec       	ldi	r22, 0xCD	; 205
    4734:	70 e2       	ldi	r23, 0x20	; 32
    4736:	8e e8       	ldi	r24, 0x8E	; 142
    4738:	9e e1       	ldi	r25, 0x1E	; 30
    473a:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <partition_open>
    473e:	80 93 4e 28 	sts	0x284E, r24
    4742:	90 93 4f 28 	sts	0x284F, r25
	
	// If the partition did not open, assume the storage device is a "superfloppy", i.e. has no MBR.
	if(!partition)
    4746:	89 2b       	or	r24, r25
    4748:	79 f4       	brne	.+30     	; 0x4768 <sd_card_open+0x6c>
		{   
		partition = partition_open(sd_raw_read,sd_raw_read_interval,sd_raw_write,sd_raw_write_interval,-1);
    474a:	0f ef       	ldi	r16, 0xFF	; 255
    474c:	28 ec       	ldi	r18, 0xC8	; 200
    474e:	32 e2       	ldi	r19, 0x22	; 34
    4750:	47 e7       	ldi	r20, 0x77	; 119
    4752:	51 e2       	ldi	r21, 0x21	; 33
    4754:	6d ec       	ldi	r22, 0xCD	; 205
    4756:	70 e2       	ldi	r23, 0x20	; 32
    4758:	8e e8       	ldi	r24, 0x8E	; 142
    475a:	9e e1       	ldi	r25, 0x1E	; 30
    475c:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <partition_open>
    4760:	80 93 4e 28 	sts	0x284E, r24
    4764:	90 93 4f 28 	sts	0x284F, r25
#endif			
			}
		}

	//############# open file system 
	fs = fat_open(partition);
    4768:	80 91 4e 28 	lds	r24, 0x284E
    476c:	90 91 4f 28 	lds	r25, 0x284F
    4770:	0e 94 9d 18 	call	0x313a	; 0x313a <fat_open>
    4774:	80 93 e8 27 	sts	0x27E8, r24
    4778:	90 93 e9 27 	sts	0x27E9, r25
		usart_puts(&USARTD0_data,"#opening filesystem failed\r");
#endif		
		}

	//############# open root directory
	fat_get_dir_entry_of_path(fs, "/", &directory);
    477c:	4b e1       	ldi	r20, 0x1B	; 27
    477e:	58 e2       	ldi	r21, 0x28	; 40
    4780:	65 e9       	ldi	r22, 0x95	; 149
    4782:	72 e2       	ldi	r23, 0x22	; 34
    4784:	0e 94 c4 1c 	call	0x3988	; 0x3988 <fat_get_dir_entry_of_path>

	dd = fat_open_dir(fs, &directory);
    4788:	6b e1       	ldi	r22, 0x1B	; 27
    478a:	78 e2       	ldi	r23, 0x28	; 40
    478c:	80 91 e8 27 	lds	r24, 0x27E8
    4790:	90 91 e9 27 	lds	r25, 0x27E9
    4794:	0e 94 39 1b 	call	0x3672	; 0x3672 <fat_open_dir>
    4798:	80 93 50 28 	sts	0x2850, r24
    479c:	90 93 51 28 	sts	0x2851, r25
	print_disk_info(fs);	//print some card information as a boot message 
	sd_get_Directory();		//print directory entry
#endif	
	
//############
	printf("#Card open\r"); 		
    47a0:	87 e9       	ldi	r24, 0x97	; 151
    47a2:	92 e2       	ldi	r25, 0x22	; 34
    47a4:	9f 93       	push	r25
    47a6:	8f 93       	push	r24
    47a8:	0e 94 3f 43 	call	0x867e	; 0x867e <printf>
    47ac:	0f 90       	pop	r0
    47ae:	0f 90       	pop	r0
	}
}
    47b0:	0f 91       	pop	r16
    47b2:	08 95       	ret

000047b4 <start_preeamp>:

void start_preeamp()
{
	if (Debug_seq == 1 )
	{
		printf("Start preamp with id %i \n",Seqvenser.Amp_id);
    47b4:	e9 e8       	ldi	r30, 0x89	; 137
    47b6:	f8 e2       	ldi	r31, 0x28	; 40
    47b8:	81 81       	ldd	r24, Z+1	; 0x01
    47ba:	8f 93       	push	r24
    47bc:	80 81       	ld	r24, Z
    47be:	8f 93       	push	r24
    47c0:	8b eb       	ldi	r24, 0xBB	; 187
    47c2:	92 e2       	ldi	r25, 0x22	; 34
    47c4:	9f 93       	push	r25
    47c6:	8f 93       	push	r24
    47c8:	0e 94 3f 43 	call	0x867e	; 0x867e <printf>
	}
	wait_for.preamp =0;
    47cc:	10 92 91 28 	sts	0x2891, r1
    47d0:	10 92 92 28 	sts	0x2892, r1
    47d4:	0f 90       	pop	r0
    47d6:	0f 90       	pop	r0
    47d8:	0f 90       	pop	r0
    47da:	0f 90       	pop	r0
    47dc:	08 95       	ret

000047de <stop_preamp>:
}
void stop_preamp()
{
	if (Debug_seq == 1 )
	{
		printf("Stop preamp with id %i \n",Seqvenser.Amp_id);
    47de:	e9 e8       	ldi	r30, 0x89	; 137
    47e0:	f8 e2       	ldi	r31, 0x28	; 40
    47e2:	81 81       	ldd	r24, Z+1	; 0x01
    47e4:	8f 93       	push	r24
    47e6:	80 81       	ld	r24, Z
    47e8:	8f 93       	push	r24
    47ea:	85 ed       	ldi	r24, 0xD5	; 213
    47ec:	92 e2       	ldi	r25, 0x22	; 34
    47ee:	9f 93       	push	r25
    47f0:	8f 93       	push	r24
    47f2:	0e 94 3f 43 	call	0x867e	; 0x867e <printf>
	}
	wait_for.preamp =1;
    47f6:	81 e0       	ldi	r24, 0x01	; 1
    47f8:	90 e0       	ldi	r25, 0x00	; 0
    47fa:	80 93 91 28 	sts	0x2891, r24
    47fe:	90 93 92 28 	sts	0x2892, r25
    4802:	0f 90       	pop	r0
    4804:	0f 90       	pop	r0
    4806:	0f 90       	pop	r0
    4808:	0f 90       	pop	r0
    480a:	08 95       	ret

0000480c <start_amp>:
}
void start_amp()
{
    480c:	0f 93       	push	r16
    480e:	1f 93       	push	r17
    4810:	cf 93       	push	r28
    4812:	df 93       	push	r29
    4814:	cd b7       	in	r28, 0x3d	; 61
    4816:	de b7       	in	r29, 0x3e	; 62
    4818:	2a 97       	sbiw	r28, 0x0a	; 10
    481a:	cd bf       	out	0x3d, r28	; 61
    481c:	de bf       	out	0x3e, r29	; 62
	if (Debug_seq == 1 )
	{
		printf("Start amp with id %i \n",Seqvenser.Amp_id);
    481e:	09 e8       	ldi	r16, 0x89	; 137
    4820:	18 e2       	ldi	r17, 0x28	; 40
    4822:	f8 01       	movw	r30, r16
    4824:	81 81       	ldd	r24, Z+1	; 0x01
    4826:	8f 93       	push	r24
    4828:	80 81       	ld	r24, Z
    482a:	8f 93       	push	r24
    482c:	8e ee       	ldi	r24, 0xEE	; 238
    482e:	92 e2       	ldi	r25, 0x22	; 34
    4830:	9f 93       	push	r25
    4832:	8f 93       	push	r24
    4834:	0e 94 3f 43 	call	0x867e	; 0x867e <printf>
	}
	
	wait_for.preamp =1;
    4838:	81 e0       	ldi	r24, 0x01	; 1
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	80 93 91 28 	sts	0x2891, r24
    4840:	90 93 92 28 	sts	0x2892, r25
	
	can_message_t send;
	send.msg_id=1;
    4844:	89 83       	std	Y+1, r24	; 0x01
	send.data_length=2;
    4846:	92 e0       	ldi	r25, 0x02	; 2
    4848:	9a 83       	std	Y+2, r25	; 0x02
	send.data[0]=Seqvenser.Amp_id;
    484a:	f8 01       	movw	r30, r16
    484c:	20 81       	ld	r18, Z
    484e:	2b 83       	std	Y+3, r18	; 0x03
	send.data[1]=1;
    4850:	8c 83       	std	Y+4, r24	; 0x04
	can_queue_Enqueue(send);
    4852:	01 e0       	ldi	r16, 0x01	; 1
    4854:	12 e0       	ldi	r17, 0x02	; 2
    4856:	31 e0       	ldi	r19, 0x01	; 1
    4858:	4d 81       	ldd	r20, Y+5	; 0x05
    485a:	5e 81       	ldd	r21, Y+6	; 0x06
    485c:	6f 81       	ldd	r22, Y+7	; 0x07
    485e:	78 85       	ldd	r23, Y+8	; 0x08
    4860:	89 85       	ldd	r24, Y+9	; 0x09
    4862:	9a 85       	ldd	r25, Y+10	; 0x0a
    4864:	0e 94 48 08 	call	0x1090	; 0x1090 <can_queue_Enqueue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4868:	8f e3       	ldi	r24, 0x3F	; 63
    486a:	9c e9       	ldi	r25, 0x9C	; 156
    486c:	01 97       	sbiw	r24, 0x01	; 1
    486e:	f1 f7       	brne	.-4      	; 0x486c <start_amp+0x60>
    4870:	00 c0       	rjmp	.+0      	; 0x4872 <start_amp+0x66>
    4872:	00 00       	nop
    4874:	0f 90       	pop	r0
    4876:	0f 90       	pop	r0
    4878:	0f 90       	pop	r0
    487a:	0f 90       	pop	r0
	_delay_ms(5);
	
	
}
    487c:	2a 96       	adiw	r28, 0x0a	; 10
    487e:	cd bf       	out	0x3d, r28	; 61
    4880:	de bf       	out	0x3e, r29	; 62
    4882:	df 91       	pop	r29
    4884:	cf 91       	pop	r28
    4886:	1f 91       	pop	r17
    4888:	0f 91       	pop	r16
    488a:	08 95       	ret

0000488c <stop_amp>:
void stop_amp()
{
    488c:	0f 93       	push	r16
    488e:	1f 93       	push	r17
    4890:	cf 93       	push	r28
    4892:	df 93       	push	r29
    4894:	cd b7       	in	r28, 0x3d	; 61
    4896:	de b7       	in	r29, 0x3e	; 62
    4898:	2a 97       	sbiw	r28, 0x0a	; 10
    489a:	cd bf       	out	0x3d, r28	; 61
    489c:	de bf       	out	0x3e, r29	; 62
	if (Debug_seq == 1 )
	{
		printf("Stop amp with id %i \n",Seqvenser.Amp_id);
    489e:	09 e8       	ldi	r16, 0x89	; 137
    48a0:	18 e2       	ldi	r17, 0x28	; 40
    48a2:	f8 01       	movw	r30, r16
    48a4:	81 81       	ldd	r24, Z+1	; 0x01
    48a6:	8f 93       	push	r24
    48a8:	80 81       	ld	r24, Z
    48aa:	8f 93       	push	r24
    48ac:	85 e0       	ldi	r24, 0x05	; 5
    48ae:	93 e2       	ldi	r25, 0x23	; 35
    48b0:	9f 93       	push	r25
    48b2:	8f 93       	push	r24
    48b4:	0e 94 3f 43 	call	0x867e	; 0x867e <printf>
	}

		can_message_t send;
		send.msg_id=1;
    48b8:	81 e0       	ldi	r24, 0x01	; 1
    48ba:	89 83       	std	Y+1, r24	; 0x01
		send.data_length=2;
    48bc:	82 e0       	ldi	r24, 0x02	; 2
    48be:	8a 83       	std	Y+2, r24	; 0x02
		send.data[0]=Seqvenser.Amp_id;
    48c0:	f8 01       	movw	r30, r16
    48c2:	20 81       	ld	r18, Z
    48c4:	2b 83       	std	Y+3, r18	; 0x03
		send.data[1]=2;
    48c6:	8c 83       	std	Y+4, r24	; 0x04
		can_queue_Enqueue(send);
    48c8:	01 e0       	ldi	r16, 0x01	; 1
    48ca:	12 e0       	ldi	r17, 0x02	; 2
    48cc:	32 e0       	ldi	r19, 0x02	; 2
    48ce:	4d 81       	ldd	r20, Y+5	; 0x05
    48d0:	5e 81       	ldd	r21, Y+6	; 0x06
    48d2:	6f 81       	ldd	r22, Y+7	; 0x07
    48d4:	78 85       	ldd	r23, Y+8	; 0x08
    48d6:	89 85       	ldd	r24, Y+9	; 0x09
    48d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    48da:	0e 94 48 08 	call	0x1090	; 0x1090 <can_queue_Enqueue>
    48de:	8f e3       	ldi	r24, 0x3F	; 63
    48e0:	9c e9       	ldi	r25, 0x9C	; 156
    48e2:	01 97       	sbiw	r24, 0x01	; 1
    48e4:	f1 f7       	brne	.-4      	; 0x48e2 <stop_amp+0x56>
    48e6:	00 c0       	rjmp	.+0      	; 0x48e8 <stop_amp+0x5c>
    48e8:	00 00       	nop
		_delay_ms(5);
		
		wait_for.amplifier=1;
    48ea:	81 e0       	ldi	r24, 0x01	; 1
    48ec:	90 e0       	ldi	r25, 0x00	; 0
    48ee:	80 93 8f 28 	sts	0x288F, r24
    48f2:	90 93 90 28 	sts	0x2890, r25
    48f6:	0f 90       	pop	r0
    48f8:	0f 90       	pop	r0
    48fa:	0f 90       	pop	r0
    48fc:	0f 90       	pop	r0
		
		
}
    48fe:	2a 96       	adiw	r28, 0x0a	; 10
    4900:	cd bf       	out	0x3d, r28	; 61
    4902:	de bf       	out	0x3e, r29	; 62
    4904:	df 91       	pop	r29
    4906:	cf 91       	pop	r28
    4908:	1f 91       	pop	r17
    490a:	0f 91       	pop	r16
    490c:	08 95       	ret

0000490e <RX_sequens>:
	}
	
}
void RX_sequens()
{
	if (Seqvenser.Amp_id >0)
    490e:	80 91 89 28 	lds	r24, 0x2889
    4912:	90 91 8a 28 	lds	r25, 0x288A
    4916:	18 16       	cp	r1, r24
    4918:	19 06       	cpc	r1, r25
    491a:	14 f4       	brge	.+4      	; 0x4920 <RX_sequens+0x12>
	{
		stop_amp();
    491c:	0e 94 46 24 	call	0x488c	; 0x488c <stop_amp>
		
	}
	if ((wait_for.preamp == 0) && (wait_for.amplifier == 0))
    4920:	80 91 91 28 	lds	r24, 0x2891
    4924:	90 91 92 28 	lds	r25, 0x2892
    4928:	89 2b       	or	r24, r25
    492a:	79 f4       	brne	.+30     	; 0x494a <RX_sequens+0x3c>
    492c:	80 91 8f 28 	lds	r24, 0x288F
    4930:	90 91 90 28 	lds	r25, 0x2890
    4934:	89 2b       	or	r24, r25
    4936:	49 f4       	brne	.+18     	; 0x494a <RX_sequens+0x3c>
	{
		
			if (Seqvenser.Amp_id >0)
    4938:	80 91 89 28 	lds	r24, 0x2889
    493c:	90 91 8a 28 	lds	r25, 0x288A
    4940:	18 16       	cp	r1, r24
    4942:	19 06       	cpc	r1, r25
    4944:	14 f4       	brge	.+4      	; 0x494a <RX_sequens+0x3c>
			{
				start_preeamp();
    4946:	0e 94 da 23 	call	0x47b4	; 0x47b4 <start_preeamp>
    494a:	08 95       	ret

0000494c <radio_inhibit>:
		
		
}
void radio_inhibit(int state)
{
	if (state == 1)
    494c:	01 97       	sbiw	r24, 0x01	; 1
    494e:	49 f4       	brne	.+18     	; 0x4962 <radio_inhibit+0x16>
	{
		if (Debug_seq == 1 )
		{
			printf("Start inhibit\n");
    4950:	8b e1       	ldi	r24, 0x1B	; 27
    4952:	93 e2       	ldi	r25, 0x23	; 35
    4954:	0e 94 51 43 	call	0x86a2	; 0x86a2 <puts>
		}
		PORTA.OUTSET = PIN2_bm;
    4958:	84 e0       	ldi	r24, 0x04	; 4
    495a:	e0 e0       	ldi	r30, 0x00	; 0
    495c:	f6 e0       	ldi	r31, 0x06	; 6
    495e:	85 83       	std	Z+5, r24	; 0x05
    4960:	08 95       	ret
	}
	else
	{
		PORTA.OUTCLR = PIN2_bm;
    4962:	84 e0       	ldi	r24, 0x04	; 4
    4964:	e0 e0       	ldi	r30, 0x00	; 0
    4966:	f6 e0       	ldi	r31, 0x06	; 6
    4968:	86 83       	std	Z+6, r24	; 0x06
    496a:	08 95       	ret

0000496c <TX_sequens>:
seqvenser Seqvenser;
wait_for_struckt wait_for;

void TX_sequens()
{
	radio_inhibit(1);
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	0e 94 a6 24 	call	0x494c	; 0x494c <radio_inhibit>
	
	if (Seqvenser.preamp >0)
    4974:	80 91 8d 28 	lds	r24, 0x288D
    4978:	90 91 8e 28 	lds	r25, 0x288E
    497c:	18 16       	cp	r1, r24
    497e:	19 06       	cpc	r1, r25
    4980:	4c f4       	brge	.+18     	; 0x4994 <TX_sequens+0x28>
	{
		stop_preamp();
    4982:	0e 94 ef 23 	call	0x47de	; 0x47de <stop_preamp>
	else
	{
		wait_for.preamp=0;
	}
	
	if (wait_for.preamp == 0)
    4986:	80 91 91 28 	lds	r24, 0x2891
    498a:	90 91 92 28 	lds	r25, 0x2892
    498e:	89 2b       	or	r24, r25
    4990:	11 f5       	brne	.+68     	; 0x49d6 <TX_sequens+0x6a>
    4992:	04 c0       	rjmp	.+8      	; 0x499c <TX_sequens+0x30>
	{
		stop_preamp();
	}
	else
	{
		wait_for.preamp=0;
    4994:	10 92 91 28 	sts	0x2891, r1
    4998:	10 92 92 28 	sts	0x2892, r1
	}
	
	if (wait_for.preamp == 0)
	{
			// if amp id sent amp to trasmit mode;
			if (Seqvenser.Amp_id >0)
    499c:	80 91 89 28 	lds	r24, 0x2889
    49a0:	90 91 8a 28 	lds	r25, 0x288A
    49a4:	18 16       	cp	r1, r24
    49a6:	19 06       	cpc	r1, r25
    49a8:	44 f4       	brge	.+16     	; 0x49ba <TX_sequens+0x4e>
			{
				start_amp();
    49aa:	0e 94 06 24 	call	0x480c	; 0x480c <start_amp>
				
			}
	}
	
	if ((wait_for.preamp == 0) && (wait_for.amplifier == 0))
    49ae:	80 91 91 28 	lds	r24, 0x2891
    49b2:	90 91 92 28 	lds	r25, 0x2892
    49b6:	89 2b       	or	r24, r25
    49b8:	71 f4       	brne	.+28     	; 0x49d6 <TX_sequens+0x6a>
    49ba:	80 91 8f 28 	lds	r24, 0x288F
    49be:	90 91 90 28 	lds	r25, 0x2890
    49c2:	89 2b       	or	r24, r25
    49c4:	41 f4       	brne	.+16     	; 0x49d6 <TX_sequens+0x6a>
	{
		radio_inhibit(0);
    49c6:	80 e0       	ldi	r24, 0x00	; 0
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	0e 94 a6 24 	call	0x494c	; 0x494c <radio_inhibit>
			if (Debug_seq == 1 )
			{
				printf("Inhibit off\n");
    49ce:	89 e2       	ldi	r24, 0x29	; 41
    49d0:	93 e2       	ldi	r25, 0x23	; 35
    49d2:	0e 94 51 43 	call	0x86a2	; 0x86a2 <puts>
    49d6:	08 95       	ret

000049d8 <get_amp_id>:
	Seqvenser.preamp = preamp_id;
}
int get_amp_id()
{
	return Seqvenser.Amp_id;
    49d8:	80 91 89 28 	lds	r24, 0x2889
    49dc:	90 91 8a 28 	lds	r25, 0x288A
    49e0:	08 95       	ret

000049e2 <u8g_draw_circle_section>:
/*=========================================================================*/

static void u8g_draw_circle_section(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t x0, u8g_uint_t y0, uint8_t option) U8G_NOINLINE;

static void u8g_draw_circle_section(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t x0, u8g_uint_t y0, uint8_t option)
{
    49e2:	df 92       	push	r13
    49e4:	ef 92       	push	r14
    49e6:	ff 92       	push	r15
    49e8:	0f 93       	push	r16
    49ea:	1f 93       	push	r17
    49ec:	cf 93       	push	r28
    49ee:	df 93       	push	r29
    49f0:	ec 01       	movw	r28, r24
    49f2:	d6 2e       	mov	r13, r22
    49f4:	14 2f       	mov	r17, r20
    49f6:	f2 2e       	mov	r15, r18
    /* upper right */
    if ( option & U8G_DRAW_UPPER_RIGHT )
    49f8:	e0 fe       	sbrs	r14, 0
    49fa:	0d c0       	rjmp	.+26     	; 0x4a16 <u8g_draw_circle_section+0x34>
    {
      u8g_DrawPixel(u8g, x0 + x, y0 - y);
    49fc:	40 2f       	mov	r20, r16
    49fe:	41 1b       	sub	r20, r17
    4a00:	62 2f       	mov	r22, r18
    4a02:	6d 0d       	add	r22, r13
    4a04:	0e 94 96 2c 	call	0x592c	; 0x592c <u8g_DrawPixel>
      u8g_DrawPixel(u8g, x0 + y, y0 - x);
    4a08:	40 2f       	mov	r20, r16
    4a0a:	4d 19       	sub	r20, r13
    4a0c:	61 2f       	mov	r22, r17
    4a0e:	6f 0d       	add	r22, r15
    4a10:	ce 01       	movw	r24, r28
    4a12:	0e 94 96 2c 	call	0x592c	; 0x592c <u8g_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G_DRAW_UPPER_LEFT )
    4a16:	e1 fe       	sbrs	r14, 1
    4a18:	0e c0       	rjmp	.+28     	; 0x4a36 <u8g_draw_circle_section+0x54>
    {
      u8g_DrawPixel(u8g, x0 - x, y0 - y);
    4a1a:	40 2f       	mov	r20, r16
    4a1c:	41 1b       	sub	r20, r17
    4a1e:	6f 2d       	mov	r22, r15
    4a20:	6d 19       	sub	r22, r13
    4a22:	ce 01       	movw	r24, r28
    4a24:	0e 94 96 2c 	call	0x592c	; 0x592c <u8g_DrawPixel>
      u8g_DrawPixel(u8g, x0 - y, y0 - x);
    4a28:	40 2f       	mov	r20, r16
    4a2a:	4d 19       	sub	r20, r13
    4a2c:	6f 2d       	mov	r22, r15
    4a2e:	61 1b       	sub	r22, r17
    4a30:	ce 01       	movw	r24, r28
    4a32:	0e 94 96 2c 	call	0x592c	; 0x592c <u8g_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G_DRAW_LOWER_RIGHT )
    4a36:	e3 fe       	sbrs	r14, 3
    4a38:	0e c0       	rjmp	.+28     	; 0x4a56 <u8g_draw_circle_section+0x74>
    {
      u8g_DrawPixel(u8g, x0 + x, y0 + y);
    4a3a:	40 2f       	mov	r20, r16
    4a3c:	41 0f       	add	r20, r17
    4a3e:	6f 2d       	mov	r22, r15
    4a40:	6d 0d       	add	r22, r13
    4a42:	ce 01       	movw	r24, r28
    4a44:	0e 94 96 2c 	call	0x592c	; 0x592c <u8g_DrawPixel>
      u8g_DrawPixel(u8g, x0 + y, y0 + x);
    4a48:	40 2f       	mov	r20, r16
    4a4a:	4d 0d       	add	r20, r13
    4a4c:	61 2f       	mov	r22, r17
    4a4e:	6f 0d       	add	r22, r15
    4a50:	ce 01       	movw	r24, r28
    4a52:	0e 94 96 2c 	call	0x592c	; 0x592c <u8g_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G_DRAW_LOWER_LEFT )
    4a56:	e2 fe       	sbrs	r14, 2
    4a58:	0e c0       	rjmp	.+28     	; 0x4a76 <u8g_draw_circle_section+0x94>
    {
      u8g_DrawPixel(u8g, x0 - x, y0 + y);
    4a5a:	40 2f       	mov	r20, r16
    4a5c:	41 0f       	add	r20, r17
    4a5e:	6f 2d       	mov	r22, r15
    4a60:	6d 19       	sub	r22, r13
    4a62:	ce 01       	movw	r24, r28
    4a64:	0e 94 96 2c 	call	0x592c	; 0x592c <u8g_DrawPixel>
      u8g_DrawPixel(u8g, x0 - y, y0 + x);
    4a68:	40 2f       	mov	r20, r16
    4a6a:	4d 0d       	add	r20, r13
    4a6c:	6f 2d       	mov	r22, r15
    4a6e:	61 1b       	sub	r22, r17
    4a70:	ce 01       	movw	r24, r28
    4a72:	0e 94 96 2c 	call	0x592c	; 0x592c <u8g_DrawPixel>
    }
}
    4a76:	df 91       	pop	r29
    4a78:	cf 91       	pop	r28
    4a7a:	1f 91       	pop	r17
    4a7c:	0f 91       	pop	r16
    4a7e:	ff 90       	pop	r15
    4a80:	ef 90       	pop	r14
    4a82:	df 90       	pop	r13
    4a84:	08 95       	ret

00004a86 <u8g_draw_circle>:

void u8g_draw_circle(u8g_t *u8g, u8g_uint_t x0, u8g_uint_t y0, u8g_uint_t rad, uint8_t option)
{
    4a86:	8f 92       	push	r8
    4a88:	9f 92       	push	r9
    4a8a:	af 92       	push	r10
    4a8c:	bf 92       	push	r11
    4a8e:	cf 92       	push	r12
    4a90:	df 92       	push	r13
    4a92:	ef 92       	push	r14
    4a94:	ff 92       	push	r15
    4a96:	0f 93       	push	r16
    4a98:	1f 93       	push	r17
    4a9a:	cf 93       	push	r28
    4a9c:	df 93       	push	r29
    4a9e:	ec 01       	movw	r28, r24
    4aa0:	a6 2e       	mov	r10, r22
    4aa2:	94 2e       	mov	r9, r20
    4aa4:	d2 2e       	mov	r13, r18
    4aa6:	80 2e       	mov	r8, r16
    u8g_int_t ddF_y;
    u8g_uint_t x;
    u8g_uint_t y;

    f = 1;
    f -= rad;
    4aa8:	11 e0       	ldi	r17, 0x01	; 1
    4aaa:	12 1b       	sub	r17, r18
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
    4aac:	b2 2e       	mov	r11, r18
    4aae:	b1 94       	neg	r11
    ddF_y *= 2;
    4ab0:	bb 0c       	add	r11, r11
    x = 0;
    y = rad;

    u8g_draw_circle_section(u8g, x, y, x0, y0, option);
    4ab2:	e0 2e       	mov	r14, r16
    4ab4:	04 2f       	mov	r16, r20
    4ab6:	26 2f       	mov	r18, r22
    4ab8:	4d 2d       	mov	r20, r13
    4aba:	60 e0       	ldi	r22, 0x00	; 0
    4abc:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <u8g_draw_circle_section>
    
    while ( x < y )
    4ac0:	dd 20       	and	r13, r13
    4ac2:	c9 f0       	breq	.+50     	; 0x4af6 <u8g_draw_circle+0x70>
    4ac4:	0f 2e       	mov	r0, r31
    4ac6:	f3 e0       	ldi	r31, 0x03	; 3
    4ac8:	cf 2e       	mov	r12, r31
    4aca:	f0 2d       	mov	r31, r0
    f -= rad;
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
    ddF_y *= 2;
    x = 0;
    4acc:	f1 2c       	mov	r15, r1

    u8g_draw_circle_section(u8g, x, y, x0, y0, option);
    
    while ( x < y )
    {
      if (f >= 0) 
    4ace:	11 23       	and	r17, r17
    4ad0:	24 f0       	brlt	.+8      	; 0x4ada <u8g_draw_circle+0x54>
      {
        y--;
    4ad2:	da 94       	dec	r13
        ddF_y += 2;
    4ad4:	b3 94       	inc	r11
    4ad6:	b3 94       	inc	r11
        f += ddF_y;
    4ad8:	1b 0d       	add	r17, r11
      }
      x++;
    4ada:	f3 94       	inc	r15
      ddF_x += 2;
      f += ddF_x;
    4adc:	1c 0d       	add	r17, r12

      u8g_draw_circle_section(u8g, x, y, x0, y0, option);    
    4ade:	e8 2c       	mov	r14, r8
    4ae0:	09 2d       	mov	r16, r9
    4ae2:	2a 2d       	mov	r18, r10
    4ae4:	4d 2d       	mov	r20, r13
    4ae6:	6f 2d       	mov	r22, r15
    4ae8:	ce 01       	movw	r24, r28
    4aea:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <u8g_draw_circle_section>
    4aee:	c3 94       	inc	r12
    4af0:	c3 94       	inc	r12
    x = 0;
    y = rad;

    u8g_draw_circle_section(u8g, x, y, x0, y0, option);
    
    while ( x < y )
    4af2:	fd 14       	cp	r15, r13
    4af4:	60 f3       	brcs	.-40     	; 0x4ace <u8g_draw_circle+0x48>
      ddF_x += 2;
      f += ddF_x;

      u8g_draw_circle_section(u8g, x, y, x0, y0, option);    
    }
}
    4af6:	df 91       	pop	r29
    4af8:	cf 91       	pop	r28
    4afa:	1f 91       	pop	r17
    4afc:	0f 91       	pop	r16
    4afe:	ff 90       	pop	r15
    4b00:	ef 90       	pop	r14
    4b02:	df 90       	pop	r13
    4b04:	cf 90       	pop	r12
    4b06:	bf 90       	pop	r11
    4b08:	af 90       	pop	r10
    4b0a:	9f 90       	pop	r9
    4b0c:	8f 90       	pop	r8
    4b0e:	08 95       	ret

00004b10 <u8g_DrawCircle>:

void u8g_DrawCircle(u8g_t *u8g, u8g_uint_t x0, u8g_uint_t y0, u8g_uint_t rad, uint8_t option)
{
    4b10:	df 92       	push	r13
    4b12:	ef 92       	push	r14
    4b14:	ff 92       	push	r15
    4b16:	0f 93       	push	r16
    4b18:	1f 93       	push	r17
    4b1a:	cf 93       	push	r28
    4b1c:	df 93       	push	r29
    4b1e:	ec 01       	movw	r28, r24
    4b20:	16 2f       	mov	r17, r22
    4b22:	f4 2e       	mov	r15, r20
    4b24:	e2 2e       	mov	r14, r18
    4b26:	d0 2e       	mov	r13, r16
  /* check for bounding box */
  {
    u8g_uint_t radp, radp2;
    
    radp = rad;
    radp++;
    4b28:	81 e0       	ldi	r24, 0x01	; 1
    4b2a:	82 0f       	add	r24, r18
    radp2 = radp;
    radp2 *= 2;
    4b2c:	28 2f       	mov	r18, r24
    4b2e:	22 0f       	add	r18, r18
    
    if ( u8g_IsBBXIntersection(u8g, x0-radp, y0-radp, radp2, radp2) == 0)
    4b30:	48 1b       	sub	r20, r24
    4b32:	68 1b       	sub	r22, r24
    4b34:	02 2f       	mov	r16, r18
    4b36:	ce 01       	movw	r24, r28
    4b38:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <u8g_IsBBXIntersection>
    4b3c:	88 23       	and	r24, r24
    4b3e:	39 f0       	breq	.+14     	; 0x4b4e <u8g_DrawCircle+0x3e>
      return;    
  }
  
  /* draw circle */
  u8g_draw_circle(u8g, x0, y0, rad, option);
    4b40:	0d 2d       	mov	r16, r13
    4b42:	2e 2d       	mov	r18, r14
    4b44:	4f 2d       	mov	r20, r15
    4b46:	61 2f       	mov	r22, r17
    4b48:	ce 01       	movw	r24, r28
    4b4a:	0e 94 43 25 	call	0x4a86	; 0x4a86 <u8g_draw_circle>
}
    4b4e:	df 91       	pop	r29
    4b50:	cf 91       	pop	r28
    4b52:	1f 91       	pop	r17
    4b54:	0f 91       	pop	r16
    4b56:	ff 90       	pop	r15
    4b58:	ef 90       	pop	r14
    4b5a:	df 90       	pop	r13
    4b5c:	08 95       	ret

00004b5e <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    4b5e:	0f 93       	push	r16
    4b60:	fc 01       	movw	r30, r24
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
    4b62:	01 50       	subi	r16, 0x01	; 1
  tmp--;
    4b64:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    4b66:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    4b68:	96 a9       	ldd	r25, Z+54	; 0x36
    4b6a:	94 17       	cp	r25, r20
    4b6c:	38 f0       	brcs	.+14     	; 0x4b7c <u8g_IsBBXIntersection+0x1e>
  {
    if ( v1 >= a0 )
    4b6e:	08 17       	cp	r16, r24
    4b70:	68 f4       	brcc	.+26     	; 0x4b8c <u8g_IsBBXIntersection+0x2e>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    4b72:	81 e0       	ldi	r24, 0x01	; 1
    4b74:	04 17       	cp	r16, r20
    4b76:	40 f0       	brcs	.+16     	; 0x4b88 <u8g_IsBBXIntersection+0x2a>
    4b78:	80 e0       	ldi	r24, 0x00	; 0
    4b7a:	06 c0       	rjmp	.+12     	; 0x4b88 <u8g_IsBBXIntersection+0x2a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    4b7c:	08 17       	cp	r16, r24
    4b7e:	d0 f0       	brcs	.+52     	; 0x4bb4 <u8g_IsBBXIntersection+0x56>
    {
      if ( v0 > v1 )
    4b80:	81 e0       	ldi	r24, 0x01	; 1
    4b82:	04 17       	cp	r16, r20
    4b84:	08 f0       	brcs	.+2      	; 0x4b88 <u8g_IsBBXIntersection+0x2a>
    4b86:	80 e0       	ldi	r24, 0x00	; 0
{
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    4b88:	88 23       	and	r24, r24
    4b8a:	c9 f0       	breq	.+50     	; 0x4bbe <u8g_IsBBXIntersection+0x60>
    return 0; 
  
  tmp = x;
  tmp += w;
    4b8c:	21 50       	subi	r18, 0x01	; 1
  tmp--;
    4b8e:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    4b90:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    4b92:	95 a9       	ldd	r25, Z+53	; 0x35
    4b94:	96 17       	cp	r25, r22
    4b96:	38 f0       	brcs	.+14     	; 0x4ba6 <u8g_IsBBXIntersection+0x48>
  {
    if ( v1 >= a0 )
    4b98:	28 17       	cp	r18, r24
    4b9a:	70 f4       	brcc	.+28     	; 0x4bb8 <u8g_IsBBXIntersection+0x5a>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    4b9c:	81 e0       	ldi	r24, 0x01	; 1
    4b9e:	26 17       	cp	r18, r22
    4ba0:	70 f0       	brcs	.+28     	; 0x4bbe <u8g_IsBBXIntersection+0x60>
    4ba2:	80 e0       	ldi	r24, 0x00	; 0
    4ba4:	0c c0       	rjmp	.+24     	; 0x4bbe <u8g_IsBBXIntersection+0x60>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    4ba6:	28 17       	cp	r18, r24
    4ba8:	48 f0       	brcs	.+18     	; 0x4bbc <u8g_IsBBXIntersection+0x5e>
    {
      if ( v0 > v1 )
    4baa:	81 e0       	ldi	r24, 0x01	; 1
    4bac:	26 17       	cp	r18, r22
    4bae:	38 f0       	brcs	.+14     	; 0x4bbe <u8g_IsBBXIntersection+0x60>
    4bb0:	80 e0       	ldi	r24, 0x00	; 0
    4bb2:	05 c0       	rjmp	.+10     	; 0x4bbe <u8g_IsBBXIntersection+0x60>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    4bb4:	80 e0       	ldi	r24, 0x00	; 0
    4bb6:	03 c0       	rjmp	.+6      	; 0x4bbe <u8g_IsBBXIntersection+0x60>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    4bb8:	81 e0       	ldi	r24, 0x01	; 1
    4bba:	01 c0       	rjmp	.+2      	; 0x4bbe <u8g_IsBBXIntersection+0x60>
	return 0;
      }
    }
    else
    {
      return 0;
    4bbc:	80 e0       	ldi	r24, 0x00	; 0
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    4bbe:	0f 91       	pop	r16
    4bc0:	08 95       	ret

00004bc2 <u8g_InitCom>:

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
    4bc2:	db 01       	movw	r26, r22
    4bc4:	14 96       	adiw	r26, 0x04	; 4
    4bc6:	ed 91       	ld	r30, X+
    4bc8:	fc 91       	ld	r31, X
    4bca:	15 97       	sbiw	r26, 0x05	; 5
    4bcc:	20 e0       	ldi	r18, 0x00	; 0
    4bce:	30 e0       	ldi	r19, 0x00	; 0
    4bd0:	61 e0       	ldi	r22, 0x01	; 1
    4bd2:	09 95       	icall
}
    4bd4:	08 95       	ret

00004bd6 <u8g_SetChipSelect>:
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
    4bd6:	db 01       	movw	r26, r22
    4bd8:	14 96       	adiw	r26, 0x04	; 4
    4bda:	ed 91       	ld	r30, X+
    4bdc:	fc 91       	ld	r31, X
    4bde:	15 97       	sbiw	r26, 0x05	; 5
    4be0:	20 e0       	ldi	r18, 0x00	; 0
    4be2:	30 e0       	ldi	r19, 0x00	; 0
    4be4:	63 e0       	ldi	r22, 0x03	; 3
    4be6:	09 95       	icall
    4be8:	08 95       	ret

00004bea <u8g_SetResetLow>:
}

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
    4bea:	db 01       	movw	r26, r22
    4bec:	14 96       	adiw	r26, 0x04	; 4
    4bee:	ed 91       	ld	r30, X+
    4bf0:	fc 91       	ld	r31, X
    4bf2:	15 97       	sbiw	r26, 0x05	; 5
    4bf4:	20 e0       	ldi	r18, 0x00	; 0
    4bf6:	30 e0       	ldi	r19, 0x00	; 0
    4bf8:	40 e0       	ldi	r20, 0x00	; 0
    4bfa:	64 e0       	ldi	r22, 0x04	; 4
    4bfc:	09 95       	icall
    4bfe:	08 95       	ret

00004c00 <u8g_SetResetHigh>:
}

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
    4c00:	db 01       	movw	r26, r22
    4c02:	14 96       	adiw	r26, 0x04	; 4
    4c04:	ed 91       	ld	r30, X+
    4c06:	fc 91       	ld	r31, X
    4c08:	15 97       	sbiw	r26, 0x05	; 5
    4c0a:	20 e0       	ldi	r18, 0x00	; 0
    4c0c:	30 e0       	ldi	r19, 0x00	; 0
    4c0e:	41 e0       	ldi	r20, 0x01	; 1
    4c10:	64 e0       	ldi	r22, 0x04	; 4
    4c12:	09 95       	icall
    4c14:	08 95       	ret

00004c16 <u8g_SetAddress>:
}


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
    4c16:	db 01       	movw	r26, r22
    4c18:	14 96       	adiw	r26, 0x04	; 4
    4c1a:	ed 91       	ld	r30, X+
    4c1c:	fc 91       	ld	r31, X
    4c1e:	15 97       	sbiw	r26, 0x05	; 5
    4c20:	20 e0       	ldi	r18, 0x00	; 0
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	62 e0       	ldi	r22, 0x02	; 2
    4c26:	09 95       	icall
    4c28:	08 95       	ret

00004c2a <u8g_WriteByte>:
}

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
    4c2a:	db 01       	movw	r26, r22
    4c2c:	14 96       	adiw	r26, 0x04	; 4
    4c2e:	ed 91       	ld	r30, X+
    4c30:	fc 91       	ld	r31, X
    4c32:	15 97       	sbiw	r26, 0x05	; 5
    4c34:	20 e0       	ldi	r18, 0x00	; 0
    4c36:	30 e0       	ldi	r19, 0x00	; 0
    4c38:	65 e0       	ldi	r22, 0x05	; 5
    4c3a:	09 95       	icall
}
    4c3c:	08 95       	ret

00004c3e <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
    4c3e:	db 01       	movw	r26, r22
    4c40:	14 96       	adiw	r26, 0x04	; 4
    4c42:	ed 91       	ld	r30, X+
    4c44:	fc 91       	ld	r31, X
    4c46:	15 97       	sbiw	r26, 0x05	; 5
    4c48:	66 e0       	ldi	r22, 0x06	; 6
    4c4a:	09 95       	icall
}
    4c4c:	08 95       	ret

00004c4e <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    4c4e:	af 92       	push	r10
    4c50:	bf 92       	push	r11
    4c52:	cf 92       	push	r12
    4c54:	df 92       	push	r13
    4c56:	ef 92       	push	r14
    4c58:	ff 92       	push	r15
    4c5a:	1f 93       	push	r17
    4c5c:	cf 93       	push	r28
    4c5e:	df 93       	push	r29
    4c60:	7c 01       	movw	r14, r24
    4c62:	5b 01       	movw	r10, r22
    4c64:	ea 01       	movw	r28, r20
  uint8_t is_escape = 0;
    4c66:	d1 2c       	mov	r13, r1
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    4c68:	fe 01       	movw	r30, r28
    4c6a:	14 91       	lpm	r17, Z
    if ( is_escape == 0 )
    4c6c:	d1 10       	cpse	r13, r1
    4c6e:	0b c0       	rjmp	.+22     	; 0x4c86 <u8g_WriteEscSeqP+0x38>
    {
      if ( value != 255 )
    4c70:	1f 3f       	cpi	r17, 0xFF	; 255
    4c72:	09 f4       	brne	.+2      	; 0x4c76 <u8g_WriteEscSeqP+0x28>
    4c74:	4f c0       	rjmp	.+158    	; 0x4d14 <u8g_WriteEscSeqP+0xc6>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    4c76:	41 2f       	mov	r20, r17
    4c78:	b5 01       	movw	r22, r10
    4c7a:	c7 01       	movw	r24, r14
    4c7c:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <u8g_WriteByte>
    4c80:	81 11       	cpse	r24, r1
    4c82:	4e c0       	rjmp	.+156    	; 0x4d20 <u8g_WriteEscSeqP+0xd2>
    4c84:	4f c0       	rjmp	.+158    	; 0x4d24 <u8g_WriteEscSeqP+0xd6>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    4c86:	1f 3f       	cpi	r17, 0xFF	; 255
    4c88:	51 f4       	brne	.+20     	; 0x4c9e <u8g_WriteEscSeqP+0x50>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    4c8a:	4f ef       	ldi	r20, 0xFF	; 255
    4c8c:	b5 01       	movw	r22, r10
    4c8e:	c7 01       	movw	r24, r14
    4c90:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <u8g_WriteByte>
    4c94:	88 23       	and	r24, r24
    4c96:	09 f4       	brne	.+2      	; 0x4c9a <u8g_WriteEscSeqP+0x4c>
    4c98:	47 c0       	rjmp	.+142    	; 0x4d28 <u8g_WriteEscSeqP+0xda>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    4c9a:	d1 2c       	mov	r13, r1
    4c9c:	41 c0       	rjmp	.+130    	; 0x4d20 <u8g_WriteEscSeqP+0xd2>
      if ( value == 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
    4c9e:	1e 3f       	cpi	r17, 0xFE	; 254
    4ca0:	09 f4       	brne	.+2      	; 0x4ca4 <u8g_WriteEscSeqP+0x56>
    4ca2:	44 c0       	rjmp	.+136    	; 0x4d2c <u8g_WriteEscSeqP+0xde>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    4ca4:	10 3f       	cpi	r17, 0xF0	; 240
    4ca6:	c8 f5       	brcc	.+114    	; 0x4d1a <u8g_WriteEscSeqP+0xcc>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    4ca8:	10 3e       	cpi	r17, 0xE0	; 224
    4caa:	40 f0       	brcs	.+16     	; 0x4cbc <u8g_WriteEscSeqP+0x6e>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    4cac:	41 2f       	mov	r20, r17
    4cae:	4f 70       	andi	r20, 0x0F	; 15
    4cb0:	b5 01       	movw	r22, r10
    4cb2:	c7 01       	movw	r24, r14
    4cb4:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <u8g_SetAddress>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    4cb8:	d1 2c       	mov	r13, r1
    4cba:	32 c0       	rjmp	.+100    	; 0x4d20 <u8g_WriteEscSeqP+0xd2>
      }
      else if ( value >= 0xe0  )
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xd0 )
    4cbc:	10 3d       	cpi	r17, 0xD0	; 208
    4cbe:	40 f0       	brcs	.+16     	; 0x4cd0 <u8g_WriteEscSeqP+0x82>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    4cc0:	41 2f       	mov	r20, r17
    4cc2:	4f 70       	andi	r20, 0x0F	; 15
    4cc4:	b5 01       	movw	r22, r10
    4cc6:	c7 01       	movw	r24, r14
    4cc8:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <u8g_SetChipSelect>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    4ccc:	d1 2c       	mov	r13, r1
    4cce:	28 c0       	rjmp	.+80     	; 0x4d20 <u8g_WriteEscSeqP+0xd2>
      }
      else if ( value >= 0xd0 )
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xc0 )
    4cd0:	10 3c       	cpi	r17, 0xC0	; 192
    4cd2:	c0 f0       	brcs	.+48     	; 0x4d04 <u8g_WriteEscSeqP+0xb6>
      {
        u8g_SetResetLow(u8g, dev);
    4cd4:	b5 01       	movw	r22, r10
    4cd6:	c7 01       	movw	r24, r14
    4cd8:	0e 94 f5 25 	call	0x4bea	; 0x4bea <u8g_SetResetLow>
        value &= 0x0f;
        value <<= 4;
    4cdc:	c1 2e       	mov	r12, r17
    4cde:	cc 0c       	add	r12, r12
    4ce0:	cc 0c       	add	r12, r12
    4ce2:	cc 0c       	add	r12, r12
    4ce4:	cc 0c       	add	r12, r12
        value+=2;
    4ce6:	c3 94       	inc	r12
    4ce8:	c3 94       	inc	r12
        u8g_Delay(value);
    4cea:	d1 2c       	mov	r13, r1
    4cec:	c6 01       	movw	r24, r12
    4cee:	0e 94 1d 28 	call	0x503a	; 0x503a <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
    4cf2:	b5 01       	movw	r22, r10
    4cf4:	c7 01       	movw	r24, r14
    4cf6:	0e 94 00 26 	call	0x4c00	; 0x4c00 <u8g_SetResetHigh>
        u8g_Delay(value);
    4cfa:	c6 01       	movw	r24, r12
    4cfc:	0e 94 1d 28 	call	0x503a	; 0x503a <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    4d00:	d1 2c       	mov	r13, r1
    4d02:	0e c0       	rjmp	.+28     	; 0x4d20 <u8g_WriteEscSeqP+0xd2>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    4d04:	11 23       	and	r17, r17
    4d06:	5c f0       	brlt	.+22     	; 0x4d1e <u8g_WriteEscSeqP+0xd0>
      {
        u8g_Delay(value);
    4d08:	81 2f       	mov	r24, r17
    4d0a:	90 e0       	ldi	r25, 0x00	; 0
    4d0c:	0e 94 1d 28 	call	0x503a	; 0x503a <u8g_Delay>
      }
      is_escape = 0;
    4d10:	d1 2c       	mov	r13, r1
    4d12:	06 c0       	rjmp	.+12     	; 0x4d20 <u8g_WriteEscSeqP+0xd2>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    4d14:	dd 24       	eor	r13, r13
    4d16:	d3 94       	inc	r13
    4d18:	03 c0       	rjmp	.+6      	; 0x4d20 <u8g_WriteEscSeqP+0xd2>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    4d1a:	d1 2c       	mov	r13, r1
    4d1c:	01 c0       	rjmp	.+2      	; 0x4d20 <u8g_WriteEscSeqP+0xd2>
    4d1e:	d1 2c       	mov	r13, r1
    }
    esc_seq++;
    4d20:	21 96       	adiw	r28, 0x01	; 1
  }
    4d22:	a2 cf       	rjmp	.-188    	; 0x4c68 <u8g_WriteEscSeqP+0x1a>
    if ( is_escape == 0 )
    {
      if ( value != 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
    4d24:	80 e0       	ldi	r24, 0x00	; 0
    4d26:	03 c0       	rjmp	.+6      	; 0x4d2e <u8g_WriteEscSeqP+0xe0>
    else
    {
      if ( value == 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
    4d28:	80 e0       	ldi	r24, 0x00	; 0
    4d2a:	01 c0       	rjmp	.+2      	; 0x4d2e <u8g_WriteEscSeqP+0xe0>
      }
      is_escape = 0;
    }
    esc_seq++;
  }
  return 1;
    4d2c:	81 e0       	ldi	r24, 0x01	; 1
}
    4d2e:	df 91       	pop	r29
    4d30:	cf 91       	pop	r28
    4d32:	1f 91       	pop	r17
    4d34:	ff 90       	pop	r15
    4d36:	ef 90       	pop	r14
    4d38:	df 90       	pop	r13
    4d3a:	cf 90       	pop	r12
    4d3c:	bf 90       	pop	r11
    4d3e:	af 90       	pop	r10
    4d40:	08 95       	ret

00004d42 <u8g_com_atmega_parallel_write>:

#if defined(__AVR__)

static void u8g_com_atmega_parallel_write(u8g_t *u8g, uint8_t val) U8G_NOINLINE;
static void u8g_com_atmega_parallel_write(u8g_t *u8g, uint8_t val)
{
    4d42:	1f 93       	push	r17
    4d44:	cf 93       	push	r28
    4d46:	df 93       	push	r29
    4d48:	ec 01       	movw	r28, r24
    4d4a:	16 2f       	mov	r17, r22

  u8g_SetPILevel(u8g, U8G_PI_D0, val&1);
    4d4c:	46 2f       	mov	r20, r22
    4d4e:	41 70       	andi	r20, 0x01	; 1
    4d50:	65 e0       	ldi	r22, 0x05	; 5
    4d52:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
  val >>= 1;
    4d56:	16 95       	lsr	r17
  u8g_SetPILevel(u8g, U8G_PI_D1, val&1);
    4d58:	41 2f       	mov	r20, r17
    4d5a:	41 70       	andi	r20, 0x01	; 1
    4d5c:	66 e0       	ldi	r22, 0x06	; 6
    4d5e:	ce 01       	movw	r24, r28
    4d60:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
  val >>= 1;
    4d64:	16 95       	lsr	r17
  u8g_SetPILevel(u8g, U8G_PI_D2, val&1);
    4d66:	41 2f       	mov	r20, r17
    4d68:	41 70       	andi	r20, 0x01	; 1
    4d6a:	67 e0       	ldi	r22, 0x07	; 7
    4d6c:	ce 01       	movw	r24, r28
    4d6e:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
  val >>= 1;
    4d72:	16 95       	lsr	r17
  u8g_SetPILevel(u8g, U8G_PI_D3, val&1);
    4d74:	41 2f       	mov	r20, r17
    4d76:	41 70       	andi	r20, 0x01	; 1
    4d78:	68 e0       	ldi	r22, 0x08	; 8
    4d7a:	ce 01       	movw	r24, r28
    4d7c:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
  val >>= 1;
    4d80:	16 95       	lsr	r17
  u8g_SetPILevel(u8g, U8G_PI_D4, val&1);
    4d82:	41 2f       	mov	r20, r17
    4d84:	41 70       	andi	r20, 0x01	; 1
    4d86:	69 e0       	ldi	r22, 0x09	; 9
    4d88:	ce 01       	movw	r24, r28
    4d8a:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
  val >>= 1;
    4d8e:	16 95       	lsr	r17
  u8g_SetPILevel(u8g, U8G_PI_D5, val&1);
    4d90:	41 2f       	mov	r20, r17
    4d92:	41 70       	andi	r20, 0x01	; 1
    4d94:	6a e0       	ldi	r22, 0x0A	; 10
    4d96:	ce 01       	movw	r24, r28
    4d98:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
  val >>= 1;
    4d9c:	16 95       	lsr	r17
  u8g_SetPILevel(u8g, U8G_PI_D6, val&1);
    4d9e:	41 2f       	mov	r20, r17
    4da0:	41 70       	andi	r20, 0x01	; 1
    4da2:	6b e0       	ldi	r22, 0x0B	; 11
    4da4:	ce 01       	movw	r24, r28
    4da6:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
  val >>= 1;
  u8g_SetPILevel(u8g, U8G_PI_D7, val&1);
    4daa:	41 2f       	mov	r20, r17
    4dac:	46 95       	lsr	r20
    4dae:	6c e0       	ldi	r22, 0x0C	; 12
    4db0:	ce 01       	movw	r24, r28
    4db2:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
  
  /* EN cycle time must be 1 micro second  */
  u8g_SetPILevel(u8g, U8G_PI_EN, 1);
    4db6:	41 e0       	ldi	r20, 0x01	; 1
    4db8:	64 e0       	ldi	r22, 0x04	; 4
    4dba:	ce 01       	movw	r24, r28
    4dbc:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
  //u8g_MicroDelay(); /* delay by 1000ns, reference: ST7920: 140ns, SBN1661: 100ns */

  u8g_SetPILevel(u8g, U8G_PI_EN, 0);
    4dc0:	40 e0       	ldi	r20, 0x00	; 0
    4dc2:	64 e0       	ldi	r22, 0x04	; 4
    4dc4:	ce 01       	movw	r24, r28
    4dc6:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
//   u8g_10MicroDelay(); /* ST7920 commands: 72us */
//   u8g_10MicroDelay(); /* ST7920 commands: 72us */

}
    4dca:	df 91       	pop	r29
    4dcc:	cf 91       	pop	r28
    4dce:	1f 91       	pop	r17
    4dd0:	08 95       	ret

00004dd2 <u8g_com_atmega_parallel_fn>:


uint8_t u8g_com_atmega_parallel_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    4dd2:	df 92       	push	r13
    4dd4:	ef 92       	push	r14
    4dd6:	ff 92       	push	r15
    4dd8:	0f 93       	push	r16
    4dda:	1f 93       	push	r17
    4ddc:	cf 93       	push	r28
    4dde:	df 93       	push	r29
    4de0:	ec 01       	movw	r28, r24
    4de2:	d4 2e       	mov	r13, r20
    4de4:	79 01       	movw	r14, r18
  switch(msg)
    4de6:	06 2f       	mov	r16, r22
    4de8:	10 e0       	ldi	r17, 0x00	; 0
    4dea:	f8 01       	movw	r30, r16
    4dec:	31 97       	sbiw	r30, 0x01	; 1
    4dee:	e7 30       	cpi	r30, 0x07	; 7
    4df0:	f1 05       	cpc	r31, r1
    4df2:	08 f0       	brcs	.+2      	; 0x4df6 <u8g_com_atmega_parallel_fn+0x24>
    4df4:	9f c0       	rjmp	.+318    	; 0x4f34 <u8g_com_atmega_parallel_fn+0x162>
    4df6:	e6 50       	subi	r30, 0x06	; 6
    4df8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfa:	0c 94 f6 3f 	jmp	0x7fec	; 0x7fec <__tablejump2__>
      u8g_com_atmega_parallel_write(u8g, arg_val);
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    4dfe:	41 11       	cpse	r20, r1
    4e00:	7e c0       	rjmp	.+252    	; 0x4efe <u8g_com_atmega_parallel_fn+0x12c>
    4e02:	98 c0       	rjmp	.+304    	; 0x4f34 <u8g_com_atmega_parallel_fn+0x162>
      }
      break;
    case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    4e04:	41 11       	cpse	r20, r1
    4e06:	84 c0       	rjmp	.+264    	; 0x4f10 <u8g_com_atmega_parallel_fn+0x13e>
    4e08:	95 c0       	rjmp	.+298    	; 0x4f34 <u8g_com_atmega_parallel_fn+0x162>
{
  switch(msg)
  {
    case U8G_COM_MSG_INIT:
      /* setup the RW pin as output and force it to low */
      u8g_SetPIOutput(u8g, U8G_PI_RW);
    4e0a:	6d e0       	ldi	r22, 0x0D	; 13
    4e0c:	0e 94 0a 28 	call	0x5014	; 0x5014 <u8g_SetPIOutput>
      u8g_SetPILevel(u8g, U8G_PI_RW, 0);
    4e10:	40 e0       	ldi	r20, 0x00	; 0
    4e12:	6d e0       	ldi	r22, 0x0D	; 13
    4e14:	ce 01       	movw	r24, r28
    4e16:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>

      u8g_SetPIOutput(u8g, U8G_PI_D0);
    4e1a:	65 e0       	ldi	r22, 0x05	; 5
    4e1c:	ce 01       	movw	r24, r28
    4e1e:	0e 94 0a 28 	call	0x5014	; 0x5014 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D1);
    4e22:	66 e0       	ldi	r22, 0x06	; 6
    4e24:	ce 01       	movw	r24, r28
    4e26:	0e 94 0a 28 	call	0x5014	; 0x5014 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D2);
    4e2a:	67 e0       	ldi	r22, 0x07	; 7
    4e2c:	ce 01       	movw	r24, r28
    4e2e:	0e 94 0a 28 	call	0x5014	; 0x5014 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D3);
    4e32:	68 e0       	ldi	r22, 0x08	; 8
    4e34:	ce 01       	movw	r24, r28
    4e36:	0e 94 0a 28 	call	0x5014	; 0x5014 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D4);
    4e3a:	69 e0       	ldi	r22, 0x09	; 9
    4e3c:	ce 01       	movw	r24, r28
    4e3e:	0e 94 0a 28 	call	0x5014	; 0x5014 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D5);
    4e42:	6a e0       	ldi	r22, 0x0A	; 10
    4e44:	ce 01       	movw	r24, r28
    4e46:	0e 94 0a 28 	call	0x5014	; 0x5014 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D6);
    4e4a:	6b e0       	ldi	r22, 0x0B	; 11
    4e4c:	ce 01       	movw	r24, r28
    4e4e:	0e 94 0a 28 	call	0x5014	; 0x5014 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D7);
    4e52:	6c e0       	ldi	r22, 0x0C	; 12
    4e54:	ce 01       	movw	r24, r28
    4e56:	0e 94 0a 28 	call	0x5014	; 0x5014 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_EN);
    4e5a:	64 e0       	ldi	r22, 0x04	; 4
    4e5c:	ce 01       	movw	r24, r28
    4e5e:	0e 94 0a 28 	call	0x5014	; 0x5014 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_CS1);
    4e62:	62 e0       	ldi	r22, 0x02	; 2
    4e64:	ce 01       	movw	r24, r28
    4e66:	0e 94 0a 28 	call	0x5014	; 0x5014 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_CS2);
    4e6a:	63 e0       	ldi	r22, 0x03	; 3
    4e6c:	ce 01       	movw	r24, r28
    4e6e:	0e 94 0a 28 	call	0x5014	; 0x5014 <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_DI);
    4e72:	61 e0       	ldi	r22, 0x01	; 1
    4e74:	ce 01       	movw	r24, r28
    4e76:	0e 94 0a 28 	call	0x5014	; 0x5014 <u8g_SetPIOutput>
      u8g_SetPILevel(u8g, U8G_PI_CS1, 1);
    4e7a:	41 e0       	ldi	r20, 0x01	; 1
    4e7c:	62 e0       	ldi	r22, 0x02	; 2
    4e7e:	ce 01       	movw	r24, r28
    4e80:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
      u8g_SetPILevel(u8g, U8G_PI_CS2, 1);
    4e84:	41 e0       	ldi	r20, 0x01	; 1
    4e86:	63 e0       	ldi	r22, 0x03	; 3
    4e88:	ce 01       	movw	r24, r28
    4e8a:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>

      break;
    4e8e:	52 c0       	rjmp	.+164    	; 0x4f34 <u8g_com_atmega_parallel_fn+0x162>
    case U8G_COM_MSG_STOP:
      break;
    case U8G_COM_MSG_CHIP_SELECT:
      if ( arg_val == 0 )
    4e90:	41 11       	cpse	r20, r1
    4e92:	0a c0       	rjmp	.+20     	; 0x4ea8 <u8g_com_atmega_parallel_fn+0xd6>
      {
        /* disable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 1);
    4e94:	41 e0       	ldi	r20, 0x01	; 1
    4e96:	62 e0       	ldi	r22, 0x02	; 2
    4e98:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
        u8g_SetPILevel(u8g, U8G_PI_CS2, 1);
    4e9c:	41 e0       	ldi	r20, 0x01	; 1
    4e9e:	63 e0       	ldi	r22, 0x03	; 3
    4ea0:	ce 01       	movw	r24, r28
    4ea2:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
    4ea6:	46 c0       	rjmp	.+140    	; 0x4f34 <u8g_com_atmega_parallel_fn+0x162>
      }
      else if ( arg_val == 1 )
    4ea8:	81 e0       	ldi	r24, 0x01	; 1
    4eaa:	48 13       	cpse	r20, r24
    4eac:	0b c0       	rjmp	.+22     	; 0x4ec4 <u8g_com_atmega_parallel_fn+0xf2>
      {
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 0);
    4eae:	40 e0       	ldi	r20, 0x00	; 0
    4eb0:	62 e0       	ldi	r22, 0x02	; 2
    4eb2:	ce 01       	movw	r24, r28
    4eb4:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
        u8g_SetPILevel(u8g, U8G_PI_CS2, 1);
    4eb8:	41 e0       	ldi	r20, 0x01	; 1
    4eba:	63 e0       	ldi	r22, 0x03	; 3
    4ebc:	ce 01       	movw	r24, r28
    4ebe:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
    4ec2:	38 c0       	rjmp	.+112    	; 0x4f34 <u8g_com_atmega_parallel_fn+0x162>
      }
      else if ( arg_val == 2 )
    4ec4:	e2 e0       	ldi	r30, 0x02	; 2
    4ec6:	4e 13       	cpse	r20, r30
    4ec8:	0b c0       	rjmp	.+22     	; 0x4ee0 <u8g_com_atmega_parallel_fn+0x10e>
      {
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 1);
    4eca:	41 e0       	ldi	r20, 0x01	; 1
    4ecc:	62 e0       	ldi	r22, 0x02	; 2
    4ece:	ce 01       	movw	r24, r28
    4ed0:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
        u8g_SetPILevel(u8g, U8G_PI_CS2, 0);
    4ed4:	40 e0       	ldi	r20, 0x00	; 0
    4ed6:	63 e0       	ldi	r22, 0x03	; 3
    4ed8:	ce 01       	movw	r24, r28
    4eda:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
    4ede:	2a c0       	rjmp	.+84     	; 0x4f34 <u8g_com_atmega_parallel_fn+0x162>
      }
      else
      {
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 0);
    4ee0:	40 e0       	ldi	r20, 0x00	; 0
    4ee2:	62 e0       	ldi	r22, 0x02	; 2
    4ee4:	ce 01       	movw	r24, r28
    4ee6:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
        u8g_SetPILevel(u8g, U8G_PI_CS2, 0);
    4eea:	40 e0       	ldi	r20, 0x00	; 0
    4eec:	63 e0       	ldi	r22, 0x03	; 3
    4eee:	ce 01       	movw	r24, r28
    4ef0:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
    4ef4:	1f c0       	rjmp	.+62     	; 0x4f34 <u8g_com_atmega_parallel_fn+0x162>
      }
      break;
    case U8G_COM_MSG_WRITE_BYTE:
      u8g_com_atmega_parallel_write(u8g, arg_val);
    4ef6:	64 2f       	mov	r22, r20
    4ef8:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <u8g_com_atmega_parallel_write>
      break;
    4efc:	1b c0       	rjmp	.+54     	; 0x4f34 <u8g_com_atmega_parallel_fn+0x162>
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
          u8g_com_atmega_parallel_write(u8g, *ptr++);
    4efe:	f7 01       	movw	r30, r14
    4f00:	61 91       	ld	r22, Z+
    4f02:	7f 01       	movw	r14, r30
    4f04:	ce 01       	movw	r24, r28
    4f06:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <u8g_com_atmega_parallel_write>
          arg_val--;
    4f0a:	da 94       	dec	r13
      u8g_com_atmega_parallel_write(u8g, arg_val);
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    4f0c:	c1 f7       	brne	.-16     	; 0x4efe <u8g_com_atmega_parallel_fn+0x12c>
    4f0e:	12 c0       	rjmp	.+36     	; 0x4f34 <u8g_com_atmega_parallel_fn+0x162>
    case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
          u8g_com_atmega_parallel_write(u8g, u8g_pgm_read(ptr));
    4f10:	f7 01       	movw	r30, r14
    4f12:	64 91       	lpm	r22, Z
    4f14:	ce 01       	movw	r24, r28
    4f16:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <u8g_com_atmega_parallel_write>
          ptr++;
    4f1a:	ff ef       	ldi	r31, 0xFF	; 255
    4f1c:	ef 1a       	sub	r14, r31
    4f1e:	ff 0a       	sbc	r15, r31
          arg_val--;
    4f20:	da 94       	dec	r13
      }
      break;
    case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    4f22:	b1 f7       	brne	.-20     	; 0x4f10 <u8g_com_atmega_parallel_fn+0x13e>
    4f24:	07 c0       	rjmp	.+14     	; 0x4f34 <u8g_com_atmega_parallel_fn+0x162>
          arg_val--;
        }
      }
      break;
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g_SetPILevel(u8g, U8G_PI_DI, arg_val);
    4f26:	61 e0       	ldi	r22, 0x01	; 1
    4f28:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
      break;
    4f2c:	03 c0       	rjmp	.+6      	; 0x4f34 <u8g_com_atmega_parallel_fn+0x162>
    case U8G_COM_MSG_RESET:
      u8g_SetPILevel(u8g, U8G_PI_RESET, arg_val);
    4f2e:	60 e0       	ldi	r22, 0x00	; 0
    4f30:	0e 94 13 28 	call	0x5026	; 0x5026 <u8g_SetPILevel>
      break;
  }
  return 1;
}
    4f34:	81 e0       	ldi	r24, 0x01	; 1
    4f36:	df 91       	pop	r29
    4f38:	cf 91       	pop	r28
    4f3a:	1f 91       	pop	r17
    4f3c:	0f 91       	pop	r16
    4f3e:	ff 90       	pop	r15
    4f40:	ef 90       	pop	r14
    4f42:	df 90       	pop	r13
    4f44:	08 95       	ret

00004f46 <u8g_get_avr_io_ptr>:
	#endif
};
#endif

static volatile uint8_t *u8g_get_avr_io_ptr(const IO_PTR *base, uint8_t offset)
{
    4f46:	cf 93       	push	r28
    4f48:	df 93       	push	r29
    4f4a:	00 d0       	rcall	.+0      	; 0x4f4c <u8g_get_avr_io_ptr+0x6>
    4f4c:	cd b7       	in	r28, 0x3d	; 61
    4f4e:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t * tmp;
  base += offset;
    4f50:	70 e0       	ldi	r23, 0x00	; 0
    4f52:	66 0f       	add	r22, r22
    4f54:	77 1f       	adc	r23, r23
    4f56:	68 0f       	add	r22, r24
    4f58:	79 1f       	adc	r23, r25
  memcpy_P(&tmp, base, sizeof(volatile uint8_t * PROGMEM));
    4f5a:	42 e0       	ldi	r20, 0x02	; 2
    4f5c:	50 e0       	ldi	r21, 0x00	; 0
    4f5e:	ce 01       	movw	r24, r28
    4f60:	01 96       	adiw	r24, 0x01	; 1
    4f62:	0e 94 cc 42 	call	0x8598	; 0x8598 <memcpy_P>
  return tmp; 
}
    4f66:	89 81       	ldd	r24, Y+1	; 0x01
    4f68:	9a 81       	ldd	r25, Y+2	; 0x02
    4f6a:	0f 90       	pop	r0
    4f6c:	0f 90       	pop	r0
    4f6e:	df 91       	pop	r29
    4f70:	cf 91       	pop	r28
    4f72:	08 95       	ret

00004f74 <u8g_Pin>:
typedef volatile uint8_t * IO_PTR;

/* create internal pin number */
uint8_t u8g_Pin(uint8_t port, uint8_t bitpos)
{
  port <<= 3;
    4f74:	88 0f       	add	r24, r24
    4f76:	88 0f       	add	r24, r24
    4f78:	88 0f       	add	r24, r24
  port += bitpos;
  return port;
}
    4f7a:	86 0f       	add	r24, r22
    4f7c:	08 95       	ret

00004f7e <u8g_SetPinOutput>:
  return tmp; 
}

/* set direction to output of the specified pin (internal pin number) */
void u8g_SetPinOutput(uint8_t internal_pin_number)
{
    4f7e:	cf 93       	push	r28
    4f80:	c8 2f       	mov	r28, r24
  *u8g_get_avr_io_ptr(u8g_avr_ddr_P, internal_pin_number>>3) |= _BV(internal_pin_number&7);
    4f82:	68 2f       	mov	r22, r24
    4f84:	66 95       	lsr	r22
    4f86:	66 95       	lsr	r22
    4f88:	66 95       	lsr	r22
    4f8a:	82 e0       	ldi	r24, 0x02	; 2
    4f8c:	93 e0       	ldi	r25, 0x03	; 3
    4f8e:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <u8g_get_avr_io_ptr>
    4f92:	fc 01       	movw	r30, r24
    4f94:	40 81       	ld	r20, Z
    4f96:	c7 70       	andi	r28, 0x07	; 7
    4f98:	21 e0       	ldi	r18, 0x01	; 1
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
    4f9c:	c9 01       	movw	r24, r18
    4f9e:	02 c0       	rjmp	.+4      	; 0x4fa4 <u8g_SetPinOutput+0x26>
    4fa0:	88 0f       	add	r24, r24
    4fa2:	99 1f       	adc	r25, r25
    4fa4:	ca 95       	dec	r28
    4fa6:	e2 f7       	brpl	.-8      	; 0x4fa0 <u8g_SetPinOutput+0x22>
    4fa8:	84 2b       	or	r24, r20
    4faa:	80 83       	st	Z, r24
}
    4fac:	cf 91       	pop	r28
    4fae:	08 95       	ret

00004fb0 <u8g_SetPinLevel>:
{
  *u8g_get_avr_io_ptr(u8g_avr_ddr_P, internal_pin_number>>3) &= ~_BV(internal_pin_number&7);
}

void u8g_SetPinLevel(uint8_t internal_pin_number, uint8_t level)
{
    4fb0:	cf 93       	push	r28
    4fb2:	df 93       	push	r29
    4fb4:	c8 2f       	mov	r28, r24
    4fb6:	d6 2f       	mov	r29, r22
  volatile uint8_t * tmp = u8g_get_avr_io_ptr(u8g_avr_port_P, internal_pin_number>>3);
    4fb8:	68 2f       	mov	r22, r24
    4fba:	66 95       	lsr	r22
    4fbc:	66 95       	lsr	r22
    4fbe:	66 95       	lsr	r22
    4fc0:	88 ef       	ldi	r24, 0xF8	; 248
    4fc2:	92 e0       	ldi	r25, 0x02	; 2
    4fc4:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <u8g_get_avr_io_ptr>
    4fc8:	fc 01       	movw	r30, r24
  
  if ( level == 0 )
    4fca:	d1 11       	cpse	r29, r1
    4fcc:	11 c0       	rjmp	.+34     	; 0x4ff0 <u8g_SetPinLevel+0x40>
  {
    U8G_ATOMIC_AND(tmp, ~_BV(internal_pin_number&7));
    4fce:	4f b7       	in	r20, 0x3f	; 63
    4fd0:	f8 94       	cli
    4fd2:	50 81       	ld	r21, Z
    4fd4:	c7 70       	andi	r28, 0x07	; 7
    4fd6:	21 e0       	ldi	r18, 0x01	; 1
    4fd8:	30 e0       	ldi	r19, 0x00	; 0
    4fda:	c9 01       	movw	r24, r18
    4fdc:	02 c0       	rjmp	.+4      	; 0x4fe2 <u8g_SetPinLevel+0x32>
    4fde:	88 0f       	add	r24, r24
    4fe0:	99 1f       	adc	r25, r25
    4fe2:	ca 95       	dec	r28
    4fe4:	e2 f7       	brpl	.-8      	; 0x4fde <u8g_SetPinLevel+0x2e>
    4fe6:	80 95       	com	r24
    4fe8:	85 23       	and	r24, r21
    4fea:	80 83       	st	Z, r24
    4fec:	4f bf       	out	0x3f, r20	; 63
    4fee:	0f c0       	rjmp	.+30     	; 0x500e <u8g_SetPinLevel+0x5e>
   // *tmp &= ~_BV(internal_pin_number&7);
  }
  else
  {
    U8G_ATOMIC_OR(tmp, _BV(internal_pin_number&7));
    4ff0:	4f b7       	in	r20, 0x3f	; 63
    4ff2:	f8 94       	cli
    4ff4:	50 81       	ld	r21, Z
    4ff6:	c7 70       	andi	r28, 0x07	; 7
    4ff8:	21 e0       	ldi	r18, 0x01	; 1
    4ffa:	30 e0       	ldi	r19, 0x00	; 0
    4ffc:	c9 01       	movw	r24, r18
    4ffe:	02 c0       	rjmp	.+4      	; 0x5004 <u8g_SetPinLevel+0x54>
    5000:	88 0f       	add	r24, r24
    5002:	99 1f       	adc	r25, r25
    5004:	ca 95       	dec	r28
    5006:	e2 f7       	brpl	.-8      	; 0x5000 <u8g_SetPinLevel+0x50>
    5008:	85 2b       	or	r24, r21
    500a:	80 83       	st	Z, r24
    500c:	4f bf       	out	0x3f, r20	; 63
    //*tmp |= _BV(internal_pin_number&7);
  }
  
}
    500e:	df 91       	pop	r29
    5010:	cf 91       	pop	r28
    5012:	08 95       	ret

00005014 <u8g_SetPIOutput>:
#if defined(U8G_WITH_PINLIST)

void u8g_SetPIOutput(u8g_t *u8g, uint8_t pi)
{
  uint8_t pin;
  pin = u8g->pin_list[pi];
    5014:	86 0f       	add	r24, r22
    5016:	91 1d       	adc	r25, r1
    5018:	fc 01       	movw	r30, r24
    501a:	83 a1       	ldd	r24, Z+35	; 0x23
  if ( pin != U8G_PIN_NONE )
    501c:	8f 3f       	cpi	r24, 0xFF	; 255
    501e:	11 f0       	breq	.+4      	; 0x5024 <u8g_SetPIOutput+0x10>
    u8g_SetPinOutput(pin);
    5020:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <u8g_SetPinOutput>
    5024:	08 95       	ret

00005026 <u8g_SetPILevel>:
}

void u8g_SetPILevel(u8g_t *u8g, uint8_t pi, uint8_t level)
{
  uint8_t pin;
  pin = u8g->pin_list[pi];
    5026:	86 0f       	add	r24, r22
    5028:	91 1d       	adc	r25, r1
    502a:	fc 01       	movw	r30, r24
    502c:	83 a1       	ldd	r24, Z+35	; 0x23
  if ( pin != U8G_PIN_NONE )
    502e:	8f 3f       	cpi	r24, 0xFF	; 255
    5030:	19 f0       	breq	.+6      	; 0x5038 <u8g_SetPILevel+0x12>
    u8g_SetPinLevel(pin, level);
    5032:	64 2f       	mov	r22, r20
    5034:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <u8g_SetPinLevel>
    5038:	08 95       	ret

0000503a <u8g_Delay>:
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    503a:	00 97       	sbiw	r24, 0x00	; 0
    503c:	41 f0       	breq	.+16     	; 0x504e <u8g_Delay+0x14>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    503e:	2e e3       	ldi	r18, 0x3E	; 62
    5040:	3f e1       	ldi	r19, 0x1F	; 31
    5042:	f9 01       	movw	r30, r18
    5044:	31 97       	sbiw	r30, 0x01	; 1
    5046:	f1 f7       	brne	.-4      	; 0x5044 <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    5048:	01 97       	sbiw	r24, 0x01	; 1
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    504a:	00 97       	sbiw	r24, 0x00	; 0
    504c:	d1 f7       	brne	.-12     	; 0x5042 <u8g_Delay+0x8>
    504e:	08 95       	ret

00005050 <u8g_dev_ks0108_128x64_fn>:
  U8G_ESC_END                /* end of sequence */
};


uint8_t u8g_dev_ks0108_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    5050:	bf 92       	push	r11
    5052:	cf 92       	push	r12
    5054:	df 92       	push	r13
    5056:	ef 92       	push	r14
    5058:	ff 92       	push	r15
    505a:	0f 93       	push	r16
    505c:	1f 93       	push	r17
    505e:	cf 93       	push	r28
    5060:	df 93       	push	r29
    5062:	8c 01       	movw	r16, r24
    5064:	eb 01       	movw	r28, r22
    5066:	b4 2e       	mov	r11, r20
    5068:	79 01       	movw	r14, r18
  
  switch(msg)
    506a:	8a e0       	ldi	r24, 0x0A	; 10
    506c:	48 17       	cp	r20, r24
    506e:	21 f0       	breq	.+8      	; 0x5078 <u8g_dev_ks0108_128x64_fn+0x28>
    5070:	95 e1       	ldi	r25, 0x15	; 21
    5072:	49 17       	cp	r20, r25
    5074:	c1 f0       	breq	.+48     	; 0x50a6 <u8g_dev_ks0108_128x64_fn+0x56>
    5076:	6a c0       	rjmp	.+212    	; 0x514c <u8g_dev_ks0108_128x64_fn+0xfc>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);
    5078:	4f ef       	ldi	r20, 0xFF	; 255
    507a:	c8 01       	movw	r24, r16
    507c:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <u8g_InitCom>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5080:	ef e1       	ldi	r30, 0x1F	; 31
    5082:	f3 e0       	ldi	r31, 0x03	; 3
    5084:	31 97       	sbiw	r30, 0x01	; 1
    5086:	f1 f7       	brne	.-4      	; 0x5084 <u8g_dev_ks0108_128x64_fn+0x34>
    5088:	00 c0       	rjmp	.+0      	; 0x508a <u8g_dev_ks0108_128x64_fn+0x3a>
    508a:	00 00       	nop
	  _delay_us(100);
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ks0108_128x64_init_seq);
    508c:	4c e0       	ldi	r20, 0x0C	; 12
    508e:	53 e0       	ldi	r21, 0x03	; 3
    5090:	be 01       	movw	r22, r28
    5092:	c8 01       	movw	r24, r16
    5094:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <u8g_WriteEscSeqP>
    5098:	8f e1       	ldi	r24, 0x1F	; 31
    509a:	93 e0       	ldi	r25, 0x03	; 3
    509c:	01 97       	sbiw	r24, 0x01	; 1
    509e:	f1 f7       	brne	.-4      	; 0x509c <u8g_dev_ks0108_128x64_fn+0x4c>
    50a0:	00 c0       	rjmp	.+0      	; 0x50a2 <u8g_dev_ks0108_128x64_fn+0x52>
    50a2:	00 00       	nop
    50a4:	53 c0       	rjmp	.+166    	; 0x514c <u8g_dev_ks0108_128x64_fn+0xfc>
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    50a6:	ca 80       	ldd	r12, Y+2	; 0x02
    50a8:	db 80       	ldd	r13, Y+3	; 0x03
        
        u8g_SetAddress(u8g, dev, 0);           /* command mode */
    50aa:	40 e0       	ldi	r20, 0x00	; 0
    50ac:	c8 01       	movw	r24, r16
    50ae:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <u8g_SetAddress>
        u8g_SetChipSelect(u8g, dev, 2);
    50b2:	42 e0       	ldi	r20, 0x02	; 2
    50b4:	be 01       	movw	r22, r28
    50b6:	c8 01       	movw	r24, r16
    50b8:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <u8g_SetChipSelect>
//        _delay_us(100);
		u8g_WriteByte(u8g, dev, 0x0b8 | pb->p.page); /* select current page (KS0108b) */
    50bc:	f6 01       	movw	r30, r12
    50be:	44 81       	ldd	r20, Z+4	; 0x04
    50c0:	48 6b       	ori	r20, 0xB8	; 184
    50c2:	be 01       	movw	r22, r28
    50c4:	c8 01       	movw	r24, r16
    50c6:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <u8g_WriteByte>
//        _delay_us(100);
		u8g_WriteByte(u8g, dev, 0x040 );		/* set address 0 */
    50ca:	40 e4       	ldi	r20, 0x40	; 64
    50cc:	be 01       	movw	r22, r28
    50ce:	c8 01       	movw	r24, r16
    50d0:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <u8g_WriteByte>
//        _delay_us(100);
		u8g_SetAddress(u8g, dev, 1);           /* data mode */
    50d4:	41 e0       	ldi	r20, 0x01	; 1
    50d6:	be 01       	movw	r22, r28
    50d8:	c8 01       	movw	r24, r16
    50da:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <u8g_SetAddress>
//        _delay_us(100);
		u8g_WriteSequence(u8g, dev, 64, pb->buf);
    50de:	f6 01       	movw	r30, r12
    50e0:	26 81       	ldd	r18, Z+6	; 0x06
    50e2:	37 81       	ldd	r19, Z+7	; 0x07
    50e4:	40 e4       	ldi	r20, 0x40	; 64
    50e6:	be 01       	movw	r22, r28
    50e8:	c8 01       	movw	r24, r16
    50ea:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <u8g_WriteSequence>
//        _delay_us(100);
		u8g_SetChipSelect(u8g, dev, 0); 
    50ee:	40 e0       	ldi	r20, 0x00	; 0
    50f0:	be 01       	movw	r22, r28
    50f2:	c8 01       	movw	r24, r16
    50f4:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <u8g_SetChipSelect>
		u8g_SetAddress(u8g, dev, 0);           /* command mode */
    50f8:	40 e0       	ldi	r20, 0x00	; 0
    50fa:	be 01       	movw	r22, r28
    50fc:	c8 01       	movw	r24, r16
    50fe:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <u8g_SetAddress>
//        _delay_us(100);
		u8g_SetChipSelect(u8g, dev, 1);
    5102:	41 e0       	ldi	r20, 0x01	; 1
    5104:	be 01       	movw	r22, r28
    5106:	c8 01       	movw	r24, r16
    5108:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <u8g_SetChipSelect>
//        _delay_us(100);
		u8g_WriteByte(u8g, dev, 0x0b8 | pb->p.page); /* select current page (KS0108b) */
    510c:	f6 01       	movw	r30, r12
    510e:	44 81       	ldd	r20, Z+4	; 0x04
    5110:	48 6b       	ori	r20, 0xB8	; 184
    5112:	be 01       	movw	r22, r28
    5114:	c8 01       	movw	r24, r16
    5116:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <u8g_WriteByte>
//        _delay_us(100);
		 u8g_WriteByte(u8g, dev, 0x040 );		/* set address 0 */
    511a:	40 e4       	ldi	r20, 0x40	; 64
    511c:	be 01       	movw	r22, r28
    511e:	c8 01       	movw	r24, r16
    5120:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <u8g_WriteByte>
//        _delay_us(100);
		u8g_SetAddress(u8g, dev, 1);           /* data mode */
    5124:	41 e0       	ldi	r20, 0x01	; 1
    5126:	be 01       	movw	r22, r28
    5128:	c8 01       	movw	r24, r16
    512a:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <u8g_SetAddress>
//        _delay_us(100);
		u8g_WriteSequence(u8g, dev, 64, 64+(uint8_t *)pb->buf);
    512e:	f6 01       	movw	r30, r12
    5130:	26 81       	ldd	r18, Z+6	; 0x06
    5132:	37 81       	ldd	r19, Z+7	; 0x07
    5134:	20 5c       	subi	r18, 0xC0	; 192
    5136:	3f 4f       	sbci	r19, 0xFF	; 255
    5138:	40 e4       	ldi	r20, 0x40	; 64
    513a:	be 01       	movw	r22, r28
    513c:	c8 01       	movw	r24, r16
    513e:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <u8g_WriteSequence>
//        _delay_us(100);
		u8g_SetChipSelect(u8g, dev, 0);
    5142:	40 e0       	ldi	r20, 0x00	; 0
    5144:	be 01       	movw	r22, r28
    5146:	c8 01       	movw	r24, r16
    5148:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <u8g_SetChipSelect>
//		_delay_us(100);        
      }
      break;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    514c:	97 01       	movw	r18, r14
    514e:	4b 2d       	mov	r20, r11
    5150:	be 01       	movw	r22, r28
    5152:	c8 01       	movw	r24, r16
    5154:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <u8g_dev_pb8v1_base_fn>
}
    5158:	df 91       	pop	r29
    515a:	cf 91       	pop	r28
    515c:	1f 91       	pop	r17
    515e:	0f 91       	pop	r16
    5160:	ff 90       	pop	r15
    5162:	ef 90       	pop	r14
    5164:	df 90       	pop	r13
    5166:	cf 90       	pop	r12
    5168:	bf 90       	pop	r11
    516a:	08 95       	ret

0000516c <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
    516c:	fc 01       	movw	r30, r24
    516e:	e6 0f       	add	r30, r22
    5170:	f1 1d       	adc	r31, r1
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
    5172:	84 91       	lpm	r24, Z
    5174:	90 e0       	ldi	r25, 0x00	; 0
    font++;
    pos <<= 8;
    5176:	98 2f       	mov	r25, r24
    5178:	88 27       	eor	r24, r24
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
    font++;
    517a:	31 96       	adiw	r30, 0x01	; 1
    pos <<= 8;
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
    517c:	e4 91       	lpm	r30, Z
    return pos;
}
    517e:	8e 0f       	add	r24, r30
    5180:	91 1d       	adc	r25, r1
    5182:	08 95       	ret

00005184 <u8g_font_GetFormat>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    5184:	fc 01       	movw	r30, r24
    5186:	84 91       	lpm	r24, Z

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
  return u8g_font_get_byte(font, 0);
}
    5188:	08 95       	ret

0000518a <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
  switch(u8g_font_GetFormat(font))
    518a:	0e 94 c2 28 	call	0x5184	; 0x5184 <u8g_font_GetFormat>
    518e:	88 23       	and	r24, r24
    5190:	11 f0       	breq	.+4      	; 0x5196 <u8g_font_GetFontGlyphStructureSize+0xc>
    5192:	82 30       	cpi	r24, 0x02	; 2
    5194:	11 f4       	brne	.+4      	; 0x519a <u8g_font_GetFontGlyphStructureSize+0x10>
  {
    case 0: return 6;
    5196:	86 e0       	ldi	r24, 0x06	; 6
    5198:	08 95       	ret
    case 1: return 3;
    519a:	83 e0       	ldi	r24, 0x03	; 3
    case 2: return 6;
  }
  return 3;
}
    519c:	08 95       	ret

0000519e <u8g_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
  return 0;
}
    519e:	80 e0       	ldi	r24, 0x00	; 0
    51a0:	08 95       	ret

000051a2 <u8g_font_calc_vref_top>:

  /*
  y += (u8g_uint_t)(u8g_int_t)(u8g->font_ref_ascent);
  y++;
  */
  tmp = (u8g_uint_t)(u8g_int_t)(u8g->font_ref_ascent);
    51a2:	fc 01       	movw	r30, r24
    51a4:	80 8d       	ldd	r24, Z+24	; 0x18
  tmp++;
  return tmp;
}
    51a6:	8f 5f       	subi	r24, 0xFF	; 255
    51a8:	08 95       	ret

000051aa <u8g_font_GetEncoding65Pos>:
}

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
    return u8g_font_get_word(font, 6);
    51aa:	66 e0       	ldi	r22, 0x06	; 6
    51ac:	0e 94 b6 28 	call	0x516c	; 0x516c <u8g_font_get_word>
}
    51b0:	08 95       	ret

000051b2 <u8g_font_GetEncoding97Pos>:

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
    return u8g_font_get_word(font, 8);
    51b2:	68 e0       	ldi	r22, 0x08	; 8
    51b4:	0e 94 b6 28 	call	0x516c	; 0x516c <u8g_font_get_word>
}
    51b8:	08 95       	ret

000051ba <u8g_font_GetFontStartEncoding>:

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    51ba:	0a 96       	adiw	r24, 0x0a	; 10
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    51bc:	fc 01       	movw	r30, r24
    51be:	84 91       	lpm	r24, Z
}

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
  return u8g_font_get_byte(font, 10);
}
    51c0:	08 95       	ret

000051c2 <u8g_font_GetFontEndEncoding>:

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    51c2:	0b 96       	adiw	r24, 0x0b	; 11
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    51c4:	fc 01       	movw	r30, r24
    51c6:	84 91       	lpm	r24, Z
}

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
  return u8g_font_get_byte(font, 11);
}
    51c8:	08 95       	ret

000051ca <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
    51ca:	af 92       	push	r10
    51cc:	bf 92       	push	r11
    51ce:	cf 92       	push	r12
    51d0:	df 92       	push	r13
    51d2:	ef 92       	push	r14
    51d4:	ff 92       	push	r15
    51d6:	0f 93       	push	r16
    51d8:	1f 93       	push	r17
    51da:	cf 93       	push	r28
    51dc:	df 93       	push	r29
    51de:	7c 01       	movw	r14, r24
    51e0:	b6 2e       	mov	r11, r22
  uint8_t *p = (uint8_t *)(u8g->font);
    51e2:	dc 01       	movw	r26, r24
    51e4:	14 96       	adiw	r26, 0x04	; 4
    51e6:	cd 91       	ld	r28, X+
    51e8:	dc 91       	ld	r29, X
    51ea:	15 97       	sbiw	r26, 0x05	; 5
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
    51ec:	ce 01       	movw	r24, r28
    51ee:	0e 94 c2 28 	call	0x5184	; 0x5184 <u8g_font_GetFormat>
    51f2:	18 2f       	mov	r17, r24
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
    51f4:	f7 01       	movw	r30, r14
    51f6:	84 81       	ldd	r24, Z+4	; 0x04
    51f8:	95 81       	ldd	r25, Z+5	; 0x05
    51fa:	0e 94 c5 28 	call	0x518a	; 0x518a <u8g_font_GetFontGlyphStructureSize>
    51fe:	08 2f       	mov	r16, r24
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;

  if ( font_format == 1 )
    5200:	11 30       	cpi	r17, 0x01	; 1
    5202:	19 f0       	breq	.+6      	; 0x520a <u8g_GetGlyph+0x40>
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
    5204:	aa 24       	eor	r10, r10
    5206:	aa 94       	dec	r10
    5208:	04 c0       	rjmp	.+8      	; 0x5212 <u8g_GetGlyph+0x48>

  if ( font_format == 1 )
    mask = 15;
    520a:	0f 2e       	mov	r0, r31
    520c:	ff e0       	ldi	r31, 0x0F	; 15
    520e:	af 2e       	mov	r10, r31
    5210:	f0 2d       	mov	r31, r0
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
    5212:	d7 01       	movw	r26, r14
    5214:	14 96       	adiw	r26, 0x04	; 4
    5216:	8d 91       	ld	r24, X+
    5218:	9c 91       	ld	r25, X
    521a:	15 97       	sbiw	r26, 0x05	; 5
    521c:	0e 94 dd 28 	call	0x51ba	; 0x51ba <u8g_font_GetFontStartEncoding>
    5220:	d8 2e       	mov	r13, r24
  end = u8g_font_GetFontEndEncoding(u8g->font);
    5222:	f7 01       	movw	r30, r14
    5224:	84 81       	ldd	r24, Z+4	; 0x04
    5226:	95 81       	ldd	r25, Z+5	; 0x05
    5228:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <u8g_font_GetFontEndEncoding>
    522c:	c8 2e       	mov	r12, r24

  pos = u8g_font_GetEncoding97Pos(u8g->font);
    522e:	d7 01       	movw	r26, r14
    5230:	14 96       	adiw	r26, 0x04	; 4
    5232:	8d 91       	ld	r24, X+
    5234:	9c 91       	ld	r25, X
    5236:	15 97       	sbiw	r26, 0x05	; 5
    5238:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <u8g_font_GetEncoding97Pos>
  if ( requested_encoding >= 97 && pos > 0 )
    523c:	b0 e6       	ldi	r27, 0x60	; 96
    523e:	bb 15       	cp	r27, r11
    5240:	48 f4       	brcc	.+18     	; 0x5254 <u8g_GetGlyph+0x8a>
    5242:	00 97       	sbiw	r24, 0x00	; 0
    5244:	39 f0       	breq	.+14     	; 0x5254 <u8g_GetGlyph+0x8a>
  {
    p+= pos;
    5246:	c8 0f       	add	r28, r24
    5248:	d9 1f       	adc	r29, r25
    start = 97;
    524a:	0f 2e       	mov	r0, r31
    524c:	f1 e6       	ldi	r31, 0x61	; 97
    524e:	df 2e       	mov	r13, r31
    5250:	f0 2d       	mov	r31, r0
    5252:	12 c0       	rjmp	.+36     	; 0x5278 <u8g_GetGlyph+0xae>
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
    5254:	f7 01       	movw	r30, r14
    5256:	84 81       	ldd	r24, Z+4	; 0x04
    5258:	95 81       	ldd	r25, Z+5	; 0x05
    525a:	0e 94 d5 28 	call	0x51aa	; 0x51aa <u8g_font_GetEncoding65Pos>
    if ( requested_encoding >= 65 && pos > 0 )
    525e:	f0 e4       	ldi	r31, 0x40	; 64
    5260:	fb 15       	cp	r31, r11
    5262:	48 f4       	brcc	.+18     	; 0x5276 <u8g_GetGlyph+0xac>
    5264:	00 97       	sbiw	r24, 0x00	; 0
    5266:	39 f0       	breq	.+14     	; 0x5276 <u8g_GetGlyph+0xac>
    {
      p+= pos;
    5268:	c8 0f       	add	r28, r24
    526a:	d9 1f       	adc	r29, r25
      start = 65;
    526c:	0f 2e       	mov	r0, r31
    526e:	f1 e4       	ldi	r31, 0x41	; 65
    5270:	df 2e       	mov	r13, r31
    5272:	f0 2d       	mov	r31, r0
    5274:	01 c0       	rjmp	.+2      	; 0x5278 <u8g_GetGlyph+0xae>
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
    5276:	61 96       	adiw	r28, 0x11	; 17
  }
  
  if ( requested_encoding > end )
    5278:	cb 14       	cp	r12, r11
    527a:	90 f4       	brcc	.+36     	; 0x52a0 <u8g_GetGlyph+0xd6>
}

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
  u8g->glyph_dx = 0;
    527c:	d7 01       	movw	r26, r14
    527e:	50 96       	adiw	r26, 0x10	; 16
    5280:	1c 92       	st	X, r1
    5282:	50 97       	sbiw	r26, 0x10	; 16
  u8g->glyph_width = 0;
    5284:	53 96       	adiw	r26, 0x13	; 19
    5286:	1c 92       	st	X, r1
    5288:	53 97       	sbiw	r26, 0x13	; 19
  u8g->glyph_height = 0;
    528a:	54 96       	adiw	r26, 0x14	; 20
    528c:	1c 92       	st	X, r1
    528e:	54 97       	sbiw	r26, 0x14	; 20
  u8g->glyph_x = 0;
    5290:	51 96       	adiw	r26, 0x11	; 17
    5292:	1c 92       	st	X, r1
    5294:	51 97       	sbiw	r26, 0x11	; 17
  u8g->glyph_y = 0;
    5296:	52 96       	adiw	r26, 0x12	; 18
    5298:	1c 92       	st	X, r1
  }
  
  if ( requested_encoding > end )
  {
    u8g_FillEmptyGlyphCache(u8g);
    return NULL;                      /* not found */
    529a:	80 e0       	ldi	r24, 0x00	; 0
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	73 c0       	rjmp	.+230    	; 0x5386 <u8g_GetGlyph+0x1bc>
  }
  
  i = start;
  if ( i <= end )
    52a0:	cd 14       	cp	r12, r13
    52a2:	08 f4       	brcc	.+2      	; 0x52a6 <u8g_GetGlyph+0xdc>
    52a4:	68 c0       	rjmp	.+208    	; 0x5376 <u8g_GetGlyph+0x1ac>
        {
          u8g_CopyGlyphDataToCache(u8g, p);
          return p;
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
        p += data_structure_size;
    52a6:	20 2f       	mov	r18, r16
    52a8:	30 e0       	ldi	r19, 0x00	; 0
  i = start;
  if ( i <= end )
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
    52aa:	8e 01       	movw	r16, r28
    52ac:	fe 01       	movw	r30, r28
    52ae:	84 91       	lpm	r24, Z
    52b0:	8f 3f       	cpi	r24, 0xFF	; 255
    52b2:	11 f4       	brne	.+4      	; 0x52b8 <u8g_GetGlyph+0xee>
      {
        p += 1;
    52b4:	21 96       	adiw	r28, 0x01	; 1
    52b6:	5b c0       	rjmp	.+182    	; 0x536e <u8g_GetGlyph+0x1a4>
      }
      else
      {
        if ( i == requested_encoding )
    52b8:	db 10       	cpse	r13, r11
    52ba:	51 c0       	rjmp	.+162    	; 0x535e <u8g_GetGlyph+0x194>
    52bc:	6e 01       	movw	r12, r28
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
    52be:	d7 01       	movw	r26, r14
    52c0:	14 96       	adiw	r26, 0x04	; 4
    52c2:	8d 91       	ld	r24, X+
    52c4:	9c 91       	ld	r25, X
    52c6:	15 97       	sbiw	r26, 0x05	; 5
    52c8:	0e 94 c2 28 	call	0x5184	; 0x5184 <u8g_font_GetFormat>
    52cc:	88 23       	and	r24, r24
    52ce:	11 f0       	breq	.+4      	; 0x52d4 <u8g_GetGlyph+0x10a>
    52d0:	82 30       	cpi	r24, 0x02	; 2
    52d2:	01 f5       	brne	.+64     	; 0x5314 <u8g_GetGlyph+0x14a>
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
    52d4:	f8 01       	movw	r30, r16
    52d6:	04 91       	lpm	r16, Z
    52d8:	d7 01       	movw	r26, r14
    52da:	53 96       	adiw	r26, 0x13	; 19
    52dc:	0c 93       	st	X, r16
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
    52de:	f6 01       	movw	r30, r12
    52e0:	31 96       	adiw	r30, 0x01	; 1
    52e2:	e4 91       	lpm	r30, Z
    52e4:	d7 01       	movw	r26, r14
    52e6:	54 96       	adiw	r26, 0x14	; 20
    52e8:	ec 93       	st	X, r30
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
    52ea:	f6 01       	movw	r30, r12
    52ec:	33 96       	adiw	r30, 0x03	; 3
    52ee:	e4 91       	lpm	r30, Z
    52f0:	d7 01       	movw	r26, r14
    52f2:	50 96       	adiw	r26, 0x10	; 16
    52f4:	ec 93       	st	X, r30
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
    52f6:	f6 01       	movw	r30, r12
    52f8:	34 96       	adiw	r30, 0x04	; 4
    52fa:	e4 91       	lpm	r30, Z
    52fc:	d7 01       	movw	r26, r14
    52fe:	51 96       	adiw	r26, 0x11	; 17
    5300:	ec 93       	st	X, r30
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
    5302:	f6 01       	movw	r30, r12
    5304:	35 96       	adiw	r30, 0x05	; 5
    5306:	e4 91       	lpm	r30, Z
    5308:	d7 01       	movw	r26, r14
    530a:	52 96       	adiw	r26, 0x12	; 18
    530c:	ec 93       	st	X, r30
    530e:	8c 2f       	mov	r24, r28
    5310:	9d 2f       	mov	r25, r29
    5312:	39 c0       	rjmp	.+114    	; 0x5386 <u8g_GetGlyph+0x1bc>
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
    5314:	fe 01       	movw	r30, r28
    5316:	04 91       	lpm	r16, Z
      u8g->glyph_y =  tmp & 15;
    5318:	80 2f       	mov	r24, r16
    531a:	8f 70       	andi	r24, 0x0F	; 15
      u8g->glyph_y-=2;
    531c:	82 50       	subi	r24, 0x02	; 2
    531e:	d7 01       	movw	r26, r14
    5320:	52 96       	adiw	r26, 0x12	; 18
    5322:	8c 93       	st	X, r24
    5324:	52 97       	sbiw	r26, 0x12	; 18
      tmp >>= 4;
    5326:	02 95       	swap	r16
    5328:	0f 70       	andi	r16, 0x0F	; 15
      u8g->glyph_x =  tmp;
    532a:	51 96       	adiw	r26, 0x11	; 17
    532c:	0c 93       	st	X, r16
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
    532e:	fe 01       	movw	r30, r28
    5330:	31 96       	adiw	r30, 0x01	; 1
    5332:	e4 91       	lpm	r30, Z
      u8g->glyph_height =  tmp & 15;
    5334:	8e 2f       	mov	r24, r30
    5336:	8f 70       	andi	r24, 0x0F	; 15
    5338:	d7 01       	movw	r26, r14
    533a:	54 96       	adiw	r26, 0x14	; 20
    533c:	8c 93       	st	X, r24
    533e:	54 97       	sbiw	r26, 0x14	; 20
      tmp >>= 4;
    5340:	e2 95       	swap	r30
    5342:	ef 70       	andi	r30, 0x0F	; 15
      u8g->glyph_width =  tmp;
    5344:	53 96       	adiw	r26, 0x13	; 19
    5346:	ec 93       	st	X, r30
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
    5348:	fe 01       	movw	r30, r28
    534a:	32 96       	adiw	r30, 0x02	; 2
    534c:	e4 91       	lpm	r30, Z
      tmp >>= 4;
    534e:	e2 95       	swap	r30
    5350:	ef 70       	andi	r30, 0x0F	; 15
      u8g->glyph_dx = tmp;
    5352:	d7 01       	movw	r26, r14
    5354:	50 96       	adiw	r26, 0x10	; 16
    5356:	ec 93       	st	X, r30
    5358:	8c 2f       	mov	r24, r28
    535a:	9d 2f       	mov	r25, r29
    535c:	14 c0       	rjmp	.+40     	; 0x5386 <u8g_GetGlyph+0x1bc>
        if ( i == requested_encoding )
        {
          u8g_CopyGlyphDataToCache(u8g, p);
          return p;
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
    535e:	fe 01       	movw	r30, r28
    5360:	32 96       	adiw	r30, 0x02	; 2
    5362:	e4 91       	lpm	r30, Z
    5364:	ea 21       	and	r30, r10
    5366:	ce 0f       	add	r28, r30
    5368:	d1 1d       	adc	r29, r1
        p += data_structure_size;
    536a:	c2 0f       	add	r28, r18
    536c:	d3 1f       	adc	r29, r19
      }
      if ( i == end )
    536e:	dc 14       	cp	r13, r12
    5370:	11 f0       	breq	.+4      	; 0x5376 <u8g_GetGlyph+0x1ac>
        break;
      i++;
    5372:	d3 94       	inc	r13
    }
    5374:	9a cf       	rjmp	.-204    	; 0x52aa <u8g_GetGlyph+0xe0>
}

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
  u8g->glyph_dx = 0;
    5376:	f7 01       	movw	r30, r14
    5378:	10 8a       	std	Z+16, r1	; 0x10
  u8g->glyph_width = 0;
    537a:	13 8a       	std	Z+19, r1	; 0x13
  u8g->glyph_height = 0;
    537c:	14 8a       	std	Z+20, r1	; 0x14
  u8g->glyph_x = 0;
    537e:	11 8a       	std	Z+17, r1	; 0x11
  u8g->glyph_y = 0;
    5380:	12 8a       	std	Z+18, r1	; 0x12
    }
  }
  
  u8g_FillEmptyGlyphCache(u8g);
    
  return NULL;
    5382:	80 e0       	ldi	r24, 0x00	; 0
    5384:	90 e0       	ldi	r25, 0x00	; 0
}
    5386:	df 91       	pop	r29
    5388:	cf 91       	pop	r28
    538a:	1f 91       	pop	r17
    538c:	0f 91       	pop	r16
    538e:	ff 90       	pop	r15
    5390:	ef 90       	pop	r14
    5392:	df 90       	pop	r13
    5394:	cf 90       	pop	r12
    5396:	bf 90       	pop	r11
    5398:	af 90       	pop	r10
    539a:	08 95       	ret

0000539c <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
    539c:	6f 92       	push	r6
    539e:	7f 92       	push	r7
    53a0:	8f 92       	push	r8
    53a2:	9f 92       	push	r9
    53a4:	af 92       	push	r10
    53a6:	bf 92       	push	r11
    53a8:	cf 92       	push	r12
    53aa:	df 92       	push	r13
    53ac:	ef 92       	push	r14
    53ae:	ff 92       	push	r15
    53b0:	0f 93       	push	r16
    53b2:	1f 93       	push	r17
    53b4:	cf 93       	push	r28
    53b6:	df 93       	push	r29
    53b8:	6c 01       	movw	r12, r24
    53ba:	16 2f       	mov	r17, r22
    53bc:	74 2e       	mov	r7, r20
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
    53be:	62 2f       	mov	r22, r18
    53c0:	0e 94 e5 28 	call	0x51ca	; 0x51ca <u8g_GetGlyph>
    53c4:	7c 01       	movw	r14, r24
    if ( g == NULL  )
    53c6:	00 97       	sbiw	r24, 0x00	; 0
    53c8:	09 f4       	brne	.+2      	; 0x53cc <u8g_draw_glyph+0x30>
    53ca:	47 c0       	rjmp	.+142    	; 0x545a <u8g_draw_glyph+0xbe>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
    53cc:	f6 01       	movw	r30, r12
    53ce:	84 81       	ldd	r24, Z+4	; 0x04
    53d0:	95 81       	ldd	r25, Z+5	; 0x05
    53d2:	0e 94 c5 28 	call	0x518a	; 0x518a <u8g_font_GetFontGlyphStructureSize>
    53d6:	b8 2e       	mov	r11, r24
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
    53d8:	f6 01       	movw	r30, r12
    53da:	d3 89       	ldd	r29, Z+19	; 0x13
  h = u8g->glyph_height;
    53dc:	c4 89       	ldd	r28, Z+20	; 0x14
  
  x += u8g->glyph_x;
    53de:	61 88       	ldd	r6, Z+17	; 0x11
    53e0:	61 0e       	add	r6, r17
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
    53e2:	92 89       	ldd	r25, Z+18	; 0x12
    53e4:	79 1a       	sub	r7, r25
    53e6:	97 2c       	mov	r9, r7
    53e8:	9c 1a       	sub	r9, r28
    53ea:	0c 2f       	mov	r16, r28
    53ec:	2d 2f       	mov	r18, r29
    53ee:	49 2d       	mov	r20, r9
    53f0:	66 2d       	mov	r22, r6
    53f2:	c6 01       	movw	r24, r12
    53f4:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <u8g_IsBBXIntersection>
    53f8:	81 11       	cpse	r24, r1
    53fa:	03 c0       	rjmp	.+6      	; 0x5402 <u8g_draw_glyph+0x66>
    return u8g->glyph_dx;
    53fc:	f6 01       	movw	r30, r12
    53fe:	80 89       	ldd	r24, Z+16	; 0x10
    5400:	2d c0       	rjmp	.+90     	; 0x545c <u8g_draw_glyph+0xc0>

  /* now, w is reused as bytes per line */
  w += 7;
    5402:	d9 5f       	subi	r29, 0xF9	; 249
  w /= 8;
    5404:	8d 2e       	mov	r8, r29
    5406:	86 94       	lsr	r8
    5408:	86 94       	lsr	r8
    540a:	86 94       	lsr	r8
  
  iy = y;
  iy -= h;
  iy++;

  for( j = 0; j < h; j++ )
    540c:	cc 23       	and	r28, r28
    540e:	11 f1       	breq	.+68     	; 0x5454 <u8g_draw_glyph+0xb8>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
    5410:	eb 0c       	add	r14, r11
    5412:	f1 1c       	adc	r15, r1
    5414:	aa 24       	eor	r10, r10
    5416:	aa 94       	dec	r10
    5418:	a8 0c       	add	r10, r8
    541a:	b1 2c       	mov	r11, r1
    541c:	ff ef       	ldi	r31, 0xFF	; 255
    541e:	af 1a       	sub	r10, r31
    5420:	bf 0a       	sbc	r11, r31
    5422:	13 c0       	rjmp	.+38     	; 0x544a <u8g_draw_glyph+0xae>
  for( j = 0; j < h; j++ )
  {
    ix = x;
    for( i = 0; i < w; i++ )
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
    5424:	fe 01       	movw	r30, r28
    5426:	04 91       	lpm	r16, Z
    5428:	20 e0       	ldi	r18, 0x00	; 0
    542a:	49 2d       	mov	r20, r9
    542c:	61 2f       	mov	r22, r17
    542e:	c6 01       	movw	r24, r12
    5430:	0e 94 9f 2c 	call	0x593e	; 0x593e <u8g_Draw8Pixel>
      data++;
    5434:	21 96       	adiw	r28, 0x01	; 1
      ix+=8;
    5436:	18 5f       	subi	r17, 0xF8	; 248
    5438:	8c 2f       	mov	r24, r28
    543a:	8e 19       	sub	r24, r14
  iy++;

  for( j = 0; j < h; j++ )
  {
    ix = x;
    for( i = 0; i < w; i++ )
    543c:	88 15       	cp	r24, r8
    543e:	90 f3       	brcs	.-28     	; 0x5424 <u8g_draw_glyph+0x88>
    5440:	ea 0c       	add	r14, r10
    5442:	fb 1c       	adc	r15, r11
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
      data++;
      ix+=8;
    }
    iy++;
    5444:	93 94       	inc	r9
  
  iy = y;
  iy -= h;
  iy++;

  for( j = 0; j < h; j++ )
    5446:	97 14       	cp	r9, r7
    5448:	29 f0       	breq	.+10     	; 0x5454 <u8g_draw_glyph+0xb8>
  {
    ix = x;
    for( i = 0; i < w; i++ )
    544a:	88 20       	and	r8, r8
    544c:	d9 f3       	breq	.-10     	; 0x5444 <u8g_draw_glyph+0xa8>
    544e:	16 2d       	mov	r17, r6
    5450:	e7 01       	movw	r28, r14
    5452:	e8 cf       	rjmp	.-48     	; 0x5424 <u8g_draw_glyph+0x88>
      data++;
      ix+=8;
    }
    iy++;
  }
  return u8g->glyph_dx;
    5454:	f6 01       	movw	r30, r12
    5456:	80 89       	ldd	r24, Z+16	; 0x10
    5458:	01 c0       	rjmp	.+2      	; 0x545c <u8g_draw_glyph+0xc0>
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
    if ( g == NULL  )
      return 0;
    545a:	80 e0       	ldi	r24, 0x00	; 0
      ix+=8;
    }
    iy++;
  }
  return u8g->glyph_dx;
}
    545c:	df 91       	pop	r29
    545e:	cf 91       	pop	r28
    5460:	1f 91       	pop	r17
    5462:	0f 91       	pop	r16
    5464:	ff 90       	pop	r15
    5466:	ef 90       	pop	r14
    5468:	df 90       	pop	r13
    546a:	cf 90       	pop	r12
    546c:	bf 90       	pop	r11
    546e:	af 90       	pop	r10
    5470:	9f 90       	pop	r9
    5472:	8f 90       	pop	r8
    5474:	7f 90       	pop	r7
    5476:	6f 90       	pop	r6
    5478:	08 95       	ret

0000547a <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
    547a:	df 92       	push	r13
    547c:	ef 92       	push	r14
    547e:	ff 92       	push	r15
    5480:	0f 93       	push	r16
    5482:	1f 93       	push	r17
    5484:	cf 93       	push	r28
    5486:	df 93       	push	r29
    5488:	8c 01       	movw	r16, r24
    548a:	f6 2e       	mov	r15, r22
    548c:	d4 2e       	mov	r13, r20
    548e:	e9 01       	movw	r28, r18
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
    5490:	dc 01       	movw	r26, r24
    5492:	55 96       	adiw	r26, 0x15	; 21
    5494:	ed 91       	ld	r30, X+
    5496:	fc 91       	ld	r31, X
    5498:	56 97       	sbiw	r26, 0x16	; 22
    549a:	09 95       	icall
    549c:	d8 0e       	add	r13, r24
  
  while( *s != '\0' )
    549e:	28 81       	ld	r18, Y
    54a0:	22 23       	and	r18, r18
    54a2:	69 f0       	breq	.+26     	; 0x54be <u8g_DrawStr+0x44>
    54a4:	21 96       	adiw	r28, 0x01	; 1
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
    54a6:	e1 2c       	mov	r14, r1
  
  y += u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
    54a8:	4d 2d       	mov	r20, r13
    54aa:	6f 2d       	mov	r22, r15
    54ac:	c8 01       	movw	r24, r16
    54ae:	0e 94 ce 29 	call	0x539c	; 0x539c <u8g_draw_glyph>
    x += d;
    54b2:	f8 0e       	add	r15, r24
    t += d;
    54b4:	e8 0e       	add	r14, r24
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
    54b6:	29 91       	ld	r18, Y+
    54b8:	21 11       	cpse	r18, r1
    54ba:	f6 cf       	rjmp	.-20     	; 0x54a8 <u8g_DrawStr+0x2e>
    54bc:	01 c0       	rjmp	.+2      	; 0x54c0 <u8g_DrawStr+0x46>
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
    54be:	e1 2c       	mov	r14, r1
    x += d;
    t += d;
    s++;
  }
  return t;
}
    54c0:	8e 2d       	mov	r24, r14
    54c2:	df 91       	pop	r29
    54c4:	cf 91       	pop	r28
    54c6:	1f 91       	pop	r17
    54c8:	0f 91       	pop	r16
    54ca:	ff 90       	pop	r15
    54cc:	ef 90       	pop	r14
    54ce:	df 90       	pop	r13
    54d0:	08 95       	ret

000054d2 <u8g_UpdateRefHeight>:

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
    54d2:	dc 01       	movw	r26, r24
  uint16_t ls;
  if ( u8g->font == NULL )
    54d4:	14 96       	adiw	r26, 0x04	; 4
    54d6:	8d 91       	ld	r24, X+
    54d8:	9c 91       	ld	r25, X
    54da:	15 97       	sbiw	r26, 0x05	; 5
    54dc:	00 97       	sbiw	r24, 0x00	; 0
    54de:	09 f4       	brne	.+2      	; 0x54e2 <u8g_UpdateRefHeight+0x10>
    54e0:	4d c0       	rjmp	.+154    	; 0x557c <u8g_UpdateRefHeight+0xaa>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
    54e2:	57 96       	adiw	r26, 0x17	; 23
    54e4:	2c 91       	ld	r18, X
    54e6:	57 97       	sbiw	r26, 0x17	; 23
    54e8:	21 11       	cpse	r18, r1
    54ea:	0d c0       	rjmp	.+26     	; 0x5506 <u8g_UpdateRefHeight+0x34>

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    54ec:	fc 01       	movw	r30, r24
    54ee:	35 96       	adiw	r30, 0x05	; 5
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    54f0:	e4 91       	lpm	r30, Z
  uint16_t ls;
  if ( u8g->font == NULL )
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
    54f2:	58 96       	adiw	r26, 0x18	; 24
    54f4:	ec 93       	st	X, r30
    54f6:	58 97       	sbiw	r26, 0x18	; 24

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    54f8:	fc 01       	movw	r30, r24
    54fa:	3c 96       	adiw	r30, 0x0c	; 12
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    54fc:	84 91       	lpm	r24, Z
  if ( u8g->font == NULL )
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
    54fe:	59 96       	adiw	r26, 0x19	; 25
    5500:	8c 93       	st	X, r24
    5502:	59 97       	sbiw	r26, 0x19	; 25
    5504:	1b c0       	rjmp	.+54     	; 0x553c <u8g_UpdateRefHeight+0x6a>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
    5506:	21 30       	cpi	r18, 0x01	; 1
    5508:	69 f4       	brne	.+26     	; 0x5524 <u8g_UpdateRefHeight+0x52>

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    550a:	fc 01       	movw	r30, r24
    550c:	3f 96       	adiw	r30, 0x0f	; 15
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    550e:	e4 91       	lpm	r30, Z
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
    5510:	58 96       	adiw	r26, 0x18	; 24
    5512:	ec 93       	st	X, r30
    5514:	58 97       	sbiw	r26, 0x18	; 24

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    5516:	fc 01       	movw	r30, r24
    5518:	70 96       	adiw	r30, 0x10	; 16
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    551a:	84 91       	lpm	r24, Z
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
    551c:	59 96       	adiw	r26, 0x19	; 25
    551e:	8c 93       	st	X, r24
    5520:	59 97       	sbiw	r26, 0x19	; 25
    5522:	0c c0       	rjmp	.+24     	; 0x553c <u8g_UpdateRefHeight+0x6a>

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    5524:	fc 01       	movw	r30, r24
    5526:	3d 96       	adiw	r30, 0x0d	; 13
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    5528:	e4 91       	lpm	r30, Z
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
    552a:	58 96       	adiw	r26, 0x18	; 24
    552c:	ec 93       	st	X, r30
    552e:	58 97       	sbiw	r26, 0x18	; 24

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    5530:	fc 01       	movw	r30, r24
    5532:	3e 96       	adiw	r30, 0x0e	; 14
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    5534:	84 91       	lpm	r24, Z
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
    5536:	59 96       	adiw	r26, 0x19	; 25
    5538:	8c 93       	st	X, r24
    553a:	59 97       	sbiw	r26, 0x19	; 25
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
    553c:	58 96       	adiw	r26, 0x18	; 24
    553e:	8c 91       	ld	r24, X
    5540:	58 97       	sbiw	r26, 0x18	; 24
    5542:	99 27       	eor	r25, r25
    5544:	87 fd       	sbrc	r24, 7
    5546:	90 95       	com	r25
    5548:	59 96       	adiw	r26, 0x19	; 25
    554a:	2c 91       	ld	r18, X
    554c:	59 97       	sbiw	r26, 0x19	; 25
    554e:	82 1b       	sub	r24, r18
    5550:	91 09       	sbc	r25, r1
    5552:	27 fd       	sbrc	r18, 7
    5554:	93 95       	inc	r25
  if ( u8g->font_line_spacing_factor != 64 )
    5556:	5a 96       	adiw	r26, 0x1a	; 26
    5558:	2c 91       	ld	r18, X
    555a:	5a 97       	sbiw	r26, 0x1a	; 26
    555c:	20 34       	cpi	r18, 0x40	; 64
    555e:	61 f0       	breq	.+24     	; 0x5578 <u8g_UpdateRefHeight+0xa6>
  {
    ls &= 255;
    ls *= u8g->font_line_spacing_factor;
    5560:	82 9f       	mul	r24, r18
    5562:	c0 01       	movw	r24, r0
    5564:	11 24       	eor	r1, r1
    ls >>= 6;
    5566:	00 24       	eor	r0, r0
    5568:	88 0f       	add	r24, r24
    556a:	99 1f       	adc	r25, r25
    556c:	00 1c       	adc	r0, r0
    556e:	88 0f       	add	r24, r24
    5570:	99 1f       	adc	r25, r25
    5572:	00 1c       	adc	r0, r0
    5574:	89 2f       	mov	r24, r25
    5576:	90 2d       	mov	r25, r0
  }
  u8g->line_spacing = ls;
    5578:	5b 96       	adiw	r26, 0x1b	; 27
    557a:	8c 93       	st	X, r24
    557c:	08 95       	ret

0000557e <u8g_SetFontRefHeightText>:
}

void u8g_SetFontRefHeightText(u8g_t *u8g)
{
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_TEXT;
    557e:	fc 01       	movw	r30, r24
    5580:	17 8a       	std	Z+23, r1	; 0x17
  u8g_UpdateRefHeight(u8g);
    5582:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <u8g_UpdateRefHeight>
    5586:	08 95       	ret

00005588 <u8g_SetFontPosBaseline>:
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    5588:	2f ec       	ldi	r18, 0xCF	; 207
    558a:	38 e2       	ldi	r19, 0x28	; 40
    558c:	fc 01       	movw	r30, r24
    558e:	25 8b       	std	Z+21, r18	; 0x15
    5590:	36 8b       	std	Z+22, r19	; 0x16
    5592:	08 95       	ret

00005594 <u8g_SetFontPosTop>:
  return tmp;
}

void u8g_SetFontPosTop(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_top;
    5594:	21 ed       	ldi	r18, 0xD1	; 209
    5596:	38 e2       	ldi	r19, 0x28	; 40
    5598:	fc 01       	movw	r30, r24
    559a:	25 8b       	std	Z+21, r18	; 0x15
    559c:	36 8b       	std	Z+22, r19	; 0x16
    559e:	08 95       	ret

000055a0 <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    55a0:	cf 93       	push	r28
    55a2:	df 93       	push	r29
    55a4:	ec 01       	movw	r28, r24
  if ( u8g->font != font )
    55a6:	8c 81       	ldd	r24, Y+4	; 0x04
    55a8:	9d 81       	ldd	r25, Y+5	; 0x05
    55aa:	86 17       	cp	r24, r22
    55ac:	97 07       	cpc	r25, r23
    55ae:	49 f0       	breq	.+18     	; 0x55c2 <u8g_SetFont+0x22>
  {
    u8g->font = font;
    55b0:	6c 83       	std	Y+4, r22	; 0x04
    55b2:	7d 83       	std	Y+5, r23	; 0x05
    u8g_UpdateRefHeight(u8g);
    55b4:	ce 01       	movw	r24, r28
    55b6:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    55ba:	8f ec       	ldi	r24, 0xCF	; 207
    55bc:	98 e2       	ldi	r25, 0x28	; 40
    55be:	8d 8b       	std	Y+21, r24	; 0x15
    55c0:	9e 8b       	std	Y+22, r25	; 0x16
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    55c2:	df 91       	pop	r29
    55c4:	cf 91       	pop	r28
    55c6:	08 95       	ret

000055c8 <u8g_DrawLine>:
*/

#include "u8g.h"

void u8g_DrawLine(u8g_t *u8g, u8g_uint_t x1, u8g_uint_t y1, u8g_uint_t x2, u8g_uint_t y2)
{
    55c8:	af 92       	push	r10
    55ca:	bf 92       	push	r11
    55cc:	cf 92       	push	r12
    55ce:	df 92       	push	r13
    55d0:	ef 92       	push	r14
    55d2:	ff 92       	push	r15
    55d4:	0f 93       	push	r16
    55d6:	1f 93       	push	r17
    55d8:	cf 93       	push	r28
    55da:	df 93       	push	r29
    55dc:	ec 01       	movw	r28, r24
    55de:	16 2f       	mov	r17, r22
    55e0:	e4 2e       	mov	r14, r20
    55e2:	d2 2e       	mov	r13, r18

  uint8_t swapxy = 0;
  
  /* no BBX intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
    55e4:	26 17       	cp	r18, r22
    55e6:	18 f4       	brcc	.+6      	; 0x55ee <u8g_DrawLine+0x26>
    55e8:	c6 2e       	mov	r12, r22
    55ea:	c2 1a       	sub	r12, r18
    55ec:	02 c0       	rjmp	.+4      	; 0x55f2 <u8g_DrawLine+0x2a>
    55ee:	c2 2e       	mov	r12, r18
    55f0:	c6 1a       	sub	r12, r22
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    55f2:	0e 15       	cp	r16, r14
    55f4:	18 f4       	brcc	.+6      	; 0x55fc <u8g_DrawLine+0x34>
    55f6:	ae 2c       	mov	r10, r14
    55f8:	a0 1a       	sub	r10, r16
    55fa:	02 c0       	rjmp	.+4      	; 0x5600 <u8g_DrawLine+0x38>
    55fc:	a0 2e       	mov	r10, r16
    55fe:	ae 18       	sub	r10, r14

  if ( dy > dx ) 
    5600:	ca 14       	cp	r12, r10
    5602:	28 f0       	brcs	.+10     	; 0x560e <u8g_DrawLine+0x46>
    5604:	8a 2d       	mov	r24, r10
    5606:	ac 2c       	mov	r10, r12
    5608:	c8 2e       	mov	r12, r24
  u8g_uint_t x,y;
  u8g_uint_t dx, dy;
  u8g_int_t err;
  u8g_int_t ystep;

  uint8_t swapxy = 0;
    560a:	b1 2c       	mov	r11, r1
    560c:	08 c0       	rjmp	.+16     	; 0x561e <u8g_DrawLine+0x56>
    560e:	8d 2d       	mov	r24, r13
  if ( dy > dx ) 
  {
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
    5610:	d0 2e       	mov	r13, r16
    5612:	08 2f       	mov	r16, r24
    5614:	81 2f       	mov	r24, r17

  if ( dy > dx ) 
  {
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    5616:	1e 2d       	mov	r17, r14
    5618:	e8 2e       	mov	r14, r24
  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;

  if ( dy > dx ) 
  {
    swapxy = 1;
    561a:	bb 24       	eor	r11, r11
    561c:	b3 94       	inc	r11
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    561e:	d1 16       	cp	r13, r17
    5620:	30 f4       	brcc	.+12     	; 0x562e <u8g_DrawLine+0x66>
    5622:	8e 2d       	mov	r24, r14
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
    5624:	e0 2e       	mov	r14, r16
    5626:	08 2f       	mov	r16, r24
    5628:	81 2f       	mov	r24, r17
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    562a:	1d 2d       	mov	r17, r13
    562c:	d8 2e       	mov	r13, r24
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    562e:	fa 2c       	mov	r15, r10
    5630:	f6 94       	lsr	r15
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    5632:	e0 16       	cp	r14, r16
    5634:	10 f4       	brcc	.+4      	; 0x563a <u8g_DrawLine+0x72>
    5636:	01 e0       	ldi	r16, 0x01	; 1
    5638:	01 c0       	rjmp	.+2      	; 0x563c <u8g_DrawLine+0x74>
    563a:	0f ef       	ldi	r16, 0xFF	; 255
  y = y1;
  for( x = x1; x <= x2; x++ )
    563c:	d1 16       	cp	r13, r17
    563e:	a0 f0       	brcs	.+40     	; 0x5668 <u8g_DrawLine+0xa0>
  {
    if ( swapxy == 0 ) 
    5640:	b1 10       	cpse	r11, r1
    5642:	06 c0       	rjmp	.+12     	; 0x5650 <u8g_DrawLine+0x88>
      u8g_DrawPixel(u8g, x, y); 
    5644:	4e 2d       	mov	r20, r14
    5646:	61 2f       	mov	r22, r17
    5648:	ce 01       	movw	r24, r28
    564a:	0e 94 96 2c 	call	0x592c	; 0x592c <u8g_DrawPixel>
    564e:	05 c0       	rjmp	.+10     	; 0x565a <u8g_DrawLine+0x92>
    else 
      u8g_DrawPixel(u8g, y, x); 
    5650:	41 2f       	mov	r20, r17
    5652:	6e 2d       	mov	r22, r14
    5654:	ce 01       	movw	r24, r28
    5656:	0e 94 96 2c 	call	0x592c	; 0x592c <u8g_DrawPixel>
    err -= (uint8_t)dy;
    565a:	fc 18       	sub	r15, r12
    if ( err < 0 ) 
    565c:	12 f4       	brpl	.+4      	; 0x5662 <u8g_DrawLine+0x9a>
    {
      y += (u8g_uint_t)ystep;
    565e:	e0 0e       	add	r14, r16
      err += (u8g_uint_t)dx;
    5660:	fa 0c       	add	r15, r10
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
  y = y1;
  for( x = x1; x <= x2; x++ )
    5662:	1f 5f       	subi	r17, 0xFF	; 255
    5664:	d1 16       	cp	r13, r17
    5666:	60 f7       	brcc	.-40     	; 0x5640 <u8g_DrawLine+0x78>
    {
      y += (u8g_uint_t)ystep;
      err += (u8g_uint_t)dx;
    }
  }
}
    5668:	df 91       	pop	r29
    566a:	cf 91       	pop	r28
    566c:	1f 91       	pop	r17
    566e:	0f 91       	pop	r16
    5670:	ff 90       	pop	r15
    5672:	ef 90       	pop	r14
    5674:	df 90       	pop	r13
    5676:	cf 90       	pop	r12
    5678:	bf 90       	pop	r11
    567a:	af 90       	pop	r10
    567c:	08 95       	ret

0000567e <u8g_init_data>:
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
}

static void u8g_init_data(u8g_t *u8g)
{
    567e:	1f 93       	push	r17
    5680:	cf 93       	push	r28
    5682:	df 93       	push	r29
    5684:	ec 01       	movw	r28, r24
  u8g->font = NULL;
    5686:	1c 82       	std	Y+4, r1	; 0x04
    5688:	1d 82       	std	Y+5, r1	; 0x05
  u8g->cursor_font = NULL;
    568a:	1e 82       	std	Y+6, r1	; 0x06
    568c:	1f 82       	std	Y+7, r1	; 0x07
  u8g->cursor_bg_color = 0;
    568e:	19 86       	std	Y+9, r1	; 0x09
  u8g->cursor_fg_color = 1;
    5690:	81 e0       	ldi	r24, 0x01	; 1
    5692:	88 87       	std	Y+8, r24	; 0x08
  u8g->cursor_encoding = 34;
    5694:	82 e2       	ldi	r24, 0x22	; 34
    5696:	8a 87       	std	Y+10, r24	; 0x0a
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
    5698:	1e 86       	std	Y+14, r1	; 0x0e
    569a:	1f 86       	std	Y+15, r1	; 0x0f
    569c:	fe 01       	movw	r30, r28
    569e:	b3 96       	adiw	r30, 0x23	; 35

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
    56a0:	80 e0       	ldi	r24, 0x00	; 0
      u8g->pin_list[i] = U8G_PIN_NONE;
    56a2:	9f ef       	ldi	r25, 0xFF	; 255
    56a4:	91 93       	st	Z+, r25
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
    56a6:	8f 5f       	subi	r24, 0xFF	; 255
    56a8:	8e 30       	cpi	r24, 0x0E	; 14
    56aa:	e1 f7       	brne	.-8      	; 0x56a4 <u8g_init_data+0x26>
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    56ac:	11 e0       	ldi	r17, 0x01	; 1
    56ae:	18 a3       	std	Y+32, r17	; 0x20
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);

  u8g_SetFontPosBaseline(u8g);
    56b0:	ce 01       	movw	r24, r28
    56b2:	0e 94 c4 2a 	call	0x5588	; 0x5588 <u8g_SetFontPosBaseline>
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
    56b6:	1f 8b       	std	Y+23, r17	; 0x17
  u8g->font_ref_ascent = 0;
    56b8:	18 8e       	std	Y+24, r1	; 0x18
  u8g->font_ref_descent = 0;
    56ba:	19 8e       	std	Y+25, r1	; 0x19
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
    56bc:	80 e4       	ldi	r24, 0x40	; 64
    56be:	8a 8f       	std	Y+26, r24	; 0x1a
  u8g->line_spacing = 0;
    56c0:	1b 8e       	std	Y+27, r1	; 0x1b
  
  u8g->state_cb = u8g_state_dummy_cb;
    56c2:	8e e5       	ldi	r24, 0x5E	; 94
    56c4:	9f e2       	ldi	r25, 0x2F	; 47
    56c6:	89 ab       	std	Y+49, r24	; 0x31
    56c8:	9a ab       	std	Y+50, r25	; 0x32

}
    56ca:	df 91       	pop	r29
    56cc:	cf 91       	pop	r28
    56ce:	1f 91       	pop	r17
    56d0:	08 95       	ret

000056d2 <u8g_call_dev_fn>:
#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  return dev->dev_fn(u8g, dev, msg, arg); 
    56d2:	db 01       	movw	r26, r22
    56d4:	ed 91       	ld	r30, X+
    56d6:	fc 91       	ld	r31, X
    56d8:	09 95       	icall
}
    56da:	08 95       	ret

000056dc <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
    56dc:	0f 93       	push	r16
    56de:	1f 93       	push	r17
    56e0:	cf 93       	push	r28
    56e2:	df 93       	push	r29
    56e4:	ec 01       	movw	r28, r24
    56e6:	8b 01       	movw	r16, r22
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    56e8:	e9 a9       	ldd	r30, Y+49	; 0x31
    56ea:	fa a9       	ldd	r31, Y+50	; 0x32
    56ec:	82 e0       	ldi	r24, 0x02	; 2
    56ee:	09 95       	icall
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
    56f0:	20 e0       	ldi	r18, 0x00	; 0
    56f2:	30 e0       	ldi	r19, 0x00	; 0
    56f4:	4a e0       	ldi	r20, 0x0A	; 10
    56f6:	b8 01       	movw	r22, r16
    56f8:	ce 01       	movw	r24, r28
    56fa:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <u8g_call_dev_fn>
    56fe:	18 2f       	mov	r17, r24
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
    5700:	e9 a9       	ldd	r30, Y+49	; 0x31
    5702:	fa a9       	ldd	r31, Y+50	; 0x32
    5704:	83 e0       	ldi	r24, 0x03	; 3
    5706:	09 95       	icall
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    5708:	e9 a9       	ldd	r30, Y+49	; 0x31
    570a:	fa a9       	ldd	r31, Y+50	; 0x32
    570c:	80 e0       	ldi	r24, 0x00	; 0
    570e:	09 95       	icall
  return r;
}
    5710:	81 2f       	mov	r24, r17
    5712:	df 91       	pop	r29
    5714:	cf 91       	pop	r28
    5716:	1f 91       	pop	r17
    5718:	0f 91       	pop	r16
    571a:	08 95       	ret

0000571c <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
    571c:	0f 93       	push	r16
    571e:	1f 93       	push	r17
    5720:	cf 93       	push	r28
    5722:	df 93       	push	r29
    5724:	ec 01       	movw	r28, r24
    5726:	8b 01       	movw	r16, r22
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    5728:	e9 a9       	ldd	r30, Y+49	; 0x31
    572a:	fa a9       	ldd	r31, Y+50	; 0x32
    572c:	82 e0       	ldi	r24, 0x02	; 2
    572e:	09 95       	icall
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
    5730:	e9 a9       	ldd	r30, Y+49	; 0x31
    5732:	fa a9       	ldd	r31, Y+50	; 0x32
    5734:	81 e0       	ldi	r24, 0x01	; 1
    5736:	09 95       	icall
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
    5738:	20 e0       	ldi	r18, 0x00	; 0
    573a:	30 e0       	ldi	r19, 0x00	; 0
    573c:	44 e1       	ldi	r20, 0x14	; 20
    573e:	b8 01       	movw	r22, r16
    5740:	ce 01       	movw	r24, r28
    5742:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    5746:	9e 01       	movw	r18, r28
    5748:	2d 5c       	subi	r18, 0xCD	; 205
    574a:	3f 4f       	sbci	r19, 0xFF	; 255
    574c:	47 e1       	ldi	r20, 0x17	; 23
    574e:	b8 01       	movw	r22, r16
    5750:	ce 01       	movw	r24, r28
    5752:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    5756:	e9 a9       	ldd	r30, Y+49	; 0x31
    5758:	fa a9       	ldd	r31, Y+50	; 0x32
    575a:	80 e0       	ldi	r24, 0x00	; 0
    575c:	09 95       	icall
}
    575e:	df 91       	pop	r29
    5760:	cf 91       	pop	r28
    5762:	1f 91       	pop	r17
    5764:	0f 91       	pop	r16
    5766:	08 95       	ret

00005768 <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
    5768:	ff 92       	push	r15
    576a:	0f 93       	push	r16
    576c:	1f 93       	push	r17
    576e:	cf 93       	push	r28
    5770:	df 93       	push	r29
    5772:	ec 01       	movw	r28, r24
    5774:	8b 01       	movw	r16, r22
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    5776:	e9 a9       	ldd	r30, Y+49	; 0x31
    5778:	fa a9       	ldd	r31, Y+50	; 0x32
    577a:	82 e0       	ldi	r24, 0x02	; 2
    577c:	09 95       	icall
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
    577e:	e9 a9       	ldd	r30, Y+49	; 0x31
    5780:	fa a9       	ldd	r31, Y+50	; 0x32
    5782:	81 e0       	ldi	r24, 0x01	; 1
    5784:	09 95       	icall
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
    5786:	20 e0       	ldi	r18, 0x00	; 0
    5788:	30 e0       	ldi	r19, 0x00	; 0
    578a:	45 e1       	ldi	r20, 0x15	; 21
    578c:	b8 01       	movw	r22, r16
    578e:	ce 01       	movw	r24, r28
    5790:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <u8g_call_dev_fn>
    5794:	f8 2e       	mov	r15, r24
  if ( r != 0 )
    5796:	88 23       	and	r24, r24
    5798:	41 f0       	breq	.+16     	; 0x57aa <u8g_NextPageLL+0x42>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    579a:	9e 01       	movw	r18, r28
    579c:	2d 5c       	subi	r18, 0xCD	; 205
    579e:	3f 4f       	sbci	r19, 0xFF	; 255
    57a0:	47 e1       	ldi	r20, 0x17	; 23
    57a2:	b8 01       	movw	r22, r16
    57a4:	ce 01       	movw	r24, r28
    57a6:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    57aa:	e9 a9       	ldd	r30, Y+49	; 0x31
    57ac:	fa a9       	ldd	r31, Y+50	; 0x32
    57ae:	80 e0       	ldi	r24, 0x00	; 0
    57b0:	09 95       	icall
  return r;
}
    57b2:	8f 2d       	mov	r24, r15
    57b4:	df 91       	pop	r29
    57b6:	cf 91       	pop	r28
    57b8:	1f 91       	pop	r17
    57ba:	0f 91       	pop	r16
    57bc:	ff 90       	pop	r15
    57be:	08 95       	ret

000057c0 <u8g_DrawPixelLL>:
}

void u8g_DrawPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
    57c0:	fc 01       	movw	r30, r24
    57c2:	44 8f       	std	Z+28, r20	; 0x1c
  arg->y = y;
    57c4:	25 8f       	std	Z+29, r18	; 0x1d
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_CONTRAST, &contrast);
}

void u8g_DrawPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    57c6:	9c 01       	movw	r18, r24
    57c8:	24 5e       	subi	r18, 0xE4	; 228
    57ca:	3f 4f       	sbci	r19, 0xFF	; 255
  arg->x = x;
  arg->y = y;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
    57cc:	42 e3       	ldi	r20, 0x32	; 50
    57ce:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <u8g_call_dev_fn>
    57d2:	08 95       	ret

000057d4 <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
    57d4:	cf 93       	push	r28
    57d6:	df 93       	push	r29
    57d8:	1f 92       	push	r1
    57da:	cd b7       	in	r28, 0x3d	; 61
    57dc:	de b7       	in	r29, 0x3e	; 62
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
    57de:	9e 01       	movw	r18, r28
    57e0:	2f 5f       	subi	r18, 0xFF	; 255
    57e2:	3f 4f       	sbci	r19, 0xFF	; 255
    57e4:	46 e4       	ldi	r20, 0x46	; 70
    57e6:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <u8g_call_dev_fn>
  return r;
}
    57ea:	89 81       	ldd	r24, Y+1	; 0x01
    57ec:	0f 90       	pop	r0
    57ee:	df 91       	pop	r29
    57f0:	cf 91       	pop	r28
    57f2:	08 95       	ret

000057f4 <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
    57f4:	cf 93       	push	r28
    57f6:	df 93       	push	r29
    57f8:	1f 92       	push	r1
    57fa:	cd b7       	in	r28, 0x3d	; 61
    57fc:	de b7       	in	r29, 0x3e	; 62
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
    57fe:	9e 01       	movw	r18, r28
    5800:	2f 5f       	subi	r18, 0xFF	; 255
    5802:	3f 4f       	sbci	r19, 0xFF	; 255
    5804:	47 e4       	ldi	r20, 0x47	; 71
    5806:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <u8g_call_dev_fn>
  return r;
}
    580a:	89 81       	ldd	r24, Y+1	; 0x01
    580c:	0f 90       	pop	r0
    580e:	df 91       	pop	r29
    5810:	cf 91       	pop	r28
    5812:	08 95       	ret

00005814 <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
    5814:	20 e0       	ldi	r18, 0x00	; 0
    5816:	30 e0       	ldi	r19, 0x00	; 0
    5818:	48 e4       	ldi	r20, 0x48	; 72
    581a:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <u8g_call_dev_fn>
}
    581e:	08 95       	ret

00005820 <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
    5820:	cf 93       	push	r28
    5822:	df 93       	push	r29
    5824:	ec 01       	movw	r28, r24
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
    5826:	6a 81       	ldd	r22, Y+2	; 0x02
    5828:	7b 81       	ldd	r23, Y+3	; 0x03
    582a:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <u8g_GetWidthLL>
    582e:	88 83       	st	Y, r24
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
    5830:	6a 81       	ldd	r22, Y+2	; 0x02
    5832:	7b 81       	ldd	r23, Y+3	; 0x03
    5834:	ce 01       	movw	r24, r28
    5836:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <u8g_GetHeightLL>
    583a:	89 83       	std	Y+1, r24	; 0x01
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
    583c:	6a 81       	ldd	r22, Y+2	; 0x02
    583e:	7b 81       	ldd	r23, Y+3	; 0x03
    5840:	ce 01       	movw	r24, r28
    5842:	0e 94 0a 2c 	call	0x5814	; 0x5814 <u8g_GetModeLL>
    5846:	8b 87       	std	Y+11, r24	; 0x0b
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    5848:	9e 01       	movw	r18, r28
    584a:	2d 5c       	subi	r18, 0xCD	; 205
    584c:	3f 4f       	sbci	r19, 0xFF	; 255
    584e:	6a 81       	ldd	r22, Y+2	; 0x02
    5850:	7b 81       	ldd	r23, Y+3	; 0x03
    5852:	47 e1       	ldi	r20, 0x17	; 23
    5854:	ce 01       	movw	r24, r28
    5856:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <u8g_call_dev_fn>
}
    585a:	df 91       	pop	r29
    585c:	cf 91       	pop	r28
    585e:	08 95       	ret

00005860 <u8g_Begin>:
  u8g->state_cb = u8g_state_dummy_cb;

}

uint8_t u8g_Begin(u8g_t *u8g)
{
    5860:	cf 93       	push	r28
    5862:	df 93       	push	r29
    5864:	ec 01       	movw	r28, r24
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
    5866:	6a 81       	ldd	r22, Y+2	; 0x02
    5868:	7b 81       	ldd	r23, Y+3	; 0x03
    586a:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <u8g_InitLL>
    586e:	88 23       	and	r24, r24
    5870:	29 f0       	breq	.+10     	; 0x587c <u8g_Begin+0x1c>
    return 0;
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
    5872:	ce 01       	movw	r24, r28
    5874:	0e 94 10 2c 	call	0x5820	; 0x5820 <u8g_UpdateDimension>
  return 1;
    5878:	81 e0       	ldi	r24, 0x01	; 1
    587a:	01 c0       	rjmp	.+2      	; 0x587e <u8g_Begin+0x1e>

uint8_t u8g_Begin(u8g_t *u8g)
{
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
    return 0;
    587c:	80 e0       	ldi	r24, 0x00	; 0
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
  return 1;
}
    587e:	df 91       	pop	r29
    5880:	cf 91       	pop	r28
    5882:	08 95       	ret

00005884 <u8g_Init8Bit>:
  return u8g_Begin(u8g);
}

uint8_t u8g_Init8Bit(u8g_t *u8g, u8g_dev_t *dev, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7, 
  uint8_t en, uint8_t cs1, uint8_t cs2, uint8_t di, uint8_t rw, uint8_t reset)
{
    5884:	4f 92       	push	r4
    5886:	5f 92       	push	r5
    5888:	6f 92       	push	r6
    588a:	7f 92       	push	r7
    588c:	8f 92       	push	r8
    588e:	af 92       	push	r10
    5890:	cf 92       	push	r12
    5892:	ef 92       	push	r14
    5894:	ff 92       	push	r15
    5896:	0f 93       	push	r16
    5898:	1f 93       	push	r17
    589a:	cf 93       	push	r28
    589c:	df 93       	push	r29
    589e:	cd b7       	in	r28, 0x3d	; 61
    58a0:	de b7       	in	r29, 0x3e	; 62
    58a2:	3c 01       	movw	r6, r24
    58a4:	2b 01       	movw	r4, r22
    58a6:	f4 2e       	mov	r15, r20
    58a8:	12 2f       	mov	r17, r18
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
    58aa:	0e 94 3f 2b 	call	0x567e	; 0x567e <u8g_init_data>
  u8g->dev = dev;
    58ae:	f3 01       	movw	r30, r6
    58b0:	42 82       	std	Z+2, r4	; 0x02
    58b2:	53 82       	std	Z+3, r5	; 0x03
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
    58b4:	f0 a6       	std	Z+40, r15	; 0x28
  u8g->pin_list[U8G_PI_D1] = d1;
    58b6:	11 a7       	std	Z+41, r17	; 0x29
  u8g->pin_list[U8G_PI_D2] = d2;
    58b8:	02 a7       	std	Z+42, r16	; 0x2a
  u8g->pin_list[U8G_PI_D3] = d3;
    58ba:	e3 a6       	std	Z+43, r14	; 0x2b
  u8g->pin_list[U8G_PI_D4] = d4;
    58bc:	c4 a6       	std	Z+44, r12	; 0x2c
  u8g->pin_list[U8G_PI_D5] = d5;
    58be:	a5 a6       	std	Z+45, r10	; 0x2d
  u8g->pin_list[U8G_PI_D6] = d6;
    58c0:	86 a6       	std	Z+46, r8	; 0x2e
  u8g->pin_list[U8G_PI_D7] = d7;
    58c2:	88 89       	ldd	r24, Y+16	; 0x10
    58c4:	87 a7       	std	Z+47, r24	; 0x2f

  u8g->pin_list[U8G_PI_EN] = en;
    58c6:	89 89       	ldd	r24, Y+17	; 0x11
    58c8:	87 a3       	std	Z+39, r24	; 0x27
  u8g->pin_list[U8G_PI_CS1] = cs1;
    58ca:	8a 89       	ldd	r24, Y+18	; 0x12
    58cc:	85 a3       	std	Z+37, r24	; 0x25
  u8g->pin_list[U8G_PI_CS2] = cs2;
    58ce:	8b 89       	ldd	r24, Y+19	; 0x13
    58d0:	86 a3       	std	Z+38, r24	; 0x26
  u8g->pin_list[U8G_PI_DI] = di;
    58d2:	8c 89       	ldd	r24, Y+20	; 0x14
    58d4:	84 a3       	std	Z+36, r24	; 0x24
  u8g->pin_list[U8G_PI_RW] = rw;
    58d6:	8d 89       	ldd	r24, Y+21	; 0x15
    58d8:	80 ab       	std	Z+48, r24	; 0x30
  u8g->pin_list[U8G_PI_RESET] = reset;
    58da:	8e 89       	ldd	r24, Y+22	; 0x16
    58dc:	83 a3       	std	Z+35, r24	; 0x23
  
  return u8g_Begin(u8g);
    58de:	c3 01       	movw	r24, r6
    58e0:	0e 94 30 2c 	call	0x5860	; 0x5860 <u8g_Begin>
}
    58e4:	df 91       	pop	r29
    58e6:	cf 91       	pop	r28
    58e8:	1f 91       	pop	r17
    58ea:	0f 91       	pop	r16
    58ec:	ff 90       	pop	r15
    58ee:	ef 90       	pop	r14
    58f0:	cf 90       	pop	r12
    58f2:	af 90       	pop	r10
    58f4:	8f 90       	pop	r8
    58f6:	7f 90       	pop	r7
    58f8:	6f 90       	pop	r6
    58fa:	5f 90       	pop	r5
    58fc:	4f 90       	pop	r4
    58fe:	08 95       	ret

00005900 <u8g_FirstPage>:
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
  u8g_FirstPageLL(u8g, u8g->dev);
    5900:	fc 01       	movw	r30, r24
    5902:	62 81       	ldd	r22, Z+2	; 0x02
    5904:	73 81       	ldd	r23, Z+3	; 0x03
    5906:	0e 94 8e 2b 	call	0x571c	; 0x571c <u8g_FirstPageLL>
    590a:	08 95       	ret

0000590c <u8g_NextPage>:
}

uint8_t u8g_NextPage(u8g_t *u8g)
{
    590c:	cf 93       	push	r28
    590e:	df 93       	push	r29
    5910:	ec 01       	movw	r28, r24
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
    5912:	ee 85       	ldd	r30, Y+14	; 0x0e
    5914:	ff 85       	ldd	r31, Y+15	; 0x0f
    5916:	30 97       	sbiw	r30, 0x00	; 0
    5918:	09 f0       	breq	.+2      	; 0x591c <u8g_NextPage+0x10>
  {
    u8g->cursor_fn(u8g);
    591a:	09 95       	icall
  }
  return u8g_NextPageLL(u8g, u8g->dev);
    591c:	6a 81       	ldd	r22, Y+2	; 0x02
    591e:	7b 81       	ldd	r23, Y+3	; 0x03
    5920:	ce 01       	movw	r24, r28
    5922:	0e 94 b4 2b 	call	0x5768	; 0x5768 <u8g_NextPageLL>
}
    5926:	df 91       	pop	r29
    5928:	cf 91       	pop	r28
    592a:	08 95       	ret

0000592c <u8g_DrawPixel>:
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SLEEP_OFF, NULL);
}


void u8g_DrawPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y)
{
    592c:	36 2f       	mov	r19, r22
    592e:	24 2f       	mov	r18, r20
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
    5930:	fc 01       	movw	r30, r24
    5932:	62 81       	ldd	r22, Z+2	; 0x02
    5934:	73 81       	ldd	r23, Z+3	; 0x03
    5936:	43 2f       	mov	r20, r19
    5938:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <u8g_DrawPixelLL>
    593c:	08 95       	ret

0000593e <u8g_Draw8Pixel>:
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
    593e:	0f 93       	push	r16
    5940:	fc 01       	movw	r30, r24
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
    5942:	82 81       	ldd	r24, Z+2	; 0x02
    5944:	93 81       	ldd	r25, Z+3	; 0x03
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
    5946:	64 8f       	std	Z+28, r22	; 0x1c
  arg->y = y;
    5948:	45 8f       	std	Z+29, r20	; 0x1d
  arg->dir = dir;
    594a:	27 8f       	std	Z+31, r18	; 0x1f
  arg->pixel = pixel;
    594c:	06 8f       	std	Z+30, r16	; 0x1e
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    594e:	9f 01       	movw	r18, r30
    5950:	24 5e       	subi	r18, 0xE4	; 228
    5952:	3f 4f       	sbci	r19, 0xFF	; 255
  arg->x = x;
  arg->y = y;
  arg->dir = dir;
  arg->pixel = pixel;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
    5954:	4b e3       	ldi	r20, 0x3B	; 59
    5956:	bc 01       	movw	r22, r24
    5958:	cf 01       	movw	r24, r30
    595a:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <u8g_call_dev_fn>
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
    595e:	0f 91       	pop	r16
    5960:	08 95       	ret

00005962 <u8g_GetDefaultForegroundColor>:
}

uint8_t u8g_GetDefaultForegroundColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
    5962:	fc 01       	movw	r30, r24
    5964:	83 85       	ldd	r24, Z+11	; 0x0b
  if ( mode == U8G_MODE_R3G3B2 ) 
    5966:	88 32       	cpi	r24, 0x28	; 40
    5968:	21 f0       	breq	.+8      	; 0x5972 <u8g_GetDefaultForegroundColor+0x10>
    return 255;     /* white */
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
    596a:	82 30       	cpi	r24, 0x02	; 2
    596c:	21 f4       	brne	.+8      	; 0x5976 <u8g_GetDefaultForegroundColor+0x14>
    return 3;         /* max intensity */
    596e:	83 e0       	ldi	r24, 0x03	; 3
    5970:	08 95       	ret
uint8_t u8g_GetDefaultForegroundColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
    return 255;     /* white */
    5972:	8f ef       	ldi	r24, 0xFF	; 255
    5974:	08 95       	ret
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
    return 3;         /* max intensity */
  else /* if ( u8g.getMode() == U8G_MODE_BW ) */
    return 1;         /* pixel on */
    5976:	81 e0       	ldi	r24, 0x01	; 1
  return 1;
}
    5978:	08 95       	ret

0000597a <u8g_SetDefaultForegroundColor>:

void u8g_SetDefaultForegroundColor(u8g_t *u8g)
{
    597a:	cf 93       	push	r28
    597c:	df 93       	push	r29
    597e:	ec 01       	movw	r28, r24
  if ( u8g->mode == U8G_MODE_HICOLOR )
    5980:	8b 85       	ldd	r24, Y+11	; 0x0b
    5982:	80 33       	cpi	r24, 0x30	; 48
    5984:	21 f4       	brne	.+8      	; 0x598e <u8g_SetDefaultForegroundColor+0x14>
  {
    u8g->arg_pixel.color = 0x0ff;
    5986:	8f ef       	ldi	r24, 0xFF	; 255
    5988:	88 a3       	std	Y+32, r24	; 0x20
    u8g->arg_pixel.hi_color = 0x0ff;
    598a:	89 a3       	std	Y+33, r24	; 0x21
    598c:	04 c0       	rjmp	.+8      	; 0x5996 <u8g_SetDefaultForegroundColor+0x1c>
  }
  else
  {
    u8g_SetColorIndex(u8g, u8g_GetDefaultForegroundColor(u8g));
    598e:	ce 01       	movw	r24, r28
    5990:	0e 94 b1 2c 	call	0x5962	; 0x5962 <u8g_GetDefaultForegroundColor>
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    5994:	88 a3       	std	Y+32, r24	; 0x20
  }
  else
  {
    u8g_SetColorIndex(u8g, u8g_GetDefaultForegroundColor(u8g));
  }
}
    5996:	df 91       	pop	r29
    5998:	cf 91       	pop	r28
    599a:	08 95       	ret

0000599c <u8g_SetDefaultBackgroundColor>:
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    599c:	fc 01       	movw	r30, r24
    599e:	10 a2       	std	Z+32, r1	; 0x20
    59a0:	08 95       	ret

000059a2 <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
    59a2:	fc 01       	movw	r30, r24
  p->page_y0 = 0;
    59a4:	12 82       	std	Z+2, r1	; 0x02
  p->page_y1 = p->page_height;
  p->page_y1--;
    59a6:	80 81       	ld	r24, Z
    59a8:	81 50       	subi	r24, 0x01	; 1
    59aa:	83 83       	std	Z+3, r24	; 0x03
  p->page = 0;
    59ac:	14 82       	std	Z+4, r1	; 0x04
    59ae:	08 95       	ret

000059b0 <u8g_page_Next>:
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    59b0:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    59b2:	20 81       	ld	r18, Z
    59b4:	82 81       	ldd	r24, Z+2	; 0x02
    59b6:	82 0f       	add	r24, r18
    59b8:	82 83       	std	Z+2, r24	; 0x02
  if ( p->page_y0 >= p->total_height )
    59ba:	91 81       	ldd	r25, Z+1	; 0x01
    59bc:	89 17       	cp	r24, r25
    59be:	60 f4       	brcc	.+24     	; 0x59d8 <u8g_page_Next+0x28>
    return 0;
  p->page++;
    59c0:	84 81       	ldd	r24, Z+4	; 0x04
    59c2:	8f 5f       	subi	r24, 0xFF	; 255
    59c4:	84 83       	std	Z+4, r24	; 0x04
  y1 = p->page_y1;
    59c6:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    59c8:	28 0f       	add	r18, r24
  if ( y1 >= p->total_height )
    59ca:	29 17       	cp	r18, r25
    59cc:	10 f0       	brcs	.+4      	; 0x59d2 <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    59ce:	2f ef       	ldi	r18, 0xFF	; 255
    59d0:	29 0f       	add	r18, r25
  }
  p->page_y1 = y1;
    59d2:	23 83       	std	Z+3, r18	; 0x03
  
  return 1;
    59d4:	81 e0       	ldi	r24, 0x01	; 1
    59d6:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    59d8:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    59da:	08 95       	ret

000059dc <u8g_pb_Clear>:

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
    59dc:	dc 01       	movw	r26, r24
    59de:	16 96       	adiw	r26, 0x06	; 6
    59e0:	ed 91       	ld	r30, X+
    59e2:	fc 91       	ld	r31, X
    59e4:	17 97       	sbiw	r26, 0x07	; 7
  uint8_t *end_ptr = ptr;
  end_ptr += b->width;
    59e6:	15 96       	adiw	r26, 0x05	; 5
    59e8:	8c 91       	ld	r24, X
    59ea:	9f 01       	movw	r18, r30
    59ec:	28 0f       	add	r18, r24
    59ee:	31 1d       	adc	r19, r1
    59f0:	c9 01       	movw	r24, r18
  do
  {
    *ptr++ = 0;
    59f2:	11 92       	st	Z+, r1
  } while( ptr != end_ptr );
    59f4:	e8 17       	cp	r30, r24
    59f6:	f9 07       	cpc	r31, r25
    59f8:	e1 f7       	brne	.-8      	; 0x59f2 <u8g_pb_Clear+0x16>
}
    59fa:	08 95       	ret

000059fc <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
    59fc:	fc 01       	movw	r30, r24
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
    59fe:	91 e0       	ldi	r25, 0x01	; 1
    5a00:	83 81       	ldd	r24, Z+3	; 0x03
    5a02:	86 17       	cp	r24, r22
    5a04:	08 f4       	brcc	.+2      	; 0x5a08 <u8g_pb_IsYIntersection+0xc>
    5a06:	90 e0       	ldi	r25, 0x00	; 0
  c2 = v1 >= pb->p.page_y0;
  c3 = v0 > v1;
    5a08:	21 e0       	ldi	r18, 0x01	; 1
    5a0a:	46 17       	cp	r20, r22
    5a0c:	08 f0       	brcs	.+2      	; 0x5a10 <u8g_pb_IsYIntersection+0x14>
    5a0e:	20 e0       	ldi	r18, 0x00	; 0
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
    5a10:	32 2f       	mov	r19, r18
    5a12:	39 2b       	or	r19, r25

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
  c2 = v1 >= pb->p.page_y0;
    5a14:	81 e0       	ldi	r24, 0x01	; 1
    5a16:	52 81       	ldd	r21, Z+2	; 0x02
    5a18:	45 17       	cp	r20, r21
    5a1a:	08 f4       	brcc	.+2      	; 0x5a1e <u8g_pb_IsYIntersection+0x22>
    5a1c:	80 e0       	ldi	r24, 0x00	; 0
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
    5a1e:	83 23       	and	r24, r19
  */
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
    5a20:	92 23       	and	r25, r18
  c1 |= c2;
  c1 |= c3;
  return c1 & 1;
}
    5a22:	89 2b       	or	r24, r25
    5a24:	08 95       	ret

00005a26 <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    5a26:	dc 01       	movw	r26, r24
    5a28:	fb 01       	movw	r30, r22
  box->x0 = 0;
    5a2a:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    5a2c:	12 96       	adiw	r26, 0x02	; 2
    5a2e:	8c 91       	ld	r24, X
    5a30:	12 97       	sbiw	r26, 0x02	; 2
    5a32:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    5a34:	15 96       	adiw	r26, 0x05	; 5
    5a36:	8c 91       	ld	r24, X
    5a38:	15 97       	sbiw	r26, 0x05	; 5
    5a3a:	81 50       	subi	r24, 0x01	; 1
    5a3c:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    5a3e:	13 96       	adiw	r26, 0x03	; 3
    5a40:	8c 91       	ld	r24, X
    5a42:	83 83       	std	Z+3, r24	; 0x03
    5a44:	08 95       	ret

00005a46 <u8g_pb_Is8PixelVisible>:
}


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    5a46:	fb 01       	movw	r30, r22
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    5a48:	61 81       	ldd	r22, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    5a4a:	23 81       	ldd	r18, Z+3	; 0x03
    5a4c:	21 30       	cpi	r18, 0x01	; 1
    5a4e:	19 f0       	breq	.+6      	; 0x5a56 <u8g_pb_Is8PixelVisible+0x10>
    5a50:	23 30       	cpi	r18, 0x03	; 3
    5a52:	21 f0       	breq	.+8      	; 0x5a5c <u8g_pb_Is8PixelVisible+0x16>
    5a54:	06 c0       	rjmp	.+12     	; 0x5a62 <u8g_pb_Is8PixelVisible+0x1c>
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    5a56:	48 e0       	ldi	r20, 0x08	; 8
    5a58:	46 0f       	add	r20, r22
      break;
    5a5a:	04 c0       	rjmp	.+8      	; 0x5a64 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    5a5c:	46 2f       	mov	r20, r22
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    5a5e:	68 50       	subi	r22, 0x08	; 8
      break;
    5a60:	01 c0       	rjmp	.+2      	; 0x5a64 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    5a62:	46 2f       	mov	r20, r22
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    5a64:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <u8g_pb_IsYIntersection>
}
    5a68:	08 95       	ret

00005a6a <u8g_pb8v1_set_pixel>:
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
  register uint8_t mask;
  uint8_t *ptr = b->buf;
    5a6a:	dc 01       	movw	r26, r24
    5a6c:	16 96       	adiw	r26, 0x06	; 6
    5a6e:	ed 91       	ld	r30, X+
    5a70:	fc 91       	ld	r31, X
    5a72:	17 97       	sbiw	r26, 0x07	; 7
  
  y -= b->p.page_y0;
    5a74:	12 96       	adiw	r26, 0x02	; 2
    5a76:	8c 91       	ld	r24, X
    5a78:	48 1b       	sub	r20, r24
  mask = 1;
  y &= 0x07;
    5a7a:	47 70       	andi	r20, 0x07	; 7
  mask <<= y;
    5a7c:	81 e0       	ldi	r24, 0x01	; 1
    5a7e:	90 e0       	ldi	r25, 0x00	; 0
    5a80:	dc 01       	movw	r26, r24
    5a82:	02 c0       	rjmp	.+4      	; 0x5a88 <u8g_pb8v1_set_pixel+0x1e>
    5a84:	aa 0f       	add	r26, r26
    5a86:	bb 1f       	adc	r27, r27
    5a88:	4a 95       	dec	r20
    5a8a:	e2 f7       	brpl	.-8      	; 0x5a84 <u8g_pb8v1_set_pixel+0x1a>
    5a8c:	ad 01       	movw	r20, r26
  ptr += x;
    5a8e:	e6 0f       	add	r30, r22
    5a90:	f1 1d       	adc	r31, r1
  if ( color_index )
    5a92:	22 23       	and	r18, r18
    5a94:	21 f0       	breq	.+8      	; 0x5a9e <u8g_pb8v1_set_pixel+0x34>
  {
    *ptr |= mask;
    5a96:	80 81       	ld	r24, Z
    5a98:	48 2b       	or	r20, r24
    5a9a:	40 83       	st	Z, r20
    5a9c:	08 95       	ret
  }
  else
  {
    mask ^=0xff;
    5a9e:	40 95       	com	r20
    *ptr &= mask;
    5aa0:	80 81       	ld	r24, Z
    5aa2:	48 23       	and	r20, r24
    5aa4:	40 83       	st	Z, r20
    5aa6:	08 95       	ret

00005aa8 <u8g_pb8v1_SetPixel>:
}


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
  if ( arg_pixel->y < b->p.page_y0 )
    5aa8:	fb 01       	movw	r30, r22
    5aaa:	41 81       	ldd	r20, Z+1	; 0x01
    5aac:	fc 01       	movw	r30, r24
    5aae:	22 81       	ldd	r18, Z+2	; 0x02
    5ab0:	42 17       	cp	r20, r18
    5ab2:	70 f0       	brcs	.+28     	; 0x5ad0 <u8g_pb8v1_SetPixel+0x28>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
    5ab4:	23 81       	ldd	r18, Z+3	; 0x03
    5ab6:	24 17       	cp	r18, r20
    5ab8:	58 f0       	brcs	.+22     	; 0x5ad0 <u8g_pb8v1_SetPixel+0x28>
    return;
  if ( arg_pixel->x >= b->width )
    5aba:	fb 01       	movw	r30, r22
    5abc:	30 81       	ld	r19, Z
    5abe:	fc 01       	movw	r30, r24
    5ac0:	25 81       	ldd	r18, Z+5	; 0x05
    5ac2:	32 17       	cp	r19, r18
    5ac4:	28 f4       	brcc	.+10     	; 0x5ad0 <u8g_pb8v1_SetPixel+0x28>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
    5ac6:	fb 01       	movw	r30, r22
    5ac8:	24 81       	ldd	r18, Z+4	; 0x04
    5aca:	63 2f       	mov	r22, r19
    5acc:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <u8g_pb8v1_set_pixel>
    5ad0:	08 95       	ret

00005ad2 <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    5ad2:	df 92       	push	r13
    5ad4:	ef 92       	push	r14
    5ad6:	ff 92       	push	r15
    5ad8:	0f 93       	push	r16
    5ada:	1f 93       	push	r17
    5adc:	cf 93       	push	r28
    5ade:	df 93       	push	r29
    5ae0:	8c 01       	movw	r16, r24
    5ae2:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    5ae4:	fa 80       	ldd	r15, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    5ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    5ae8:	81 30       	cpi	r24, 0x01	; 1
    5aea:	41 f0       	breq	.+16     	; 0x5afc <u8g_pb8v1_Set8PixelOpt2+0x2a>
    5aec:	98 f0       	brcs	.+38     	; 0x5b14 <u8g_pb8v1_Set8PixelOpt2+0x42>
    5aee:	82 30       	cpi	r24, 0x02	; 2
    5af0:	49 f0       	breq	.+18     	; 0x5b04 <u8g_pb8v1_Set8PixelOpt2+0x32>
    5af2:	83 30       	cpi	r24, 0x03	; 3
    5af4:	59 f0       	breq	.+22     	; 0x5b0c <u8g_pb8v1_Set8PixelOpt2+0x3a>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    5af6:	d1 2c       	mov	r13, r1


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    5af8:	e1 2c       	mov	r14, r1
    5afa:	0f c0       	rjmp	.+30     	; 0x5b1a <u8g_pb8v1_Set8PixelOpt2+0x48>
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    5afc:	dd 24       	eor	r13, r13
    5afe:	d3 94       	inc	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    5b00:	e1 2c       	mov	r14, r1
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    5b02:	0b c0       	rjmp	.+22     	; 0x5b1a <u8g_pb8v1_Set8PixelOpt2+0x48>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    5b04:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    5b06:	ee 24       	eor	r14, r14
    5b08:	ea 94       	dec	r14
    5b0a:	07 c0       	rjmp	.+14     	; 0x5b1a <u8g_pb8v1_Set8PixelOpt2+0x48>
    case 3: dy--; break;
    5b0c:	dd 24       	eor	r13, r13
    5b0e:	da 94       	dec	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    5b10:	e1 2c       	mov	r14, r1
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    5b12:	03 c0       	rjmp	.+6      	; 0x5b1a <u8g_pb8v1_Set8PixelOpt2+0x48>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    5b14:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    5b16:	ee 24       	eor	r14, r14
    5b18:	e3 94       	inc	r14
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    5b1a:	ff 20       	and	r15, r15
    5b1c:	24 f4       	brge	.+8      	; 0x5b26 <u8g_pb8v1_Set8PixelOpt2+0x54>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    5b1e:	be 01       	movw	r22, r28
    5b20:	c8 01       	movw	r24, r16
    5b22:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
    5b26:	88 81       	ld	r24, Y
    5b28:	8e 0d       	add	r24, r14
    5b2a:	88 83       	st	Y, r24
    arg_pixel->y += dy;
    5b2c:	89 81       	ldd	r24, Y+1	; 0x01
    5b2e:	8d 0d       	add	r24, r13
    5b30:	89 83       	std	Y+1, r24	; 0x01
    pixel <<= 1;
    5b32:	ff 0c       	add	r15, r15
  } while( pixel != 0  );
    5b34:	91 f7       	brne	.-28     	; 0x5b1a <u8g_pb8v1_Set8PixelOpt2+0x48>
  
}
    5b36:	df 91       	pop	r29
    5b38:	cf 91       	pop	r28
    5b3a:	1f 91       	pop	r17
    5b3c:	0f 91       	pop	r16
    5b3e:	ff 90       	pop	r15
    5b40:	ef 90       	pop	r14
    5b42:	df 90       	pop	r13
    5b44:	08 95       	ret

00005b46 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    5b46:	0f 93       	push	r16
    5b48:	1f 93       	push	r17
    5b4a:	cf 93       	push	r28
    5b4c:	df 93       	push	r29
    5b4e:	e9 01       	movw	r28, r18
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    5b50:	fb 01       	movw	r30, r22
    5b52:	02 81       	ldd	r16, Z+2	; 0x02
    5b54:	13 81       	ldd	r17, Z+3	; 0x03
  switch(msg)
    5b56:	50 e0       	ldi	r21, 0x00	; 0
    5b58:	fa 01       	movw	r30, r20
    5b5a:	74 97       	sbiw	r30, 0x14	; 20
    5b5c:	e4 33       	cpi	r30, 0x34	; 52
    5b5e:	f1 05       	cpc	r31, r1
    5b60:	c0 f5       	brcc	.+112    	; 0x5bd2 <u8g_dev_pb8v1_base_fn+0x8c>
    5b62:	ef 5f       	subi	r30, 0xFF	; 255
    5b64:	fe 4f       	sbci	r31, 0xFE	; 254
    5b66:	0c 94 f6 3f 	jmp	0x7fec	; 0x7fec <__tablejump2__>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    5b6a:	b9 01       	movw	r22, r18
    5b6c:	c8 01       	movw	r24, r16
    5b6e:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <u8g_pb_Is8PixelVisible>
    5b72:	88 23       	and	r24, r24
    5b74:	81 f1       	breq	.+96     	; 0x5bd6 <u8g_dev_pb8v1_base_fn+0x90>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    5b76:	be 01       	movw	r22, r28
    5b78:	c8 01       	movw	r24, r16
    5b7a:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <u8g_pb8v1_Set8PixelOpt2>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    5b7e:	81 e0       	ldi	r24, 0x01	; 1
    5b80:	2d c0       	rjmp	.+90     	; 0x5bdc <u8g_dev_pb8v1_base_fn+0x96>
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    5b82:	b9 01       	movw	r22, r18
    5b84:	c8 01       	movw	r24, r16
    5b86:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <u8g_pb8v1_SetPixel>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    5b8a:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    5b8c:	27 c0       	rjmp	.+78     	; 0x5bdc <u8g_dev_pb8v1_base_fn+0x96>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    5b8e:	c8 01       	movw	r24, r16
    5b90:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <u8g_pb_Clear>
	  u8g_page_First(&(pb->p));
    5b94:	c8 01       	movw	r24, r16
    5b96:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <u8g_page_First>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    5b9a:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
	  u8g_page_First(&(pb->p));
      break;
    5b9c:	1f c0       	rjmp	.+62     	; 0x5bdc <u8g_dev_pb8v1_base_fn+0x96>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    5b9e:	c8 01       	movw	r24, r16
    5ba0:	0e 94 d8 2c 	call	0x59b0	; 0x59b0 <u8g_page_Next>
    5ba4:	88 23       	and	r24, r24
    5ba6:	c9 f0       	breq	.+50     	; 0x5bda <u8g_dev_pb8v1_base_fn+0x94>
        return 0;
      u8g_pb_Clear(pb);
    5ba8:	c8 01       	movw	r24, r16
    5baa:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <u8g_pb_Clear>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    5bae:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
      u8g_pb_Clear(pb);
      break;
    5bb0:	15 c0       	rjmp	.+42     	; 0x5bdc <u8g_dev_pb8v1_base_fn+0x96>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    5bb2:	b9 01       	movw	r22, r18
    5bb4:	c8 01       	movw	r24, r16
    5bb6:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <u8g_pb_GetPageBox>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    5bba:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    5bbc:	0f c0       	rjmp	.+30     	; 0x5bdc <u8g_dev_pb8v1_base_fn+0x96>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    5bbe:	f8 01       	movw	r30, r16
    5bc0:	85 81       	ldd	r24, Z+5	; 0x05
    5bc2:	88 83       	st	Y, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    5bc4:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    5bc6:	0a c0       	rjmp	.+20     	; 0x5bdc <u8g_dev_pb8v1_base_fn+0x96>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    5bc8:	f8 01       	movw	r30, r16
    5bca:	81 81       	ldd	r24, Z+1	; 0x01
    5bcc:	88 83       	st	Y, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    5bce:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
      break;
    5bd0:	05 c0       	rjmp	.+10     	; 0x5bdc <u8g_dev_pb8v1_base_fn+0x96>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
    5bd2:	81 e0       	ldi	r24, 0x01	; 1
    5bd4:	03 c0       	rjmp	.+6      	; 0x5bdc <u8g_dev_pb8v1_base_fn+0x96>
  }
  return 1;
    5bd6:	81 e0       	ldi	r24, 0x01	; 1
    5bd8:	01 c0       	rjmp	.+2      	; 0x5bdc <u8g_dev_pb8v1_base_fn+0x96>
      u8g_pb_Clear(pb);
	  u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
    5bda:	80 e0       	ldi	r24, 0x00	; 0
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
}
    5bdc:	df 91       	pop	r29
    5bde:	cf 91       	pop	r28
    5be0:	1f 91       	pop	r17
    5be2:	0f 91       	pop	r16
    5be4:	08 95       	ret

00005be6 <u8g_draw_hline>:
*/

#include "u8g.h"

void u8g_draw_hline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
    5be6:	af 92       	push	r10
    5be8:	bf 92       	push	r11
    5bea:	cf 92       	push	r12
    5bec:	df 92       	push	r13
    5bee:	ef 92       	push	r14
    5bf0:	0f 93       	push	r16
    5bf2:	1f 93       	push	r17
    5bf4:	cf 93       	push	r28
    5bf6:	5c 01       	movw	r10, r24
    5bf8:	c6 2e       	mov	r12, r22
    5bfa:	e4 2e       	mov	r14, r20
    5bfc:	d2 2e       	mov	r13, r18
  uint8_t pixel = 0x0ff;
  while( w >= 8 )
    5bfe:	27 e0       	ldi	r18, 0x07	; 7
    5c00:	2d 15       	cp	r18, r13
    5c02:	b8 f4       	brcc	.+46     	; 0x5c32 <u8g_draw_hline+0x4c>
    5c04:	cd 2d       	mov	r28, r13
    5c06:	16 2f       	mov	r17, r22
  {
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
    5c08:	0f ef       	ldi	r16, 0xFF	; 255
    5c0a:	20 e0       	ldi	r18, 0x00	; 0
    5c0c:	4e 2d       	mov	r20, r14
    5c0e:	61 2f       	mov	r22, r17
    5c10:	c5 01       	movw	r24, r10
    5c12:	0e 94 9f 2c 	call	0x593e	; 0x593e <u8g_Draw8Pixel>
    w-=8;
    5c16:	c8 50       	subi	r28, 0x08	; 8
    x+=8;
    5c18:	18 5f       	subi	r17, 0xF8	; 248
#include "u8g.h"

void u8g_draw_hline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
  uint8_t pixel = 0x0ff;
  while( w >= 8 )
    5c1a:	c8 30       	cpi	r28, 0x08	; 8
    5c1c:	a8 f7       	brcc	.-22     	; 0x5c08 <u8g_draw_hline+0x22>
    5c1e:	8d 2d       	mov	r24, r13
    5c20:	87 70       	andi	r24, 0x07	; 7
    5c22:	28 e0       	ldi	r18, 0x08	; 8
    5c24:	2c 0d       	add	r18, r12
    5c26:	98 ef       	ldi	r25, 0xF8	; 248
    5c28:	9d 0d       	add	r25, r13
    5c2a:	98 7f       	andi	r25, 0xF8	; 248
    5c2c:	c2 2e       	mov	r12, r18
    5c2e:	c9 0e       	add	r12, r25
    5c30:	01 c0       	rjmp	.+2      	; 0x5c34 <u8g_draw_hline+0x4e>
    5c32:	8d 2d       	mov	r24, r13
  {
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
    w-=8;
    x+=8;
  }
  if ( w != 0 )
    5c34:	88 23       	and	r24, r24
    5c36:	99 f0       	breq	.+38     	; 0x5c5e <u8g_draw_hline+0x78>
  {
    w ^=7;
    5c38:	07 e0       	ldi	r16, 0x07	; 7
    5c3a:	08 27       	eor	r16, r24
    w++;
    5c3c:	0f 5f       	subi	r16, 0xFF	; 255
    pixel <<= w&7;
    5c3e:	07 70       	andi	r16, 0x07	; 7
    5c40:	8f ef       	ldi	r24, 0xFF	; 255
    5c42:	90 e0       	ldi	r25, 0x00	; 0
    5c44:	9c 01       	movw	r18, r24
    5c46:	02 c0       	rjmp	.+4      	; 0x5c4c <u8g_draw_hline+0x66>
    5c48:	22 0f       	add	r18, r18
    5c4a:	33 1f       	adc	r19, r19
    5c4c:	0a 95       	dec	r16
    5c4e:	e2 f7       	brpl	.-8      	; 0x5c48 <u8g_draw_hline+0x62>
    5c50:	89 01       	movw	r16, r18
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
    5c52:	20 e0       	ldi	r18, 0x00	; 0
    5c54:	4e 2d       	mov	r20, r14
    5c56:	6c 2d       	mov	r22, r12
    5c58:	c5 01       	movw	r24, r10
    5c5a:	0e 94 9f 2c 	call	0x593e	; 0x593e <u8g_Draw8Pixel>
  }
}
    5c5e:	cf 91       	pop	r28
    5c60:	1f 91       	pop	r17
    5c62:	0f 91       	pop	r16
    5c64:	ef 90       	pop	r14
    5c66:	df 90       	pop	r13
    5c68:	cf 90       	pop	r12
    5c6a:	bf 90       	pop	r11
    5c6c:	af 90       	pop	r10
    5c6e:	08 95       	ret

00005c70 <u8g_draw_vline>:

void u8g_draw_vline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t h)
{
    5c70:	af 92       	push	r10
    5c72:	bf 92       	push	r11
    5c74:	cf 92       	push	r12
    5c76:	df 92       	push	r13
    5c78:	ef 92       	push	r14
    5c7a:	0f 93       	push	r16
    5c7c:	1f 93       	push	r17
    5c7e:	cf 93       	push	r28
    5c80:	5c 01       	movw	r10, r24
    5c82:	e6 2e       	mov	r14, r22
    5c84:	c4 2e       	mov	r12, r20
    5c86:	d2 2e       	mov	r13, r18
  uint8_t pixel = 0x0ff;
  while( h >= 8 )
    5c88:	27 e0       	ldi	r18, 0x07	; 7
    5c8a:	2d 15       	cp	r18, r13
    5c8c:	b8 f4       	brcc	.+46     	; 0x5cbc <u8g_draw_vline+0x4c>
    5c8e:	cd 2d       	mov	r28, r13
    5c90:	14 2f       	mov	r17, r20
  {
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
    5c92:	0f ef       	ldi	r16, 0xFF	; 255
    5c94:	21 e0       	ldi	r18, 0x01	; 1
    5c96:	41 2f       	mov	r20, r17
    5c98:	6e 2d       	mov	r22, r14
    5c9a:	c5 01       	movw	r24, r10
    5c9c:	0e 94 9f 2c 	call	0x593e	; 0x593e <u8g_Draw8Pixel>
    h-=8;
    5ca0:	c8 50       	subi	r28, 0x08	; 8
    y+=8;
    5ca2:	18 5f       	subi	r17, 0xF8	; 248
}

void u8g_draw_vline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t h)
{
  uint8_t pixel = 0x0ff;
  while( h >= 8 )
    5ca4:	c8 30       	cpi	r28, 0x08	; 8
    5ca6:	a8 f7       	brcc	.-22     	; 0x5c92 <u8g_draw_vline+0x22>
    5ca8:	8d 2d       	mov	r24, r13
    5caa:	87 70       	andi	r24, 0x07	; 7
    5cac:	28 e0       	ldi	r18, 0x08	; 8
    5cae:	2c 0d       	add	r18, r12
    5cb0:	98 ef       	ldi	r25, 0xF8	; 248
    5cb2:	9d 0d       	add	r25, r13
    5cb4:	98 7f       	andi	r25, 0xF8	; 248
    5cb6:	c2 2e       	mov	r12, r18
    5cb8:	c9 0e       	add	r12, r25
    5cba:	01 c0       	rjmp	.+2      	; 0x5cbe <u8g_draw_vline+0x4e>
    5cbc:	8d 2d       	mov	r24, r13
  {
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
    h-=8;
    y+=8;
  }
  if ( h != 0 )
    5cbe:	88 23       	and	r24, r24
    5cc0:	99 f0       	breq	.+38     	; 0x5ce8 <u8g_draw_vline+0x78>
  {
    h ^=7;
    5cc2:	07 e0       	ldi	r16, 0x07	; 7
    5cc4:	08 27       	eor	r16, r24
    h++;
    5cc6:	0f 5f       	subi	r16, 0xFF	; 255
    pixel <<= h&7;
    5cc8:	07 70       	andi	r16, 0x07	; 7
    5cca:	8f ef       	ldi	r24, 0xFF	; 255
    5ccc:	90 e0       	ldi	r25, 0x00	; 0
    5cce:	9c 01       	movw	r18, r24
    5cd0:	02 c0       	rjmp	.+4      	; 0x5cd6 <u8g_draw_vline+0x66>
    5cd2:	22 0f       	add	r18, r18
    5cd4:	33 1f       	adc	r19, r19
    5cd6:	0a 95       	dec	r16
    5cd8:	e2 f7       	brpl	.-8      	; 0x5cd2 <u8g_draw_vline+0x62>
    5cda:	89 01       	movw	r16, r18
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
    5cdc:	21 e0       	ldi	r18, 0x01	; 1
    5cde:	4c 2d       	mov	r20, r12
    5ce0:	6e 2d       	mov	r22, r14
    5ce2:	c5 01       	movw	r24, r10
    5ce4:	0e 94 9f 2c 	call	0x593e	; 0x593e <u8g_Draw8Pixel>
  }
}
    5ce8:	cf 91       	pop	r28
    5cea:	1f 91       	pop	r17
    5cec:	0f 91       	pop	r16
    5cee:	ef 90       	pop	r14
    5cf0:	df 90       	pop	r13
    5cf2:	cf 90       	pop	r12
    5cf4:	bf 90       	pop	r11
    5cf6:	af 90       	pop	r10
    5cf8:	08 95       	ret

00005cfa <u8g_DrawFrame>:
  u8g_draw_vline(u8g, x, y, w);
}

/* restrictions: w > 0 && h > 0 */
void u8g_DrawFrame(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    5cfa:	df 92       	push	r13
    5cfc:	ef 92       	push	r14
    5cfe:	ff 92       	push	r15
    5d00:	0f 93       	push	r16
    5d02:	1f 93       	push	r17
    5d04:	cf 93       	push	r28
    5d06:	df 93       	push	r29
    5d08:	ec 01       	movw	r28, r24
    5d0a:	16 2f       	mov	r17, r22
    5d0c:	f4 2e       	mov	r15, r20
    5d0e:	e2 2e       	mov	r14, r18
    5d10:	d0 2e       	mov	r13, r16
  u8g_uint_t xtmp = x;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    5d12:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <u8g_IsBBXIntersection>
    5d16:	88 23       	and	r24, r24
    5d18:	e1 f0       	breq	.+56     	; 0x5d52 <u8g_DrawFrame+0x58>
    return;

  
  u8g_draw_hline(u8g, x, y, w);
    5d1a:	2e 2d       	mov	r18, r14
    5d1c:	4f 2d       	mov	r20, r15
    5d1e:	61 2f       	mov	r22, r17
    5d20:	ce 01       	movw	r24, r28
    5d22:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <u8g_draw_hline>
  u8g_draw_vline(u8g, x, y, h);
    5d26:	2d 2d       	mov	r18, r13
    5d28:	4f 2d       	mov	r20, r15
    5d2a:	61 2f       	mov	r22, r17
    5d2c:	ce 01       	movw	r24, r28
    5d2e:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <u8g_draw_vline>
  x+=w;
    5d32:	6f ef       	ldi	r22, 0xFF	; 255
    5d34:	6e 0d       	add	r22, r14
  x--;
    5d36:	61 0f       	add	r22, r17
  u8g_draw_vline(u8g, x, y, h);
    5d38:	2d 2d       	mov	r18, r13
    5d3a:	4f 2d       	mov	r20, r15
    5d3c:	ce 01       	movw	r24, r28
    5d3e:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <u8g_draw_vline>
  y+=h;
    5d42:	da 94       	dec	r13
  y--;
    5d44:	4d 2d       	mov	r20, r13
    5d46:	4f 0d       	add	r20, r15
  u8g_draw_hline(u8g, xtmp, y, w);
    5d48:	2e 2d       	mov	r18, r14
    5d4a:	61 2f       	mov	r22, r17
    5d4c:	ce 01       	movw	r24, r28
    5d4e:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <u8g_draw_hline>
}
    5d52:	df 91       	pop	r29
    5d54:	cf 91       	pop	r28
    5d56:	1f 91       	pop	r17
    5d58:	0f 91       	pop	r16
    5d5a:	ff 90       	pop	r15
    5d5c:	ef 90       	pop	r14
    5d5e:	df 90       	pop	r13
    5d60:	08 95       	ret

00005d62 <u8g_draw_box>:

void u8g_draw_box(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    5d62:	ef 92       	push	r14
    5d64:	ff 92       	push	r15
    5d66:	0f 93       	push	r16
    5d68:	1f 93       	push	r17
    5d6a:	cf 93       	push	r28
    5d6c:	df 93       	push	r29
    5d6e:	ec 01       	movw	r28, r24
    5d70:	e6 2e       	mov	r14, r22
    5d72:	14 2f       	mov	r17, r20
    5d74:	f2 2e       	mov	r15, r18
  do
  { 
    u8g_draw_hline(u8g, x, y, w);
    5d76:	2f 2d       	mov	r18, r15
    5d78:	41 2f       	mov	r20, r17
    5d7a:	6e 2d       	mov	r22, r14
    5d7c:	ce 01       	movw	r24, r28
    5d7e:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <u8g_draw_hline>
    y++;    
    5d82:	1f 5f       	subi	r17, 0xFF	; 255
    h--;
    5d84:	01 50       	subi	r16, 0x01	; 1
  } while( h != 0 );
    5d86:	b9 f7       	brne	.-18     	; 0x5d76 <u8g_draw_box+0x14>
}
    5d88:	df 91       	pop	r29
    5d8a:	cf 91       	pop	r28
    5d8c:	1f 91       	pop	r17
    5d8e:	0f 91       	pop	r16
    5d90:	ff 90       	pop	r15
    5d92:	ef 90       	pop	r14
    5d94:	08 95       	ret

00005d96 <u8g_DrawBox>:

/* restrictions: h > 0 */
void u8g_DrawBox(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    5d96:	df 92       	push	r13
    5d98:	ef 92       	push	r14
    5d9a:	ff 92       	push	r15
    5d9c:	0f 93       	push	r16
    5d9e:	1f 93       	push	r17
    5da0:	cf 93       	push	r28
    5da2:	df 93       	push	r29
    5da4:	ec 01       	movw	r28, r24
    5da6:	16 2f       	mov	r17, r22
    5da8:	f4 2e       	mov	r15, r20
    5daa:	e2 2e       	mov	r14, r18
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    5dac:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <u8g_IsBBXIntersection>
    5db0:	88 23       	and	r24, r24
    5db2:	31 f0       	breq	.+12     	; 0x5dc0 <u8g_DrawBox+0x2a>
    return;
  u8g_draw_box(u8g, x, y, w, h);
    5db4:	2e 2d       	mov	r18, r14
    5db6:	4f 2d       	mov	r20, r15
    5db8:	61 2f       	mov	r22, r17
    5dba:	ce 01       	movw	r24, r28
    5dbc:	0e 94 b1 2e 	call	0x5d62	; 0x5d62 <u8g_draw_box>
}
    5dc0:	df 91       	pop	r29
    5dc2:	cf 91       	pop	r28
    5dc4:	1f 91       	pop	r17
    5dc6:	0f 91       	pop	r16
    5dc8:	ff 90       	pop	r15
    5dca:	ef 90       	pop	r14
    5dcc:	df 90       	pop	r13
    5dce:	08 95       	ret

00005dd0 <u8g_DrawRFrame>:


void u8g_DrawRFrame(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, u8g_uint_t r)
{
    5dd0:	7f 92       	push	r7
    5dd2:	8f 92       	push	r8
    5dd4:	9f 92       	push	r9
    5dd6:	af 92       	push	r10
    5dd8:	bf 92       	push	r11
    5dda:	cf 92       	push	r12
    5ddc:	df 92       	push	r13
    5dde:	ef 92       	push	r14
    5de0:	ff 92       	push	r15
    5de2:	0f 93       	push	r16
    5de4:	1f 93       	push	r17
    5de6:	cf 93       	push	r28
    5de8:	df 93       	push	r29
    5dea:	ec 01       	movw	r28, r24
    5dec:	16 2f       	mov	r17, r22
    5dee:	f4 2e       	mov	r15, r20
    5df0:	d2 2e       	mov	r13, r18
    5df2:	c0 2e       	mov	r12, r16
  u8g_uint_t xl, yu;

  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    5df4:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <u8g_IsBBXIntersection>
    5df8:	88 23       	and	r24, r24
    5dfa:	09 f4       	brne	.+2      	; 0x5dfe <u8g_DrawRFrame+0x2e>
    5dfc:	51 c0       	rjmp	.+162    	; 0x5ea0 <u8g_DrawRFrame+0xd0>
    return;

  xl = x;
  xl += r;
    5dfe:	a1 2e       	mov	r10, r17
    5e00:	ae 0c       	add	r10, r14
  yu = y;
  yu += r;
    5e02:	bf 2c       	mov	r11, r15
    5e04:	be 0c       	add	r11, r14
 
  {
    u8g_uint_t yl, xr;
      
    xr = x;
    xr += w;
    5e06:	8e 2c       	mov	r8, r14
    5e08:	80 94       	com	r8
    xr -= r;
    5e0a:	8d 0c       	add	r8, r13
    xr -= 1;
    5e0c:	81 0e       	add	r8, r17
    
    yl = y;
    yl += h;
    5e0e:	9c 2c       	mov	r9, r12
    5e10:	9e 18       	sub	r9, r14
    yl -= r; 
    5e12:	77 24       	eor	r7, r7
    5e14:	7a 94       	dec	r7
    5e16:	79 0c       	add	r7, r9
    yl -= 1;
    5e18:	7f 0c       	add	r7, r15

    u8g_draw_circle(u8g, xl, yu, r, U8G_DRAW_UPPER_LEFT);
    5e1a:	02 e0       	ldi	r16, 0x02	; 2
    5e1c:	2e 2d       	mov	r18, r14
    5e1e:	4b 2d       	mov	r20, r11
    5e20:	6a 2d       	mov	r22, r10
    5e22:	ce 01       	movw	r24, r28
    5e24:	0e 94 43 25 	call	0x4a86	; 0x4a86 <u8g_draw_circle>
    u8g_draw_circle(u8g, xr, yu, r, U8G_DRAW_UPPER_RIGHT);
    5e28:	01 e0       	ldi	r16, 0x01	; 1
    5e2a:	2e 2d       	mov	r18, r14
    5e2c:	4b 2d       	mov	r20, r11
    5e2e:	68 2d       	mov	r22, r8
    5e30:	ce 01       	movw	r24, r28
    5e32:	0e 94 43 25 	call	0x4a86	; 0x4a86 <u8g_draw_circle>
    u8g_draw_circle(u8g, xl, yl, r, U8G_DRAW_LOWER_LEFT);
    5e36:	04 e0       	ldi	r16, 0x04	; 4
    5e38:	2e 2d       	mov	r18, r14
    5e3a:	47 2d       	mov	r20, r7
    5e3c:	6a 2d       	mov	r22, r10
    5e3e:	ce 01       	movw	r24, r28
    5e40:	0e 94 43 25 	call	0x4a86	; 0x4a86 <u8g_draw_circle>
    u8g_draw_circle(u8g, xr, yl, r, U8G_DRAW_LOWER_RIGHT);
    5e44:	08 e0       	ldi	r16, 0x08	; 8
    5e46:	2e 2d       	mov	r18, r14
    5e48:	47 2d       	mov	r20, r7
    5e4a:	68 2d       	mov	r22, r8
    5e4c:	ce 01       	movw	r24, r28
    5e4e:	0e 94 43 25 	call	0x4a86	; 0x4a86 <u8g_draw_circle>
    5e52:	8e 2d       	mov	r24, r14
    5e54:	88 0f       	add	r24, r24

  {
    u8g_uint_t ww, hh;

    ww = w;
    ww -= r;
    5e56:	8d 2c       	mov	r8, r13
    5e58:	88 1a       	sub	r8, r24
    ww -= r;
    ww -= 2;
    5e5a:	8a 94       	dec	r8
    5e5c:	8a 94       	dec	r8
    hh = h;
    hh -= r;
    5e5e:	9a 94       	dec	r9
    5e60:	9a 94       	dec	r9
    hh -= r;
    hh -= 2;
    5e62:	9e 18       	sub	r9, r14
    
    xl++;
    5e64:	a3 94       	inc	r10
    yu++;
    5e66:	b3 94       	inc	r11
    h--;
    w--;
    u8g_draw_hline(u8g, xl, y, ww);
    5e68:	28 2d       	mov	r18, r8
    5e6a:	4f 2d       	mov	r20, r15
    5e6c:	6a 2d       	mov	r22, r10
    5e6e:	ce 01       	movw	r24, r28
    5e70:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <u8g_draw_hline>
    hh -= r;
    hh -= 2;
    
    xl++;
    yu++;
    h--;
    5e74:	ca 94       	dec	r12
    w--;
    u8g_draw_hline(u8g, xl, y, ww);
    u8g_draw_hline(u8g, xl, y+h, ww);
    5e76:	4c 2d       	mov	r20, r12
    5e78:	4f 0d       	add	r20, r15
    5e7a:	28 2d       	mov	r18, r8
    5e7c:	6a 2d       	mov	r22, r10
    5e7e:	ce 01       	movw	r24, r28
    5e80:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <u8g_draw_hline>
    u8g_draw_vline(u8g, x,         yu, hh);
    5e84:	29 2d       	mov	r18, r9
    5e86:	4b 2d       	mov	r20, r11
    5e88:	61 2f       	mov	r22, r17
    5e8a:	ce 01       	movw	r24, r28
    5e8c:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <u8g_draw_vline>
    hh -= 2;
    
    xl++;
    yu++;
    h--;
    w--;
    5e90:	da 94       	dec	r13
    u8g_draw_hline(u8g, xl, y, ww);
    u8g_draw_hline(u8g, xl, y+h, ww);
    u8g_draw_vline(u8g, x,         yu, hh);
    u8g_draw_vline(u8g, x+w, yu, hh);
    5e92:	6d 2d       	mov	r22, r13
    5e94:	61 0f       	add	r22, r17
    5e96:	29 2d       	mov	r18, r9
    5e98:	4b 2d       	mov	r20, r11
    5e9a:	ce 01       	movw	r24, r28
    5e9c:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <u8g_draw_vline>
  }
}
    5ea0:	df 91       	pop	r29
    5ea2:	cf 91       	pop	r28
    5ea4:	1f 91       	pop	r17
    5ea6:	0f 91       	pop	r16
    5ea8:	ff 90       	pop	r15
    5eaa:	ef 90       	pop	r14
    5eac:	df 90       	pop	r13
    5eae:	cf 90       	pop	r12
    5eb0:	bf 90       	pop	r11
    5eb2:	af 90       	pop	r10
    5eb4:	9f 90       	pop	r9
    5eb6:	8f 90       	pop	r8
    5eb8:	7f 90       	pop	r7
    5eba:	08 95       	ret

00005ebc <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    5ebc:	08 95       	ret

00005ebe <HID_init>:
    return( FALSE );
}
/* HID data structures initialization */
void HID_init( void )
{
    hid_ep[ 1 ].sndToggle = bmSNDTOG0;
    5ebe:	80 e4       	ldi	r24, 0x40	; 64
    5ec0:	80 93 d6 26 	sts	0x26D6, r24
    hid_ep[ 1 ].rcvToggle = bmRCVTOG0;
    5ec4:	80 e1       	ldi	r24, 0x10	; 16
    5ec6:	80 93 d7 26 	sts	0x26D7, r24
    5eca:	08 95       	ret

00005ecc <HIDMProbe>:
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe( BYTE addr, DWORD flags )
{
    5ecc:	2f 92       	push	r2
    5ece:	3f 92       	push	r3
    5ed0:	4f 92       	push	r4
    5ed2:	5f 92       	push	r5
    5ed4:	6f 92       	push	r6
    5ed6:	7f 92       	push	r7
    5ed8:	8f 92       	push	r8
    5eda:	9f 92       	push	r9
    5edc:	af 92       	push	r10
    5ede:	bf 92       	push	r11
    5ee0:	cf 92       	push	r12
    5ee2:	df 92       	push	r13
    5ee4:	ef 92       	push	r14
    5ee6:	ff 92       	push	r15
    5ee8:	0f 93       	push	r16
    5eea:	1f 93       	push	r17
    5eec:	cf 93       	push	r28
    5eee:	df 93       	push	r29
    5ef0:	78 2e       	mov	r7, r24
  BYTE rcode;
  BYTE confvalue;
  WORD total_length;  
  USB_DESCR* data_ptr = ( USB_DESCR * )&bigbuf;
  char* byte_ptr = bigbuf; 
    rcode = XferGetConfDescr( addr, 0, CONF_DESCR_LEN, 0, bigbuf );   //get configuration descriptor
    5ef2:	0f 2e       	mov	r0, r31
    5ef4:	f3 e9       	ldi	r31, 0x93	; 147
    5ef6:	8f 2e       	mov	r8, r31
    5ef8:	f8 e2       	ldi	r31, 0x28	; 40
    5efa:	9f 2e       	mov	r9, r31
    5efc:	f0 2d       	mov	r31, r0
    5efe:	0f 2e       	mov	r0, r31
    5f00:	f9 e0       	ldi	r31, 0x09	; 9
    5f02:	af 2e       	mov	r10, r31
    5f04:	b1 2c       	mov	r11, r1
    5f06:	f0 2d       	mov	r31, r0
    5f08:	c1 2c       	mov	r12, r1
    5f0a:	d1 2c       	mov	r13, r1
    5f0c:	68 94       	set
    5f0e:	ee 24       	eor	r14, r14
    5f10:	e1 f8       	bld	r14, 1
    5f12:	00 e0       	ldi	r16, 0x00	; 0
    5f14:	26 e0       	ldi	r18, 0x06	; 6
    5f16:	40 e8       	ldi	r20, 0x80	; 128
    5f18:	60 e0       	ldi	r22, 0x00	; 0
    5f1a:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <XferCtrlReq>
    if( rcode ) {   //error handling           
    5f1e:	81 11       	cpse	r24, r1
    5f20:	bb c0       	rjmp	.+374    	; 0x6098 <HIDMProbe+0x1cc>
        return( FALSE );
    }
    if( data_ptr->descr.config.wTotalLength > 256 ) {
    5f22:	40 90 95 28 	lds	r4, 0x2895
    5f26:	50 90 96 28 	lds	r5, 0x2896
    5f2a:	21 e0       	ldi	r18, 0x01	; 1
    5f2c:	42 16       	cp	r4, r18
    5f2e:	52 06       	cpc	r5, r18
    5f30:	18 f0       	brcs	.+6      	; 0x5f38 <HIDMProbe+0x6c>
    5f32:	41 2c       	mov	r4, r1
    5f34:	55 24       	eor	r5, r5
    5f36:	53 94       	inc	r5
        total_length = 256;
    }
    else {
        total_length = data_ptr->descr.config.wTotalLength;
    }
    rcode = XferGetConfDescr( addr, 0, total_length, 0, bigbuf );   //get the whole configuration
    5f38:	0f 2e       	mov	r0, r31
    5f3a:	f3 e9       	ldi	r31, 0x93	; 147
    5f3c:	8f 2e       	mov	r8, r31
    5f3e:	f8 e2       	ldi	r31, 0x28	; 40
    5f40:	9f 2e       	mov	r9, r31
    5f42:	f0 2d       	mov	r31, r0
    5f44:	52 01       	movw	r10, r4
    5f46:	c1 2c       	mov	r12, r1
    5f48:	d1 2c       	mov	r13, r1
    5f4a:	68 94       	set
    5f4c:	ee 24       	eor	r14, r14
    5f4e:	e1 f8       	bld	r14, 1
    5f50:	00 e0       	ldi	r16, 0x00	; 0
    5f52:	26 e0       	ldi	r18, 0x06	; 6
    5f54:	40 e8       	ldi	r20, 0x80	; 128
    5f56:	60 e0       	ldi	r22, 0x00	; 0
    5f58:	87 2d       	mov	r24, r7
    5f5a:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <XferCtrlReq>
    if( rcode ) {   //error handling
    5f5e:	81 11       	cpse	r24, r1
    5f60:	9d c0       	rjmp	.+314    	; 0x609c <HIDMProbe+0x1d0>
        return( FALSE );
    }
    confvalue = data_ptr->descr.config.bConfigurationValue;
    5f62:	60 90 98 28 	lds	r6, 0x2898
{
  BYTE tmpbyte;
  BYTE rcode;
  BYTE confvalue;
  WORD total_length;  
  USB_DESCR* data_ptr = ( USB_DESCR * )&bigbuf;
    5f66:	e4 01       	movw	r28, r8
    rcode = XferGetConfDescr( addr, 0, total_length, 0, bigbuf );   //get the whole configuration
    if( rcode ) {   //error handling
        return( FALSE );
    }
    confvalue = data_ptr->descr.config.bConfigurationValue;
    while( byte_ptr < bigbuf + total_length ) {
    5f68:	82 01       	movw	r16, r4
    5f6a:	0d 56       	subi	r16, 0x6D	; 109
    5f6c:	17 4d       	sbci	r17, 0xD7	; 215
        }// if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
        else {  //interface descriptor
            if( data_ptr->descr.interface.bInterfaceClass == HID_INTF &&
                data_ptr->descr.interface.bInterfaceSubClass == BOOT_INTF_SUBCLASS &&
                data_ptr->descr.interface.bInterfaceProtocol == HID_PROTOCOL_MOUSE ) {
                    devtable[ addr ].devclass = HID_M;                  //device class
    5f6e:	87 2d       	mov	r24, r7
    5f70:	90 e0       	ldi	r25, 0x00	; 0
    5f72:	7c 01       	movw	r14, r24
    5f74:	ee 0c       	add	r14, r14
    5f76:	ff 1c       	adc	r15, r15
    5f78:	8e 0d       	add	r24, r14
    5f7a:	9f 1d       	adc	r25, r15
    5f7c:	dc 01       	movw	r26, r24
    5f7e:	ac 56       	subi	r26, 0x6C	; 108
    5f80:	b6 4d       	sbci	r27, 0xD6	; 214
    5f82:	7d 01       	movw	r14, r26
    5f84:	5d 01       	movw	r10, r26
    5f86:	b2 e0       	ldi	r27, 0x02	; 2
    5f88:	ab 0e       	add	r10, r27
    5f8a:	b1 1c       	adc	r11, r1
                    tmpbyte = devtable[ addr ].epinfo->MaxPktSize;
                    HID_init();                                        //initialize data structures
                    devtable[ addr ].epinfo = hid_ep;                   //switch endpoint information structure
    5f8c:	0f 2e       	mov	r0, r31
    5f8e:	fa ec       	ldi	r31, 0xCA	; 202
    5f90:	8f 2e       	mov	r8, r31
    5f92:	f6 e2       	ldi	r31, 0x26	; 38
    5f94:	9f 2e       	mov	r9, r31
    5f96:	f0 2d       	mov	r31, r0
                    devtable[ addr ].epinfo[ 0 ].MaxPktSize = tmpbyte;
    5f98:	0f 2e       	mov	r0, r31
    5f9a:	fc ec       	ldi	r31, 0xCC	; 204
    5f9c:	4f 2e       	mov	r4, r31
    5f9e:	f6 e2       	ldi	r31, 0x26	; 38
    5fa0:	5f 2e       	mov	r5, r31
    5fa2:	f0 2d       	mov	r31, r0
                    hid_device.interface = data_ptr->descr.interface.bInterfaceNumber;
    5fa4:	0f 2e       	mov	r0, r31
    5fa6:	f9 ed       	ldi	r31, 0xD9	; 217
    5fa8:	2f 2e       	mov	r2, r31
    5faa:	f6 e2       	ldi	r31, 0x26	; 38
    5fac:	3f 2e       	mov	r3, r31
    5fae:	f0 2d       	mov	r31, r0
    rcode = XferGetConfDescr( addr, 0, total_length, 0, bigbuf );   //get the whole configuration
    if( rcode ) {   //error handling
        return( FALSE );
    }
    confvalue = data_ptr->descr.config.bConfigurationValue;
    while( byte_ptr < bigbuf + total_length ) {
    5fb0:	6d c0       	rjmp	.+218    	; 0x608c <HIDMProbe+0x1c0>
        if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE ) {
    5fb2:	89 81       	ldd	r24, Y+1	; 0x01
    5fb4:	84 30       	cpi	r24, 0x04	; 4
    5fb6:	21 f0       	breq	.+8      	; 0x5fc0 <HIDMProbe+0xf4>
            byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
    5fb8:	88 81       	ld	r24, Y
    5fba:	c8 0f       	add	r28, r24
    5fbc:	d1 1d       	adc	r29, r1
    5fbe:	66 c0       	rjmp	.+204    	; 0x608c <HIDMProbe+0x1c0>
            data_ptr = ( USB_DESCR* )byte_ptr;
        }// if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
        else {  //interface descriptor
            if( data_ptr->descr.interface.bInterfaceClass == HID_INTF &&
    5fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    5fc2:	83 30       	cpi	r24, 0x03	; 3
    5fc4:	09 f0       	breq	.+2      	; 0x5fc8 <HIDMProbe+0xfc>
    5fc6:	6c c0       	rjmp	.+216    	; 0x60a0 <HIDMProbe+0x1d4>
    5fc8:	8e 81       	ldd	r24, Y+6	; 0x06
    5fca:	81 30       	cpi	r24, 0x01	; 1
    5fcc:	09 f0       	breq	.+2      	; 0x5fd0 <HIDMProbe+0x104>
    5fce:	6a c0       	rjmp	.+212    	; 0x60a4 <HIDMProbe+0x1d8>
                data_ptr->descr.interface.bInterfaceSubClass == BOOT_INTF_SUBCLASS &&
    5fd0:	8f 81       	ldd	r24, Y+7	; 0x07
    5fd2:	82 30       	cpi	r24, 0x02	; 2
    5fd4:	09 f0       	breq	.+2      	; 0x5fd8 <HIDMProbe+0x10c>
    5fd6:	68 c0       	rjmp	.+208    	; 0x60a8 <HIDMProbe+0x1dc>
                data_ptr->descr.interface.bInterfaceProtocol == HID_PROTOCOL_MOUSE ) {
                    devtable[ addr ].devclass = HID_M;                  //device class
    5fd8:	22 e0       	ldi	r18, 0x02	; 2
    5fda:	f5 01       	movw	r30, r10
    5fdc:	20 83       	st	Z, r18
                    tmpbyte = devtable[ addr ].epinfo->MaxPktSize;
    5fde:	d7 01       	movw	r26, r14
    5fe0:	ed 91       	ld	r30, X+
    5fe2:	fc 91       	ld	r31, X
    5fe4:	c2 80       	ldd	r12, Z+2	; 0x02
    5fe6:	d3 80       	ldd	r13, Z+3	; 0x03
                    HID_init();                                        //initialize data structures
    5fe8:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <HID_init>
                    devtable[ addr ].epinfo = hid_ep;                   //switch endpoint information structure
    5fec:	f7 01       	movw	r30, r14
    5fee:	80 82       	st	Z, r8
    5ff0:	91 82       	std	Z+1, r9	; 0x01
                    devtable[ addr ].epinfo[ 0 ].MaxPktSize = tmpbyte;
    5ff2:	dd 24       	eor	r13, r13
    5ff4:	d2 01       	movw	r26, r4
    5ff6:	cd 92       	st	X+, r12
    5ff8:	dc 92       	st	X, r13
                    hid_device.interface = data_ptr->descr.interface.bInterfaceNumber;
    5ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    5ffc:	f1 01       	movw	r30, r2
    5ffe:	80 83       	st	Z, r24
                    hid_device.addr = addr;
    6000:	a8 ed       	ldi	r26, 0xD8	; 216
    6002:	b6 e2       	ldi	r27, 0x26	; 38
    6004:	7c 92       	st	X, r7
                    byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
    6006:	88 81       	ld	r24, Y
    6008:	c8 0f       	add	r28, r24
    600a:	d1 1d       	adc	r29, r1
                    data_ptr = ( USB_DESCR* )byte_ptr;
                    while( byte_ptr < bigbuf + total_length ) {                
    600c:	c0 17       	cp	r28, r16
    600e:	d1 07       	cpc	r29, r17
    6010:	c8 f1       	brcs	.+114    	; 0x6084 <HIDMProbe+0x1b8>
    6012:	3c c0       	rjmp	.+120    	; 0x608c <HIDMProbe+0x1c0>
                        if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_ENDPOINT ) {   //skip to endpoint descriptor
    6014:	89 81       	ldd	r24, Y+1	; 0x01
    6016:	85 30       	cpi	r24, 0x05	; 5
    6018:	39 f0       	breq	.+14     	; 0x6028 <HIDMProbe+0x15c>
                            byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
    601a:	88 81       	ld	r24, Y
    601c:	c8 0f       	add	r28, r24
    601e:	d1 1d       	adc	r29, r1
                    devtable[ addr ].epinfo[ 0 ].MaxPktSize = tmpbyte;
                    hid_device.interface = data_ptr->descr.interface.bInterfaceNumber;
                    hid_device.addr = addr;
                    byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
                    data_ptr = ( USB_DESCR* )byte_ptr;
                    while( byte_ptr < bigbuf + total_length ) {                
    6020:	c0 17       	cp	r28, r16
    6022:	d1 07       	cpc	r29, r17
    6024:	b8 f3       	brcs	.-18     	; 0x6014 <HIDMProbe+0x148>
    6026:	32 c0       	rjmp	.+100    	; 0x608c <HIDMProbe+0x1c0>
                            byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
                            data_ptr = ( USB_DESCR* )byte_ptr;
                        }
                        else {
                            /* fill endpoint information structure */
                            devtable[ addr ].epinfo[ 1 ].epAddr = data_ptr->descr.endpoint.bEndpointAddress;
    6028:	8a 81       	ldd	r24, Y+2	; 0x02
    602a:	80 93 d1 26 	sts	0x26D1, r24
                            devtable[ addr ].epinfo[ 1 ].Attr = data_ptr->descr.endpoint.bmAttributes;
    602e:	8b 81       	ldd	r24, Y+3	; 0x03
    6030:	80 93 d2 26 	sts	0x26D2, r24
                            devtable[ addr ].epinfo[ 1 ].MaxPktSize = data_ptr->descr.endpoint.wMaxPacketSize;
    6034:	8c 81       	ldd	r24, Y+4	; 0x04
    6036:	9d 81       	ldd	r25, Y+5	; 0x05
    6038:	80 93 d3 26 	sts	0x26D3, r24
    603c:	90 93 d4 26 	sts	0x26D4, r25
                            devtable[ addr ].epinfo[ 1 ].Interval = data_ptr->descr.endpoint.bInterval;
    6040:	8e 81       	ldd	r24, Y+6	; 0x06
    6042:	80 93 d5 26 	sts	0x26D5, r24
                            // devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
                            /* configure device */
                            rcode = XferSetConf( addr, 0, confvalue );  //set configuration
    6046:	81 2c       	mov	r8, r1
    6048:	91 2c       	mov	r9, r1
    604a:	a1 2c       	mov	r10, r1
    604c:	b1 2c       	mov	r11, r1
    604e:	c1 2c       	mov	r12, r1
    6050:	d1 2c       	mov	r13, r1
    6052:	e1 2c       	mov	r14, r1
    6054:	06 2d       	mov	r16, r6
    6056:	29 e0       	ldi	r18, 0x09	; 9
    6058:	40 e0       	ldi	r20, 0x00	; 0
    605a:	60 e0       	ldi	r22, 0x00	; 0
    605c:	87 2d       	mov	r24, r7
    605e:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <XferCtrlReq>
                            if( rcode ) {   //error handling
    6062:	81 11       	cpse	r24, r1
    6064:	23 c0       	rjmp	.+70     	; 0x60ac <HIDMProbe+0x1e0>
                                return( FALSE );
                            }
                            rcode = XferSetProto( addr, 0, hid_device.interface, BOOT_PROTOCOL );
    6066:	c0 90 d9 26 	lds	r12, 0x26D9
    606a:	d1 2c       	mov	r13, r1
    606c:	00 e0       	ldi	r16, 0x00	; 0
    606e:	2b e0       	ldi	r18, 0x0B	; 11
    6070:	41 e2       	ldi	r20, 0x21	; 33
    6072:	60 e0       	ldi	r22, 0x00	; 0
    6074:	87 2d       	mov	r24, r7
    6076:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <XferCtrlReq>
                            if( rcode ) {   //error handling
    607a:	91 e0       	ldi	r25, 0x01	; 1
    607c:	88 23       	and	r24, r24
    607e:	b9 f0       	breq	.+46     	; 0x60ae <HIDMProbe+0x1e2>
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	15 c0       	rjmp	.+42     	; 0x60ae <HIDMProbe+0x1e2>
                    hid_device.interface = data_ptr->descr.interface.bInterfaceNumber;
                    hid_device.addr = addr;
                    byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
                    data_ptr = ( USB_DESCR* )byte_ptr;
                    while( byte_ptr < bigbuf + total_length ) {                
                        if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_ENDPOINT ) {   //skip to endpoint descriptor
    6084:	89 81       	ldd	r24, Y+1	; 0x01
    6086:	85 30       	cpi	r24, 0x05	; 5
    6088:	41 f6       	brne	.-112    	; 0x601a <HIDMProbe+0x14e>
    608a:	ce cf       	rjmp	.-100    	; 0x6028 <HIDMProbe+0x15c>
    rcode = XferGetConfDescr( addr, 0, total_length, 0, bigbuf );   //get the whole configuration
    if( rcode ) {   //error handling
        return( FALSE );
    }
    confvalue = data_ptr->descr.config.bConfigurationValue;
    while( byte_ptr < bigbuf + total_length ) {
    608c:	c0 17       	cp	r28, r16
    608e:	d1 07       	cpc	r29, r17
    6090:	08 f4       	brcc	.+2      	; 0x6094 <HIDMProbe+0x1c8>
    6092:	8f cf       	rjmp	.-226    	; 0x5fb2 <HIDMProbe+0xe6>
            else { //if class don't match; die on first interface. Not really correct
                return( FALSE );
            }     
        }//else if( data_ptr->
    }// while( byte_ptr < &buf + total_length
    return( FALSE );
    6094:	90 e0       	ldi	r25, 0x00	; 0
    6096:	0b c0       	rjmp	.+22     	; 0x60ae <HIDMProbe+0x1e2>
  WORD total_length;  
  USB_DESCR* data_ptr = ( USB_DESCR * )&bigbuf;
  char* byte_ptr = bigbuf; 
    rcode = XferGetConfDescr( addr, 0, CONF_DESCR_LEN, 0, bigbuf );   //get configuration descriptor
    if( rcode ) {   //error handling           
        return( FALSE );
    6098:	90 e0       	ldi	r25, 0x00	; 0
    609a:	09 c0       	rjmp	.+18     	; 0x60ae <HIDMProbe+0x1e2>
    else {
        total_length = data_ptr->descr.config.wTotalLength;
    }
    rcode = XferGetConfDescr( addr, 0, total_length, 0, bigbuf );   //get the whole configuration
    if( rcode ) {   //error handling
        return( FALSE );
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	07 c0       	rjmp	.+14     	; 0x60ae <HIDMProbe+0x1e2>
                            }
                        }
                    }//while( byte_ptr.... 
            }//if (Class matches
            else { //if class don't match; die on first interface. Not really correct
                return( FALSE );
    60a0:	90 e0       	ldi	r25, 0x00	; 0
    60a2:	05 c0       	rjmp	.+10     	; 0x60ae <HIDMProbe+0x1e2>
    60a4:	90 e0       	ldi	r25, 0x00	; 0
    60a6:	03 c0       	rjmp	.+6      	; 0x60ae <HIDMProbe+0x1e2>
    60a8:	90 e0       	ldi	r25, 0x00	; 0
    60aa:	01 c0       	rjmp	.+2      	; 0x60ae <HIDMProbe+0x1e2>
                            devtable[ addr ].epinfo[ 1 ].Interval = data_ptr->descr.endpoint.bInterval;
                            // devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
                            /* configure device */
                            rcode = XferSetConf( addr, 0, confvalue );  //set configuration
                            if( rcode ) {   //error handling
                                return( FALSE );
    60ac:	90 e0       	ldi	r25, 0x00	; 0
                return( FALSE );
            }     
        }//else if( data_ptr->
    }// while( byte_ptr < &buf + total_length
    return( FALSE );
}
    60ae:	89 2f       	mov	r24, r25
    60b0:	df 91       	pop	r29
    60b2:	cf 91       	pop	r28
    60b4:	1f 91       	pop	r17
    60b6:	0f 91       	pop	r16
    60b8:	ff 90       	pop	r15
    60ba:	ef 90       	pop	r14
    60bc:	df 90       	pop	r13
    60be:	cf 90       	pop	r12
    60c0:	bf 90       	pop	r11
    60c2:	af 90       	pop	r10
    60c4:	9f 90       	pop	r9
    60c6:	8f 90       	pop	r8
    60c8:	7f 90       	pop	r7
    60ca:	6f 90       	pop	r6
    60cc:	5f 90       	pop	r5
    60ce:	4f 90       	pop	r4
    60d0:	3f 90       	pop	r3
    60d2:	2f 90       	pop	r2
    60d4:	08 95       	ret

000060d6 <HIDKProbe>:
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe( BYTE addr, DWORD flags )
{
    60d6:	2f 92       	push	r2
    60d8:	3f 92       	push	r3
    60da:	4f 92       	push	r4
    60dc:	5f 92       	push	r5
    60de:	6f 92       	push	r6
    60e0:	7f 92       	push	r7
    60e2:	8f 92       	push	r8
    60e4:	9f 92       	push	r9
    60e6:	af 92       	push	r10
    60e8:	bf 92       	push	r11
    60ea:	cf 92       	push	r12
    60ec:	df 92       	push	r13
    60ee:	ef 92       	push	r14
    60f0:	ff 92       	push	r15
    60f2:	0f 93       	push	r16
    60f4:	1f 93       	push	r17
    60f6:	cf 93       	push	r28
    60f8:	df 93       	push	r29
    60fa:	78 2e       	mov	r7, r24
  printf("Detecting hid keyborad\n");
    60fc:	85 e3       	ldi	r24, 0x35	; 53
    60fe:	93 e2       	ldi	r25, 0x23	; 35
    6100:	0e 94 51 43 	call	0x86a2	; 0x86a2 <puts>
  BYTE rcode;
  BYTE confvalue;
  WORD total_length;  
  USB_DESCR* data_ptr = ( USB_DESCR * )&bigbuf;
  char* byte_ptr = bigbuf; 
    rcode = XferGetConfDescr( addr, 0, CONF_DESCR_LEN, 0, bigbuf );   //get configuration descriptor
    6104:	0f 2e       	mov	r0, r31
    6106:	f3 e9       	ldi	r31, 0x93	; 147
    6108:	8f 2e       	mov	r8, r31
    610a:	f8 e2       	ldi	r31, 0x28	; 40
    610c:	9f 2e       	mov	r9, r31
    610e:	f0 2d       	mov	r31, r0
    6110:	0f 2e       	mov	r0, r31
    6112:	f9 e0       	ldi	r31, 0x09	; 9
    6114:	af 2e       	mov	r10, r31
    6116:	b1 2c       	mov	r11, r1
    6118:	f0 2d       	mov	r31, r0
    611a:	c1 2c       	mov	r12, r1
    611c:	d1 2c       	mov	r13, r1
    611e:	68 94       	set
    6120:	ee 24       	eor	r14, r14
    6122:	e1 f8       	bld	r14, 1
    6124:	00 e0       	ldi	r16, 0x00	; 0
    6126:	26 e0       	ldi	r18, 0x06	; 6
    6128:	40 e8       	ldi	r20, 0x80	; 128
    612a:	60 e0       	ldi	r22, 0x00	; 0
    612c:	87 2d       	mov	r24, r7
    612e:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <XferCtrlReq>
    if( rcode ) {   //error handling           
    6132:	81 11       	cpse	r24, r1
    6134:	bb c0       	rjmp	.+374    	; 0x62ac <HIDKProbe+0x1d6>
        return( FALSE );
    }
    if( data_ptr->descr.config.wTotalLength > 256 ) {
    6136:	40 90 95 28 	lds	r4, 0x2895
    613a:	50 90 96 28 	lds	r5, 0x2896
    613e:	21 e0       	ldi	r18, 0x01	; 1
    6140:	42 16       	cp	r4, r18
    6142:	52 06       	cpc	r5, r18
    6144:	18 f0       	brcs	.+6      	; 0x614c <HIDKProbe+0x76>
    6146:	41 2c       	mov	r4, r1
    6148:	55 24       	eor	r5, r5
    614a:	53 94       	inc	r5
        total_length = 256;
    }
    else {
        total_length = data_ptr->descr.config.wTotalLength;
    }
    rcode = XferGetConfDescr( addr, 0, total_length, 0, bigbuf );   //get the whole configuration
    614c:	0f 2e       	mov	r0, r31
    614e:	f3 e9       	ldi	r31, 0x93	; 147
    6150:	8f 2e       	mov	r8, r31
    6152:	f8 e2       	ldi	r31, 0x28	; 40
    6154:	9f 2e       	mov	r9, r31
    6156:	f0 2d       	mov	r31, r0
    6158:	52 01       	movw	r10, r4
    615a:	c1 2c       	mov	r12, r1
    615c:	d1 2c       	mov	r13, r1
    615e:	68 94       	set
    6160:	ee 24       	eor	r14, r14
    6162:	e1 f8       	bld	r14, 1
    6164:	00 e0       	ldi	r16, 0x00	; 0
    6166:	26 e0       	ldi	r18, 0x06	; 6
    6168:	40 e8       	ldi	r20, 0x80	; 128
    616a:	60 e0       	ldi	r22, 0x00	; 0
    616c:	87 2d       	mov	r24, r7
    616e:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <XferCtrlReq>
    if( rcode ) {   //error handling
    6172:	81 11       	cpse	r24, r1
    6174:	9d c0       	rjmp	.+314    	; 0x62b0 <HIDKProbe+0x1da>
        return( FALSE );
    }
    confvalue = data_ptr->descr.config.bConfigurationValue;         //save configuration value to use later
    6176:	60 90 98 28 	lds	r6, 0x2898
  printf("Detecting hid keyborad\n");
  BYTE tmpbyte;
  BYTE rcode;
  BYTE confvalue;
  WORD total_length;  
  USB_DESCR* data_ptr = ( USB_DESCR * )&bigbuf;
    617a:	e4 01       	movw	r28, r8
    rcode = XferGetConfDescr( addr, 0, total_length, 0, bigbuf );   //get the whole configuration
    if( rcode ) {   //error handling
        return( FALSE );
    }
    confvalue = data_ptr->descr.config.bConfigurationValue;         //save configuration value to use later
    while( byte_ptr < bigbuf + total_length ) {                     //parse configuration
    617c:	82 01       	movw	r16, r4
    617e:	0d 56       	subi	r16, 0x6D	; 109
    6180:	17 4d       	sbci	r17, 0xD7	; 215
        }// if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
        else {  //interface descriptor
            if( data_ptr->descr.interface.bInterfaceClass == HID_INTF &&
                data_ptr->descr.interface.bInterfaceSubClass == BOOT_INTF_SUBCLASS &&
                data_ptr->descr.interface.bInterfaceProtocol == HID_PROTOCOL_KEYBOARD ) {
                    devtable[ addr ].devclass = HID_K;                                      //fill device class
    6182:	87 2d       	mov	r24, r7
    6184:	90 e0       	ldi	r25, 0x00	; 0
    6186:	7c 01       	movw	r14, r24
    6188:	ee 0c       	add	r14, r14
    618a:	ff 1c       	adc	r15, r15
    618c:	8e 0d       	add	r24, r14
    618e:	9f 1d       	adc	r25, r15
    6190:	dc 01       	movw	r26, r24
    6192:	ac 56       	subi	r26, 0x6C	; 108
    6194:	b6 4d       	sbci	r27, 0xD6	; 214
    6196:	7d 01       	movw	r14, r26
    6198:	5d 01       	movw	r10, r26
    619a:	b2 e0       	ldi	r27, 0x02	; 2
    619c:	ab 0e       	add	r10, r27
    619e:	b1 1c       	adc	r11, r1
                    tmpbyte = devtable[ addr ].epinfo->MaxPktSize;                          //save max.packet size
                    HID_init();                                                             //initialize data structures
                    devtable[ addr ].epinfo = hid_ep;                                       //switch endpoint information structure
    61a0:	0f 2e       	mov	r0, r31
    61a2:	fa ec       	ldi	r31, 0xCA	; 202
    61a4:	8f 2e       	mov	r8, r31
    61a6:	f6 e2       	ldi	r31, 0x26	; 38
    61a8:	9f 2e       	mov	r9, r31
    61aa:	f0 2d       	mov	r31, r0
                    devtable[ addr ].epinfo[ 0 ].MaxPktSize = tmpbyte;                      //fill in max.packet size
    61ac:	0f 2e       	mov	r0, r31
    61ae:	fc ec       	ldi	r31, 0xCC	; 204
    61b0:	4f 2e       	mov	r4, r31
    61b2:	f6 e2       	ldi	r31, 0x26	; 38
    61b4:	5f 2e       	mov	r5, r31
    61b6:	f0 2d       	mov	r31, r0
                    hid_device.interface = data_ptr->descr.interface.bInterfaceNumber;      //fill in interface number to be used in HID requests
    61b8:	0f 2e       	mov	r0, r31
    61ba:	f9 ed       	ldi	r31, 0xD9	; 217
    61bc:	2f 2e       	mov	r2, r31
    61be:	f6 e2       	ldi	r31, 0x26	; 38
    61c0:	3f 2e       	mov	r3, r31
    61c2:	f0 2d       	mov	r31, r0
    rcode = XferGetConfDescr( addr, 0, total_length, 0, bigbuf );   //get the whole configuration
    if( rcode ) {   //error handling
        return( FALSE );
    }
    confvalue = data_ptr->descr.config.bConfigurationValue;         //save configuration value to use later
    while( byte_ptr < bigbuf + total_length ) {                     //parse configuration
    61c4:	6d c0       	rjmp	.+218    	; 0x62a0 <HIDKProbe+0x1ca>
        if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE ) {  //skip to the next descriptor
    61c6:	89 81       	ldd	r24, Y+1	; 0x01
    61c8:	84 30       	cpi	r24, 0x04	; 4
    61ca:	21 f0       	breq	.+8      	; 0x61d4 <HIDKProbe+0xfe>
            byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
    61cc:	88 81       	ld	r24, Y
    61ce:	c8 0f       	add	r28, r24
    61d0:	d1 1d       	adc	r29, r1
    61d2:	66 c0       	rjmp	.+204    	; 0x62a0 <HIDKProbe+0x1ca>
            data_ptr = ( USB_DESCR* )byte_ptr;
        }// if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
        else {  //interface descriptor
            if( data_ptr->descr.interface.bInterfaceClass == HID_INTF &&
    61d4:	8d 81       	ldd	r24, Y+5	; 0x05
    61d6:	83 30       	cpi	r24, 0x03	; 3
    61d8:	09 f0       	breq	.+2      	; 0x61dc <HIDKProbe+0x106>
    61da:	6c c0       	rjmp	.+216    	; 0x62b4 <HIDKProbe+0x1de>
    61dc:	8e 81       	ldd	r24, Y+6	; 0x06
    61de:	81 30       	cpi	r24, 0x01	; 1
    61e0:	09 f0       	breq	.+2      	; 0x61e4 <HIDKProbe+0x10e>
    61e2:	6a c0       	rjmp	.+212    	; 0x62b8 <HIDKProbe+0x1e2>
                data_ptr->descr.interface.bInterfaceSubClass == BOOT_INTF_SUBCLASS &&
    61e4:	8f 81       	ldd	r24, Y+7	; 0x07
    61e6:	81 30       	cpi	r24, 0x01	; 1
    61e8:	09 f0       	breq	.+2      	; 0x61ec <HIDKProbe+0x116>
    61ea:	68 c0       	rjmp	.+208    	; 0x62bc <HIDKProbe+0x1e6>
                data_ptr->descr.interface.bInterfaceProtocol == HID_PROTOCOL_KEYBOARD ) {
                    devtable[ addr ].devclass = HID_K;                                      //fill device class
    61ec:	21 e0       	ldi	r18, 0x01	; 1
    61ee:	f5 01       	movw	r30, r10
    61f0:	20 83       	st	Z, r18
                    tmpbyte = devtable[ addr ].epinfo->MaxPktSize;                          //save max.packet size
    61f2:	d7 01       	movw	r26, r14
    61f4:	ed 91       	ld	r30, X+
    61f6:	fc 91       	ld	r31, X
    61f8:	c2 80       	ldd	r12, Z+2	; 0x02
    61fa:	d3 80       	ldd	r13, Z+3	; 0x03
                    HID_init();                                                             //initialize data structures
    61fc:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <HID_init>
                    devtable[ addr ].epinfo = hid_ep;                                       //switch endpoint information structure
    6200:	f7 01       	movw	r30, r14
    6202:	80 82       	st	Z, r8
    6204:	91 82       	std	Z+1, r9	; 0x01
                    devtable[ addr ].epinfo[ 0 ].MaxPktSize = tmpbyte;                      //fill in max.packet size
    6206:	dd 24       	eor	r13, r13
    6208:	d2 01       	movw	r26, r4
    620a:	cd 92       	st	X+, r12
    620c:	dc 92       	st	X, r13
                    hid_device.interface = data_ptr->descr.interface.bInterfaceNumber;      //fill in interface number to be used in HID requests
    620e:	8a 81       	ldd	r24, Y+2	; 0x02
    6210:	f1 01       	movw	r30, r2
    6212:	80 83       	st	Z, r24
                    hid_device.addr = addr;                                                 //fill in address
    6214:	a8 ed       	ldi	r26, 0xD8	; 216
    6216:	b6 e2       	ldi	r27, 0x26	; 38
    6218:	7c 92       	st	X, r7
                    byte_ptr = byte_ptr + data_ptr->descr.config.bLength;                   //skip to the next descriptor
    621a:	88 81       	ld	r24, Y
    621c:	c8 0f       	add	r28, r24
    621e:	d1 1d       	adc	r29, r1
                    data_ptr = ( USB_DESCR* )byte_ptr;
                    while( byte_ptr < bigbuf + total_length ) {                             
    6220:	c0 17       	cp	r28, r16
    6222:	d1 07       	cpc	r29, r17
    6224:	c8 f1       	brcs	.+114    	; 0x6298 <HIDKProbe+0x1c2>
    6226:	3c c0       	rjmp	.+120    	; 0x62a0 <HIDKProbe+0x1ca>
                        if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_ENDPOINT ) {   //skip to endpoint descriptor
    6228:	89 81       	ldd	r24, Y+1	; 0x01
    622a:	85 30       	cpi	r24, 0x05	; 5
    622c:	39 f0       	breq	.+14     	; 0x623c <HIDKProbe+0x166>
                            byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
    622e:	88 81       	ld	r24, Y
    6230:	c8 0f       	add	r28, r24
    6232:	d1 1d       	adc	r29, r1
                    devtable[ addr ].epinfo[ 0 ].MaxPktSize = tmpbyte;                      //fill in max.packet size
                    hid_device.interface = data_ptr->descr.interface.bInterfaceNumber;      //fill in interface number to be used in HID requests
                    hid_device.addr = addr;                                                 //fill in address
                    byte_ptr = byte_ptr + data_ptr->descr.config.bLength;                   //skip to the next descriptor
                    data_ptr = ( USB_DESCR* )byte_ptr;
                    while( byte_ptr < bigbuf + total_length ) {                             
    6234:	c0 17       	cp	r28, r16
    6236:	d1 07       	cpc	r29, r17
    6238:	b8 f3       	brcs	.-18     	; 0x6228 <HIDKProbe+0x152>
    623a:	32 c0       	rjmp	.+100    	; 0x62a0 <HIDKProbe+0x1ca>
                            byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
                            data_ptr = ( USB_DESCR* )byte_ptr;
                        }
                        else {
                            /* fill endpoint information structure */
                            devtable[ addr ].epinfo[ 1 ].epAddr = data_ptr->descr.endpoint.bEndpointAddress;
    623c:	8a 81       	ldd	r24, Y+2	; 0x02
    623e:	80 93 d1 26 	sts	0x26D1, r24
                            devtable[ addr ].epinfo[ 1 ].Attr = data_ptr->descr.endpoint.bmAttributes;
    6242:	8b 81       	ldd	r24, Y+3	; 0x03
    6244:	80 93 d2 26 	sts	0x26D2, r24
                            devtable[ addr ].epinfo[ 1 ].MaxPktSize = data_ptr->descr.endpoint.wMaxPacketSize;
    6248:	8c 81       	ldd	r24, Y+4	; 0x04
    624a:	9d 81       	ldd	r25, Y+5	; 0x05
    624c:	80 93 d3 26 	sts	0x26D3, r24
    6250:	90 93 d4 26 	sts	0x26D4, r25
                            devtable[ addr ].epinfo[ 1 ].Interval = data_ptr->descr.endpoint.bInterval;
    6254:	8e 81       	ldd	r24, Y+6	; 0x06
    6256:	80 93 d5 26 	sts	0x26D5, r24
                            /* configure device */
                            rcode = XferSetConf( addr, 0, confvalue );  //set configuration
    625a:	81 2c       	mov	r8, r1
    625c:	91 2c       	mov	r9, r1
    625e:	a1 2c       	mov	r10, r1
    6260:	b1 2c       	mov	r11, r1
    6262:	c1 2c       	mov	r12, r1
    6264:	d1 2c       	mov	r13, r1
    6266:	e1 2c       	mov	r14, r1
    6268:	06 2d       	mov	r16, r6
    626a:	29 e0       	ldi	r18, 0x09	; 9
    626c:	40 e0       	ldi	r20, 0x00	; 0
    626e:	60 e0       	ldi	r22, 0x00	; 0
    6270:	87 2d       	mov	r24, r7
    6272:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <XferCtrlReq>
                            if( rcode ) {   //error handling
    6276:	81 11       	cpse	r24, r1
    6278:	23 c0       	rjmp	.+70     	; 0x62c0 <HIDKProbe+0x1ea>
                                return( FALSE );
                            }
                            rcode = XferSetProto( addr, 0, hid_device.interface, BOOT_PROTOCOL );
    627a:	c0 90 d9 26 	lds	r12, 0x26D9
    627e:	d1 2c       	mov	r13, r1
    6280:	00 e0       	ldi	r16, 0x00	; 0
    6282:	2b e0       	ldi	r18, 0x0B	; 11
    6284:	41 e2       	ldi	r20, 0x21	; 33
    6286:	60 e0       	ldi	r22, 0x00	; 0
    6288:	87 2d       	mov	r24, r7
    628a:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <XferCtrlReq>
                            if( rcode ) {   //error handling
    628e:	91 e0       	ldi	r25, 0x01	; 1
    6290:	88 23       	and	r24, r24
    6292:	b9 f0       	breq	.+46     	; 0x62c2 <HIDKProbe+0x1ec>
    6294:	90 e0       	ldi	r25, 0x00	; 0
    6296:	15 c0       	rjmp	.+42     	; 0x62c2 <HIDKProbe+0x1ec>
                    hid_device.interface = data_ptr->descr.interface.bInterfaceNumber;      //fill in interface number to be used in HID requests
                    hid_device.addr = addr;                                                 //fill in address
                    byte_ptr = byte_ptr + data_ptr->descr.config.bLength;                   //skip to the next descriptor
                    data_ptr = ( USB_DESCR* )byte_ptr;
                    while( byte_ptr < bigbuf + total_length ) {                             
                        if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_ENDPOINT ) {   //skip to endpoint descriptor
    6298:	89 81       	ldd	r24, Y+1	; 0x01
    629a:	85 30       	cpi	r24, 0x05	; 5
    629c:	41 f6       	brne	.-112    	; 0x622e <HIDKProbe+0x158>
    629e:	ce cf       	rjmp	.-100    	; 0x623c <HIDKProbe+0x166>
    rcode = XferGetConfDescr( addr, 0, total_length, 0, bigbuf );   //get the whole configuration
    if( rcode ) {   //error handling
        return( FALSE );
    }
    confvalue = data_ptr->descr.config.bConfigurationValue;         //save configuration value to use later
    while( byte_ptr < bigbuf + total_length ) {                     //parse configuration
    62a0:	c0 17       	cp	r28, r16
    62a2:	d1 07       	cpc	r29, r17
    62a4:	08 f4       	brcc	.+2      	; 0x62a8 <HIDKProbe+0x1d2>
    62a6:	8f cf       	rjmp	.-226    	; 0x61c6 <HIDKProbe+0xf0>
            else { //if class don't match; stop processing after first interface. Not really correct
                return( FALSE );
            }     
        }//else if( data_ptr->
    }// while( byte_ptr < &buf + total_length
    return( FALSE );
    62a8:	90 e0       	ldi	r25, 0x00	; 0
    62aa:	0b c0       	rjmp	.+22     	; 0x62c2 <HIDKProbe+0x1ec>
  WORD total_length;  
  USB_DESCR* data_ptr = ( USB_DESCR * )&bigbuf;
  char* byte_ptr = bigbuf; 
    rcode = XferGetConfDescr( addr, 0, CONF_DESCR_LEN, 0, bigbuf );   //get configuration descriptor
    if( rcode ) {   //error handling           
        return( FALSE );
    62ac:	90 e0       	ldi	r25, 0x00	; 0
    62ae:	09 c0       	rjmp	.+18     	; 0x62c2 <HIDKProbe+0x1ec>
    else {
        total_length = data_ptr->descr.config.wTotalLength;
    }
    rcode = XferGetConfDescr( addr, 0, total_length, 0, bigbuf );   //get the whole configuration
    if( rcode ) {   //error handling
        return( FALSE );
    62b0:	90 e0       	ldi	r25, 0x00	; 0
    62b2:	07 c0       	rjmp	.+14     	; 0x62c2 <HIDKProbe+0x1ec>
                            }
                        }
                    }//while( byte_ptr.... 
            }//if (Class matches
            else { //if class don't match; stop processing after first interface. Not really correct
                return( FALSE );
    62b4:	90 e0       	ldi	r25, 0x00	; 0
    62b6:	05 c0       	rjmp	.+10     	; 0x62c2 <HIDKProbe+0x1ec>
    62b8:	90 e0       	ldi	r25, 0x00	; 0
    62ba:	03 c0       	rjmp	.+6      	; 0x62c2 <HIDKProbe+0x1ec>
    62bc:	90 e0       	ldi	r25, 0x00	; 0
    62be:	01 c0       	rjmp	.+2      	; 0x62c2 <HIDKProbe+0x1ec>
                            devtable[ addr ].epinfo[ 1 ].MaxPktSize = data_ptr->descr.endpoint.wMaxPacketSize;
                            devtable[ addr ].epinfo[ 1 ].Interval = data_ptr->descr.endpoint.bInterval;
                            /* configure device */
                            rcode = XferSetConf( addr, 0, confvalue );  //set configuration
                            if( rcode ) {   //error handling
                                return( FALSE );
    62c0:	90 e0       	ldi	r25, 0x00	; 0
                return( FALSE );
            }     
        }//else if( data_ptr->
    }// while( byte_ptr < &buf + total_length
    return( FALSE );
}
    62c2:	89 2f       	mov	r24, r25
    62c4:	df 91       	pop	r29
    62c6:	cf 91       	pop	r28
    62c8:	1f 91       	pop	r17
    62ca:	0f 91       	pop	r16
    62cc:	ff 90       	pop	r15
    62ce:	ef 90       	pop	r14
    62d0:	df 90       	pop	r13
    62d2:	cf 90       	pop	r12
    62d4:	bf 90       	pop	r11
    62d6:	af 90       	pop	r10
    62d8:	9f 90       	pop	r9
    62da:	8f 90       	pop	r8
    62dc:	7f 90       	pop	r7
    62de:	6f 90       	pop	r6
    62e0:	5f 90       	pop	r5
    62e2:	4f 90       	pop	r4
    62e4:	3f 90       	pop	r3
    62e6:	2f 90       	pop	r2
    62e8:	08 95       	ret

000062ea <kbdPoll>:
    rcode = XferInTransfer( hid_device.addr, 1, 8, ( char* )buf, devtable[ hid_device.addr ].epinfo[ 1 ].MaxPktSize );
    return( rcode );
}
/* poll boot keyboard */
BYTE kbdPoll( BOOT_KBD_REPORT* buf )
{
    62ea:	ef 92       	push	r14
    62ec:	ff 92       	push	r15
    62ee:	0f 93       	push	r16
    62f0:	cf 93       	push	r28
    62f2:	df 93       	push	r29
    62f4:	7c 01       	movw	r14, r24
  BYTE rcode;
    MAXreg_wr( rPERADDR, hid_device.addr );    //set peripheral address
    62f6:	c8 ed       	ldi	r28, 0xD8	; 216
    62f8:	d6 e2       	ldi	r29, 0x26	; 38
    62fa:	68 81       	ld	r22, Y
    62fc:	80 ee       	ldi	r24, 0xE0	; 224
    62fe:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
    rcode = XferInTransfer( hid_device.addr, 1, 8, ( char* )buf, devtable[ hid_device.addr ].epinfo[ 1 ].MaxPktSize );
    6302:	88 81       	ld	r24, Y
    6304:	48 2f       	mov	r20, r24
    6306:	50 e0       	ldi	r21, 0x00	; 0
    6308:	fa 01       	movw	r30, r20
    630a:	ee 0f       	add	r30, r30
    630c:	ff 1f       	adc	r31, r31
    630e:	4e 0f       	add	r20, r30
    6310:	5f 1f       	adc	r21, r31
    6312:	fa 01       	movw	r30, r20
    6314:	ec 56       	subi	r30, 0x6C	; 108
    6316:	f6 4d       	sbci	r31, 0xD6	; 214
    6318:	01 90       	ld	r0, Z+
    631a:	f0 81       	ld	r31, Z
    631c:	e0 2d       	mov	r30, r0
    631e:	01 85       	ldd	r16, Z+9	; 0x09
    6320:	97 01       	movw	r18, r14
    6322:	48 e0       	ldi	r20, 0x08	; 8
    6324:	50 e0       	ldi	r21, 0x00	; 0
    6326:	61 e0       	ldi	r22, 0x01	; 1
    6328:	0e 94 c0 34 	call	0x6980	; 0x6980 <XferInTransfer>
    return( rcode );
}
    632c:	df 91       	pop	r29
    632e:	cf 91       	pop	r28
    6330:	0f 91       	pop	r16
    6332:	ff 90       	pop	r15
    6334:	ef 90       	pop	r14
    6336:	08 95       	ret

00006338 <HIDMEventHandler>:
BOOL HIDMEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
    return( FALSE );
}
    6338:	80 e0       	ldi	r24, 0x00	; 0
    633a:	08 95       	ret

0000633c <HIDKEventHandler>:
BOOL HIDKEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
    return( FALSE );
}
    633c:	80 e0       	ldi	r24, 0x00	; 0
    633e:	08 95       	ret

00006340 <update_uptime>:
void Board_init( void );
extern int meny_selected;
extern char key_pressed;
void update_uptime()
{
	uptime=uptime+60;
    6340:	80 91 da 26 	lds	r24, 0x26DA
    6344:	90 91 db 26 	lds	r25, 0x26DB
    6348:	a0 91 dc 26 	lds	r26, 0x26DC
    634c:	b0 91 dd 26 	lds	r27, 0x26DD
    6350:	cc 96       	adiw	r24, 0x3c	; 60
    6352:	a1 1d       	adc	r26, r1
    6354:	b1 1d       	adc	r27, r1
    6356:	80 93 da 26 	sts	0x26DA, r24
    635a:	90 93 db 26 	sts	0x26DB, r25
    635e:	a0 93 dc 26 	sts	0x26DC, r26
    6362:	b0 93 dd 26 	sts	0x26DD, r27
    6366:	08 95       	ret

00006368 <main_setup>:
	//IR2bits.CCP2IF = 0;
}

void main_setup( void )
{
	SPI_init_usb();
    6368:	0e 94 76 32 	call	0x64ec	; 0x64ec <SPI_init_usb>
	MAX3421E_init();
    636c:	0e 94 95 33 	call	0x672a	; 0x672a <MAX3421E_init>
	USB_init();
    6370:	0e 94 6d 35 	call	0x6ada	; 0x6ada <USB_init>
    6374:	08 95       	ret

00006376 <main_usb>:
	
}

void main_usb ( void )
{
	MAX3421E_Task();
    6376:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <MAX3421E_Task>

	
	if (usb_task_state != 64)
    637a:	80 91 22 20 	lds	r24, 0x2022
    637e:	80 34       	cpi	r24, 0x40	; 64
    6380:	11 f0       	breq	.+4      	; 0x6386 <main_usb+0x10>
	{
		//testKbd( 1 );
		USB_Task();	
    6382:	0e 94 8b 35 	call	0x6b16	; 0x6b16 <USB_Task>
    6386:	08 95       	ret

00006388 <HIDtoa>:
	}
	return( FALSE );
}

BYTE HIDtoa( BOOT_KBD_REPORT* buf, BYTE index  )
{
    6388:	fc 01       	movw	r30, r24
	BYTE HIDcode = buf->keycode[ index ];
    638a:	dc 01       	movw	r26, r24
    638c:	a6 0f       	add	r26, r22
    638e:	b1 1d       	adc	r27, r1
    6390:	12 96       	adiw	r26, 0x02	; 2
    6392:	8c 91       	ld	r24, X
	//BYTE AsciiVal;
	//BYTE ShiftkeyStatus = 0;
	/* symbols a-z,A-Z */
	if( HIDcode >= 0x04 && HIDcode <= 0x1d ) {
    6394:	9c ef       	ldi	r25, 0xFC	; 252
    6396:	98 0f       	add	r25, r24
    6398:	9a 31       	cpi	r25, 0x1A	; 26
    639a:	60 f4       	brcc	.+24     	; 0x63b4 <HIDtoa+0x2c>
		if( buf->mod.LShift || buf->mod.RShift ) {                          //uppercase
    639c:	90 81       	ld	r25, Z
    639e:	29 2f       	mov	r18, r25
    63a0:	22 72       	andi	r18, 0x22	; 34
    63a2:	11 f0       	breq	.+4      	; 0x63a8 <HIDtoa+0x20>
			return( HIDcode + 0x3d );
    63a4:	83 5c       	subi	r24, 0xC3	; 195
    63a6:	08 95       	ret
		}
		if( buf->mod.LCtrl || buf->mod.RCtrl ) {                            //Ctrl
    63a8:	91 71       	andi	r25, 0x11	; 17
    63aa:	11 f0       	breq	.+4      	; 0x63b0 <HIDtoa+0x28>
			return( HIDcode - 3 );
    63ac:	83 50       	subi	r24, 0x03	; 3
    63ae:	08 95       	ret
		}
		return( HIDcode + 0x5d );                             //lowercase
    63b0:	83 5a       	subi	r24, 0xA3	; 163
    63b2:	08 95       	ret
	}

	/** Numbpad keys */
	switch( HIDcode ) {
    63b4:	90 e0       	ldi	r25, 0x00	; 0
    63b6:	fc 01       	movw	r30, r24
    63b8:	ba 97       	sbiw	r30, 0x2a	; 42
    63ba:	e8 33       	cpi	r30, 0x38	; 56
    63bc:	f1 05       	cpc	r31, r1
    63be:	00 f5       	brcc	.+64     	; 0x6400 <HIDtoa+0x78>
    63c0:	eb 5c       	subi	r30, 0xCB	; 203
    63c2:	fe 4f       	sbci	r31, 0xFE	; 254
    63c4:	0c 94 f6 3f 	jmp	0x7fec	; 0x7fec <__tablejump2__>
		case( 0x59 ): //1
			return( '1' ); 
    63c8:	81 e3       	ldi	r24, 0x31	; 49
    63ca:	08 95       	ret
			break;
		case( 0x5a ):      
			return( '2' ); 
			break;
		case( 0x5b ):
			return( '3' );
    63cc:	83 e3       	ldi	r24, 0x33	; 51
    63ce:	08 95       	ret
			break;
		case( 0x5c ):
			return( '4' );
    63d0:	84 e3       	ldi	r24, 0x34	; 52
    63d2:	08 95       	ret
			break;
		case( 0x5d ):
			return( '5' );
    63d4:	85 e3       	ldi	r24, 0x35	; 53
    63d6:	08 95       	ret
			break;
		case( 0x5e ):
			return( '6' );
    63d8:	86 e3       	ldi	r24, 0x36	; 54
    63da:	08 95       	ret
			break;		
		case( 0x5f ):
			return( '7' );
    63dc:	87 e3       	ldi	r24, 0x37	; 55
    63de:	08 95       	ret
			break;
		case( 0x60 ):
			return( '8' );
    63e0:	88 e3       	ldi	r24, 0x38	; 56
    63e2:	08 95       	ret
			break;		
		case( 0x61 ):
			return( '9' );
    63e4:	89 e3       	ldi	r24, 0x39	; 57
    63e6:	08 95       	ret
			break;
		case( 0x2b ):
			return( 't' );
    63e8:	84 e7       	ldi	r24, 0x74	; 116
    63ea:	08 95       	ret
			break;	
		case( 0x54 ):
			return( '/' );
    63ec:	8f e2       	ldi	r24, 0x2F	; 47
    63ee:	08 95       	ret
			break;
		case( 0x55 ):
			return( '*' );
    63f0:	8a e2       	ldi	r24, 0x2A	; 42
    63f2:	08 95       	ret
			break;
		case( 0x2a ):
			return( 'b' );
    63f4:	82 e6       	ldi	r24, 0x62	; 98
    63f6:	08 95       	ret
			break;
		case( 0x56 ):
			return( '-' );
    63f8:	8d e2       	ldi	r24, 0x2D	; 45
    63fa:	08 95       	ret
			break;		
		case( 0x57 ):
			return( '+' );
    63fc:	8b e2       	ldi	r24, 0x2B	; 43
    63fe:	08 95       	ret
	}
	
	
	
	
	return( 0x07 );         //Bell
    6400:	87 e0       	ldi	r24, 0x07	; 7
    6402:	08 95       	ret
	switch( HIDcode ) {
		case( 0x59 ): //1
			return( '1' ); 
			break;
		case( 0x5a ):      
			return( '2' ); 
    6404:	82 e3       	ldi	r24, 0x32	; 50
	
	
	
	
	return( 0x07 );         //Bell
}
    6406:	08 95       	ret

00006408 <testKbd>:
BOOL prevCodeComp( BYTE data, BOOT_KBD_REPORT* buf );

/* keyboard communication demo              */
/* only basic functions/keys are supported  */
void testKbd( BYTE addr )
{
    6408:	6f 92       	push	r6
    640a:	7f 92       	push	r7
    640c:	8f 92       	push	r8
    640e:	9f 92       	push	r9
    6410:	af 92       	push	r10
    6412:	bf 92       	push	r11
    6414:	cf 92       	push	r12
    6416:	df 92       	push	r13
    6418:	ef 92       	push	r14
    641a:	0f 93       	push	r16
    641c:	1f 93       	push	r17
    641e:	cf 93       	push	r28
    6420:	df 93       	push	r29
    6422:	cd b7       	in	r28, 0x3d	; 61
    6424:	de b7       	in	r29, 0x3e	; 62
    6426:	29 97       	sbiw	r28, 0x09	; 9
    6428:	cd bf       	out	0x3d, r28	; 61
    642a:	de bf       	out	0x3e, r29	; 62
    642c:	18 2f       	mov	r17, r24
	char tmpbyte;
	//char* byteptr;
	BOOT_KBD_REPORT kbdbuf;
	BOOT_KBD_REPORT localbuf;
	
	rcode = XferGetIdle( addr, 0, hid_device.interface, 0, &tmpbyte );
    642e:	0f 2e       	mov	r0, r31
    6430:	f9 ed       	ldi	r31, 0xD9	; 217
    6432:	6f 2e       	mov	r6, r31
    6434:	f6 e2       	ldi	r31, 0x26	; 38
    6436:	7f 2e       	mov	r7, r31
    6438:	f0 2d       	mov	r31, r0
    643a:	f3 01       	movw	r30, r6
    643c:	c0 80       	ld	r12, Z
    643e:	d1 2c       	mov	r13, r1
    6440:	ce 01       	movw	r24, r28
    6442:	01 96       	adiw	r24, 0x01	; 1
    6444:	4c 01       	movw	r8, r24
    6446:	aa 24       	eor	r10, r10
    6448:	a3 94       	inc	r10
    644a:	b1 2c       	mov	r11, r1
    644c:	e1 2c       	mov	r14, r1
    644e:	00 e0       	ldi	r16, 0x00	; 0
    6450:	22 e0       	ldi	r18, 0x02	; 2
    6452:	41 ea       	ldi	r20, 0xA1	; 161
    6454:	60 e0       	ldi	r22, 0x00	; 0
    6456:	81 2f       	mov	r24, r17
    6458:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <XferCtrlReq>
	rcode = XferGetProto( addr, 0, hid_device.interface, &tmpbyte );
    645c:	f3 01       	movw	r30, r6
    645e:	c0 80       	ld	r12, Z
    6460:	d1 2c       	mov	r13, r1
    6462:	23 e0       	ldi	r18, 0x03	; 3
    6464:	41 ea       	ldi	r20, 0xA1	; 161
    6466:	60 e0       	ldi	r22, 0x00	; 0
    6468:	81 2f       	mov	r24, r17
    646a:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <XferCtrlReq>
	}
	*/
	
	//delay = uptime + 5;
	//while( uptime < delay );    //wait polling interval
	rcode = kbdPoll( &kbdbuf );
    646e:	ce 01       	movw	r24, r28
    6470:	02 96       	adiw	r24, 0x02	; 2
    6472:	0e 94 75 31 	call	0x62ea	; 0x62ea <kbdPoll>
	//            byteptr++;
	//        }
	//send_string( crlf );

	for( i = 0; i < 1; i++ ) {
		if( kbdbuf.keycode[ i ] == 0 ) {        //empty position means it and all subsequent positions are empty
    6476:	8c 81       	ldd	r24, Y+4	; 0x04
    6478:	88 23       	and	r24, r24
    647a:	f9 f0       	breq	.+62     	; 0x64ba <testKbd+0xb2>
			break;
		}
	
		//if( prevCodeComp( kbdbuf.keycode[ i ], &localbuf ) == FALSE ) {
			//                send_hexbyte( kbdbuf.keycode[ i ] );
			char print_char= HIDtoa( &kbdbuf,i );
    647c:	60 e0       	ldi	r22, 0x00	; 0
    647e:	ce 01       	movw	r24, r28
    6480:	02 96       	adiw	r24, 0x02	; 2
    6482:	0e 94 c4 31 	call	0x6388	; 0x6388 <HIDtoa>
			key_pressed = print_char;
    6486:	80 93 02 27 	sts	0x2702, r24
			
			switch(print_char)
    648a:	8b 32       	cpi	r24, 0x2B	; 43
    648c:	19 f0       	breq	.+6      	; 0x6494 <testKbd+0x8c>
    648e:	8d 32       	cpi	r24, 0x2D	; 45
    6490:	59 f0       	breq	.+22     	; 0x64a8 <testKbd+0xa0>
    6492:	13 c0       	rjmp	.+38     	; 0x64ba <testKbd+0xb2>
			{
				case '+':
					meny_selected++;
    6494:	80 91 7e 23 	lds	r24, 0x237E
    6498:	90 91 7f 23 	lds	r25, 0x237F
    649c:	01 96       	adiw	r24, 0x01	; 1
    649e:	80 93 7e 23 	sts	0x237E, r24
    64a2:	90 93 7f 23 	sts	0x237F, r25
					break;
    64a6:	09 c0       	rjmp	.+18     	; 0x64ba <testKbd+0xb2>
				case '-':
					meny_selected--;
    64a8:	80 91 7e 23 	lds	r24, 0x237E
    64ac:	90 91 7f 23 	lds	r25, 0x237F
    64b0:	01 97       	sbiw	r24, 0x01	; 1
    64b2:	80 93 7e 23 	sts	0x237E, r24
    64b6:	90 93 7f 23 	sts	0x237F, r25
			
		//}
		//memcpy(( char* )&localbuf, ( const  char* )&kbdbuf, sizeof( BOOT_KBD_REPORT )); 
	}

}
    64ba:	29 96       	adiw	r28, 0x09	; 9
    64bc:	cd bf       	out	0x3d, r28	; 61
    64be:	de bf       	out	0x3e, r29	; 62
    64c0:	df 91       	pop	r29
    64c2:	cf 91       	pop	r28
    64c4:	1f 91       	pop	r17
    64c6:	0f 91       	pop	r16
    64c8:	ef 90       	pop	r14
    64ca:	df 90       	pop	r13
    64cc:	cf 90       	pop	r12
    64ce:	bf 90       	pop	r11
    64d0:	af 90       	pop	r10
    64d2:	9f 90       	pop	r9
    64d4:	8f 90       	pop	r8
    64d6:	7f 90       	pop	r7
    64d8:	6f 90       	pop	r6
    64da:	08 95       	ret

000064dc <read_usb_hid>:
	
	
}
void read_usb_hid()
{
	if (usb_task_state == 64)
    64dc:	80 91 22 20 	lds	r24, 0x2022
    64e0:	80 34       	cpi	r24, 0x40	; 64
    64e2:	19 f4       	brne	.+6      	; 0x64ea <read_usb_hid+0xe>
	{
		testKbd( 1 );
    64e4:	81 e0       	ldi	r24, 0x01	; 1
    64e6:	0e 94 04 32 	call	0x6408	; 0x6408 <testKbd>
    64ea:	08 95       	ret

000064ec <SPI_init_usb>:
                            SMPMID              Input data sample at middle of data out
*/
void SPI_init_usb( )
{

	PORTC.DIRSET = 0xB0;  // configure MOSI, SS, CLK as outputs on PORTE
    64ec:	80 eb       	ldi	r24, 0xB0	; 176
    64ee:	e0 e4       	ldi	r30, 0x40	; 64
    64f0:	f6 e0       	ldi	r31, 0x06	; 6
    64f2:	81 83       	std	Z+1, r24	; 0x01

	PORTF.DIRSET = PIN7_bm;  // configure MOSI, SS, CLK as outputs on PORTF
    64f4:	e0 ea       	ldi	r30, 0xA0	; 160
    64f6:	f6 e0       	ldi	r31, 0x06	; 6
    64f8:	80 e8       	ldi	r24, 0x80	; 128
    64fa:	81 83       	std	Z+1, r24	; 0x01
	
	PORTF.PIN6CTRL  =    PORT_OPC_PULLUP_gc;
    64fc:	88 e1       	ldi	r24, 0x18	; 24
    64fe:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.DIRCLR    =    PIN6_bm;
    6500:	80 e4       	ldi	r24, 0x40	; 64
    6502:	82 83       	std	Z+2, r24	; 0x02
	
	//PORTF.PIN6CTRL  =    PORT_OPC_PULLUP_gc;
	//PORTF.DIRSET = PIN6_bm;
	// enable SPI master mode, CLK/64 (@32MHz=>500KHz)
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV64_gc;
    6504:	82 e5       	ldi	r24, 0x52	; 82
    6506:	80 93 c0 08 	sts	0x08C0, r24
    650a:	08 95       	ret

0000650c <SPI_wr>:

/* writes to SPI. BF is checked inside the procedure */
/* returns SSPBUF   */ 
BYTE SPI_wr( BYTE data )
{
	SPIC.DATA = data;      			// initiate write
    650c:	e0 ec       	ldi	r30, 0xC0	; 192
    650e:	f8 e0       	ldi	r31, 0x08	; 8
    6510:	83 83       	std	Z+3, r24	; 0x03

	while(!(SPIC.STATUS & (1<<7))); // wait for transfer complete
    6512:	82 81       	ldd	r24, Z+2	; 0x02
    6514:	88 23       	and	r24, r24
    6516:	ec f7       	brge	.-6      	; 0x6512 <SPI_wr+0x6>
	
	return SPIC.DATA;
    6518:	e0 ec       	ldi	r30, 0xC0	; 192
    651a:	f8 e0       	ldi	r31, 0x08	; 8
    651c:	83 81       	ldd	r24, Z+3	; 0x03
}
    651e:	08 95       	ret

00006520 <MAXreg_wr>:
		PORTF.OUTSET = PIN7_bm;  		// raise ss line to end of transfer
}

/* Single host register write   */
void MAXreg_wr(BYTE reg, BYTE val)
{
    6520:	0f 93       	push	r16
    6522:	1f 93       	push	r17
    6524:	cf 93       	push	r28
    6526:	df 93       	push	r29
    6528:	06 2f       	mov	r16, r22
	
	return SPIC.DATA;
}
void Select_MAX3421E()
{
		PORTF.OUTCLR = PIN7_bm; 		// lower ss line to start of transfer
    652a:	c0 ea       	ldi	r28, 0xA0	; 160
    652c:	d6 e0       	ldi	r29, 0x06	; 6
    652e:	10 e8       	ldi	r17, 0x80	; 128
    6530:	1e 83       	std	Y+6, r17	; 0x06

/* Single host register write   */
void MAXreg_wr(BYTE reg, BYTE val)
{
    Select_MAX3421E();
    SPI_wr ( reg + 2 ); //set WR bit and send register number
    6532:	8e 5f       	subi	r24, 0xFE	; 254
    6534:	0e 94 86 32 	call	0x650c	; 0x650c <SPI_wr>
    SPI_wr ( val );
    6538:	80 2f       	mov	r24, r16
    653a:	0e 94 86 32 	call	0x650c	; 0x650c <SPI_wr>
{
		PORTF.OUTCLR = PIN7_bm; 		// lower ss line to start of transfer
}
void Deselect_MAX3421E()
{
		PORTF.OUTSET = PIN7_bm;  		// raise ss line to end of transfer
    653e:	1d 83       	std	Y+5, r17	; 0x05
{
    Select_MAX3421E();
    SPI_wr ( reg + 2 ); //set WR bit and send register number
    SPI_wr ( val );
    Deselect_MAX3421E();
}
    6540:	df 91       	pop	r29
    6542:	cf 91       	pop	r28
    6544:	1f 91       	pop	r17
    6546:	0f 91       	pop	r16
    6548:	08 95       	ret

0000654a <MAXbytes_wr>:
/* multiple-byte write */
/* returns a pointer to a memory position after last written */
BYTE* MAXbytes_wr( BYTE reg, BYTE nbytes, BYTE* data )
{
    654a:	ef 92       	push	r14
    654c:	ff 92       	push	r15
    654e:	0f 93       	push	r16
    6550:	1f 93       	push	r17
    6552:	cf 93       	push	r28
    6554:	df 93       	push	r29
    6556:	e6 2e       	mov	r14, r22
    6558:	8a 01       	movw	r16, r20
	
	return SPIC.DATA;
}
void Select_MAX3421E()
{
		PORTF.OUTCLR = PIN7_bm; 		// lower ss line to start of transfer
    655a:	90 e8       	ldi	r25, 0x80	; 128
    655c:	e0 ea       	ldi	r30, 0xA0	; 160
    655e:	f6 e0       	ldi	r31, 0x06	; 6
    6560:	96 83       	std	Z+6, r25	; 0x06
/* multiple-byte write */
/* returns a pointer to a memory position after last written */
BYTE* MAXbytes_wr( BYTE reg, BYTE nbytes, BYTE* data )
{
    Select_MAX3421E();    //assert SS
    SPI_wr ( reg +2  ); //set W/R bit and select register   
    6562:	8e 5f       	subi	r24, 0xFE	; 254
    6564:	0e 94 86 32 	call	0x650c	; 0x650c <SPI_wr>
    while( nbytes ) {                
    6568:	ee 20       	and	r14, r14
    656a:	71 f0       	breq	.+28     	; 0x6588 <MAXbytes_wr+0x3e>
    656c:	e8 01       	movw	r28, r16
    656e:	fe 2c       	mov	r15, r14
        SPI_wr( *data );    // send the next data byte
    6570:	89 91       	ld	r24, Y+
    6572:	0e 94 86 32 	call	0x650c	; 0x650c <SPI_wr>
        data++;             // advance the pointer
        nbytes--;
    6576:	fa 94       	dec	r15
/* returns a pointer to a memory position after last written */
BYTE* MAXbytes_wr( BYTE reg, BYTE nbytes, BYTE* data )
{
    Select_MAX3421E();    //assert SS
    SPI_wr ( reg +2  ); //set W/R bit and select register   
    while( nbytes ) {                
    6578:	d9 f7       	brne	.-10     	; 0x6570 <MAXbytes_wr+0x26>
    657a:	ea 94       	dec	r14
    657c:	6e 2d       	mov	r22, r14
    657e:	70 e0       	ldi	r23, 0x00	; 0
    6580:	6f 5f       	subi	r22, 0xFF	; 255
    6582:	7f 4f       	sbci	r23, 0xFF	; 255
    6584:	06 0f       	add	r16, r22
    6586:	17 1f       	adc	r17, r23
{
		PORTF.OUTCLR = PIN7_bm; 		// lower ss line to start of transfer
}
void Deselect_MAX3421E()
{
		PORTF.OUTSET = PIN7_bm;  		// raise ss line to end of transfer
    6588:	80 e8       	ldi	r24, 0x80	; 128
    658a:	e0 ea       	ldi	r30, 0xA0	; 160
    658c:	f6 e0       	ldi	r31, 0x06	; 6
    658e:	85 83       	std	Z+5, r24	; 0x05
        data++;             // advance the pointer
        nbytes--;
    }
    Deselect_MAX3421E();  //deassert SS
    return( data );
}
    6590:	c8 01       	movw	r24, r16
    6592:	df 91       	pop	r29
    6594:	cf 91       	pop	r28
    6596:	1f 91       	pop	r17
    6598:	0f 91       	pop	r16
    659a:	ff 90       	pop	r15
    659c:	ef 90       	pop	r14
    659e:	08 95       	ret

000065a0 <MAXreg_rd>:
/* Single host register read        */
BYTE MAXreg_rd( BYTE reg )    
{
    65a0:	1f 93       	push	r17
    65a2:	cf 93       	push	r28
    65a4:	df 93       	push	r29
	
	return SPIC.DATA;
}
void Select_MAX3421E()
{
		PORTF.OUTCLR = PIN7_bm; 		// lower ss line to start of transfer
    65a6:	c0 ea       	ldi	r28, 0xA0	; 160
    65a8:	d6 e0       	ldi	r29, 0x06	; 6
    65aa:	10 e8       	ldi	r17, 0x80	; 128
    65ac:	1e 83       	std	Y+6, r17	; 0x06
/* Single host register read        */
BYTE MAXreg_rd( BYTE reg )    
{
	BYTE tmp;
    Select_MAX3421E();
    SPI_wr ( reg );         //send register number
    65ae:	0e 94 86 32 	call	0x650c	; 0x650c <SPI_wr>
    tmp = SPI_wr ( 0x00 );  //send empty byte, read register contents
    65b2:	80 e0       	ldi	r24, 0x00	; 0
    65b4:	0e 94 86 32 	call	0x650c	; 0x650c <SPI_wr>
{
		PORTF.OUTCLR = PIN7_bm; 		// lower ss line to start of transfer
}
void Deselect_MAX3421E()
{
		PORTF.OUTSET = PIN7_bm;  		// raise ss line to end of transfer
    65b8:	1d 83       	std	Y+5, r17	; 0x05
    Select_MAX3421E();
    SPI_wr ( reg );         //send register number
    tmp = SPI_wr ( 0x00 );  //send empty byte, read register contents
    Deselect_MAX3421E(); 
    return (tmp);
}
    65ba:	df 91       	pop	r29
    65bc:	cf 91       	pop	r28
    65be:	1f 91       	pop	r17
    65c0:	08 95       	ret

000065c2 <MAXbytes_rd>:
/* multiple-bytes register read                             */
/* returns a pointer to a memory position after last read   */
char* MAXbytes_rd ( BYTE reg, BYTE nbytes, char* data )
{
    65c2:	ef 92       	push	r14
    65c4:	ff 92       	push	r15
    65c6:	0f 93       	push	r16
    65c8:	1f 93       	push	r17
    65ca:	cf 93       	push	r28
    65cc:	df 93       	push	r29
    65ce:	e6 2e       	mov	r14, r22
    65d0:	8a 01       	movw	r16, r20
	
	return SPIC.DATA;
}
void Select_MAX3421E()
{
		PORTF.OUTCLR = PIN7_bm; 		// lower ss line to start of transfer
    65d2:	90 e8       	ldi	r25, 0x80	; 128
    65d4:	e0 ea       	ldi	r30, 0xA0	; 160
    65d6:	f6 e0       	ldi	r31, 0x06	; 6
    65d8:	96 83       	std	Z+6, r25	; 0x06
/* multiple-bytes register read                             */
/* returns a pointer to a memory position after last read   */
char* MAXbytes_rd ( BYTE reg, BYTE nbytes, char* data )
{
    Select_MAX3421E();    //assert SS
    SPI_wr ( reg );     //send register number
    65da:	0e 94 86 32 	call	0x650c	; 0x650c <SPI_wr>
    while( nbytes ) {
    65de:	ee 20       	and	r14, r14
    65e0:	79 f0       	breq	.+30     	; 0x6600 <MAXbytes_rd+0x3e>
    65e2:	e8 01       	movw	r28, r16
    65e4:	fe 2c       	mov	r15, r14
        *data = SPI_wr ( 0x00 );    //send empty byte, read register contents
    65e6:	80 e0       	ldi	r24, 0x00	; 0
    65e8:	0e 94 86 32 	call	0x650c	; 0x650c <SPI_wr>
    65ec:	89 93       	st	Y+, r24
        data++;
        nbytes--;
    65ee:	fa 94       	dec	r15
/* returns a pointer to a memory position after last read   */
char* MAXbytes_rd ( BYTE reg, BYTE nbytes, char* data )
{
    Select_MAX3421E();    //assert SS
    SPI_wr ( reg );     //send register number
    while( nbytes ) {
    65f0:	d1 f7       	brne	.-12     	; 0x65e6 <MAXbytes_rd+0x24>
    65f2:	ea 94       	dec	r14
    65f4:	6e 2d       	mov	r22, r14
    65f6:	70 e0       	ldi	r23, 0x00	; 0
    65f8:	6f 5f       	subi	r22, 0xFF	; 255
    65fa:	7f 4f       	sbci	r23, 0xFF	; 255
    65fc:	06 0f       	add	r16, r22
    65fe:	17 1f       	adc	r17, r23
{
		PORTF.OUTCLR = PIN7_bm; 		// lower ss line to start of transfer
}
void Deselect_MAX3421E()
{
		PORTF.OUTSET = PIN7_bm;  		// raise ss line to end of transfer
    6600:	80 e8       	ldi	r24, 0x80	; 128
    6602:	e0 ea       	ldi	r30, 0xA0	; 160
    6604:	f6 e0       	ldi	r31, 0x06	; 6
    6606:	85 83       	std	Z+5, r24	; 0x05
        data++;
        nbytes--;
    }
    Deselect_MAX3421E();  //deassert SS
    return data;   
}
    6608:	c8 01       	movw	r24, r16
    660a:	df 91       	pop	r29
    660c:	cf 91       	pop	r28
    660e:	1f 91       	pop	r17
    6610:	0f 91       	pop	r16
    6612:	ff 90       	pop	r15
    6614:	ef 90       	pop	r14
    6616:	08 95       	ret

00006618 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
BYTE MAX3421E_reset( void )
{
    6618:	cf 93       	push	r28
 BYTE tmp = 0;
    MAXreg_wr( rUSBCTL,bmCHIPRES );                     //Chip reset. This stops the oscillator
    661a:	60 e2       	ldi	r22, 0x20	; 32
    661c:	88 e7       	ldi	r24, 0x78	; 120
    661e:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
    MAXreg_wr( rUSBCTL,0x00 );                          //Remove the reset
    6622:	60 e0       	ldi	r22, 0x00	; 0
    6624:	88 e7       	ldi	r24, 0x78	; 120
    6626:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
    while(!(MAXreg_rd( rUSBIRQ ) & bmOSCOKIRQ )) {      //wait until the PLL stabilizes
    662a:	c0 e0       	ldi	r28, 0x00	; 0
    662c:	02 c0       	rjmp	.+4      	; 0x6632 <MAX3421E_reset+0x1a>
    662e:	c1 50       	subi	r28, 0x01	; 1
        tmp++;                                          //timeout after 256 attempts
        if( tmp == 0 ) return( 0 );
    6630:	39 f0       	breq	.+14     	; 0x6640 <MAX3421E_reset+0x28>
BYTE MAX3421E_reset( void )
{
 BYTE tmp = 0;
    MAXreg_wr( rUSBCTL,bmCHIPRES );                     //Chip reset. This stops the oscillator
    MAXreg_wr( rUSBCTL,0x00 );                          //Remove the reset
    while(!(MAXreg_rd( rUSBIRQ ) & bmOSCOKIRQ )) {      //wait until the PLL stabilizes
    6632:	88 e6       	ldi	r24, 0x68	; 104
    6634:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
    6638:	80 ff       	sbrs	r24, 0
    663a:	f9 cf       	rjmp	.-14     	; 0x662e <MAX3421E_reset+0x16>
        tmp++;                                          //timeout after 256 attempts
        if( tmp == 0 ) return( 0 );
		    
    }
	    return( 1 );
    663c:	81 e0       	ldi	r24, 0x01	; 1
    663e:	01 c0       	rjmp	.+2      	; 0x6642 <MAX3421E_reset+0x2a>
 BYTE tmp = 0;
    MAXreg_wr( rUSBCTL,bmCHIPRES );                     //Chip reset. This stops the oscillator
    MAXreg_wr( rUSBCTL,0x00 );                          //Remove the reset
    while(!(MAXreg_rd( rUSBIRQ ) & bmOSCOKIRQ )) {      //wait until the PLL stabilizes
        tmp++;                                          //timeout after 256 attempts
        if( tmp == 0 ) return( 0 );
    6640:	80 e0       	ldi	r24, 0x00	; 0
		    
    }
	    return( 1 );
}
    6642:	cf 91       	pop	r28
    6644:	08 95       	ret

00006646 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power ( BOOL action )
{
    6646:	cf 93       	push	r28
    6648:	c8 2f       	mov	r28, r24
    BYTE tmp = MAXreg_rd( rIOPINS2 );       //copy of IOPINS2
    664a:	88 ea       	ldi	r24, 0xA8	; 168
    664c:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
    if( action ) {                              //turn on by setting GPOUT7
    6650:	cc 23       	and	r28, r28
    6652:	79 f0       	breq	.+30     	; 0x6672 <Vbus_power+0x2c>
        tmp |= bmGPOUT7;
    6654:	68 2f       	mov	r22, r24
    6656:	68 60       	ori	r22, 0x08	; 8
    }
    else {                                      //turn off by clearing GPOUT7
        tmp &= ~bmGPOUT7;
    }
    MAXreg_wr( rIOPINS2,tmp );                              //send GPOUT7
    6658:	88 ea       	ldi	r24, 0xA8	; 168
    665a:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    665e:	2f ef       	ldi	r18, 0xFF	; 255
    6660:	8b ed       	ldi	r24, 0xDB	; 219
    6662:	95 e0       	ldi	r25, 0x05	; 5
    6664:	21 50       	subi	r18, 0x01	; 1
    6666:	80 40       	sbci	r24, 0x00	; 0
    6668:	90 40       	sbci	r25, 0x00	; 0
    666a:	e1 f7       	brne	.-8      	; 0x6664 <Vbus_power+0x1e>
    666c:	00 c0       	rjmp	.+0      	; 0x666e <Vbus_power+0x28>
    666e:	00 00       	nop
    6670:	05 c0       	rjmp	.+10     	; 0x667c <Vbus_power+0x36>
    BYTE tmp = MAXreg_rd( rIOPINS2 );       //copy of IOPINS2
    if( action ) {                              //turn on by setting GPOUT7
        tmp |= bmGPOUT7;
    }
    else {                                      //turn off by clearing GPOUT7
        tmp &= ~bmGPOUT7;
    6672:	68 2f       	mov	r22, r24
    6674:	67 7f       	andi	r22, 0xF7	; 247
    }
    MAXreg_wr( rIOPINS2,tmp );                              //send GPOUT7
    6676:	88 ea       	ldi	r24, 0xA8	; 168
    6678:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
    if( action )_delay_ms(60);
    if (!(MAXreg_rd( rIOPINS2 )&bmGPIN7)) return( FALSE );  // check if overload is present
    667c:	88 ea       	ldi	r24, 0xA8	; 168
    667e:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
    return( TRUE );                                             // power on/off successful                       
}
    6682:	88 1f       	adc	r24, r24
    6684:	88 27       	eor	r24, r24
    6686:	88 1f       	adc	r24, r24
    6688:	cf 91       	pop	r28
    668a:	08 95       	ret

0000668c <MAX_busprobe>:
void MAX_busprobe( void )
{
 BYTE bus_sample;
    
//  MAXreg_wr(rHCTL,bmSAMPLEBUS); 
    bus_sample = MAXreg_rd( rHRSL );            //Get J,K status
    668c:	88 ef       	ldi	r24, 0xF8	; 248
    668e:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
    bus_sample &= ( bmJSTATUS|bmKSTATUS );      //zero the rest of the byte
    6692:	80 7c       	andi	r24, 0xC0	; 192

    switch( bus_sample ) {                          //start full-speed or low-speed host 
    6694:	80 34       	cpi	r24, 0x40	; 64
    6696:	f9 f0       	breq	.+62     	; 0x66d6 <MAX_busprobe+0x4a>
    6698:	18 f4       	brcc	.+6      	; 0x66a0 <MAX_busprobe+0x14>
    669a:	88 23       	and	r24, r24
    669c:	b1 f1       	breq	.+108    	; 0x670a <MAX_busprobe+0x7e>
    669e:	08 95       	ret
    66a0:	80 38       	cpi	r24, 0x80	; 128
    66a2:	19 f0       	breq	.+6      	; 0x66aa <MAX_busprobe+0x1e>
    66a4:	80 3c       	cpi	r24, 0xC0	; 192
    66a6:	69 f1       	breq	.+90     	; 0x6702 <MAX_busprobe+0x76>
    66a8:	08 95       	ret
        case( bmJSTATUS ):
            /*kludgy*/
            if( usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ) { //bus reset causes connection detect interrupt
    66aa:	80 91 22 20 	lds	r24, 0x2022
    66ae:	83 31       	cpi	r24, 0x13	; 19
    66b0:	d9 f1       	breq	.+118    	; 0x6728 <MAX_busprobe+0x9c>
                if( (MAXreg_rd( rMODE ) & bmLOWSPEED ) == 0) {
    66b2:	88 ed       	ldi	r24, 0xD8	; 216
    66b4:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
    66b8:	81 fd       	sbrc	r24, 1
    66ba:	05 c0       	rjmp	.+10     	; 0x66c6 <MAX_busprobe+0x3a>
                    MAXreg_wr( rMODE, MODE_FS_HOST );           //start full-speed host
    66bc:	69 ec       	ldi	r22, 0xC9	; 201
    66be:	88 ed       	ldi	r24, 0xD8	; 216
    66c0:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
    66c4:	04 c0       	rjmp	.+8      	; 0x66ce <MAX_busprobe+0x42>
                }
                else {
                    MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
    66c6:	6b ec       	ldi	r22, 0xCB	; 203
    66c8:	88 ed       	ldi	r24, 0xD8	; 216
    66ca:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
                }
                usb_task_state = ( USB_STATE_ATTACHED );    //signal usb state machine to start attachment sequence
    66ce:	80 e1       	ldi	r24, 0x10	; 16
    66d0:	80 93 22 20 	sts	0x2022, r24
    66d4:	08 95       	ret
            }
            break;
        case( bmKSTATUS ):
            if( usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ) { //bus reset causes connection detect interrupt
    66d6:	80 91 22 20 	lds	r24, 0x2022
    66da:	83 31       	cpi	r24, 0x13	; 19
    66dc:	29 f1       	breq	.+74     	; 0x6728 <MAX_busprobe+0x9c>
                if( (MAXreg_rd( rMODE ) & bmLOWSPEED ) == 0) {
    66de:	88 ed       	ldi	r24, 0xD8	; 216
    66e0:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
    66e4:	81 fd       	sbrc	r24, 1
    66e6:	05 c0       	rjmp	.+10     	; 0x66f2 <MAX_busprobe+0x66>
                    MAXreg_wr( rMODE, MODE_LS_HOST );   //start low-speed host
    66e8:	6b ec       	ldi	r22, 0xCB	; 203
    66ea:	88 ed       	ldi	r24, 0xD8	; 216
    66ec:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
    66f0:	04 c0       	rjmp	.+8      	; 0x66fa <MAX_busprobe+0x6e>
                }
                else {
                    MAXreg_wr( rMODE, MODE_FS_HOST );               //start full-speed host
    66f2:	69 ec       	ldi	r22, 0xC9	; 201
    66f4:	88 ed       	ldi	r24, 0xD8	; 216
    66f6:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
                }
                usb_task_state = ( USB_STATE_ATTACHED );    //signal usb state machine to start attachment sequence
    66fa:	80 e1       	ldi	r24, 0x10	; 16
    66fc:	80 93 22 20 	sts	0x2022, r24
    6700:	08 95       	ret
            }
            break;
        case( bmSE1 ):              //illegal state
            usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL );
    6702:	84 e0       	ldi	r24, 0x04	; 4
    6704:	80 93 22 20 	sts	0x2022, r24
            break;
    6708:	08 95       	ret
        case( bmSE0 ):              //disconnected state
            if( !(( usb_task_state & USB_STATE_MASK ) == USB_STATE_DETACHED ))          //if we came here from other than detached state
    670a:	80 91 22 20 	lds	r24, 0x2022
    670e:	80 7f       	andi	r24, 0xF0	; 240
    6710:	21 f0       	breq	.+8      	; 0x671a <MAX_busprobe+0x8e>
                usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE );  //clear device data structures
    6712:	81 e0       	ldi	r24, 0x01	; 1
    6714:	80 93 22 20 	sts	0x2022, r24
    6718:	08 95       	ret
            else {  
              MAXreg_wr( rMODE, MODE_FS_HOST ); //start full-speed host
    671a:	69 ec       	ldi	r22, 0xC9	; 201
    671c:	88 ed       	ldi	r24, 0xD8	; 216
    671e:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
              usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE );
    6722:	83 e0       	ldi	r24, 0x03	; 3
    6724:	80 93 22 20 	sts	0x2022, r24
    6728:	08 95       	ret

0000672a <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init( void )
{

    /* Configure full-duplex SPI, interrupt pulse   */
    MAXreg_wr( rPINCTL,(bmFDUPSPI+bmINTLEVEL+bmGPXB ));     //Full-duplex SPI, level interrupt, GPX
    672a:	6a e1       	ldi	r22, 0x1A	; 26
    672c:	88 e8       	ldi	r24, 0x88	; 136
    672e:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
	if( MAX3421E_reset() == FALSE ) //stop/start the oscillator
    6732:	0e 94 0c 33 	call	0x6618	; 0x6618 <MAX3421E_reset>
    6736:	81 11       	cpse	r24, r1
    6738:	08 c0       	rjmp	.+16     	; 0x674a <MAX3421E_init+0x20>
	{                               
		printf("Error: OSCOKIRQ failed to assert");
    673a:	8c e4       	ldi	r24, 0x4C	; 76
    673c:	93 e2       	ldi	r25, 0x23	; 35
    673e:	9f 93       	push	r25
    6740:	8f 93       	push	r24
    6742:	0e 94 3f 43 	call	0x867e	; 0x867e <printf>
    6746:	0f 90       	pop	r0
    6748:	0f 90       	pop	r0
	}
    /* configure power switch   */
    Vbus_power( OFF );                                      //turn Vbus power off
    674a:	80 e0       	ldi	r24, 0x00	; 0
    674c:	0e 94 23 33 	call	0x6646	; 0x6646 <Vbus_power>
    MAXreg_wr( rGPINIEN, bmGPINIEN7 );                      //enable interrupt on GPIN7 (power switch overload flag)
    6750:	60 e8       	ldi	r22, 0x80	; 128
    6752:	88 eb       	ldi	r24, 0xB8	; 184
    6754:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
    Vbus_power( ON  );
    6758:	81 e0       	ldi	r24, 0x01	; 1
    675a:	0e 94 23 33 	call	0x6646	; 0x6646 <Vbus_power>
    /* configure host operation */
    MAXreg_wr( rMODE, bmDPPULLDN|bmDMPULLDN|bmHOST|bmSEPIRQ );      // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
    675e:	61 ed       	ldi	r22, 0xD1	; 209
    6760:	88 ed       	ldi	r24, 0xD8	; 216
    6762:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
    //MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
    MAXreg_wr( rHIEN, bmCONDETIE|bmFRAMEIE );                                     //connection detection
    6766:	60 e6       	ldi	r22, 0x60	; 96
    6768:	80 ed       	ldi	r24, 0xD0	; 208
    676a:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
    /* HXFRDNIRQ is checked in Dispatch packet function */
    MAXreg_wr(rHCTL,bmSAMPLEBUS);                                               // update the JSTATUS and KSTATUS bits
    676e:	64 e0       	ldi	r22, 0x04	; 4
    6770:	88 ee       	ldi	r24, 0xE8	; 232
    6772:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
    while(!(MAXreg_rd( rHCTL ) & bmSAMPLEBUS ));                                //wait for sample operation to finish
    6776:	88 ee       	ldi	r24, 0xE8	; 232
    6778:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
    677c:	82 ff       	sbrs	r24, 2
    677e:	fb cf       	rjmp	.-10     	; 0x6776 <MAX3421E_init+0x4c>
    MAX_busprobe();                                                             //check if anything is connected
    6780:	0e 94 46 33 	call	0x668c	; 0x668c <MAX_busprobe>
    MAXreg_wr( rHIRQ, bmCONDETIRQ );                                            //clear connection detect interrupt                 
    6784:	60 e2       	ldi	r22, 0x20	; 32
    6786:	88 ec       	ldi	r24, 0xC8	; 200
    6788:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
    MAXreg_wr( rCPUCTL, 0x01 );                                                 //enable interrupt pin
    678c:	61 e0       	ldi	r22, 0x01	; 1
    678e:	80 e8       	ldi	r24, 0x80	; 128
    6790:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
    6794:	08 95       	ret

00006796 <MaxIntHandler>:

void MaxIntHandler( void )
{
 BYTE HIRQ;
 BYTE HIRQ_sendback = 0x00;
        HIRQ = MAXreg_rd( rHIRQ );                  //determine interrupt source
    6796:	88 ec       	ldi	r24, 0xC8	; 200
    6798:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
//        if( HIRQ & bmFRAMEIRQ ) {                   //->1ms SOF interrupt handler
//                    HIRQ_sendback |= bmFRAMEIRQ;
//        }//end FRAMEIRQ handling
        if( HIRQ & bmCONDETIRQ ) {
    679c:	85 ff       	sbrs	r24, 5
    679e:	04 c0       	rjmp	.+8      	; 0x67a8 <MaxIntHandler+0x12>
            MAX_busprobe();
    67a0:	0e 94 46 33 	call	0x668c	; 0x668c <MAX_busprobe>
            HIRQ_sendback |= bmCONDETIRQ;
    67a4:	60 e2       	ldi	r22, 0x20	; 32
    67a6:	01 c0       	rjmp	.+2      	; 0x67aa <MaxIntHandler+0x14>
}   

void MaxIntHandler( void )
{
 BYTE HIRQ;
 BYTE HIRQ_sendback = 0x00;
    67a8:	60 e0       	ldi	r22, 0x00	; 0
        //if ( HIRQ & bmBUSEVENTIRQ ) {               //bus event is either reset or suspend
        //    usb_task_state++;                       //advance USB task state machine
        //    HIRQ_sendback |= bmBUSEVENTIRQ; 
        //}
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        MAXreg_wr( rHIRQ, HIRQ_sendback );
    67aa:	88 ec       	ldi	r24, 0xC8	; 200
    67ac:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
    67b0:	08 95       	ret

000067b2 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task( void )
{
	
    if( (PORTF.IN & PIN6_bm) == 0 ) {
    67b2:	e0 ea       	ldi	r30, 0xA0	; 160
    67b4:	f6 e0       	ldi	r31, 0x06	; 6
    67b6:	80 85       	ldd	r24, Z+8	; 0x08
    67b8:	86 ff       	sbrs	r24, 6
        MaxIntHandler();
    67ba:	0e 94 cb 33 	call	0x6796	; 0x6796 <MaxIntHandler>
    67be:	08 95       	ret

000067c0 <Max_write>:

    GPINIRQ = MAXreg_rd( rGPINIRQ );            //read both IRQ registers
*/
}

void Max_write(char pin, char val) {
    67c0:	1f 93       	push	r17
    67c2:	cf 93       	push	r28
    67c4:	df 93       	push	r29
    67c6:	c6 2f       	mov	r28, r22
    //TODO: Find a better way to do this comparison
    if (pin < 8) {
    67c8:	88 30       	cpi	r24, 0x08	; 8
    67ca:	c0 f4       	brcc	.+48     	; 0x67fc <Max_write+0x3c>
        // process only if the pin is less than 8

        uint8_t bit = pinToBitMask(pin);
    67cc:	28 2f       	mov	r18, r24
    67ce:	30 e0       	ldi	r19, 0x00	; 0
    67d0:	f9 01       	movw	r30, r18
    67d2:	e4 59       	subi	r30, 0x94	; 148
    67d4:	f5 4f       	sbci	r31, 0xF5	; 245
    67d6:	14 91       	lpm	r17, Z
        uint8_t reg = pinToRegister(pin);
    67d8:	f9 01       	movw	r30, r18
    67da:	ec 58       	subi	r30, 0x8C	; 140
    67dc:	f5 4f       	sbci	r31, 0xF5	; 245
    67de:	d4 91       	lpm	r29, Z
        uint8_t out = MAXreg_rd(reg);
    67e0:	8d 2f       	mov	r24, r29
    67e2:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
        
        if (val == 0) {
    67e6:	c1 11       	cpse	r28, r1
    67e8:	04 c0       	rjmp	.+8      	; 0x67f2 <Max_write+0x32>
            out &= ~bit;
    67ea:	10 95       	com	r17
    67ec:	61 2f       	mov	r22, r17
    67ee:	68 23       	and	r22, r24
    67f0:	02 c0       	rjmp	.+4      	; 0x67f6 <Max_write+0x36>
        } else {
            out |= bit;
    67f2:	68 2f       	mov	r22, r24
    67f4:	61 2b       	or	r22, r17
        }

        MAXreg_wr(reg, out);
    67f6:	8d 2f       	mov	r24, r29
    67f8:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
    } else {
        //Serial.print(pin);Serial.println(" not a pin");
    }
}
    67fc:	df 91       	pop	r29
    67fe:	cf 91       	pop	r28
    6800:	1f 91       	pop	r17
    6802:	08 95       	ret

00006804 <MSDProbe>:
}
/* returns TRUE if device is successfuly identified and configured, otherwise returns FALSE */
BOOL MSDProbe( BYTE addr, DWORD flags )
{
    return( FALSE );
}				
    6804:	80 e0       	ldi	r24, 0x00	; 0
    6806:	08 95       	ret

00006808 <MSDEventHandler>:
BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{

	return( FALSE );

}
    6808:	80 e0       	ldi	r24, 0x00	; 0
    680a:	08 95       	ret

0000680c <DummyProbe>:
}

BOOL DummyProbe( BYTE address , DWORD flags )
{
	return( FALSE );
}
    680c:	80 e0       	ldi	r24, 0x00	; 0
    680e:	08 95       	ret

00006810 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
	return( FALSE );
}
    6810:	80 e0       	ldi	r24, 0x00	; 0
    6812:	08 95       	ret

00006814 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */    
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
    6814:	cf 92       	push	r12
    6816:	df 92       	push	r13
    6818:	ef 92       	push	r14
    681a:	ff 92       	push	r15
    681c:	1f 93       	push	r17
    681e:	cf 93       	push	r28
    6820:	df 93       	push	r29
 DWORD timeout = uptime + USB_XFER_TIMEOUT;
    6822:	c0 90 da 26 	lds	r12, 0x26DA
    6826:	d0 90 db 26 	lds	r13, 0x26DB
    682a:	e0 90 dc 26 	lds	r14, 0x26DC
    682e:	f0 90 dd 26 	lds	r15, 0x26DD
    6832:	98 e8       	ldi	r25, 0x88	; 136
    6834:	c9 0e       	add	r12, r25
    6836:	93 e1       	ldi	r25, 0x13	; 19
    6838:	d9 1e       	adc	r13, r25
    683a:	e1 1c       	adc	r14, r1
    683c:	f1 1c       	adc	r15, r1
 BYTE tmpdata;   
 BYTE rcode;
 char retry_count = 0;
 BYTE nak_count = 0;
    683e:	10 e0       	ldi	r17, 0x00	; 0
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 DWORD timeout = uptime + USB_XFER_TIMEOUT;
 BYTE tmpdata;   
 BYTE rcode;
 char retry_count = 0;
    6840:	c0 e0       	ldi	r28, 0x00	; 0
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
    6842:	d8 2f       	mov	r29, r24
    6844:	d6 2b       	or	r29, r22
    6846:	6d 2f       	mov	r22, r29
    6848:	80 ef       	ldi	r24, 0xF0	; 240
    684a:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
        rcode = 0xff;   
        while( uptime < timeout ) {
    684e:	10 c0       	rjmp	.+32     	; 0x6870 <XferDispatchPkt+0x5c>
            tmpdata = MAXreg_rd( rHIRQ );
    6850:	88 ec       	ldi	r24, 0xC8	; 200
    6852:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
            if( tmpdata & bmHXFRDNIRQ ) {
    6856:	88 23       	and	r24, r24
    6858:	5c f4       	brge	.+22     	; 0x6870 <XferDispatchPkt+0x5c>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
    685a:	60 e8       	ldi	r22, 0x80	; 128
    685c:	88 ec       	ldi	r24, 0xC8	; 200
    685e:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
            return( rcode );
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
    6862:	88 ef       	ldi	r24, 0xF8	; 248
    6864:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
    6868:	8f 70       	andi	r24, 0x0F	; 15
        if( rcode == hrNAK ) {
    686a:	84 30       	cpi	r24, 0x04	; 4
    686c:	a1 f4       	brne	.+40     	; 0x6896 <XferDispatchPkt+0x82>
    686e:	0f c0       	rjmp	.+30     	; 0x688e <XferDispatchPkt+0x7a>
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;   
        while( uptime < timeout ) {
    6870:	40 91 da 26 	lds	r20, 0x26DA
    6874:	50 91 db 26 	lds	r21, 0x26DB
    6878:	60 91 dc 26 	lds	r22, 0x26DC
    687c:	70 91 dd 26 	lds	r23, 0x26DD
    6880:	4c 15       	cp	r20, r12
    6882:	5d 05       	cpc	r21, r13
    6884:	6e 05       	cpc	r22, r14
    6886:	7f 05       	cpc	r23, r15
    6888:	18 f3       	brcs	.-58     	; 0x6850 <XferDispatchPkt+0x3c>
 char retry_count = 0;
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;   
    688a:	8f ef       	ldi	r24, 0xFF	; 255
    688c:	0b c0       	rjmp	.+22     	; 0x68a4 <XferDispatchPkt+0x90>
        if( rcode != 0x00 ) {               //exit if timeout
            return( rcode );
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
        if( rcode == hrNAK ) {
            nak_count++;
    688e:	1f 5f       	subi	r17, 0xFF	; 255
            if( nak_count == USB_NAK_LIMIT ) {
    6890:	18 3c       	cpi	r17, 0xC8	; 200
    6892:	c9 f6       	brne	.-78     	; 0x6846 <XferDispatchPkt+0x32>
    6894:	06 c0       	rjmp	.+12     	; 0x68a2 <XferDispatchPkt+0x8e>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
    6896:	8e 30       	cpi	r24, 0x0E	; 14
    6898:	29 f4       	brne	.+10     	; 0x68a4 <XferDispatchPkt+0x90>
            retry_count++;
    689a:	cf 5f       	subi	r28, 0xFF	; 255
            if( retry_count == USB_RETRY_LIMIT ) {
    689c:	c3 30       	cpi	r28, 0x03	; 3
    689e:	99 f6       	brne	.-90     	; 0x6846 <XferDispatchPkt+0x32>
    68a0:	01 c0       	rjmp	.+2      	; 0x68a4 <XferDispatchPkt+0x90>
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
    68a2:	84 e0       	ldi	r24, 0x04	; 4
}
    68a4:	df 91       	pop	r29
    68a6:	cf 91       	pop	r28
    68a8:	1f 91       	pop	r17
    68aa:	ff 90       	pop	r15
    68ac:	ef 90       	pop	r14
    68ae:	df 90       	pop	r13
    68b0:	cf 90       	pop	r12
    68b2:	08 95       	ret

000068b4 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, char* dataptr )
{
    68b4:	6f 92       	push	r6
    68b6:	7f 92       	push	r7
    68b8:	8f 92       	push	r8
    68ba:	9f 92       	push	r9
    68bc:	af 92       	push	r10
    68be:	bf 92       	push	r11
    68c0:	cf 92       	push	r12
    68c2:	df 92       	push	r13
    68c4:	ef 92       	push	r14
    68c6:	ff 92       	push	r15
    68c8:	0f 93       	push	r16
    68ca:	1f 93       	push	r17
    68cc:	cf 93       	push	r28
    68ce:	df 93       	push	r29
    68d0:	cd b7       	in	r28, 0x3d	; 61
    68d2:	de b7       	in	r29, 0x3e	; 62
    68d4:	28 97       	sbiw	r28, 0x08	; 8
    68d6:	cd bf       	out	0x3d, r28	; 61
    68d8:	de bf       	out	0x3e, r29	; 62
    68da:	18 2f       	mov	r17, r24
    68dc:	f6 2e       	mov	r15, r22
    68de:	74 2e       	mov	r7, r20
    68e0:	62 2e       	mov	r6, r18
 BYTE rcode;   
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
        datastage = 0;
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
    68e2:	68 2f       	mov	r22, r24
    68e4:	80 ee       	ldi	r24, 0xE0	; 224
    68e6:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
        direction = TRUE;                   //determine request direstion
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
    68ea:	79 82       	std	Y+1, r7	; 0x01
    setup_pkt.bRequest = bRequest;
    68ec:	6a 82       	std	Y+2, r6	; 0x02
    setup_pkt.wVal_u.wValueLo = wValLo;
    68ee:	0b 83       	std	Y+3, r16	; 0x03
    setup_pkt.wVal_u.wValueHi = wValHi;
    68f0:	ec 82       	std	Y+4, r14	; 0x04
    setup_pkt.wIndex = wInd;
    68f2:	cd 82       	std	Y+5, r12	; 0x05
    68f4:	de 82       	std	Y+6, r13	; 0x06
    setup_pkt.wLength = nbytes;
    68f6:	af 82       	std	Y+7, r10	; 0x07
    68f8:	b8 86       	std	Y+8, r11	; 0x08
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
    68fa:	ae 01       	movw	r20, r28
    68fc:	4f 5f       	subi	r20, 0xFF	; 255
    68fe:	5f 4f       	sbci	r21, 0xFF	; 255
    6900:	68 e0       	ldi	r22, 0x08	; 8
    6902:	80 e2       	ldi	r24, 0x20	; 32
    6904:	0e 94 a5 32 	call	0x654a	; 0x654a <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
    6908:	6f 2d       	mov	r22, r15
    690a:	80 e1       	ldi	r24, 0x10	; 16
    690c:	0e 94 0a 34 	call	0x6814	; 0x6814 <XferDispatchPkt>
    if( rcode ) {                                       //return HRSLT if not zero
    6910:	81 11       	cpse	r24, r1
    6912:	18 c0       	rjmp	.+48     	; 0x6944 <XferCtrlReq+0x90>
{
 BOOL direction = FALSE;        //request direction, IN or OUT
 BYTE datastage = 1; //request data stage present or absent
 BYTE rcode;   
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
    6914:	81 e0       	ldi	r24, 0x01	; 1
    6916:	90 e0       	ldi	r25, 0x00	; 0
    6918:	81 14       	cp	r8, r1
    691a:	91 04       	cpc	r9, r1
    691c:	11 f4       	brne	.+4      	; 0x6922 <XferCtrlReq+0x6e>
    691e:	80 e0       	ldi	r24, 0x00	; 0
    6920:	90 e0       	ldi	r25, 0x00	; 0
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
    if( rcode ) {                                       //return HRSLT if not zero
        return( rcode );
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
    6922:	fc 01       	movw	r30, r24
    6924:	ee 0f       	add	r30, r30
    6926:	ff 1f       	adc	r31, r31
    6928:	e3 59       	subi	r30, 0x93	; 147
    692a:	fc 4d       	sbci	r31, 0xDC	; 220
    if( dataptr == NULL ) {
        datastage = 0;
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
    692c:	07 2d       	mov	r16, r7
    692e:	00 1f       	adc	r16, r16
    6930:	00 27       	eor	r16, r16
    6932:	00 1f       	adc	r16, r16
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
    if( rcode ) {                                       //return HRSLT if not zero
        return( rcode );
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
    6934:	01 90       	ld	r0, Z+
    6936:	f0 81       	ld	r31, Z
    6938:	e0 2d       	mov	r30, r0
    693a:	94 01       	movw	r18, r8
    693c:	a5 01       	movw	r20, r10
    693e:	6f 2d       	mov	r22, r15
    6940:	81 2f       	mov	r24, r17
    6942:	09 95       	icall
    return( rcode );
}
    6944:	28 96       	adiw	r28, 0x08	; 8
    6946:	cd bf       	out	0x3d, r28	; 61
    6948:	de bf       	out	0x3e, r29	; 62
    694a:	df 91       	pop	r29
    694c:	cf 91       	pop	r28
    694e:	1f 91       	pop	r17
    6950:	0f 91       	pop	r16
    6952:	ff 90       	pop	r15
    6954:	ef 90       	pop	r14
    6956:	df 90       	pop	r13
    6958:	cf 90       	pop	r12
    695a:	bf 90       	pop	r11
    695c:	af 90       	pop	r10
    695e:	9f 90       	pop	r9
    6960:	8f 90       	pop	r8
    6962:	7f 90       	pop	r7
    6964:	6f 90       	pop	r6
    6966:	08 95       	ret

00006968 <XferCtrlND>:
        return( 0xff );
    }    
}
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, char* dataptr, BOOL direction )
{
    6968:	0f 93       	push	r16
  BYTE rcode;
    if( direction ) { //GET
    696a:	00 23       	and	r16, r16
    696c:	21 f0       	breq	.+8      	; 0x6976 <XferCtrlND+0xe>
        rcode = XferDispatchPkt( tokOUTHS, ep );
    696e:	80 ea       	ldi	r24, 0xA0	; 160
    6970:	0e 94 0a 34 	call	0x6814	; 0x6814 <XferDispatchPkt>
    6974:	03 c0       	rjmp	.+6      	; 0x697c <XferCtrlND+0x14>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
    6976:	80 e8       	ldi	r24, 0x80	; 128
    6978:	0e 94 0a 34 	call	0x6814	; 0x6814 <XferDispatchPkt>
    }
    return( rcode );
}
    697c:	0f 91       	pop	r16
    697e:	08 95       	ret

00006980 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, char* data, BYTE maxpktsize )
{
    6980:	7f 92       	push	r7
    6982:	8f 92       	push	r8
    6984:	9f 92       	push	r9
    6986:	af 92       	push	r10
    6988:	bf 92       	push	r11
    698a:	cf 92       	push	r12
    698c:	df 92       	push	r13
    698e:	ef 92       	push	r14
    6990:	ff 92       	push	r15
    6992:	0f 93       	push	r16
    6994:	1f 93       	push	r17
    6996:	cf 93       	push	r28
    6998:	df 93       	push	r29
    699a:	16 2f       	mov	r17, r22
    699c:	6a 01       	movw	r12, r20
    699e:	79 01       	movw	r14, r18
 BYTE rcode;
 //BYTE i;
 //BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
    69a0:	a8 2e       	mov	r10, r24
    69a2:	b1 2c       	mov	r11, r1
    69a4:	87 e0       	ldi	r24, 0x07	; 7
    69a6:	68 9f       	mul	r22, r24
    69a8:	40 01       	movw	r8, r0
    69aa:	11 24       	eor	r1, r1
    69ac:	f5 01       	movw	r30, r10
    69ae:	ee 0f       	add	r30, r30
    69b0:	ff 1f       	adc	r31, r31
    69b2:	ea 0d       	add	r30, r10
    69b4:	fb 1d       	adc	r31, r11
    69b6:	ec 56       	subi	r30, 0x6C	; 108
    69b8:	f6 4d       	sbci	r31, 0xD6	; 214
    69ba:	01 90       	ld	r0, Z+
    69bc:	f0 81       	ld	r31, Z
    69be:	e0 2d       	mov	r30, r0
    69c0:	e8 0d       	add	r30, r8
    69c2:	f9 1d       	adc	r31, r9
    69c4:	66 81       	ldd	r22, Z+6	; 0x06
    69c6:	88 ee       	ldi	r24, 0xE8	; 232
    69c8:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
{
 BYTE rcode;
 //BYTE i;
 //BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
    69cc:	c0 e0       	ldi	r28, 0x00	; 0
    69ce:	d0 e0       	ldi	r29, 0x00	; 0
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
    69d0:	61 2f       	mov	r22, r17
    69d2:	80 e0       	ldi	r24, 0x00	; 0
    69d4:	0e 94 0a 34 	call	0x6814	; 0x6814 <XferDispatchPkt>
        if( rcode ) {
    69d8:	81 11       	cpse	r24, r1
    69da:	40 c0       	rjmp	.+128    	; 0x6a5c <XferInTransfer+0xdc>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
        }
        /* check for RCVDAVIRQ and generate error if not present */ 
        /* the only case when absense of RCVDAVIRQ makes sense is when toggle error occured. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
    69dc:	88 ec       	ldi	r24, 0xC8	; 200
    69de:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
    69e2:	82 ff       	sbrs	r24, 2
    69e4:	3a c0       	rjmp	.+116    	; 0x6a5a <XferInTransfer+0xda>
            return ( 0xf0 );                            //receive error
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
    69e6:	80 e3       	ldi	r24, 0x30	; 48
    69e8:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
    69ec:	78 2e       	mov	r7, r24
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
    69ee:	a7 01       	movw	r20, r14
    69f0:	68 2f       	mov	r22, r24
    69f2:	88 e0       	ldi	r24, 0x08	; 8
    69f4:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <MAXbytes_rd>
    69f8:	7c 01       	movw	r14, r24
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
    69fa:	64 e0       	ldi	r22, 0x04	; 4
    69fc:	88 ec       	ldi	r24, 0xC8	; 200
    69fe:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
    6a02:	c7 0d       	add	r28, r7
    6a04:	d1 1d       	adc	r29, r1
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
    6a06:	70 16       	cp	r7, r16
    6a08:	18 f0       	brcs	.+6      	; 0x6a10 <XferInTransfer+0x90>
    6a0a:	cc 15       	cp	r28, r12
    6a0c:	dd 05       	cpc	r29, r13
    6a0e:	00 f3       	brcs	.-64     	; 0x69d0 <XferInTransfer+0x50>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
    6a10:	88 ef       	ldi	r24, 0xF8	; 248
    6a12:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
    6a16:	84 ff       	sbrs	r24, 4
    6a18:	10 c0       	rjmp	.+32     	; 0x6a3a <XferInTransfer+0xba>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
    6a1a:	f5 01       	movw	r30, r10
    6a1c:	ee 0f       	add	r30, r30
    6a1e:	ff 1f       	adc	r31, r31
    6a20:	ea 0d       	add	r30, r10
    6a22:	fb 1d       	adc	r31, r11
    6a24:	ec 56       	subi	r30, 0x6C	; 108
    6a26:	f6 4d       	sbci	r31, 0xD6	; 214
    6a28:	80 81       	ld	r24, Z
    6a2a:	91 81       	ldd	r25, Z+1	; 0x01
    6a2c:	fc 01       	movw	r30, r24
    6a2e:	e8 0d       	add	r30, r8
    6a30:	f9 1d       	adc	r31, r9
    6a32:	80 e2       	ldi	r24, 0x20	; 32
    6a34:	86 83       	std	Z+6, r24	; 0x06
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
            }
            return( 0 );
    6a36:	80 e0       	ldi	r24, 0x00	; 0
    6a38:	11 c0       	rjmp	.+34     	; 0x6a5c <XferInTransfer+0xdc>
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
    6a3a:	f5 01       	movw	r30, r10
    6a3c:	ee 0f       	add	r30, r30
    6a3e:	ff 1f       	adc	r31, r31
    6a40:	ea 0d       	add	r30, r10
    6a42:	fb 1d       	adc	r31, r11
    6a44:	ec 56       	subi	r30, 0x6C	; 108
    6a46:	f6 4d       	sbci	r31, 0xD6	; 214
    6a48:	80 81       	ld	r24, Z
    6a4a:	91 81       	ldd	r25, Z+1	; 0x01
    6a4c:	fc 01       	movw	r30, r24
    6a4e:	e8 0d       	add	r30, r8
    6a50:	f9 1d       	adc	r31, r9
    6a52:	80 e1       	ldi	r24, 0x10	; 16
    6a54:	86 83       	std	Z+6, r24	; 0x06
            }
            return( 0 );
    6a56:	80 e0       	ldi	r24, 0x00	; 0
    6a58:	01 c0       	rjmp	.+2      	; 0x6a5c <XferInTransfer+0xdc>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
        }
        /* check for RCVDAVIRQ and generate error if not present */ 
        /* the only case when absense of RCVDAVIRQ makes sense is when toggle error occured. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
            return ( 0xf0 );                            //receive error
    6a5a:	80 ef       	ldi	r24, 0xF0	; 240
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
            }
            return( 0 );
        }
  }//while( 1 )
}
    6a5c:	df 91       	pop	r29
    6a5e:	cf 91       	pop	r28
    6a60:	1f 91       	pop	r17
    6a62:	0f 91       	pop	r16
    6a64:	ff 90       	pop	r15
    6a66:	ef 90       	pop	r14
    6a68:	df 90       	pop	r13
    6a6a:	cf 90       	pop	r12
    6a6c:	bf 90       	pop	r11
    6a6e:	af 90       	pop	r10
    6a70:	9f 90       	pop	r9
    6a72:	8f 90       	pop	r8
    6a74:	7f 90       	pop	r7
    6a76:	08 95       	ret

00006a78 <XferCtrlData>:
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
    return( rcode );
}
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, char* dataptr, BOOL direction )
{
    6a78:	0f 93       	push	r16
    6a7a:	1f 93       	push	r17
    6a7c:	cf 93       	push	r28
    6a7e:	df 93       	push	r29
    6a80:	16 2f       	mov	r17, r22
  BYTE rcode;
    
    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
    6a82:	00 23       	and	r16, r16
    6a84:	21 f1       	breq	.+72     	; 0x6ace <XferCtrlData+0x56>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
    6a86:	a8 2f       	mov	r26, r24
    6a88:	b0 e0       	ldi	r27, 0x00	; 0
    6a8a:	97 e0       	ldi	r25, 0x07	; 7
    6a8c:	69 9f       	mul	r22, r25
    6a8e:	f0 01       	movw	r30, r0
    6a90:	11 24       	eor	r1, r1
    6a92:	bd 01       	movw	r22, r26
    6a94:	66 0f       	add	r22, r22
    6a96:	77 1f       	adc	r23, r23
    6a98:	a6 0f       	add	r26, r22
    6a9a:	b7 1f       	adc	r27, r23
    6a9c:	ac 56       	subi	r26, 0x6C	; 108
    6a9e:	b6 4d       	sbci	r27, 0xD6	; 214
    6aa0:	cd 91       	ld	r28, X+
    6aa2:	dc 91       	ld	r29, X
    6aa4:	11 97       	sbiw	r26, 0x01	; 1
    6aa6:	ce 0f       	add	r28, r30
    6aa8:	df 1f       	adc	r29, r31
    6aaa:	90 e2       	ldi	r25, 0x20	; 32
    6aac:	9e 83       	std	Y+6, r25	; 0x06
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
    6aae:	0d 90       	ld	r0, X+
    6ab0:	bc 91       	ld	r27, X
    6ab2:	a0 2d       	mov	r26, r0
    6ab4:	ea 0f       	add	r30, r26
    6ab6:	fb 1f       	adc	r31, r27
    6ab8:	02 81       	ldd	r16, Z+2	; 0x02
    6aba:	61 2f       	mov	r22, r17
    6abc:	0e 94 c0 34 	call	0x6980	; 0x6980 <XferInTransfer>
        if( rcode ) {
    6ac0:	81 11       	cpse	r24, r1
    6ac2:	06 c0       	rjmp	.+12     	; 0x6ad0 <XferCtrlData+0x58>
        return( rcode );
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
    6ac4:	61 2f       	mov	r22, r17
    6ac6:	80 ea       	ldi	r24, 0xA0	; 160
    6ac8:	0e 94 0a 34 	call	0x6814	; 0x6814 <XferDispatchPkt>
        return( rcode );
    6acc:	01 c0       	rjmp	.+2      	; 0x6ad0 <XferCtrlData+0x58>
    }
    else {              //OUT not implemented
        return( 0xff );
    6ace:	8f ef       	ldi	r24, 0xFF	; 255
    }    
}
    6ad0:	df 91       	pop	r29
    6ad2:	cf 91       	pop	r28
    6ad4:	1f 91       	pop	r17
    6ad6:	0f 91       	pop	r16
    6ad8:	08 95       	ret

00006ada <USB_init>:
        }
  }//while( 1 )
}
/* initialization of USB data structures */
void USB_init( void )
{
    6ada:	e6 e9       	ldi	r30, 0x96	; 150
    6adc:	f9 e2       	ldi	r31, 0x29	; 41
    6ade:	81 eb       	ldi	r24, 0xB1	; 177
    6ae0:	99 e2       	ldi	r25, 0x29	; 41
    6ae2:	df 01       	movw	r26, r30
    6ae4:	12 97       	sbiw	r26, 0x02	; 2
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
        devtable[ i ].epinfo = NULL;       //clear device table
    6ae6:	1d 92       	st	X+, r1
    6ae8:	1c 92       	st	X, r1
        devtable[ i ].devclass = 0;
    6aea:	10 82       	st	Z, r1
    6aec:	33 96       	adiw	r30, 0x03	; 3
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
    6aee:	e8 17       	cp	r30, r24
    6af0:	f9 07       	cpc	r31, r25
    6af2:	b9 f7       	brne	.-18     	; 0x6ae2 <USB_init+0x8>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device  
    6af4:	84 ee       	ldi	r24, 0xE4	; 228
    6af6:	96 e2       	ldi	r25, 0x26	; 38
    6af8:	80 93 94 29 	sts	0x2994, r24
    6afc:	90 93 95 29 	sts	0x2995, r25
    dev0ep.MaxPktSize = 0;          	
    6b00:	10 92 e6 26 	sts	0x26E6, r1
    6b04:	10 92 e7 26 	sts	0x26E7, r1
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
    6b08:	80 e4       	ldi	r24, 0x40	; 64
    6b0a:	80 93 e9 26 	sts	0x26E9, r24
    dev0ep.rcvToggle = bmRCVTOG0;
    6b0e:	80 e1       	ldi	r24, 0x10	; 16
    6b10:	80 93 ea 26 	sts	0x26EA, r24
    6b14:	08 95       	ret

00006b16 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
    6b16:	8f 92       	push	r8
    6b18:	9f 92       	push	r9
    6b1a:	af 92       	push	r10
    6b1c:	bf 92       	push	r11
    6b1e:	cf 92       	push	r12
    6b20:	df 92       	push	r13
    6b22:	ef 92       	push	r14
    6b24:	ff 92       	push	r15
    6b26:	0f 93       	push	r16
    6b28:	1f 93       	push	r17
    6b2a:	cf 93       	push	r28
    6b2c:	df 93       	push	r29
    6b2e:	cd b7       	in	r28, 0x3d	; 61
    6b30:	de b7       	in	r29, 0x3e	; 62
    6b32:	62 97       	sbiw	r28, 0x12	; 18
    6b34:	cd bf       	out	0x3d, r28	; 61
    6b36:	de bf       	out	0x3e, r29	; 62

 BYTE rcode, tmpdata;
 char i;
	// Debugg
	//printf("%i\n",usb_task_state);
    switch( usb_task_state & USB_STATE_MASK ) {
    6b38:	60 91 22 20 	lds	r22, 0x2022
    6b3c:	86 2f       	mov	r24, r22
    6b3e:	80 7f       	andi	r24, 0xF0	; 240
    6b40:	80 31       	cpi	r24, 0x10	; 16
    6b42:	11 f1       	breq	.+68     	; 0x6b88 <USB_Task+0x72>
    6b44:	18 f4       	brcc	.+6      	; 0x6b4c <USB_Task+0x36>
    6b46:	88 23       	and	r24, r24
    6b48:	79 f0       	breq	.+30     	; 0x6b68 <USB_Task+0x52>
    6b4a:	37 c1       	rjmp	.+622    	; 0x6dba <USB_Task+0x2a4>
    6b4c:	80 32       	cpi	r24, 0x20	; 32
    6b4e:	21 f0       	breq	.+8      	; 0x6b58 <USB_Task+0x42>
    6b50:	80 33       	cpi	r24, 0x30	; 48
    6b52:	09 f4       	brne	.+2      	; 0x6b56 <USB_Task+0x40>
    6b54:	09 c1       	rjmp	.+530    	; 0x6d68 <USB_Task+0x252>
    6b56:	31 c1       	rjmp	.+610    	; 0x6dba <USB_Task+0x2a4>
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
                if( devtable[ i ].epinfo == NULL ) {
    6b58:	80 91 97 29 	lds	r24, 0x2997
    6b5c:	90 91 98 29 	lds	r25, 0x2998
    6b60:	89 2b       	or	r24, r25
    6b62:	09 f0       	breq	.+2      	; 0x6b66 <USB_Task+0x50>
    6b64:	b4 c0       	rjmp	.+360    	; 0x6cce <USB_Task+0x1b8>
    6b66:	be c0       	rjmp	.+380    	; 0x6ce4 <USB_Task+0x1ce>
	// Debugg
	//printf("%i\n",usb_task_state);
    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
    6b68:	61 30       	cpi	r22, 0x01	; 1
    6b6a:	19 f0       	breq	.+6      	; 0x6b72 <USB_Task+0x5c>
    6b6c:	63 30       	cpi	r22, 0x03	; 3
    6b6e:	39 f0       	breq	.+14     	; 0x6b7e <USB_Task+0x68>
    6b70:	24 c1       	rjmp	.+584    	; 0x6dba <USB_Task+0x2a4>
                case( USB_DETACHED_SUBSTATE_INITIALIZE ): 
                    /* cleanup device data structures */
                    USB_init();
    6b72:	0e 94 6d 35 	call	0x6ada	; 0x6ada <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE; 
    6b76:	83 e0       	ldi	r24, 0x03	; 3
    6b78:	80 93 22 20 	sts	0x2022, r24
                    break;
    6b7c:	1e c1       	rjmp	.+572    	; 0x6dba <USB_Task+0x2a4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
    6b7e:	64 e0       	ldi	r22, 0x04	; 4
    6b80:	88 ee       	ldi	r24, 0xE8	; 232
    6b82:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
                    break;
    6b86:	19 c1       	rjmp	.+562    	; 0x6dba <USB_Task+0x2a4>
                    break;
            }//switch( usb_task_state )     
            break;//( USB_STATE_DETACHED ):
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
    6b88:	62 31       	cpi	r22, 0x12	; 18
    6b8a:	09 f4       	brne	.+2      	; 0x6b8e <USB_Task+0x78>
    6b8c:	41 c0       	rjmp	.+130    	; 0x6c10 <USB_Task+0xfa>
    6b8e:	28 f4       	brcc	.+10     	; 0x6b9a <USB_Task+0x84>
    6b90:	60 31       	cpi	r22, 0x10	; 16
    6b92:	61 f0       	breq	.+24     	; 0x6bac <USB_Task+0x96>
    6b94:	61 31       	cpi	r22, 0x11	; 17
    6b96:	11 f1       	breq	.+68     	; 0x6bdc <USB_Task+0xc6>
    6b98:	10 c1       	rjmp	.+544    	; 0x6dba <USB_Task+0x2a4>
    6b9a:	64 31       	cpi	r22, 0x14	; 20
    6b9c:	09 f4       	brne	.+2      	; 0x6ba0 <USB_Task+0x8a>
    6b9e:	55 c0       	rjmp	.+170    	; 0x6c4a <USB_Task+0x134>
    6ba0:	08 f4       	brcc	.+2      	; 0x6ba4 <USB_Task+0x8e>
    6ba2:	42 c0       	rjmp	.+132    	; 0x6c28 <USB_Task+0x112>
    6ba4:	65 31       	cpi	r22, 0x15	; 21
    6ba6:	09 f4       	brne	.+2      	; 0x6baa <USB_Task+0x94>
    6ba8:	60 c0       	rjmp	.+192    	; 0x6c6a <USB_Task+0x154>
    6baa:	07 c1       	rjmp	.+526    	; 0x6dba <USB_Task+0x2a4>
                case( USB_STATE_ATTACHED ):
                    usb_delay = uptime + 200;           //initial settle 200ms
    6bac:	80 91 da 26 	lds	r24, 0x26DA
    6bb0:	90 91 db 26 	lds	r25, 0x26DB
    6bb4:	a0 91 dc 26 	lds	r26, 0x26DC
    6bb8:	b0 91 dd 26 	lds	r27, 0x26DD
    6bbc:	88 53       	subi	r24, 0x38	; 56
    6bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    6bc0:	af 4f       	sbci	r26, 0xFF	; 255
    6bc2:	bf 4f       	sbci	r27, 0xFF	; 255
    6bc4:	80 93 df 26 	sts	0x26DF, r24
    6bc8:	90 93 e0 26 	sts	0x26E0, r25
    6bcc:	a0 93 e1 26 	sts	0x26E1, r26
    6bd0:	b0 93 e2 26 	sts	0x26E2, r27
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    6bd4:	81 e1       	ldi	r24, 0x11	; 17
    6bd6:	80 93 22 20 	sts	0x2022, r24
                    break;//case( USB_STATE_ATTACHED )
    6bda:	ef c0       	rjmp	.+478    	; 0x6dba <USB_Task+0x2a4>
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( uptime > usb_delay ) {
    6bdc:	40 91 da 26 	lds	r20, 0x26DA
    6be0:	50 91 db 26 	lds	r21, 0x26DB
    6be4:	60 91 dc 26 	lds	r22, 0x26DC
    6be8:	70 91 dd 26 	lds	r23, 0x26DD
    6bec:	80 91 df 26 	lds	r24, 0x26DF
    6bf0:	90 91 e0 26 	lds	r25, 0x26E0
    6bf4:	a0 91 e1 26 	lds	r26, 0x26E1
    6bf8:	b0 91 e2 26 	lds	r27, 0x26E2
    6bfc:	84 17       	cp	r24, r20
    6bfe:	95 07       	cpc	r25, r21
    6c00:	a6 07       	cpc	r26, r22
    6c02:	b7 07       	cpc	r27, r23
    6c04:	08 f0       	brcs	.+2      	; 0x6c08 <USB_Task+0xf2>
    6c06:	d9 c0       	rjmp	.+434    	; 0x6dba <USB_Task+0x2a4>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    6c08:	82 e1       	ldi	r24, 0x12	; 18
    6c0a:	80 93 22 20 	sts	0x2022, r24
    6c0e:	d5 c0       	rjmp	.+426    	; 0x6dba <USB_Task+0x2a4>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )    
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
    6c10:	61 e0       	ldi	r22, 0x01	; 1
    6c12:	88 ec       	ldi	r24, 0xC8	; 200
    6c14:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
    6c18:	61 e0       	ldi	r22, 0x01	; 1
    6c1a:	88 ee       	ldi	r24, 0xE8	; 232
    6c1c:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    6c20:	83 e1       	ldi	r24, 0x13	; 19
    6c22:	80 93 22 20 	sts	0x2022, r24
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
    6c26:	c9 c0       	rjmp	.+402    	; 0x6dba <USB_Task+0x2a4>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
    6c28:	88 ee       	ldi	r24, 0xE8	; 232
    6c2a:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
    6c2e:	80 fd       	sbrc	r24, 0
    6c30:	c4 c0       	rjmp	.+392    	; 0x6dba <USB_Task+0x2a4>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
    6c32:	88 ed       	ldi	r24, 0xD8	; 216
    6c34:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
    6c38:	68 2f       	mov	r22, r24
    6c3a:	68 60       	ori	r22, 0x08	; 8
                        MAXreg_wr( rMODE, tmpdata );
    6c3c:	88 ed       	ldi	r24, 0xD8	; 216
    6c3e:	0e 94 90 32 	call	0x6520	; 0x6520 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    6c42:	84 e1       	ldi	r24, 0x14	; 20
    6c44:	80 93 22 20 	sts	0x2022, r24
    6c48:	b8 c0       	rjmp	.+368    	; 0x6dba <USB_Task+0x2a4>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
    6c4a:	88 ec       	ldi	r24, 0xC8	; 200
    6c4c:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
    6c50:	85 e1       	ldi	r24, 0x15	; 21
    6c52:	80 93 22 20 	sts	0x2022, r24
    6c56:	2f ef       	ldi	r18, 0xFF	; 255
    6c58:	83 ef       	ldi	r24, 0xF3	; 243
    6c5a:	91 e0       	ldi	r25, 0x01	; 1
    6c5c:	21 50       	subi	r18, 0x01	; 1
    6c5e:	80 40       	sbci	r24, 0x00	; 0
    6c60:	90 40       	sbci	r25, 0x00	; 0
    6c62:	e1 f7       	brne	.-8      	; 0x6c5c <USB_Task+0x146>
    6c64:	00 c0       	rjmp	.+0      	; 0x6c66 <USB_Task+0x150>
    6c66:	00 00       	nop
    6c68:	a8 c0       	rjmp	.+336    	; 0x6dba <USB_Task+0x2a4>
						_delay_ms(20);
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 8;             //fill max packet size with minimum allowed
    6c6a:	e0 91 94 29 	lds	r30, 0x2994
    6c6e:	f0 91 95 29 	lds	r31, 0x2995
    6c72:	88 e0       	ldi	r24, 0x08	; 8
    6c74:	90 e0       	ldi	r25, 0x00	; 0
    6c76:	82 83       	std	Z+2, r24	; 0x02
    6c78:	93 83       	std	Z+3, r25	; 0x03
                    rcode = XferGetDevDescr( 0, 0, 8, (char *)&buf );       //get device descriptor size
    6c7a:	de 01       	movw	r26, r28
    6c7c:	11 96       	adiw	r26, 0x01	; 1
    6c7e:	4d 01       	movw	r8, r26
    6c80:	68 94       	set
    6c82:	aa 24       	eor	r10, r10
    6c84:	a3 f8       	bld	r10, 3
    6c86:	b1 2c       	mov	r11, r1
    6c88:	c1 2c       	mov	r12, r1
    6c8a:	d1 2c       	mov	r13, r1
    6c8c:	ee 24       	eor	r14, r14
    6c8e:	e3 94       	inc	r14
    6c90:	00 e0       	ldi	r16, 0x00	; 0
    6c92:	26 e0       	ldi	r18, 0x06	; 6
    6c94:	40 e8       	ldi	r20, 0x80	; 128
    6c96:	60 e0       	ldi	r22, 0x00	; 0
    6c98:	80 e0       	ldi	r24, 0x00	; 0
    6c9a:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <XferCtrlReq>
                    if( rcode == 0 ) {
    6c9e:	81 11       	cpse	r24, r1
    6ca0:	0c c0       	rjmp	.+24     	; 0x6cba <USB_Task+0x1a4>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
    6ca2:	e0 91 94 29 	lds	r30, 0x2994
    6ca6:	f0 91 95 29 	lds	r31, 0x2995
    6caa:	88 85       	ldd	r24, Y+8	; 0x08
    6cac:	90 e0       	ldi	r25, 0x00	; 0
    6cae:	82 83       	std	Z+2, r24	; 0x02
    6cb0:	93 83       	std	Z+3, r25	; 0x03
                        usb_task_state = USB_STATE_ADDRESSING;
    6cb2:	80 e2       	ldi	r24, 0x20	; 32
    6cb4:	80 93 22 20 	sts	0x2022, r24
    6cb8:	80 c0       	rjmp	.+256    	; 0x6dba <USB_Task+0x2a4>
                    }
                    else {
                        usb_error = rcode;
    6cba:	80 93 93 29 	sts	0x2993, r24
                        last_usb_task_state = usb_task_state;
    6cbe:	80 91 22 20 	lds	r24, 0x2022
    6cc2:	80 93 e3 26 	sts	0x26E3, r24
                        usb_task_state = USB_STATE_ERROR;
    6cc6:	8f ef       	ldi	r24, 0xFF	; 255
    6cc8:	80 93 22 20 	sts	0x2022, r24
    6ccc:	76 c0       	rjmp	.+236    	; 0x6dba <USB_Task+0x2a4>
    6cce:	ea e9       	ldi	r30, 0x9A	; 154
    6cd0:	f9 e2       	ldi	r31, 0x29	; 41
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
                if( devtable[ i ].epinfo == NULL ) {
    6cd2:	82 e0       	ldi	r24, 0x02	; 2
    6cd4:	90 e0       	ldi	r25, 0x00	; 0
    6cd6:	18 2f       	mov	r17, r24
    6cd8:	ac 01       	movw	r20, r24
    6cda:	20 81       	ld	r18, Z
    6cdc:	31 81       	ldd	r19, Z+1	; 0x01
    6cde:	23 2b       	or	r18, r19
    6ce0:	91 f5       	brne	.+100    	; 0x6d46 <USB_Task+0x230>
    6ce2:	03 c0       	rjmp	.+6      	; 0x6cea <USB_Task+0x1d4>
    6ce4:	41 e0       	ldi	r20, 0x01	; 1
    6ce6:	50 e0       	ldi	r21, 0x00	; 0
    6ce8:	11 e0       	ldi	r17, 0x01	; 1
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
    6cea:	80 91 94 29 	lds	r24, 0x2994
    6cee:	90 91 95 29 	lds	r25, 0x2995
    6cf2:	fa 01       	movw	r30, r20
    6cf4:	ee 0f       	add	r30, r30
    6cf6:	ff 1f       	adc	r31, r31
    6cf8:	4e 0f       	add	r20, r30
    6cfa:	5f 1f       	adc	r21, r31
    6cfc:	fa 01       	movw	r30, r20
    6cfe:	ec 56       	subi	r30, 0x6C	; 108
    6d00:	f6 4d       	sbci	r31, 0xD6	; 214
    6d02:	80 83       	st	Z, r24
    6d04:	91 83       	std	Z+1, r25	; 0x01
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy unitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
    6d06:	81 2c       	mov	r8, r1
    6d08:	91 2c       	mov	r9, r1
    6d0a:	a1 2c       	mov	r10, r1
    6d0c:	b1 2c       	mov	r11, r1
    6d0e:	c1 2c       	mov	r12, r1
    6d10:	d1 2c       	mov	r13, r1
    6d12:	e1 2c       	mov	r14, r1
    6d14:	01 2f       	mov	r16, r17
    6d16:	25 e0       	ldi	r18, 0x05	; 5
    6d18:	40 e0       	ldi	r20, 0x00	; 0
    6d1a:	60 e0       	ldi	r22, 0x00	; 0
    6d1c:	80 e0       	ldi	r24, 0x00	; 0
    6d1e:	0e 94 5a 34 	call	0x68b4	; 0x68b4 <XferCtrlReq>
                    if( rcode == 0 ) {
    6d22:	81 11       	cpse	r24, r1
    6d24:	06 c0       	rjmp	.+12     	; 0x6d32 <USB_Task+0x21c>
                        tmp_addr = i;
    6d26:	10 93 de 26 	sts	0x26DE, r17
                        usb_task_state = USB_STATE_CONFIGURING;
    6d2a:	80 e3       	ldi	r24, 0x30	; 48
    6d2c:	80 93 22 20 	sts	0x2022, r24
    6d30:	44 c0       	rjmp	.+136    	; 0x6dba <USB_Task+0x2a4>
                    }
                    else {
                        usb_error = rcode;          //set address error
    6d32:	80 93 93 29 	sts	0x2993, r24
                        last_usb_task_state = usb_task_state;
    6d36:	80 91 22 20 	lds	r24, 0x2022
    6d3a:	80 93 e3 26 	sts	0x26E3, r24
                        usb_task_state = USB_STATE_ERROR;
    6d3e:	8f ef       	ldi	r24, 0xFF	; 255
    6d40:	80 93 22 20 	sts	0x2022, r24
    6d44:	3a c0       	rjmp	.+116    	; 0x6dba <USB_Task+0x2a4>
    6d46:	01 96       	adiw	r24, 0x01	; 1
    6d48:	33 96       	adiw	r30, 0x03	; 3
                    }                                                      
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
    6d4a:	88 30       	cpi	r24, 0x08	; 8
    6d4c:	91 05       	cpc	r25, r1
    6d4e:	19 f6       	brne	.-122    	; 0x6cd6 <USB_Task+0x1c0>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occured during address assignment attempt                      
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
    6d50:	60 32       	cpi	r22, 0x20	; 32
    6d52:	99 f5       	brne	.+102    	; 0x6dba <USB_Task+0x2a4>
                usb_error = 0xfe;
    6d54:	8e ef       	ldi	r24, 0xFE	; 254
    6d56:	80 93 93 29 	sts	0x2993, r24
                last_usb_task_state = usb_task_state;
    6d5a:	80 e2       	ldi	r24, 0x20	; 32
    6d5c:	80 93 e3 26 	sts	0x26E3, r24
                usb_task_state = USB_STATE_ERROR;
    6d60:	8f ef       	ldi	r24, 0xFF	; 255
    6d62:	80 93 22 20 	sts	0x2022, r24
    6d66:	29 c0       	rjmp	.+82     	; 0x6dba <USB_Task+0x2a4>
    6d68:	03 e2       	ldi	r16, 0x23	; 35
    6d6a:	10 e2       	ldi	r17, 0x20	; 32
    6d6c:	0f 2e       	mov	r0, r31
    6d6e:	f3 e4       	ldi	r31, 0x43	; 67
    6d70:	ef 2e       	mov	r14, r31
    6d72:	f0 e2       	ldi	r31, 0x20	; 32
    6d74:	ff 2e       	mov	r15, r31
    6d76:	f0 2d       	mov	r31, r0
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
            /* run device class probes until one returns TRUE    */
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
				//printf("class = %i \n ",tmp_addr);
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
    6d78:	d8 01       	movw	r26, r16
    6d7a:	ed 91       	ld	r30, X+
    6d7c:	fc 91       	ld	r31, X
    6d7e:	40 e0       	ldi	r20, 0x00	; 0
    6d80:	50 e0       	ldi	r21, 0x00	; 0
    6d82:	ba 01       	movw	r22, r20
    6d84:	80 91 de 26 	lds	r24, 0x26DE
    6d88:	09 95       	icall
                if( rcode == TRUE ) {
    6d8a:	81 30       	cpi	r24, 0x01	; 1
    6d8c:	21 f4       	brne	.+8      	; 0x6d96 <USB_Task+0x280>
			        usb_task_state = USB_STATE_RUNNING;  
    6d8e:	80 e4       	ldi	r24, 0x40	; 64
    6d90:	80 93 22 20 	sts	0x2022, r24
    6d94:	12 c0       	rjmp	.+36     	; 0x6dba <USB_Task+0x2a4>
    6d96:	08 5f       	subi	r16, 0xF8	; 248
    6d98:	1f 4f       	sbci	r17, 0xFF	; 255
                usb_task_state = USB_STATE_ERROR;
            }    
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
            /* run device class probes until one returns TRUE    */
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
    6d9a:	0e 15       	cp	r16, r14
    6d9c:	1f 05       	cpc	r17, r15
    6d9e:	61 f7       	brne	.-40     	; 0x6d78 <USB_Task+0x262>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;  
                    break;  
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
    6da0:	80 91 22 20 	lds	r24, 0x2022
    6da4:	80 33       	cpi	r24, 0x30	; 48
    6da6:	49 f4       	brne	.+18     	; 0x6dba <USB_Task+0x2a4>
                usb_error = 0xfd;
    6da8:	8d ef       	ldi	r24, 0xFD	; 253
    6daa:	80 93 93 29 	sts	0x2993, r24
                last_usb_task_state = usb_task_state;
    6dae:	80 e3       	ldi	r24, 0x30	; 48
    6db0:	80 93 e3 26 	sts	0x26E3, r24
                usb_task_state = USB_STATE_ERROR;
    6db4:	8f ef       	ldi	r24, 0xFF	; 255
    6db6:	80 93 22 20 	sts	0x2022, r24
            break;//( USB_STATE_ERROR ) 
        default:
            //Should never get here
            break;  
    }//switch( usb_task_state & STATE_MASK )
}
    6dba:	62 96       	adiw	r28, 0x12	; 18
    6dbc:	cd bf       	out	0x3d, r28	; 61
    6dbe:	de bf       	out	0x3e, r29	; 62
    6dc0:	df 91       	pop	r29
    6dc2:	cf 91       	pop	r28
    6dc4:	1f 91       	pop	r17
    6dc6:	0f 91       	pop	r16
    6dc8:	ff 90       	pop	r15
    6dca:	ef 90       	pop	r14
    6dcc:	df 90       	pop	r13
    6dce:	cf 90       	pop	r12
    6dd0:	bf 90       	pop	r11
    6dd2:	af 90       	pop	r10
    6dd4:	9f 90       	pop	r9
    6dd6:	8f 90       	pop	r8
    6dd8:	08 95       	ret

00006dda <setup_timmer>:

/** settignup interup timmer tcc0 */
void setup_timmer()
{
	// read timmer for radio timeout
	TCC0.CNT = 0;// Zeroise count
    6dda:	e0 e0       	ldi	r30, 0x00	; 0
    6ddc:	f8 e0       	ldi	r31, 0x08	; 8
    6dde:	10 a2       	std	Z+32, r1	; 0x20
    6de0:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 2000; //Period
    6de2:	80 ed       	ldi	r24, 0xD0	; 208
    6de4:	97 e0       	ldi	r25, 0x07	; 7
    6de6:	86 a3       	std	Z+38, r24	; 0x26
    6de8:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1024_gc; //Divider
    6dea:	87 e0       	ldi	r24, 0x07	; 7
    6dec:	80 83       	st	Z, r24
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc; //Liow level interrupt
    6dee:	81 e0       	ldi	r24, 0x01	; 1
    6df0:	86 83       	std	Z+6, r24	; 0x06
	TCC0.INTFLAGS = 0x01; // clear any initial interrupt flags
    6df2:	84 87       	std	Z+12, r24	; 0x0c
	TCC0.CTRLB = TC_WGMODE_NORMAL_gc; // Normal operation
    6df4:	11 82       	std	Z+1, r1	; 0x01
    6df6:	08 95       	ret

00006df8 <send_get_freq>:
}

/** Send the paket to radio for freqvency and mode */
void send_get_freq()
{
    6df8:	0f 93       	push	r16
    6dfa:	1f 93       	push	r17
    6dfc:	cf 93       	push	r28
    6dfe:	df 93       	push	r29
    6e00:	cd b7       	in	r28, 0x3d	; 61
    6e02:	de b7       	in	r29, 0x3e	; 62
    6e04:	25 97       	sbiw	r28, 0x05	; 5
    6e06:	cd bf       	out	0x3d, r28	; 61
    6e08:	de bf       	out	0x3e, r29	; 62

	BYTE serial[5] ={0xFF,0xFF,0xFF,0xFF,0x03};
    6e0a:	85 e0       	ldi	r24, 0x05	; 5
    6e0c:	e4 eb       	ldi	r30, 0xB4	; 180
    6e0e:	f0 e2       	ldi	r31, 0x20	; 32
    6e10:	de 01       	movw	r26, r28
    6e12:	11 96       	adiw	r26, 0x01	; 1
    6e14:	01 90       	ld	r0, Z+
    6e16:	0d 92       	st	X+, r0
    6e18:	8a 95       	dec	r24
    6e1a:	e1 f7       	brne	.-8      	; 0x6e14 <send_get_freq+0x1c>
	

	for (int i =0; i<8;i++)
    6e1c:	00 e0       	ldi	r16, 0x00	; 0
    6e1e:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (i <5)
    6e20:	05 30       	cpi	r16, 0x05	; 5
    6e22:	11 05       	cpc	r17, r1
    6e24:	5c f4       	brge	.+22     	; 0x6e3c <send_get_freq+0x44>
    6e26:	e1 e0       	ldi	r30, 0x01	; 1
    6e28:	f0 e0       	ldi	r31, 0x00	; 0
    6e2a:	ec 0f       	add	r30, r28
    6e2c:	fd 1f       	adc	r31, r29
    6e2e:	e0 0f       	add	r30, r16
    6e30:	f1 1f       	adc	r31, r17
		{
			sendChar_d(serial[i]);
    6e32:	80 81       	ld	r24, Z
    6e34:	90 e0       	ldi	r25, 0x00	; 0
    6e36:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <sendChar_d>
    6e3a:	04 c0       	rjmp	.+8      	; 0x6e44 <send_get_freq+0x4c>
		}
		else
		{
			sendChar_d(0xFF);
    6e3c:	8f ef       	ldi	r24, 0xFF	; 255
    6e3e:	90 e0       	ldi	r25, 0x00	; 0
    6e40:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <sendChar_d>
{

	BYTE serial[5] ={0xFF,0xFF,0xFF,0xFF,0x03};
	

	for (int i =0; i<8;i++)
    6e44:	0f 5f       	subi	r16, 0xFF	; 255
    6e46:	1f 4f       	sbci	r17, 0xFF	; 255
    6e48:	08 30       	cpi	r16, 0x08	; 8
    6e4a:	11 05       	cpc	r17, r1
    6e4c:	49 f7       	brne	.-46     	; 0x6e20 <send_get_freq+0x28>
		{
			sendChar_d(0xFF);
		}
		
	}
	controller_tx=1;
    6e4e:	81 e0       	ldi	r24, 0x01	; 1
    6e50:	90 e0       	ldi	r25, 0x00	; 0
    6e52:	80 93 f9 26 	sts	0x26F9, r24
    6e56:	90 93 fa 26 	sts	0x26FA, r25


}
    6e5a:	25 96       	adiw	r28, 0x05	; 5
    6e5c:	cd bf       	out	0x3d, r28	; 61
    6e5e:	de bf       	out	0x3e, r29	; 62
    6e60:	df 91       	pop	r29
    6e62:	cf 91       	pop	r28
    6e64:	1f 91       	pop	r17
    6e66:	0f 91       	pop	r16
    6e68:	08 95       	ret

00006e6a <send_get_status>:
/** Send the paket to radio for status of settings */
void send_get_status()
{
    6e6a:	0f 93       	push	r16
    6e6c:	1f 93       	push	r17
    6e6e:	cf 93       	push	r28
    6e70:	df 93       	push	r29
    6e72:	cd b7       	in	r28, 0x3d	; 61
    6e74:	de b7       	in	r29, 0x3e	; 62
    6e76:	25 97       	sbiw	r28, 0x05	; 5
    6e78:	cd bf       	out	0x3d, r28	; 61
    6e7a:	de bf       	out	0x3e, r29	; 62
	BYTE serial[5] ={0xFF,0xFF,0xFF,0xFF,0xF7};
    6e7c:	85 e0       	ldi	r24, 0x05	; 5
    6e7e:	e9 eb       	ldi	r30, 0xB9	; 185
    6e80:	f0 e2       	ldi	r31, 0x20	; 32
    6e82:	de 01       	movw	r26, r28
    6e84:	11 96       	adiw	r26, 0x01	; 1
    6e86:	01 90       	ld	r0, Z+
    6e88:	0d 92       	st	X+, r0
    6e8a:	8a 95       	dec	r24
    6e8c:	e1 f7       	brne	.-8      	; 0x6e86 <send_get_status+0x1c>


	for (int i =0; i<8;i++)
    6e8e:	00 e0       	ldi	r16, 0x00	; 0
    6e90:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (i <5)
    6e92:	05 30       	cpi	r16, 0x05	; 5
    6e94:	11 05       	cpc	r17, r1
    6e96:	54 f4       	brge	.+20     	; 0x6eac <send_get_status+0x42>
    6e98:	e1 e0       	ldi	r30, 0x01	; 1
    6e9a:	f0 e0       	ldi	r31, 0x00	; 0
    6e9c:	ec 0f       	add	r30, r28
    6e9e:	fd 1f       	adc	r31, r29
    6ea0:	e0 0f       	add	r30, r16
    6ea2:	f1 1f       	adc	r31, r17
		{
			sendChar_d(serial[i]);
    6ea4:	80 81       	ld	r24, Z
    6ea6:	90 e0       	ldi	r25, 0x00	; 0
    6ea8:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <sendChar_d>
void send_get_status()
{
	BYTE serial[5] ={0xFF,0xFF,0xFF,0xFF,0xF7};


	for (int i =0; i<8;i++)
    6eac:	0f 5f       	subi	r16, 0xFF	; 255
    6eae:	1f 4f       	sbci	r17, 0xFF	; 255
    6eb0:	08 30       	cpi	r16, 0x08	; 8
    6eb2:	11 05       	cpc	r17, r1
    6eb4:	71 f7       	brne	.-36     	; 0x6e92 <send_get_status+0x28>
		{
			sendChar_d(serial[i]);
		}
		
	}
	controller_tx=1;
    6eb6:	81 e0       	ldi	r24, 0x01	; 1
    6eb8:	90 e0       	ldi	r25, 0x00	; 0
    6eba:	80 93 f9 26 	sts	0x26F9, r24
    6ebe:	90 93 fa 26 	sts	0x26FA, r25

}
    6ec2:	25 96       	adiw	r28, 0x05	; 5
    6ec4:	cd bf       	out	0x3d, r28	; 61
    6ec6:	de bf       	out	0x3e, r29	; 62
    6ec8:	df 91       	pop	r29
    6eca:	cf 91       	pop	r28
    6ecc:	1f 91       	pop	r17
    6ece:	0f 91       	pop	r16
    6ed0:	08 95       	ret

00006ed2 <send_get_rxstatus>:
/** Send the paket to radio for RX settings */
void send_get_rxstatus()
{
    6ed2:	0f 93       	push	r16
    6ed4:	1f 93       	push	r17
    6ed6:	cf 93       	push	r28
    6ed8:	df 93       	push	r29
    6eda:	cd b7       	in	r28, 0x3d	; 61
    6edc:	de b7       	in	r29, 0x3e	; 62
    6ede:	25 97       	sbiw	r28, 0x05	; 5
    6ee0:	cd bf       	out	0x3d, r28	; 61
    6ee2:	de bf       	out	0x3e, r29	; 62
	BYTE serial[5] ={0xFF,0xFF,0xFF,0xFF,0xE7};
    6ee4:	85 e0       	ldi	r24, 0x05	; 5
    6ee6:	ee eb       	ldi	r30, 0xBE	; 190
    6ee8:	f0 e2       	ldi	r31, 0x20	; 32
    6eea:	de 01       	movw	r26, r28
    6eec:	11 96       	adiw	r26, 0x01	; 1
    6eee:	01 90       	ld	r0, Z+
    6ef0:	0d 92       	st	X+, r0
    6ef2:	8a 95       	dec	r24
    6ef4:	e1 f7       	brne	.-8      	; 0x6eee <send_get_rxstatus+0x1c>


	for (int i =0; i<8;i++)
    6ef6:	00 e0       	ldi	r16, 0x00	; 0
    6ef8:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (i <5)
    6efa:	05 30       	cpi	r16, 0x05	; 5
    6efc:	11 05       	cpc	r17, r1
    6efe:	54 f4       	brge	.+20     	; 0x6f14 <send_get_rxstatus+0x42>
    6f00:	e1 e0       	ldi	r30, 0x01	; 1
    6f02:	f0 e0       	ldi	r31, 0x00	; 0
    6f04:	ec 0f       	add	r30, r28
    6f06:	fd 1f       	adc	r31, r29
    6f08:	e0 0f       	add	r30, r16
    6f0a:	f1 1f       	adc	r31, r17
		{
			sendChar_d(serial[i]);
    6f0c:	80 81       	ld	r24, Z
    6f0e:	90 e0       	ldi	r25, 0x00	; 0
    6f10:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <sendChar_d>
void send_get_rxstatus()
{
	BYTE serial[5] ={0xFF,0xFF,0xFF,0xFF,0xE7};


	for (int i =0; i<8;i++)
    6f14:	0f 5f       	subi	r16, 0xFF	; 255
    6f16:	1f 4f       	sbci	r17, 0xFF	; 255
    6f18:	08 30       	cpi	r16, 0x08	; 8
    6f1a:	11 05       	cpc	r17, r1
    6f1c:	71 f7       	brne	.-36     	; 0x6efa <send_get_rxstatus+0x28>
		{
			sendChar_d(serial[i]);
		}
		
	}
	controller_tx=1;
    6f1e:	81 e0       	ldi	r24, 0x01	; 1
    6f20:	90 e0       	ldi	r25, 0x00	; 0
    6f22:	80 93 f9 26 	sts	0x26F9, r24
    6f26:	90 93 fa 26 	sts	0x26FA, r25

}
    6f2a:	25 96       	adiw	r28, 0x05	; 5
    6f2c:	cd bf       	out	0x3d, r28	; 61
    6f2e:	de bf       	out	0x3e, r29	; 62
    6f30:	df 91       	pop	r29
    6f32:	cf 91       	pop	r28
    6f34:	1f 91       	pop	r17
    6f36:	0f 91       	pop	r16
    6f38:	08 95       	ret

00006f3a <from_bcd_be>:
}

// GPL
// unsigned long from hamlib work
long from_bcd_be(char bcd_data[], int bcd_len)
{
    6f3a:	af 92       	push	r10
    6f3c:	bf 92       	push	r11
    6f3e:	cf 92       	push	r12
    6f40:	df 92       	push	r13
    6f42:	ef 92       	push	r14
    6f44:	ff 92       	push	r15
    6f46:	0f 93       	push	r16
    6f48:	1f 93       	push	r17
    6f4a:	cf 93       	push	r28
    6f4c:	df 93       	push	r29
    6f4e:	5c 01       	movw	r10, r24
    6f50:	db 01       	movw	r26, r22
	int i;
	long f = 0;

	for (i=0; i < bcd_len/2; i++) {
    6f52:	eb 01       	movw	r28, r22
    6f54:	bb 23       	and	r27, r27
    6f56:	0c f4       	brge	.+2      	; 0x6f5a <from_bcd_be+0x20>
    6f58:	21 96       	adiw	r28, 0x01	; 1
    6f5a:	d5 95       	asr	r29
    6f5c:	c7 95       	ror	r28
    6f5e:	1c 16       	cp	r1, r28
    6f60:	1d 06       	cpc	r1, r29
    6f62:	0c f0       	brlt	.+2      	; 0x6f66 <from_bcd_be+0x2c>
    6f64:	42 c0       	rjmp	.+132    	; 0x6fea <from_bcd_be+0xb0>
    6f66:	f5 01       	movw	r30, r10
    6f68:	95 01       	movw	r18, r10
    6f6a:	2c 0f       	add	r18, r28
    6f6c:	3d 1f       	adc	r19, r29
// GPL
// unsigned long from hamlib work
long from_bcd_be(char bcd_data[], int bcd_len)
{
	int i;
	long f = 0;
    6f6e:	60 e0       	ldi	r22, 0x00	; 0
    6f70:	70 e0       	ldi	r23, 0x00	; 0
    6f72:	cb 01       	movw	r24, r22

	for (i=0; i < bcd_len/2; i++) {
		f *= 10;
    6f74:	ab 01       	movw	r20, r22
    6f76:	bc 01       	movw	r22, r24
    6f78:	44 0f       	add	r20, r20
    6f7a:	55 1f       	adc	r21, r21
    6f7c:	66 1f       	adc	r22, r22
    6f7e:	77 1f       	adc	r23, r23
    6f80:	6a 01       	movw	r12, r20
    6f82:	7b 01       	movw	r14, r22
    6f84:	cc 0c       	add	r12, r12
    6f86:	dd 1c       	adc	r13, r13
    6f88:	ee 1c       	adc	r14, r14
    6f8a:	ff 1c       	adc	r15, r15
    6f8c:	cc 0c       	add	r12, r12
    6f8e:	dd 1c       	adc	r13, r13
    6f90:	ee 1c       	adc	r14, r14
    6f92:	ff 1c       	adc	r15, r15
    6f94:	4c 0d       	add	r20, r12
    6f96:	5d 1d       	adc	r21, r13
    6f98:	6e 1d       	adc	r22, r14
    6f9a:	7f 1d       	adc	r23, r15
		f += bcd_data[i]>>4;
    6f9c:	11 91       	ld	r17, Z+
    6f9e:	f1 2e       	mov	r15, r17
    6fa0:	f6 94       	lsr	r15
    6fa2:	f6 94       	lsr	r15
    6fa4:	f6 94       	lsr	r15
    6fa6:	f6 94       	lsr	r15
    6fa8:	4f 0d       	add	r20, r15
    6faa:	51 1d       	adc	r21, r1
    6fac:	61 1d       	adc	r22, r1
    6fae:	71 1d       	adc	r23, r1
		f *= 10;
    6fb0:	44 0f       	add	r20, r20
    6fb2:	55 1f       	adc	r21, r21
    6fb4:	66 1f       	adc	r22, r22
    6fb6:	77 1f       	adc	r23, r23
    6fb8:	6a 01       	movw	r12, r20
    6fba:	7b 01       	movw	r14, r22
    6fbc:	cc 0c       	add	r12, r12
    6fbe:	dd 1c       	adc	r13, r13
    6fc0:	ee 1c       	adc	r14, r14
    6fc2:	ff 1c       	adc	r15, r15
    6fc4:	cc 0c       	add	r12, r12
    6fc6:	dd 1c       	adc	r13, r13
    6fc8:	ee 1c       	adc	r14, r14
    6fca:	ff 1c       	adc	r15, r15
    6fcc:	4c 0d       	add	r20, r12
    6fce:	5d 1d       	adc	r21, r13
    6fd0:	6e 1d       	adc	r22, r14
    6fd2:	7f 1d       	adc	r23, r15
		f += bcd_data[i] & 0x0f;
    6fd4:	1f 70       	andi	r17, 0x0F	; 15
    6fd6:	cb 01       	movw	r24, r22
    6fd8:	ba 01       	movw	r22, r20
    6fda:	61 0f       	add	r22, r17
    6fdc:	71 1d       	adc	r23, r1
    6fde:	81 1d       	adc	r24, r1
    6fe0:	91 1d       	adc	r25, r1
long from_bcd_be(char bcd_data[], int bcd_len)
{
	int i;
	long f = 0;

	for (i=0; i < bcd_len/2; i++) {
    6fe2:	e2 17       	cp	r30, r18
    6fe4:	f3 07       	cpc	r31, r19
    6fe6:	31 f6       	brne	.-116    	; 0x6f74 <from_bcd_be+0x3a>
    6fe8:	03 c0       	rjmp	.+6      	; 0x6ff0 <from_bcd_be+0xb6>
// GPL
// unsigned long from hamlib work
long from_bcd_be(char bcd_data[], int bcd_len)
{
	int i;
	long f = 0;
    6fea:	60 e0       	ldi	r22, 0x00	; 0
    6fec:	70 e0       	ldi	r23, 0x00	; 0
    6fee:	cb 01       	movw	r24, r22
		f *= 10;
		f += bcd_data[i]>>4;
		f *= 10;
		f += bcd_data[i] & 0x0f;
	}
	if (bcd_len&1) {
    6ff0:	a0 ff       	sbrs	r26, 0
    6ff2:	21 c0       	rjmp	.+66     	; 0x7036 <from_bcd_be+0xfc>
		f *= 10;
    6ff4:	ab 01       	movw	r20, r22
    6ff6:	bc 01       	movw	r22, r24
    6ff8:	44 0f       	add	r20, r20
    6ffa:	55 1f       	adc	r21, r21
    6ffc:	66 1f       	adc	r22, r22
    6ffe:	77 1f       	adc	r23, r23
    7000:	6a 01       	movw	r12, r20
    7002:	7b 01       	movw	r14, r22
    7004:	cc 0c       	add	r12, r12
    7006:	dd 1c       	adc	r13, r13
    7008:	ee 1c       	adc	r14, r14
    700a:	ff 1c       	adc	r15, r15
    700c:	cc 0c       	add	r12, r12
    700e:	dd 1c       	adc	r13, r13
    7010:	ee 1c       	adc	r14, r14
    7012:	ff 1c       	adc	r15, r15
    7014:	4c 0d       	add	r20, r12
    7016:	5d 1d       	adc	r21, r13
    7018:	6e 1d       	adc	r22, r14
    701a:	7f 1d       	adc	r23, r15
		f += bcd_data[bcd_len/2]>>4;
    701c:	ca 0d       	add	r28, r10
    701e:	db 1d       	adc	r29, r11
    7020:	88 81       	ld	r24, Y
    7022:	82 95       	swap	r24
    7024:	8f 70       	andi	r24, 0x0F	; 15
    7026:	8a 01       	movw	r16, r20
    7028:	9b 01       	movw	r18, r22
    702a:	08 0f       	add	r16, r24
    702c:	11 1d       	adc	r17, r1
    702e:	21 1d       	adc	r18, r1
    7030:	31 1d       	adc	r19, r1
    7032:	c9 01       	movw	r24, r18
    7034:	b8 01       	movw	r22, r16
	}
	return f;
}
    7036:	df 91       	pop	r29
    7038:	cf 91       	pop	r28
    703a:	1f 91       	pop	r17
    703c:	0f 91       	pop	r16
    703e:	ff 90       	pop	r15
    7040:	ef 90       	pop	r14
    7042:	df 90       	pop	r13
    7044:	cf 90       	pop	r12
    7046:	bf 90       	pop	r11
    7048:	af 90       	pop	r10
    704a:	08 95       	ret

0000704c <__vector_88>:
}

int controller_trasmit =0;
int Reissue_command =0; /** fix for some logprogram theat put pakets to fast*/
ISR(USARTD0_RXC_vect)
{
    704c:	1f 92       	push	r1
    704e:	0f 92       	push	r0
    7050:	0f b6       	in	r0, 0x3f	; 63
    7052:	0f 92       	push	r0
    7054:	11 24       	eor	r1, r1
    7056:	08 b6       	in	r0, 0x38	; 56
    7058:	0f 92       	push	r0
    705a:	18 be       	out	0x38, r1	; 56
    705c:	09 b6       	in	r0, 0x39	; 57
    705e:	0f 92       	push	r0
    7060:	19 be       	out	0x39, r1	; 57
    7062:	0b b6       	in	r0, 0x3b	; 59
    7064:	0f 92       	push	r0
    7066:	1b be       	out	0x3b, r1	; 59
    7068:	2f 93       	push	r18
    706a:	3f 93       	push	r19
    706c:	4f 93       	push	r20
    706e:	5f 93       	push	r21
    7070:	6f 93       	push	r22
    7072:	7f 93       	push	r23
    7074:	8f 93       	push	r24
    7076:	9f 93       	push	r25
    7078:	af 93       	push	r26
    707a:	bf 93       	push	r27
    707c:	cf 93       	push	r28
    707e:	ef 93       	push	r30
    7080:	ff 93       	push	r31
	char test1a =USARTD0_DATA;
    7082:	c0 91 a0 09 	lds	r28, 0x09A0
	yeasu_read[number_of_readed_byte] = test1a;
    7086:	80 91 f5 26 	lds	r24, 0x26F5
    708a:	90 91 f6 26 	lds	r25, 0x26F6
    708e:	fc 01       	movw	r30, r24
    7090:	e1 55       	subi	r30, 0x51	; 81
    7092:	f6 4d       	sbci	r31, 0xD6	; 214
    7094:	c0 83       	st	Z, r28
	number_of_readed_byte++;
    7096:	01 96       	adiw	r24, 0x01	; 1
	
	if(number_of_readed_byte >4)
    7098:	85 30       	cpi	r24, 0x05	; 5
    709a:	91 05       	cpc	r25, r1
    709c:	2c f4       	brge	.+10     	; 0x70a8 <__vector_88+0x5c>
int Reissue_command =0; /** fix for some logprogram theat put pakets to fast*/
ISR(USARTD0_RXC_vect)
{
	char test1a =USARTD0_DATA;
	yeasu_read[number_of_readed_byte] = test1a;
	number_of_readed_byte++;
    709e:	80 93 f5 26 	sts	0x26F5, r24
    70a2:	90 93 f6 26 	sts	0x26F6, r25
    70a6:	27 c0       	rjmp	.+78     	; 0x70f6 <__vector_88+0xaa>
	
	if(number_of_readed_byte >4)
	{
		number_of_readed_byte =0;
    70a8:	10 92 f5 26 	sts	0x26F5, r1
    70ac:	10 92 f6 26 	sts	0x26F6, r1
		Reissue_command=0;
    70b0:	10 92 ed 26 	sts	0x26ED, r1
    70b4:	10 92 ee 26 	sts	0x26EE, r1
		// copy the message to the from yeasy yx
		switch(cat_message_type)
    70b8:	80 91 f1 26 	lds	r24, 0x26F1
    70bc:	90 91 f2 26 	lds	r25, 0x26F2
    70c0:	01 97       	sbiw	r24, 0x01	; 1
    70c2:	a9 f4       	brne	.+42     	; 0x70ee <__vector_88+0xa2>
		{
			case CAT_READ_FREQ_MODE:
				// Decode the freqvensy from radio
				rs232radio.freqvensy = from_bcd_be(yeasu_read, 8);
    70c4:	68 e0       	ldi	r22, 0x08	; 8
    70c6:	70 e0       	ldi	r23, 0x00	; 0
    70c8:	8f ea       	ldi	r24, 0xAF	; 175
    70ca:	99 e2       	ldi	r25, 0x29	; 41
    70cc:	0e 94 9d 37 	call	0x6f3a	; 0x6f3a <from_bcd_be>
    70d0:	60 93 8e 27 	sts	0x278E, r22
    70d4:	70 93 8f 27 	sts	0x278F, r23
    70d8:	80 93 90 27 	sts	0x2790, r24
    70dc:	90 93 91 27 	sts	0x2791, r25
				rs232radio.radio_mode = yeasu_read[4];
    70e0:	80 91 b3 29 	lds	r24, 0x29B3
    70e4:	90 e0       	ldi	r25, 0x00	; 0
    70e6:	80 93 92 27 	sts	0x2792, r24
    70ea:	90 93 93 27 	sts	0x2793, r25
				break;
			default:
				break;
			
		}
		controller_trasmit=0;
    70ee:	10 92 ef 26 	sts	0x26EF, r1
    70f2:	10 92 f0 26 	sts	0x26F0, r1
	}


	USARTC0_DATA = test1a;
    70f6:	c0 93 a0 08 	sts	0x08A0, r28
	
}
    70fa:	ff 91       	pop	r31
    70fc:	ef 91       	pop	r30
    70fe:	cf 91       	pop	r28
    7100:	bf 91       	pop	r27
    7102:	af 91       	pop	r26
    7104:	9f 91       	pop	r25
    7106:	8f 91       	pop	r24
    7108:	7f 91       	pop	r23
    710a:	6f 91       	pop	r22
    710c:	5f 91       	pop	r21
    710e:	4f 91       	pop	r20
    7110:	3f 91       	pop	r19
    7112:	2f 91       	pop	r18
    7114:	0f 90       	pop	r0
    7116:	0b be       	out	0x3b, r0	; 59
    7118:	0f 90       	pop	r0
    711a:	09 be       	out	0x39, r0	; 57
    711c:	0f 90       	pop	r0
    711e:	08 be       	out	0x38, r0	; 56
    7120:	0f 90       	pop	r0
    7122:	0f be       	out	0x3f, r0	; 63
    7124:	0f 90       	pop	r0
    7126:	1f 90       	pop	r1
    7128:	18 95       	reti

0000712a <__vector_25>:

ISR(USARTC0_RXC_vect)
{
    712a:	1f 92       	push	r1
    712c:	0f 92       	push	r0
    712e:	0f b6       	in	r0, 0x3f	; 63
    7130:	0f 92       	push	r0
    7132:	11 24       	eor	r1, r1
    7134:	08 b6       	in	r0, 0x38	; 56
    7136:	0f 92       	push	r0
    7138:	18 be       	out	0x38, r1	; 56
    713a:	0b b6       	in	r0, 0x3b	; 59
    713c:	0f 92       	push	r0
    713e:	1b be       	out	0x3b, r1	; 59
    7140:	2f 93       	push	r18
    7142:	8f 93       	push	r24
    7144:	9f 93       	push	r25
    7146:	ef 93       	push	r30
    7148:	ff 93       	push	r31
		char rx_data = USARTC0_DATA;
    714a:	20 91 a0 08 	lds	r18, 0x08A0
		pc_read[number_of_transmitted_byte_pc] = rx_data;
    714e:	80 91 f3 26 	lds	r24, 0x26F3
    7152:	90 91 f4 26 	lds	r25, 0x26F4
    7156:	fc 01       	movw	r30, r24
    7158:	ec 54       	subi	r30, 0x4C	; 76
    715a:	f6 4d       	sbci	r31, 0xD6	; 214
    715c:	20 83       	st	Z, r18
		number_of_transmitted_byte_pc++;
    715e:	01 96       	adiw	r24, 0x01	; 1
	
		if(number_of_transmitted_byte_pc >4)
    7160:	85 30       	cpi	r24, 0x05	; 5
    7162:	91 05       	cpc	r25, r1
    7164:	2c f4       	brge	.+10     	; 0x7170 <__vector_25+0x46>

ISR(USARTC0_RXC_vect)
{
		char rx_data = USARTC0_DATA;
		pc_read[number_of_transmitted_byte_pc] = rx_data;
		number_of_transmitted_byte_pc++;
    7166:	80 93 f3 26 	sts	0x26F3, r24
    716a:	90 93 f4 26 	sts	0x26F4, r25
    716e:	23 c0       	rjmp	.+70     	; 0x71b6 <__vector_25+0x8c>
	
		if(number_of_transmitted_byte_pc >4)
		{
			number_of_transmitted_byte_pc =0;
    7170:	10 92 f3 26 	sts	0x26F3, r1
    7174:	10 92 f4 26 	sts	0x26F4, r1
		
			if(Reissue_command == 0)
    7178:	80 91 ed 26 	lds	r24, 0x26ED
    717c:	90 91 ee 26 	lds	r25, 0x26EE
    7180:	89 2b       	or	r24, r25
    7182:	c9 f4       	brne	.+50     	; 0x71b6 <__vector_25+0x8c>
			{
				Reissue_command=1;
    7184:	81 e0       	ldi	r24, 0x01	; 1
    7186:	90 e0       	ldi	r25, 0x00	; 0
    7188:	80 93 ed 26 	sts	0x26ED, r24
    718c:	90 93 ee 26 	sts	0x26EE, r25
				switch(pc_read[4])
    7190:	80 91 b8 29 	lds	r24, 0x29B8
    7194:	83 30       	cpi	r24, 0x03	; 3
    7196:	59 f4       	brne	.+22     	; 0x71ae <__vector_25+0x84>
				{
					case CAT_RX_FREQ_CMD:
						cat_message_type= CAT_READ_FREQ_MODE;
    7198:	81 e0       	ldi	r24, 0x01	; 1
    719a:	90 e0       	ldi	r25, 0x00	; 0
    719c:	80 93 f1 26 	sts	0x26F1, r24
    71a0:	90 93 f2 26 	sts	0x26F2, r25
						number_of_readed_byte=0;
    71a4:	10 92 f5 26 	sts	0x26F5, r1
    71a8:	10 92 f6 26 	sts	0x26F6, r1
						break;
    71ac:	04 c0       	rjmp	.+8      	; 0x71b6 <__vector_25+0x8c>
					default:
						cat_message_type =0;
    71ae:	10 92 f1 26 	sts	0x26F1, r1
    71b2:	10 92 f2 26 	sts	0x26F2, r1
				}
			}
		
		}

		USARTD0_DATA = rx_data;
    71b6:	20 93 a0 09 	sts	0x09A0, r18
	
	
	
	count_active++;
    71ba:	80 91 ff 26 	lds	r24, 0x26FF
    71be:	90 91 00 27 	lds	r25, 0x2700
    71c2:	01 96       	adiw	r24, 0x01	; 1
    71c4:	80 93 ff 26 	sts	0x26FF, r24
    71c8:	90 93 00 27 	sts	0x2700, r25

	
}
    71cc:	ff 91       	pop	r31
    71ce:	ef 91       	pop	r30
    71d0:	9f 91       	pop	r25
    71d2:	8f 91       	pop	r24
    71d4:	2f 91       	pop	r18
    71d6:	0f 90       	pop	r0
    71d8:	0b be       	out	0x3b, r0	; 59
    71da:	0f 90       	pop	r0
    71dc:	08 be       	out	0x38, r0	; 56
    71de:	0f 90       	pop	r0
    71e0:	0f be       	out	0x3f, r0	; 63
    71e2:	0f 90       	pop	r0
    71e4:	1f 90       	pop	r1
    71e6:	18 95       	reti

000071e8 <radio_pull_data_thread>:
void radio_pull_data_thread()
{
	// koden skickar ut data till radion då
	// logprogrammet inte gör det
	
	if (count_active_temp == count_active )
    71e8:	20 91 fb 26 	lds	r18, 0x26FB
    71ec:	30 91 fc 26 	lds	r19, 0x26FC
    71f0:	80 91 ff 26 	lds	r24, 0x26FF
    71f4:	90 91 00 27 	lds	r25, 0x2700
    71f8:	28 17       	cp	r18, r24
    71fa:	39 07       	cpc	r19, r25
    71fc:	09 f0       	breq	.+2      	; 0x7200 <radio_pull_data_thread+0x18>
    71fe:	5a c0       	rjmp	.+180    	; 0x72b4 <radio_pull_data_thread+0xcc>
	{
		
		number_of_readed_byte=0;
    7200:	10 92 f5 26 	sts	0x26F5, r1
    7204:	10 92 f6 26 	sts	0x26F6, r1
		switch(scan_for)
    7208:	80 91 fd 26 	lds	r24, 0x26FD
    720c:	90 91 fe 26 	lds	r25, 0x26FE
    7210:	81 30       	cpi	r24, 0x01	; 1
    7212:	91 05       	cpc	r25, r1
    7214:	b9 f0       	breq	.+46     	; 0x7244 <radio_pull_data_thread+0x5c>
    7216:	82 30       	cpi	r24, 0x02	; 2
    7218:	91 05       	cpc	r25, r1
    721a:	31 f1       	breq	.+76     	; 0x7268 <radio_pull_data_thread+0x80>
    721c:	89 2b       	or	r24, r25
    721e:	e1 f5       	brne	.+120    	; 0x7298 <radio_pull_data_thread+0xb0>
		{
			case 0:
			send_get_freq();
    7220:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <send_get_freq>
			cat_message_type = CAT_READ_FREQ_MODE;
    7224:	81 e0       	ldi	r24, 0x01	; 1
    7226:	90 e0       	ldi	r25, 0x00	; 0
    7228:	80 93 f1 26 	sts	0x26F1, r24
    722c:	90 93 f2 26 	sts	0x26F2, r25
			scan_for++;
    7230:	80 91 fd 26 	lds	r24, 0x26FD
    7234:	90 91 fe 26 	lds	r25, 0x26FE
    7238:	01 96       	adiw	r24, 0x01	; 1
    723a:	80 93 fd 26 	sts	0x26FD, r24
    723e:	90 93 fe 26 	sts	0x26FE, r25
			break;
    7242:	32 c0       	rjmp	.+100    	; 0x72a8 <radio_pull_data_thread+0xc0>
			case 1:
			send_get_status();
    7244:	0e 94 35 37 	call	0x6e6a	; 0x6e6a <send_get_status>
			cat_message_type = CAT_READ_STATUS;
    7248:	82 e0       	ldi	r24, 0x02	; 2
    724a:	90 e0       	ldi	r25, 0x00	; 0
    724c:	80 93 f1 26 	sts	0x26F1, r24
    7250:	90 93 f2 26 	sts	0x26F2, r25
			scan_for++;
    7254:	80 91 fd 26 	lds	r24, 0x26FD
    7258:	90 91 fe 26 	lds	r25, 0x26FE
    725c:	01 96       	adiw	r24, 0x01	; 1
    725e:	80 93 fd 26 	sts	0x26FD, r24
    7262:	90 93 fe 26 	sts	0x26FE, r25
			break;
    7266:	20 c0       	rjmp	.+64     	; 0x72a8 <radio_pull_data_thread+0xc0>
			case 2:
			stand_alone_transmit=1;
    7268:	81 e0       	ldi	r24, 0x01	; 1
    726a:	90 e0       	ldi	r25, 0x00	; 0
    726c:	80 93 f7 26 	sts	0x26F7, r24
    7270:	90 93 f8 26 	sts	0x26F8, r25
			send_get_rxstatus();
    7274:	0e 94 69 37 	call	0x6ed2	; 0x6ed2 <send_get_rxstatus>
			cat_message_type = CAT_READ_RXSTATUS;
    7278:	83 e0       	ldi	r24, 0x03	; 3
    727a:	90 e0       	ldi	r25, 0x00	; 0
    727c:	80 93 f1 26 	sts	0x26F1, r24
    7280:	90 93 f2 26 	sts	0x26F2, r25
			scan_for++;
    7284:	80 91 fd 26 	lds	r24, 0x26FD
    7288:	90 91 fe 26 	lds	r25, 0x26FE
    728c:	01 96       	adiw	r24, 0x01	; 1
    728e:	80 93 fd 26 	sts	0x26FD, r24
    7292:	90 93 fe 26 	sts	0x26FE, r25
			break;
    7296:	08 c0       	rjmp	.+16     	; 0x72a8 <radio_pull_data_thread+0xc0>
			default:
			scan_for=0;
    7298:	10 92 fd 26 	sts	0x26FD, r1
    729c:	10 92 fe 26 	sts	0x26FE, r1
			controller_tx=0;
    72a0:	10 92 f9 26 	sts	0x26F9, r1
    72a4:	10 92 fa 26 	sts	0x26FA, r1
			break;
			
		}
		controller_trasmit=1;
    72a8:	81 e0       	ldi	r24, 0x01	; 1
    72aa:	90 e0       	ldi	r25, 0x00	; 0
    72ac:	80 93 ef 26 	sts	0x26EF, r24
    72b0:	90 93 f0 26 	sts	0x26F0, r25
    72b4:	08 95       	ret

000072b6 <__vector_14>:
}


// skriver kommandon till radion för att få ut data då logprogramet ej är på
ISR(TCC0_OVF_vect)
{
    72b6:	1f 92       	push	r1
    72b8:	0f 92       	push	r0
    72ba:	0f b6       	in	r0, 0x3f	; 63
    72bc:	0f 92       	push	r0
    72be:	11 24       	eor	r1, r1
    72c0:	08 b6       	in	r0, 0x38	; 56
    72c2:	0f 92       	push	r0
    72c4:	18 be       	out	0x38, r1	; 56
    72c6:	09 b6       	in	r0, 0x39	; 57
    72c8:	0f 92       	push	r0
    72ca:	19 be       	out	0x39, r1	; 57
    72cc:	0b b6       	in	r0, 0x3b	; 59
    72ce:	0f 92       	push	r0
    72d0:	1b be       	out	0x3b, r1	; 59
    72d2:	2f 93       	push	r18
    72d4:	3f 93       	push	r19
    72d6:	4f 93       	push	r20
    72d8:	5f 93       	push	r21
    72da:	6f 93       	push	r22
    72dc:	7f 93       	push	r23
    72de:	8f 93       	push	r24
    72e0:	9f 93       	push	r25
    72e2:	af 93       	push	r26
    72e4:	bf 93       	push	r27
    72e6:	ef 93       	push	r30
    72e8:	ff 93       	push	r31
		
	}
	
*/	
	
	check_count++;
    72ea:	80 91 eb 26 	lds	r24, 0x26EB
    72ee:	90 91 ec 26 	lds	r25, 0x26EC
    72f2:	01 96       	adiw	r24, 0x01	; 1
    72f4:	80 93 eb 26 	sts	0x26EB, r24
    72f8:	90 93 ec 26 	sts	0x26EC, r25
	if (check_count == 255)
    72fc:	8f 3f       	cpi	r24, 0xFF	; 255
    72fe:	91 05       	cpc	r25, r1
    7300:	61 f4       	brne	.+24     	; 0x731a <__vector_14+0x64>
	{

		count_active_temp = count_active;
    7302:	80 91 ff 26 	lds	r24, 0x26FF
    7306:	90 91 00 27 	lds	r25, 0x2700
    730a:	80 93 fb 26 	sts	0x26FB, r24
    730e:	90 93 fc 26 	sts	0x26FC, r25
		check_count =0;
    7312:	10 92 eb 26 	sts	0x26EB, r1
    7316:	10 92 ec 26 	sts	0x26EC, r1
	}
	
		
	update_uptime();
    731a:	0e 94 a0 31 	call	0x6340	; 0x6340 <update_uptime>
}
    731e:	ff 91       	pop	r31
    7320:	ef 91       	pop	r30
    7322:	bf 91       	pop	r27
    7324:	af 91       	pop	r26
    7326:	9f 91       	pop	r25
    7328:	8f 91       	pop	r24
    732a:	7f 91       	pop	r23
    732c:	6f 91       	pop	r22
    732e:	5f 91       	pop	r21
    7330:	4f 91       	pop	r20
    7332:	3f 91       	pop	r19
    7334:	2f 91       	pop	r18
    7336:	0f 90       	pop	r0
    7338:	0b be       	out	0x3b, r0	; 59
    733a:	0f 90       	pop	r0
    733c:	09 be       	out	0x39, r0	; 57
    733e:	0f 90       	pop	r0
    7340:	08 be       	out	0x38, r0	; 56
    7342:	0f 90       	pop	r0
    7344:	0f be       	out	0x3f, r0	; 63
    7346:	0f 90       	pop	r0
    7348:	1f 90       	pop	r1
    734a:	18 95       	reti

0000734c <__subsf3>:
    734c:	50 58       	subi	r21, 0x80	; 128

0000734e <__addsf3>:
    734e:	bb 27       	eor	r27, r27
    7350:	aa 27       	eor	r26, r26
    7352:	0e d0       	rcall	.+28     	; 0x7370 <__addsf3x>
    7354:	38 c1       	rjmp	.+624    	; 0x75c6 <__fp_round>
    7356:	01 d1       	rcall	.+514    	; 0x755a <__fp_pscA>
    7358:	30 f0       	brcs	.+12     	; 0x7366 <__addsf3+0x18>
    735a:	06 d1       	rcall	.+524    	; 0x7568 <__fp_pscB>
    735c:	20 f0       	brcs	.+8      	; 0x7366 <__addsf3+0x18>
    735e:	31 f4       	brne	.+12     	; 0x736c <__addsf3+0x1e>
    7360:	9f 3f       	cpi	r25, 0xFF	; 255
    7362:	11 f4       	brne	.+4      	; 0x7368 <__addsf3+0x1a>
    7364:	1e f4       	brtc	.+6      	; 0x736c <__addsf3+0x1e>
    7366:	f6 c0       	rjmp	.+492    	; 0x7554 <__fp_nan>
    7368:	0e f4       	brtc	.+2      	; 0x736c <__addsf3+0x1e>
    736a:	e0 95       	com	r30
    736c:	e7 fb       	bst	r30, 7
    736e:	ec c0       	rjmp	.+472    	; 0x7548 <__fp_inf>

00007370 <__addsf3x>:
    7370:	e9 2f       	mov	r30, r25
    7372:	4b d1       	rcall	.+662    	; 0x760a <__fp_split3>
    7374:	80 f3       	brcs	.-32     	; 0x7356 <__addsf3+0x8>
    7376:	ba 17       	cp	r27, r26
    7378:	62 07       	cpc	r22, r18
    737a:	73 07       	cpc	r23, r19
    737c:	84 07       	cpc	r24, r20
    737e:	95 07       	cpc	r25, r21
    7380:	18 f0       	brcs	.+6      	; 0x7388 <__addsf3x+0x18>
    7382:	71 f4       	brne	.+28     	; 0x73a0 <__addsf3x+0x30>
    7384:	9e f5       	brtc	.+102    	; 0x73ec <__addsf3x+0x7c>
    7386:	63 c1       	rjmp	.+710    	; 0x764e <__fp_zero>
    7388:	0e f4       	brtc	.+2      	; 0x738c <__addsf3x+0x1c>
    738a:	e0 95       	com	r30
    738c:	0b 2e       	mov	r0, r27
    738e:	ba 2f       	mov	r27, r26
    7390:	a0 2d       	mov	r26, r0
    7392:	0b 01       	movw	r0, r22
    7394:	b9 01       	movw	r22, r18
    7396:	90 01       	movw	r18, r0
    7398:	0c 01       	movw	r0, r24
    739a:	ca 01       	movw	r24, r20
    739c:	a0 01       	movw	r20, r0
    739e:	11 24       	eor	r1, r1
    73a0:	ff 27       	eor	r31, r31
    73a2:	59 1b       	sub	r21, r25
    73a4:	99 f0       	breq	.+38     	; 0x73cc <__addsf3x+0x5c>
    73a6:	59 3f       	cpi	r21, 0xF9	; 249
    73a8:	50 f4       	brcc	.+20     	; 0x73be <__addsf3x+0x4e>
    73aa:	50 3e       	cpi	r21, 0xE0	; 224
    73ac:	68 f1       	brcs	.+90     	; 0x7408 <__addsf3x+0x98>
    73ae:	1a 16       	cp	r1, r26
    73b0:	f0 40       	sbci	r31, 0x00	; 0
    73b2:	a2 2f       	mov	r26, r18
    73b4:	23 2f       	mov	r18, r19
    73b6:	34 2f       	mov	r19, r20
    73b8:	44 27       	eor	r20, r20
    73ba:	58 5f       	subi	r21, 0xF8	; 248
    73bc:	f3 cf       	rjmp	.-26     	; 0x73a4 <__addsf3x+0x34>
    73be:	46 95       	lsr	r20
    73c0:	37 95       	ror	r19
    73c2:	27 95       	ror	r18
    73c4:	a7 95       	ror	r26
    73c6:	f0 40       	sbci	r31, 0x00	; 0
    73c8:	53 95       	inc	r21
    73ca:	c9 f7       	brne	.-14     	; 0x73be <__addsf3x+0x4e>
    73cc:	7e f4       	brtc	.+30     	; 0x73ec <__addsf3x+0x7c>
    73ce:	1f 16       	cp	r1, r31
    73d0:	ba 0b       	sbc	r27, r26
    73d2:	62 0b       	sbc	r22, r18
    73d4:	73 0b       	sbc	r23, r19
    73d6:	84 0b       	sbc	r24, r20
    73d8:	ba f0       	brmi	.+46     	; 0x7408 <__addsf3x+0x98>
    73da:	91 50       	subi	r25, 0x01	; 1
    73dc:	a1 f0       	breq	.+40     	; 0x7406 <__addsf3x+0x96>
    73de:	ff 0f       	add	r31, r31
    73e0:	bb 1f       	adc	r27, r27
    73e2:	66 1f       	adc	r22, r22
    73e4:	77 1f       	adc	r23, r23
    73e6:	88 1f       	adc	r24, r24
    73e8:	c2 f7       	brpl	.-16     	; 0x73da <__addsf3x+0x6a>
    73ea:	0e c0       	rjmp	.+28     	; 0x7408 <__addsf3x+0x98>
    73ec:	ba 0f       	add	r27, r26
    73ee:	62 1f       	adc	r22, r18
    73f0:	73 1f       	adc	r23, r19
    73f2:	84 1f       	adc	r24, r20
    73f4:	48 f4       	brcc	.+18     	; 0x7408 <__addsf3x+0x98>
    73f6:	87 95       	ror	r24
    73f8:	77 95       	ror	r23
    73fa:	67 95       	ror	r22
    73fc:	b7 95       	ror	r27
    73fe:	f7 95       	ror	r31
    7400:	9e 3f       	cpi	r25, 0xFE	; 254
    7402:	08 f0       	brcs	.+2      	; 0x7406 <__addsf3x+0x96>
    7404:	b3 cf       	rjmp	.-154    	; 0x736c <__addsf3+0x1e>
    7406:	93 95       	inc	r25
    7408:	88 0f       	add	r24, r24
    740a:	08 f0       	brcs	.+2      	; 0x740e <__addsf3x+0x9e>
    740c:	99 27       	eor	r25, r25
    740e:	ee 0f       	add	r30, r30
    7410:	97 95       	ror	r25
    7412:	87 95       	ror	r24
    7414:	08 95       	ret

00007416 <__cmpsf2>:
    7416:	74 d0       	rcall	.+232    	; 0x7500 <__fp_cmp>
    7418:	08 f4       	brcc	.+2      	; 0x741c <__cmpsf2+0x6>
    741a:	81 e0       	ldi	r24, 0x01	; 1
    741c:	08 95       	ret

0000741e <cos>:
    741e:	ac d0       	rcall	.+344    	; 0x7578 <__fp_rempio2>
    7420:	e3 95       	inc	r30
    7422:	e2 c0       	rjmp	.+452    	; 0x75e8 <__fp_sinus>

00007424 <__fixsfsi>:
    7424:	04 d0       	rcall	.+8      	; 0x742e <__fixunssfsi>
    7426:	68 94       	set
    7428:	b1 11       	cpse	r27, r1
    742a:	12 c1       	rjmp	.+548    	; 0x7650 <__fp_szero>
    742c:	08 95       	ret

0000742e <__fixunssfsi>:
    742e:	f5 d0       	rcall	.+490    	; 0x761a <__fp_splitA>
    7430:	88 f0       	brcs	.+34     	; 0x7454 <__fixunssfsi+0x26>
    7432:	9f 57       	subi	r25, 0x7F	; 127
    7434:	90 f0       	brcs	.+36     	; 0x745a <__fixunssfsi+0x2c>
    7436:	b9 2f       	mov	r27, r25
    7438:	99 27       	eor	r25, r25
    743a:	b7 51       	subi	r27, 0x17	; 23
    743c:	a0 f0       	brcs	.+40     	; 0x7466 <__fixunssfsi+0x38>
    743e:	d1 f0       	breq	.+52     	; 0x7474 <__fixunssfsi+0x46>
    7440:	66 0f       	add	r22, r22
    7442:	77 1f       	adc	r23, r23
    7444:	88 1f       	adc	r24, r24
    7446:	99 1f       	adc	r25, r25
    7448:	1a f0       	brmi	.+6      	; 0x7450 <__fixunssfsi+0x22>
    744a:	ba 95       	dec	r27
    744c:	c9 f7       	brne	.-14     	; 0x7440 <__fixunssfsi+0x12>
    744e:	12 c0       	rjmp	.+36     	; 0x7474 <__fixunssfsi+0x46>
    7450:	b1 30       	cpi	r27, 0x01	; 1
    7452:	81 f0       	breq	.+32     	; 0x7474 <__fixunssfsi+0x46>
    7454:	fc d0       	rcall	.+504    	; 0x764e <__fp_zero>
    7456:	b1 e0       	ldi	r27, 0x01	; 1
    7458:	08 95       	ret
    745a:	f9 c0       	rjmp	.+498    	; 0x764e <__fp_zero>
    745c:	67 2f       	mov	r22, r23
    745e:	78 2f       	mov	r23, r24
    7460:	88 27       	eor	r24, r24
    7462:	b8 5f       	subi	r27, 0xF8	; 248
    7464:	39 f0       	breq	.+14     	; 0x7474 <__fixunssfsi+0x46>
    7466:	b9 3f       	cpi	r27, 0xF9	; 249
    7468:	cc f3       	brlt	.-14     	; 0x745c <__fixunssfsi+0x2e>
    746a:	86 95       	lsr	r24
    746c:	77 95       	ror	r23
    746e:	67 95       	ror	r22
    7470:	b3 95       	inc	r27
    7472:	d9 f7       	brne	.-10     	; 0x746a <__fixunssfsi+0x3c>
    7474:	3e f4       	brtc	.+14     	; 0x7484 <__fixunssfsi+0x56>
    7476:	90 95       	com	r25
    7478:	80 95       	com	r24
    747a:	70 95       	com	r23
    747c:	61 95       	neg	r22
    747e:	7f 4f       	sbci	r23, 0xFF	; 255
    7480:	8f 4f       	sbci	r24, 0xFF	; 255
    7482:	9f 4f       	sbci	r25, 0xFF	; 255
    7484:	08 95       	ret

00007486 <__floatunsisf>:
    7486:	e8 94       	clt
    7488:	09 c0       	rjmp	.+18     	; 0x749c <__floatsisf+0x12>

0000748a <__floatsisf>:
    748a:	97 fb       	bst	r25, 7
    748c:	3e f4       	brtc	.+14     	; 0x749c <__floatsisf+0x12>
    748e:	90 95       	com	r25
    7490:	80 95       	com	r24
    7492:	70 95       	com	r23
    7494:	61 95       	neg	r22
    7496:	7f 4f       	sbci	r23, 0xFF	; 255
    7498:	8f 4f       	sbci	r24, 0xFF	; 255
    749a:	9f 4f       	sbci	r25, 0xFF	; 255
    749c:	99 23       	and	r25, r25
    749e:	a9 f0       	breq	.+42     	; 0x74ca <__floatsisf+0x40>
    74a0:	f9 2f       	mov	r31, r25
    74a2:	96 e9       	ldi	r25, 0x96	; 150
    74a4:	bb 27       	eor	r27, r27
    74a6:	93 95       	inc	r25
    74a8:	f6 95       	lsr	r31
    74aa:	87 95       	ror	r24
    74ac:	77 95       	ror	r23
    74ae:	67 95       	ror	r22
    74b0:	b7 95       	ror	r27
    74b2:	f1 11       	cpse	r31, r1
    74b4:	f8 cf       	rjmp	.-16     	; 0x74a6 <__floatsisf+0x1c>
    74b6:	fa f4       	brpl	.+62     	; 0x74f6 <__floatsisf+0x6c>
    74b8:	bb 0f       	add	r27, r27
    74ba:	11 f4       	brne	.+4      	; 0x74c0 <__floatsisf+0x36>
    74bc:	60 ff       	sbrs	r22, 0
    74be:	1b c0       	rjmp	.+54     	; 0x74f6 <__floatsisf+0x6c>
    74c0:	6f 5f       	subi	r22, 0xFF	; 255
    74c2:	7f 4f       	sbci	r23, 0xFF	; 255
    74c4:	8f 4f       	sbci	r24, 0xFF	; 255
    74c6:	9f 4f       	sbci	r25, 0xFF	; 255
    74c8:	16 c0       	rjmp	.+44     	; 0x74f6 <__floatsisf+0x6c>
    74ca:	88 23       	and	r24, r24
    74cc:	11 f0       	breq	.+4      	; 0x74d2 <__floatsisf+0x48>
    74ce:	96 e9       	ldi	r25, 0x96	; 150
    74d0:	11 c0       	rjmp	.+34     	; 0x74f4 <__floatsisf+0x6a>
    74d2:	77 23       	and	r23, r23
    74d4:	21 f0       	breq	.+8      	; 0x74de <__floatsisf+0x54>
    74d6:	9e e8       	ldi	r25, 0x8E	; 142
    74d8:	87 2f       	mov	r24, r23
    74da:	76 2f       	mov	r23, r22
    74dc:	05 c0       	rjmp	.+10     	; 0x74e8 <__floatsisf+0x5e>
    74de:	66 23       	and	r22, r22
    74e0:	71 f0       	breq	.+28     	; 0x74fe <__floatsisf+0x74>
    74e2:	96 e8       	ldi	r25, 0x86	; 134
    74e4:	86 2f       	mov	r24, r22
    74e6:	70 e0       	ldi	r23, 0x00	; 0
    74e8:	60 e0       	ldi	r22, 0x00	; 0
    74ea:	2a f0       	brmi	.+10     	; 0x74f6 <__floatsisf+0x6c>
    74ec:	9a 95       	dec	r25
    74ee:	66 0f       	add	r22, r22
    74f0:	77 1f       	adc	r23, r23
    74f2:	88 1f       	adc	r24, r24
    74f4:	da f7       	brpl	.-10     	; 0x74ec <__floatsisf+0x62>
    74f6:	88 0f       	add	r24, r24
    74f8:	96 95       	lsr	r25
    74fa:	87 95       	ror	r24
    74fc:	97 f9       	bld	r25, 7
    74fe:	08 95       	ret

00007500 <__fp_cmp>:
    7500:	99 0f       	add	r25, r25
    7502:	00 08       	sbc	r0, r0
    7504:	55 0f       	add	r21, r21
    7506:	aa 0b       	sbc	r26, r26
    7508:	e0 e8       	ldi	r30, 0x80	; 128
    750a:	fe ef       	ldi	r31, 0xFE	; 254
    750c:	16 16       	cp	r1, r22
    750e:	17 06       	cpc	r1, r23
    7510:	e8 07       	cpc	r30, r24
    7512:	f9 07       	cpc	r31, r25
    7514:	c0 f0       	brcs	.+48     	; 0x7546 <__fp_cmp+0x46>
    7516:	12 16       	cp	r1, r18
    7518:	13 06       	cpc	r1, r19
    751a:	e4 07       	cpc	r30, r20
    751c:	f5 07       	cpc	r31, r21
    751e:	98 f0       	brcs	.+38     	; 0x7546 <__fp_cmp+0x46>
    7520:	62 1b       	sub	r22, r18
    7522:	73 0b       	sbc	r23, r19
    7524:	84 0b       	sbc	r24, r20
    7526:	95 0b       	sbc	r25, r21
    7528:	39 f4       	brne	.+14     	; 0x7538 <__fp_cmp+0x38>
    752a:	0a 26       	eor	r0, r26
    752c:	61 f0       	breq	.+24     	; 0x7546 <__fp_cmp+0x46>
    752e:	23 2b       	or	r18, r19
    7530:	24 2b       	or	r18, r20
    7532:	25 2b       	or	r18, r21
    7534:	21 f4       	brne	.+8      	; 0x753e <__fp_cmp+0x3e>
    7536:	08 95       	ret
    7538:	0a 26       	eor	r0, r26
    753a:	09 f4       	brne	.+2      	; 0x753e <__fp_cmp+0x3e>
    753c:	a1 40       	sbci	r26, 0x01	; 1
    753e:	a6 95       	lsr	r26
    7540:	8f ef       	ldi	r24, 0xFF	; 255
    7542:	81 1d       	adc	r24, r1
    7544:	81 1d       	adc	r24, r1
    7546:	08 95       	ret

00007548 <__fp_inf>:
    7548:	97 f9       	bld	r25, 7
    754a:	9f 67       	ori	r25, 0x7F	; 127
    754c:	80 e8       	ldi	r24, 0x80	; 128
    754e:	70 e0       	ldi	r23, 0x00	; 0
    7550:	60 e0       	ldi	r22, 0x00	; 0
    7552:	08 95       	ret

00007554 <__fp_nan>:
    7554:	9f ef       	ldi	r25, 0xFF	; 255
    7556:	80 ec       	ldi	r24, 0xC0	; 192
    7558:	08 95       	ret

0000755a <__fp_pscA>:
    755a:	00 24       	eor	r0, r0
    755c:	0a 94       	dec	r0
    755e:	16 16       	cp	r1, r22
    7560:	17 06       	cpc	r1, r23
    7562:	18 06       	cpc	r1, r24
    7564:	09 06       	cpc	r0, r25
    7566:	08 95       	ret

00007568 <__fp_pscB>:
    7568:	00 24       	eor	r0, r0
    756a:	0a 94       	dec	r0
    756c:	12 16       	cp	r1, r18
    756e:	13 06       	cpc	r1, r19
    7570:	14 06       	cpc	r1, r20
    7572:	05 06       	cpc	r0, r21
    7574:	08 95       	ret
    7576:	ee cf       	rjmp	.-36     	; 0x7554 <__fp_nan>

00007578 <__fp_rempio2>:
    7578:	50 d0       	rcall	.+160    	; 0x761a <__fp_splitA>
    757a:	e8 f3       	brcs	.-6      	; 0x7576 <__fp_pscB+0xe>
    757c:	e8 94       	clt
    757e:	e0 e0       	ldi	r30, 0x00	; 0
    7580:	bb 27       	eor	r27, r27
    7582:	9f 57       	subi	r25, 0x7F	; 127
    7584:	f0 f0       	brcs	.+60     	; 0x75c2 <__fp_rempio2+0x4a>
    7586:	2a ed       	ldi	r18, 0xDA	; 218
    7588:	3f e0       	ldi	r19, 0x0F	; 15
    758a:	49 ec       	ldi	r20, 0xC9	; 201
    758c:	06 c0       	rjmp	.+12     	; 0x759a <__fp_rempio2+0x22>
    758e:	ee 0f       	add	r30, r30
    7590:	bb 0f       	add	r27, r27
    7592:	66 1f       	adc	r22, r22
    7594:	77 1f       	adc	r23, r23
    7596:	88 1f       	adc	r24, r24
    7598:	28 f0       	brcs	.+10     	; 0x75a4 <__fp_rempio2+0x2c>
    759a:	b2 3a       	cpi	r27, 0xA2	; 162
    759c:	62 07       	cpc	r22, r18
    759e:	73 07       	cpc	r23, r19
    75a0:	84 07       	cpc	r24, r20
    75a2:	28 f0       	brcs	.+10     	; 0x75ae <__fp_rempio2+0x36>
    75a4:	b2 5a       	subi	r27, 0xA2	; 162
    75a6:	62 0b       	sbc	r22, r18
    75a8:	73 0b       	sbc	r23, r19
    75aa:	84 0b       	sbc	r24, r20
    75ac:	e3 95       	inc	r30
    75ae:	9a 95       	dec	r25
    75b0:	72 f7       	brpl	.-36     	; 0x758e <__fp_rempio2+0x16>
    75b2:	80 38       	cpi	r24, 0x80	; 128
    75b4:	30 f4       	brcc	.+12     	; 0x75c2 <__fp_rempio2+0x4a>
    75b6:	9a 95       	dec	r25
    75b8:	bb 0f       	add	r27, r27
    75ba:	66 1f       	adc	r22, r22
    75bc:	77 1f       	adc	r23, r23
    75be:	88 1f       	adc	r24, r24
    75c0:	d2 f7       	brpl	.-12     	; 0x75b6 <__fp_rempio2+0x3e>
    75c2:	90 48       	sbci	r25, 0x80	; 128
    75c4:	ba c0       	rjmp	.+372    	; 0x773a <__fp_mpack_finite>

000075c6 <__fp_round>:
    75c6:	09 2e       	mov	r0, r25
    75c8:	03 94       	inc	r0
    75ca:	00 0c       	add	r0, r0
    75cc:	11 f4       	brne	.+4      	; 0x75d2 <__fp_round+0xc>
    75ce:	88 23       	and	r24, r24
    75d0:	52 f0       	brmi	.+20     	; 0x75e6 <__fp_round+0x20>
    75d2:	bb 0f       	add	r27, r27
    75d4:	40 f4       	brcc	.+16     	; 0x75e6 <__fp_round+0x20>
    75d6:	bf 2b       	or	r27, r31
    75d8:	11 f4       	brne	.+4      	; 0x75de <__fp_round+0x18>
    75da:	60 ff       	sbrs	r22, 0
    75dc:	04 c0       	rjmp	.+8      	; 0x75e6 <__fp_round+0x20>
    75de:	6f 5f       	subi	r22, 0xFF	; 255
    75e0:	7f 4f       	sbci	r23, 0xFF	; 255
    75e2:	8f 4f       	sbci	r24, 0xFF	; 255
    75e4:	9f 4f       	sbci	r25, 0xFF	; 255
    75e6:	08 95       	ret

000075e8 <__fp_sinus>:
    75e8:	ef 93       	push	r30
    75ea:	e0 ff       	sbrs	r30, 0
    75ec:	06 c0       	rjmp	.+12     	; 0x75fa <__fp_sinus+0x12>
    75ee:	a2 ea       	ldi	r26, 0xA2	; 162
    75f0:	2a ed       	ldi	r18, 0xDA	; 218
    75f2:	3f e0       	ldi	r19, 0x0F	; 15
    75f4:	49 ec       	ldi	r20, 0xC9	; 201
    75f6:	5f eb       	ldi	r21, 0xBF	; 191
    75f8:	bb de       	rcall	.-650    	; 0x7370 <__addsf3x>
    75fa:	e5 df       	rcall	.-54     	; 0x75c6 <__fp_round>
    75fc:	0f 90       	pop	r0
    75fe:	03 94       	inc	r0
    7600:	01 fc       	sbrc	r0, 1
    7602:	90 58       	subi	r25, 0x80	; 128
    7604:	ea ed       	ldi	r30, 0xDA	; 218
    7606:	f2 e0       	ldi	r31, 0x02	; 2
    7608:	a4 c0       	rjmp	.+328    	; 0x7752 <__fp_powsodd>

0000760a <__fp_split3>:
    760a:	57 fd       	sbrc	r21, 7
    760c:	90 58       	subi	r25, 0x80	; 128
    760e:	44 0f       	add	r20, r20
    7610:	55 1f       	adc	r21, r21
    7612:	59 f0       	breq	.+22     	; 0x762a <__fp_splitA+0x10>
    7614:	5f 3f       	cpi	r21, 0xFF	; 255
    7616:	71 f0       	breq	.+28     	; 0x7634 <__fp_splitA+0x1a>
    7618:	47 95       	ror	r20

0000761a <__fp_splitA>:
    761a:	88 0f       	add	r24, r24
    761c:	97 fb       	bst	r25, 7
    761e:	99 1f       	adc	r25, r25
    7620:	61 f0       	breq	.+24     	; 0x763a <__fp_splitA+0x20>
    7622:	9f 3f       	cpi	r25, 0xFF	; 255
    7624:	79 f0       	breq	.+30     	; 0x7644 <__fp_splitA+0x2a>
    7626:	87 95       	ror	r24
    7628:	08 95       	ret
    762a:	12 16       	cp	r1, r18
    762c:	13 06       	cpc	r1, r19
    762e:	14 06       	cpc	r1, r20
    7630:	55 1f       	adc	r21, r21
    7632:	f2 cf       	rjmp	.-28     	; 0x7618 <__fp_split3+0xe>
    7634:	46 95       	lsr	r20
    7636:	f1 df       	rcall	.-30     	; 0x761a <__fp_splitA>
    7638:	08 c0       	rjmp	.+16     	; 0x764a <__fp_splitA+0x30>
    763a:	16 16       	cp	r1, r22
    763c:	17 06       	cpc	r1, r23
    763e:	18 06       	cpc	r1, r24
    7640:	99 1f       	adc	r25, r25
    7642:	f1 cf       	rjmp	.-30     	; 0x7626 <__fp_splitA+0xc>
    7644:	86 95       	lsr	r24
    7646:	71 05       	cpc	r23, r1
    7648:	61 05       	cpc	r22, r1
    764a:	08 94       	sec
    764c:	08 95       	ret

0000764e <__fp_zero>:
    764e:	e8 94       	clt

00007650 <__fp_szero>:
    7650:	bb 27       	eor	r27, r27
    7652:	66 27       	eor	r22, r22
    7654:	77 27       	eor	r23, r23
    7656:	cb 01       	movw	r24, r22
    7658:	97 f9       	bld	r25, 7
    765a:	08 95       	ret

0000765c <__gesf2>:
    765c:	51 df       	rcall	.-350    	; 0x7500 <__fp_cmp>
    765e:	08 f4       	brcc	.+2      	; 0x7662 <__gesf2+0x6>
    7660:	8f ef       	ldi	r24, 0xFF	; 255
    7662:	08 95       	ret

00007664 <__mulsf3>:
    7664:	0b d0       	rcall	.+22     	; 0x767c <__mulsf3x>
    7666:	af cf       	rjmp	.-162    	; 0x75c6 <__fp_round>
    7668:	78 df       	rcall	.-272    	; 0x755a <__fp_pscA>
    766a:	28 f0       	brcs	.+10     	; 0x7676 <__mulsf3+0x12>
    766c:	7d df       	rcall	.-262    	; 0x7568 <__fp_pscB>
    766e:	18 f0       	brcs	.+6      	; 0x7676 <__mulsf3+0x12>
    7670:	95 23       	and	r25, r21
    7672:	09 f0       	breq	.+2      	; 0x7676 <__mulsf3+0x12>
    7674:	69 cf       	rjmp	.-302    	; 0x7548 <__fp_inf>
    7676:	6e cf       	rjmp	.-292    	; 0x7554 <__fp_nan>
    7678:	11 24       	eor	r1, r1
    767a:	ea cf       	rjmp	.-44     	; 0x7650 <__fp_szero>

0000767c <__mulsf3x>:
    767c:	c6 df       	rcall	.-116    	; 0x760a <__fp_split3>
    767e:	a0 f3       	brcs	.-24     	; 0x7668 <__mulsf3+0x4>

00007680 <__mulsf3_pse>:
    7680:	95 9f       	mul	r25, r21
    7682:	d1 f3       	breq	.-12     	; 0x7678 <__mulsf3+0x14>
    7684:	95 0f       	add	r25, r21
    7686:	50 e0       	ldi	r21, 0x00	; 0
    7688:	55 1f       	adc	r21, r21
    768a:	62 9f       	mul	r22, r18
    768c:	f0 01       	movw	r30, r0
    768e:	72 9f       	mul	r23, r18
    7690:	bb 27       	eor	r27, r27
    7692:	f0 0d       	add	r31, r0
    7694:	b1 1d       	adc	r27, r1
    7696:	63 9f       	mul	r22, r19
    7698:	aa 27       	eor	r26, r26
    769a:	f0 0d       	add	r31, r0
    769c:	b1 1d       	adc	r27, r1
    769e:	aa 1f       	adc	r26, r26
    76a0:	64 9f       	mul	r22, r20
    76a2:	66 27       	eor	r22, r22
    76a4:	b0 0d       	add	r27, r0
    76a6:	a1 1d       	adc	r26, r1
    76a8:	66 1f       	adc	r22, r22
    76aa:	82 9f       	mul	r24, r18
    76ac:	22 27       	eor	r18, r18
    76ae:	b0 0d       	add	r27, r0
    76b0:	a1 1d       	adc	r26, r1
    76b2:	62 1f       	adc	r22, r18
    76b4:	73 9f       	mul	r23, r19
    76b6:	b0 0d       	add	r27, r0
    76b8:	a1 1d       	adc	r26, r1
    76ba:	62 1f       	adc	r22, r18
    76bc:	83 9f       	mul	r24, r19
    76be:	a0 0d       	add	r26, r0
    76c0:	61 1d       	adc	r22, r1
    76c2:	22 1f       	adc	r18, r18
    76c4:	74 9f       	mul	r23, r20
    76c6:	33 27       	eor	r19, r19
    76c8:	a0 0d       	add	r26, r0
    76ca:	61 1d       	adc	r22, r1
    76cc:	23 1f       	adc	r18, r19
    76ce:	84 9f       	mul	r24, r20
    76d0:	60 0d       	add	r22, r0
    76d2:	21 1d       	adc	r18, r1
    76d4:	82 2f       	mov	r24, r18
    76d6:	76 2f       	mov	r23, r22
    76d8:	6a 2f       	mov	r22, r26
    76da:	11 24       	eor	r1, r1
    76dc:	9f 57       	subi	r25, 0x7F	; 127
    76de:	50 40       	sbci	r21, 0x00	; 0
    76e0:	8a f0       	brmi	.+34     	; 0x7704 <__mulsf3_pse+0x84>
    76e2:	e1 f0       	breq	.+56     	; 0x771c <__mulsf3_pse+0x9c>
    76e4:	88 23       	and	r24, r24
    76e6:	4a f0       	brmi	.+18     	; 0x76fa <__mulsf3_pse+0x7a>
    76e8:	ee 0f       	add	r30, r30
    76ea:	ff 1f       	adc	r31, r31
    76ec:	bb 1f       	adc	r27, r27
    76ee:	66 1f       	adc	r22, r22
    76f0:	77 1f       	adc	r23, r23
    76f2:	88 1f       	adc	r24, r24
    76f4:	91 50       	subi	r25, 0x01	; 1
    76f6:	50 40       	sbci	r21, 0x00	; 0
    76f8:	a9 f7       	brne	.-22     	; 0x76e4 <__mulsf3_pse+0x64>
    76fa:	9e 3f       	cpi	r25, 0xFE	; 254
    76fc:	51 05       	cpc	r21, r1
    76fe:	70 f0       	brcs	.+28     	; 0x771c <__mulsf3_pse+0x9c>
    7700:	23 cf       	rjmp	.-442    	; 0x7548 <__fp_inf>
    7702:	a6 cf       	rjmp	.-180    	; 0x7650 <__fp_szero>
    7704:	5f 3f       	cpi	r21, 0xFF	; 255
    7706:	ec f3       	brlt	.-6      	; 0x7702 <__mulsf3_pse+0x82>
    7708:	98 3e       	cpi	r25, 0xE8	; 232
    770a:	dc f3       	brlt	.-10     	; 0x7702 <__mulsf3_pse+0x82>
    770c:	86 95       	lsr	r24
    770e:	77 95       	ror	r23
    7710:	67 95       	ror	r22
    7712:	b7 95       	ror	r27
    7714:	f7 95       	ror	r31
    7716:	e7 95       	ror	r30
    7718:	9f 5f       	subi	r25, 0xFF	; 255
    771a:	c1 f7       	brne	.-16     	; 0x770c <__mulsf3_pse+0x8c>
    771c:	fe 2b       	or	r31, r30
    771e:	88 0f       	add	r24, r24
    7720:	91 1d       	adc	r25, r1
    7722:	96 95       	lsr	r25
    7724:	87 95       	ror	r24
    7726:	97 f9       	bld	r25, 7
    7728:	08 95       	ret

0000772a <sin>:
    772a:	9f 93       	push	r25
    772c:	25 df       	rcall	.-438    	; 0x7578 <__fp_rempio2>
    772e:	0f 90       	pop	r0
    7730:	07 fc       	sbrc	r0, 7
    7732:	ee 5f       	subi	r30, 0xFE	; 254
    7734:	59 cf       	rjmp	.-334    	; 0x75e8 <__fp_sinus>

00007736 <__fp_mpack>:
    7736:	9f 3f       	cpi	r25, 0xFF	; 255
    7738:	31 f0       	breq	.+12     	; 0x7746 <__fp_mpack_finite+0xc>

0000773a <__fp_mpack_finite>:
    773a:	91 50       	subi	r25, 0x01	; 1
    773c:	20 f4       	brcc	.+8      	; 0x7746 <__fp_mpack_finite+0xc>
    773e:	87 95       	ror	r24
    7740:	77 95       	ror	r23
    7742:	67 95       	ror	r22
    7744:	b7 95       	ror	r27
    7746:	88 0f       	add	r24, r24
    7748:	91 1d       	adc	r25, r1
    774a:	96 95       	lsr	r25
    774c:	87 95       	ror	r24
    774e:	97 f9       	bld	r25, 7
    7750:	08 95       	ret

00007752 <__fp_powsodd>:
    7752:	9f 93       	push	r25
    7754:	8f 93       	push	r24
    7756:	7f 93       	push	r23
    7758:	6f 93       	push	r22
    775a:	ff 93       	push	r31
    775c:	ef 93       	push	r30
    775e:	9b 01       	movw	r18, r22
    7760:	ac 01       	movw	r20, r24
    7762:	80 df       	rcall	.-256    	; 0x7664 <__mulsf3>
    7764:	ef 91       	pop	r30
    7766:	ff 91       	pop	r31
    7768:	05 d0       	rcall	.+10     	; 0x7774 <__fp_powser>
    776a:	2f 91       	pop	r18
    776c:	3f 91       	pop	r19
    776e:	4f 91       	pop	r20
    7770:	5f 91       	pop	r21
    7772:	78 cf       	rjmp	.-272    	; 0x7664 <__mulsf3>

00007774 <__fp_powser>:
    7774:	df 93       	push	r29
    7776:	cf 93       	push	r28
    7778:	1f 93       	push	r17
    777a:	0f 93       	push	r16
    777c:	ff 92       	push	r15
    777e:	ef 92       	push	r14
    7780:	df 92       	push	r13
    7782:	7b 01       	movw	r14, r22
    7784:	8c 01       	movw	r16, r24
    7786:	68 94       	set
    7788:	05 c0       	rjmp	.+10     	; 0x7794 <__fp_powser+0x20>
    778a:	da 2e       	mov	r13, r26
    778c:	ef 01       	movw	r28, r30
    778e:	76 df       	rcall	.-276    	; 0x767c <__mulsf3x>
    7790:	fe 01       	movw	r30, r28
    7792:	e8 94       	clt
    7794:	a5 91       	lpm	r26, Z+
    7796:	25 91       	lpm	r18, Z+
    7798:	35 91       	lpm	r19, Z+
    779a:	45 91       	lpm	r20, Z+
    779c:	55 91       	lpm	r21, Z+
    779e:	ae f3       	brts	.-22     	; 0x778a <__fp_powser+0x16>
    77a0:	ef 01       	movw	r28, r30
    77a2:	e6 dd       	rcall	.-1076   	; 0x7370 <__addsf3x>
    77a4:	fe 01       	movw	r30, r28
    77a6:	97 01       	movw	r18, r14
    77a8:	a8 01       	movw	r20, r16
    77aa:	da 94       	dec	r13
    77ac:	79 f7       	brne	.-34     	; 0x778c <__fp_powser+0x18>
    77ae:	df 90       	pop	r13
    77b0:	ef 90       	pop	r14
    77b2:	ff 90       	pop	r15
    77b4:	0f 91       	pop	r16
    77b6:	1f 91       	pop	r17
    77b8:	cf 91       	pop	r28
    77ba:	df 91       	pop	r29
    77bc:	08 95       	ret

000077be <vfprintf>:
    77be:	2f 92       	push	r2
    77c0:	3f 92       	push	r3
    77c2:	4f 92       	push	r4
    77c4:	5f 92       	push	r5
    77c6:	6f 92       	push	r6
    77c8:	7f 92       	push	r7
    77ca:	8f 92       	push	r8
    77cc:	9f 92       	push	r9
    77ce:	af 92       	push	r10
    77d0:	bf 92       	push	r11
    77d2:	cf 92       	push	r12
    77d4:	df 92       	push	r13
    77d6:	ef 92       	push	r14
    77d8:	ff 92       	push	r15
    77da:	0f 93       	push	r16
    77dc:	1f 93       	push	r17
    77de:	cf 93       	push	r28
    77e0:	df 93       	push	r29
    77e2:	cd b7       	in	r28, 0x3d	; 61
    77e4:	de b7       	in	r29, 0x3e	; 62
    77e6:	63 97       	sbiw	r28, 0x13	; 19
    77e8:	cd bf       	out	0x3d, r28	; 61
    77ea:	de bf       	out	0x3e, r29	; 62
    77ec:	7c 01       	movw	r14, r24
    77ee:	1b 01       	movw	r2, r22
    77f0:	6a 01       	movw	r12, r20
    77f2:	fc 01       	movw	r30, r24
    77f4:	16 82       	std	Z+6, r1	; 0x06
    77f6:	17 82       	std	Z+7, r1	; 0x07
    77f8:	83 81       	ldd	r24, Z+3	; 0x03
    77fa:	81 ff       	sbrs	r24, 1
    77fc:	66 c3       	rjmp	.+1740   	; 0x7eca <vfprintf+0x70c>
    77fe:	be 01       	movw	r22, r28
    7800:	6f 5f       	subi	r22, 0xFF	; 255
    7802:	7f 4f       	sbci	r23, 0xFF	; 255
    7804:	4b 01       	movw	r8, r22
    7806:	f7 01       	movw	r30, r14
    7808:	93 81       	ldd	r25, Z+3	; 0x03
    780a:	f1 01       	movw	r30, r2
    780c:	93 fd       	sbrc	r25, 3
    780e:	85 91       	lpm	r24, Z+
    7810:	93 ff       	sbrs	r25, 3
    7812:	81 91       	ld	r24, Z+
    7814:	1f 01       	movw	r2, r30
    7816:	88 23       	and	r24, r24
    7818:	09 f4       	brne	.+2      	; 0x781c <vfprintf+0x5e>
    781a:	53 c3       	rjmp	.+1702   	; 0x7ec2 <vfprintf+0x704>
    781c:	85 32       	cpi	r24, 0x25	; 37
    781e:	39 f4       	brne	.+14     	; 0x782e <vfprintf+0x70>
    7820:	93 fd       	sbrc	r25, 3
    7822:	85 91       	lpm	r24, Z+
    7824:	93 ff       	sbrs	r25, 3
    7826:	81 91       	ld	r24, Z+
    7828:	1f 01       	movw	r2, r30
    782a:	85 32       	cpi	r24, 0x25	; 37
    782c:	39 f4       	brne	.+14     	; 0x783c <vfprintf+0x7e>
    782e:	b7 01       	movw	r22, r14
    7830:	90 e0       	ldi	r25, 0x00	; 0
    7832:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7836:	56 01       	movw	r10, r12
    7838:	65 01       	movw	r12, r10
    783a:	e5 cf       	rjmp	.-54     	; 0x7806 <vfprintf+0x48>
    783c:	10 e0       	ldi	r17, 0x00	; 0
    783e:	51 2c       	mov	r5, r1
    7840:	20 e0       	ldi	r18, 0x00	; 0
    7842:	20 32       	cpi	r18, 0x20	; 32
    7844:	a0 f4       	brcc	.+40     	; 0x786e <vfprintf+0xb0>
    7846:	8b 32       	cpi	r24, 0x2B	; 43
    7848:	69 f0       	breq	.+26     	; 0x7864 <vfprintf+0xa6>
    784a:	30 f4       	brcc	.+12     	; 0x7858 <vfprintf+0x9a>
    784c:	80 32       	cpi	r24, 0x20	; 32
    784e:	59 f0       	breq	.+22     	; 0x7866 <vfprintf+0xa8>
    7850:	83 32       	cpi	r24, 0x23	; 35
    7852:	69 f4       	brne	.+26     	; 0x786e <vfprintf+0xb0>
    7854:	20 61       	ori	r18, 0x10	; 16
    7856:	2c c0       	rjmp	.+88     	; 0x78b0 <vfprintf+0xf2>
    7858:	8d 32       	cpi	r24, 0x2D	; 45
    785a:	39 f0       	breq	.+14     	; 0x786a <vfprintf+0xac>
    785c:	80 33       	cpi	r24, 0x30	; 48
    785e:	39 f4       	brne	.+14     	; 0x786e <vfprintf+0xb0>
    7860:	21 60       	ori	r18, 0x01	; 1
    7862:	26 c0       	rjmp	.+76     	; 0x78b0 <vfprintf+0xf2>
    7864:	22 60       	ori	r18, 0x02	; 2
    7866:	24 60       	ori	r18, 0x04	; 4
    7868:	23 c0       	rjmp	.+70     	; 0x78b0 <vfprintf+0xf2>
    786a:	28 60       	ori	r18, 0x08	; 8
    786c:	21 c0       	rjmp	.+66     	; 0x78b0 <vfprintf+0xf2>
    786e:	27 fd       	sbrc	r18, 7
    7870:	27 c0       	rjmp	.+78     	; 0x78c0 <vfprintf+0x102>
    7872:	30 ed       	ldi	r19, 0xD0	; 208
    7874:	38 0f       	add	r19, r24
    7876:	3a 30       	cpi	r19, 0x0A	; 10
    7878:	78 f4       	brcc	.+30     	; 0x7898 <vfprintf+0xda>
    787a:	26 ff       	sbrs	r18, 6
    787c:	06 c0       	rjmp	.+12     	; 0x788a <vfprintf+0xcc>
    787e:	fa e0       	ldi	r31, 0x0A	; 10
    7880:	1f 9f       	mul	r17, r31
    7882:	30 0d       	add	r19, r0
    7884:	11 24       	eor	r1, r1
    7886:	13 2f       	mov	r17, r19
    7888:	13 c0       	rjmp	.+38     	; 0x78b0 <vfprintf+0xf2>
    788a:	6a e0       	ldi	r22, 0x0A	; 10
    788c:	56 9e       	mul	r5, r22
    788e:	30 0d       	add	r19, r0
    7890:	11 24       	eor	r1, r1
    7892:	53 2e       	mov	r5, r19
    7894:	20 62       	ori	r18, 0x20	; 32
    7896:	0c c0       	rjmp	.+24     	; 0x78b0 <vfprintf+0xf2>
    7898:	8e 32       	cpi	r24, 0x2E	; 46
    789a:	21 f4       	brne	.+8      	; 0x78a4 <vfprintf+0xe6>
    789c:	26 fd       	sbrc	r18, 6
    789e:	11 c3       	rjmp	.+1570   	; 0x7ec2 <vfprintf+0x704>
    78a0:	20 64       	ori	r18, 0x40	; 64
    78a2:	06 c0       	rjmp	.+12     	; 0x78b0 <vfprintf+0xf2>
    78a4:	8c 36       	cpi	r24, 0x6C	; 108
    78a6:	11 f4       	brne	.+4      	; 0x78ac <vfprintf+0xee>
    78a8:	20 68       	ori	r18, 0x80	; 128
    78aa:	02 c0       	rjmp	.+4      	; 0x78b0 <vfprintf+0xf2>
    78ac:	88 36       	cpi	r24, 0x68	; 104
    78ae:	41 f4       	brne	.+16     	; 0x78c0 <vfprintf+0x102>
    78b0:	f1 01       	movw	r30, r2
    78b2:	93 fd       	sbrc	r25, 3
    78b4:	85 91       	lpm	r24, Z+
    78b6:	93 ff       	sbrs	r25, 3
    78b8:	81 91       	ld	r24, Z+
    78ba:	1f 01       	movw	r2, r30
    78bc:	81 11       	cpse	r24, r1
    78be:	c1 cf       	rjmp	.-126    	; 0x7842 <vfprintf+0x84>
    78c0:	9b eb       	ldi	r25, 0xBB	; 187
    78c2:	98 0f       	add	r25, r24
    78c4:	93 30       	cpi	r25, 0x03	; 3
    78c6:	18 f4       	brcc	.+6      	; 0x78ce <vfprintf+0x110>
    78c8:	20 61       	ori	r18, 0x10	; 16
    78ca:	80 5e       	subi	r24, 0xE0	; 224
    78cc:	06 c0       	rjmp	.+12     	; 0x78da <vfprintf+0x11c>
    78ce:	9b e9       	ldi	r25, 0x9B	; 155
    78d0:	98 0f       	add	r25, r24
    78d2:	93 30       	cpi	r25, 0x03	; 3
    78d4:	08 f0       	brcs	.+2      	; 0x78d8 <vfprintf+0x11a>
    78d6:	aa c1       	rjmp	.+852    	; 0x7c2c <vfprintf+0x46e>
    78d8:	2f 7e       	andi	r18, 0xEF	; 239
    78da:	26 ff       	sbrs	r18, 6
    78dc:	16 e0       	ldi	r17, 0x06	; 6
    78de:	2f 73       	andi	r18, 0x3F	; 63
    78e0:	72 2e       	mov	r7, r18
    78e2:	85 36       	cpi	r24, 0x65	; 101
    78e4:	21 f4       	brne	.+8      	; 0x78ee <vfprintf+0x130>
    78e6:	f2 2f       	mov	r31, r18
    78e8:	f0 64       	ori	r31, 0x40	; 64
    78ea:	7f 2e       	mov	r7, r31
    78ec:	08 c0       	rjmp	.+16     	; 0x78fe <vfprintf+0x140>
    78ee:	86 36       	cpi	r24, 0x66	; 102
    78f0:	21 f4       	brne	.+8      	; 0x78fa <vfprintf+0x13c>
    78f2:	62 2f       	mov	r22, r18
    78f4:	60 68       	ori	r22, 0x80	; 128
    78f6:	76 2e       	mov	r7, r22
    78f8:	02 c0       	rjmp	.+4      	; 0x78fe <vfprintf+0x140>
    78fa:	11 11       	cpse	r17, r1
    78fc:	11 50       	subi	r17, 0x01	; 1
    78fe:	77 fe       	sbrs	r7, 7
    7900:	07 c0       	rjmp	.+14     	; 0x7910 <vfprintf+0x152>
    7902:	1c 33       	cpi	r17, 0x3C	; 60
    7904:	48 f4       	brcc	.+18     	; 0x7918 <vfprintf+0x15a>
    7906:	44 24       	eor	r4, r4
    7908:	43 94       	inc	r4
    790a:	41 0e       	add	r4, r17
    790c:	27 e0       	ldi	r18, 0x07	; 7
    790e:	0b c0       	rjmp	.+22     	; 0x7926 <vfprintf+0x168>
    7910:	18 30       	cpi	r17, 0x08	; 8
    7912:	30 f4       	brcc	.+12     	; 0x7920 <vfprintf+0x162>
    7914:	21 2f       	mov	r18, r17
    7916:	06 c0       	rjmp	.+12     	; 0x7924 <vfprintf+0x166>
    7918:	27 e0       	ldi	r18, 0x07	; 7
    791a:	4c e3       	ldi	r20, 0x3C	; 60
    791c:	44 2e       	mov	r4, r20
    791e:	03 c0       	rjmp	.+6      	; 0x7926 <vfprintf+0x168>
    7920:	27 e0       	ldi	r18, 0x07	; 7
    7922:	17 e0       	ldi	r17, 0x07	; 7
    7924:	41 2c       	mov	r4, r1
    7926:	56 01       	movw	r10, r12
    7928:	74 e0       	ldi	r23, 0x04	; 4
    792a:	a7 0e       	add	r10, r23
    792c:	b1 1c       	adc	r11, r1
    792e:	f6 01       	movw	r30, r12
    7930:	60 81       	ld	r22, Z
    7932:	71 81       	ldd	r23, Z+1	; 0x01
    7934:	82 81       	ldd	r24, Z+2	; 0x02
    7936:	93 81       	ldd	r25, Z+3	; 0x03
    7938:	04 2d       	mov	r16, r4
    793a:	a4 01       	movw	r20, r8
    793c:	0e 94 f4 41 	call	0x83e8	; 0x83e8 <__ftoa_engine>
    7940:	6c 01       	movw	r12, r24
    7942:	09 81       	ldd	r16, Y+1	; 0x01
    7944:	00 ff       	sbrs	r16, 0
    7946:	02 c0       	rjmp	.+4      	; 0x794c <vfprintf+0x18e>
    7948:	03 ff       	sbrs	r16, 3
    794a:	06 c0       	rjmp	.+12     	; 0x7958 <vfprintf+0x19a>
    794c:	71 fc       	sbrc	r7, 1
    794e:	07 c0       	rjmp	.+14     	; 0x795e <vfprintf+0x1a0>
    7950:	72 fc       	sbrc	r7, 2
    7952:	08 c0       	rjmp	.+16     	; 0x7964 <vfprintf+0x1a6>
    7954:	61 2c       	mov	r6, r1
    7956:	08 c0       	rjmp	.+16     	; 0x7968 <vfprintf+0x1aa>
    7958:	3d e2       	ldi	r19, 0x2D	; 45
    795a:	63 2e       	mov	r6, r19
    795c:	05 c0       	rjmp	.+10     	; 0x7968 <vfprintf+0x1aa>
    795e:	2b e2       	ldi	r18, 0x2B	; 43
    7960:	62 2e       	mov	r6, r18
    7962:	02 c0       	rjmp	.+4      	; 0x7968 <vfprintf+0x1aa>
    7964:	90 e2       	ldi	r25, 0x20	; 32
    7966:	69 2e       	mov	r6, r25
    7968:	80 2f       	mov	r24, r16
    796a:	8c 70       	andi	r24, 0x0C	; 12
    796c:	99 f1       	breq	.+102    	; 0x79d4 <vfprintf+0x216>
    796e:	66 20       	and	r6, r6
    7970:	11 f0       	breq	.+4      	; 0x7976 <vfprintf+0x1b8>
    7972:	84 e0       	ldi	r24, 0x04	; 4
    7974:	01 c0       	rjmp	.+2      	; 0x7978 <vfprintf+0x1ba>
    7976:	83 e0       	ldi	r24, 0x03	; 3
    7978:	85 15       	cp	r24, r5
    797a:	10 f0       	brcs	.+4      	; 0x7980 <vfprintf+0x1c2>
    797c:	51 2c       	mov	r5, r1
    797e:	0b c0       	rjmp	.+22     	; 0x7996 <vfprintf+0x1d8>
    7980:	58 1a       	sub	r5, r24
    7982:	73 fc       	sbrc	r7, 3
    7984:	08 c0       	rjmp	.+16     	; 0x7996 <vfprintf+0x1d8>
    7986:	b7 01       	movw	r22, r14
    7988:	80 e2       	ldi	r24, 0x20	; 32
    798a:	90 e0       	ldi	r25, 0x00	; 0
    798c:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7990:	5a 94       	dec	r5
    7992:	c9 f7       	brne	.-14     	; 0x7986 <vfprintf+0x1c8>
    7994:	f3 cf       	rjmp	.-26     	; 0x797c <vfprintf+0x1be>
    7996:	66 20       	and	r6, r6
    7998:	29 f0       	breq	.+10     	; 0x79a4 <vfprintf+0x1e6>
    799a:	b7 01       	movw	r22, r14
    799c:	86 2d       	mov	r24, r6
    799e:	90 e0       	ldi	r25, 0x00	; 0
    79a0:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    79a4:	03 fd       	sbrc	r16, 3
    79a6:	03 c0       	rjmp	.+6      	; 0x79ae <vfprintf+0x1f0>
    79a8:	00 e8       	ldi	r16, 0x80	; 128
    79aa:	1a e0       	ldi	r17, 0x0A	; 10
    79ac:	02 c0       	rjmp	.+4      	; 0x79b2 <vfprintf+0x1f4>
    79ae:	0c e7       	ldi	r16, 0x7C	; 124
    79b0:	1a e0       	ldi	r17, 0x0A	; 10
    79b2:	f7 2d       	mov	r31, r7
    79b4:	f0 71       	andi	r31, 0x10	; 16
    79b6:	7f 2e       	mov	r7, r31
    79b8:	f8 01       	movw	r30, r16
    79ba:	84 91       	lpm	r24, Z
    79bc:	88 23       	and	r24, r24
    79be:	09 f4       	brne	.+2      	; 0x79c2 <vfprintf+0x204>
    79c0:	76 c2       	rjmp	.+1260   	; 0x7eae <vfprintf+0x6f0>
    79c2:	71 10       	cpse	r7, r1
    79c4:	80 52       	subi	r24, 0x20	; 32
    79c6:	b7 01       	movw	r22, r14
    79c8:	90 e0       	ldi	r25, 0x00	; 0
    79ca:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    79ce:	0f 5f       	subi	r16, 0xFF	; 255
    79d0:	1f 4f       	sbci	r17, 0xFF	; 255
    79d2:	f2 cf       	rjmp	.-28     	; 0x79b8 <vfprintf+0x1fa>
    79d4:	77 fe       	sbrs	r7, 7
    79d6:	0f c0       	rjmp	.+30     	; 0x79f6 <vfprintf+0x238>
    79d8:	4c 0c       	add	r4, r12
    79da:	04 ff       	sbrs	r16, 4
    79dc:	04 c0       	rjmp	.+8      	; 0x79e6 <vfprintf+0x228>
    79de:	8a 81       	ldd	r24, Y+2	; 0x02
    79e0:	81 33       	cpi	r24, 0x31	; 49
    79e2:	09 f4       	brne	.+2      	; 0x79e6 <vfprintf+0x228>
    79e4:	4a 94       	dec	r4
    79e6:	14 14       	cp	r1, r4
    79e8:	74 f5       	brge	.+92     	; 0x7a46 <vfprintf+0x288>
    79ea:	f8 e0       	ldi	r31, 0x08	; 8
    79ec:	f4 15       	cp	r31, r4
    79ee:	78 f5       	brcc	.+94     	; 0x7a4e <vfprintf+0x290>
    79f0:	88 e0       	ldi	r24, 0x08	; 8
    79f2:	48 2e       	mov	r4, r24
    79f4:	2c c0       	rjmp	.+88     	; 0x7a4e <vfprintf+0x290>
    79f6:	76 fc       	sbrc	r7, 6
    79f8:	2a c0       	rjmp	.+84     	; 0x7a4e <vfprintf+0x290>
    79fa:	81 2f       	mov	r24, r17
    79fc:	90 e0       	ldi	r25, 0x00	; 0
    79fe:	8c 15       	cp	r24, r12
    7a00:	9d 05       	cpc	r25, r13
    7a02:	9c f0       	brlt	.+38     	; 0x7a2a <vfprintf+0x26c>
    7a04:	6c ef       	ldi	r22, 0xFC	; 252
    7a06:	c6 16       	cp	r12, r22
    7a08:	6f ef       	ldi	r22, 0xFF	; 255
    7a0a:	d6 06       	cpc	r13, r22
    7a0c:	74 f0       	brlt	.+28     	; 0x7a2a <vfprintf+0x26c>
    7a0e:	77 2d       	mov	r23, r7
    7a10:	70 68       	ori	r23, 0x80	; 128
    7a12:	77 2e       	mov	r7, r23
    7a14:	0a c0       	rjmp	.+20     	; 0x7a2a <vfprintf+0x26c>
    7a16:	e2 e0       	ldi	r30, 0x02	; 2
    7a18:	f0 e0       	ldi	r31, 0x00	; 0
    7a1a:	ec 0f       	add	r30, r28
    7a1c:	fd 1f       	adc	r31, r29
    7a1e:	e1 0f       	add	r30, r17
    7a20:	f1 1d       	adc	r31, r1
    7a22:	80 81       	ld	r24, Z
    7a24:	80 33       	cpi	r24, 0x30	; 48
    7a26:	19 f4       	brne	.+6      	; 0x7a2e <vfprintf+0x270>
    7a28:	11 50       	subi	r17, 0x01	; 1
    7a2a:	11 11       	cpse	r17, r1
    7a2c:	f4 cf       	rjmp	.-24     	; 0x7a16 <vfprintf+0x258>
    7a2e:	77 fe       	sbrs	r7, 7
    7a30:	0e c0       	rjmp	.+28     	; 0x7a4e <vfprintf+0x290>
    7a32:	44 24       	eor	r4, r4
    7a34:	43 94       	inc	r4
    7a36:	41 0e       	add	r4, r17
    7a38:	81 2f       	mov	r24, r17
    7a3a:	90 e0       	ldi	r25, 0x00	; 0
    7a3c:	c8 16       	cp	r12, r24
    7a3e:	d9 06       	cpc	r13, r25
    7a40:	2c f4       	brge	.+10     	; 0x7a4c <vfprintf+0x28e>
    7a42:	1c 19       	sub	r17, r12
    7a44:	04 c0       	rjmp	.+8      	; 0x7a4e <vfprintf+0x290>
    7a46:	44 24       	eor	r4, r4
    7a48:	43 94       	inc	r4
    7a4a:	01 c0       	rjmp	.+2      	; 0x7a4e <vfprintf+0x290>
    7a4c:	10 e0       	ldi	r17, 0x00	; 0
    7a4e:	77 fe       	sbrs	r7, 7
    7a50:	07 c0       	rjmp	.+14     	; 0x7a60 <vfprintf+0x2a2>
    7a52:	1c 14       	cp	r1, r12
    7a54:	1d 04       	cpc	r1, r13
    7a56:	3c f4       	brge	.+14     	; 0x7a66 <vfprintf+0x2a8>
    7a58:	96 01       	movw	r18, r12
    7a5a:	2f 5f       	subi	r18, 0xFF	; 255
    7a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    7a5e:	05 c0       	rjmp	.+10     	; 0x7a6a <vfprintf+0x2ac>
    7a60:	25 e0       	ldi	r18, 0x05	; 5
    7a62:	30 e0       	ldi	r19, 0x00	; 0
    7a64:	02 c0       	rjmp	.+4      	; 0x7a6a <vfprintf+0x2ac>
    7a66:	21 e0       	ldi	r18, 0x01	; 1
    7a68:	30 e0       	ldi	r19, 0x00	; 0
    7a6a:	66 20       	and	r6, r6
    7a6c:	11 f0       	breq	.+4      	; 0x7a72 <vfprintf+0x2b4>
    7a6e:	2f 5f       	subi	r18, 0xFF	; 255
    7a70:	3f 4f       	sbci	r19, 0xFF	; 255
    7a72:	11 23       	and	r17, r17
    7a74:	31 f0       	breq	.+12     	; 0x7a82 <vfprintf+0x2c4>
    7a76:	41 2f       	mov	r20, r17
    7a78:	50 e0       	ldi	r21, 0x00	; 0
    7a7a:	4f 5f       	subi	r20, 0xFF	; 255
    7a7c:	5f 4f       	sbci	r21, 0xFF	; 255
    7a7e:	24 0f       	add	r18, r20
    7a80:	35 1f       	adc	r19, r21
    7a82:	45 2d       	mov	r20, r5
    7a84:	50 e0       	ldi	r21, 0x00	; 0
    7a86:	24 17       	cp	r18, r20
    7a88:	35 07       	cpc	r19, r21
    7a8a:	14 f4       	brge	.+4      	; 0x7a90 <vfprintf+0x2d2>
    7a8c:	52 1a       	sub	r5, r18
    7a8e:	01 c0       	rjmp	.+2      	; 0x7a92 <vfprintf+0x2d4>
    7a90:	51 2c       	mov	r5, r1
    7a92:	87 2d       	mov	r24, r7
    7a94:	89 70       	andi	r24, 0x09	; 9
    7a96:	49 f4       	brne	.+18     	; 0x7aaa <vfprintf+0x2ec>
    7a98:	55 20       	and	r5, r5
    7a9a:	39 f0       	breq	.+14     	; 0x7aaa <vfprintf+0x2ec>
    7a9c:	b7 01       	movw	r22, r14
    7a9e:	80 e2       	ldi	r24, 0x20	; 32
    7aa0:	90 e0       	ldi	r25, 0x00	; 0
    7aa2:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7aa6:	5a 94       	dec	r5
    7aa8:	f7 cf       	rjmp	.-18     	; 0x7a98 <vfprintf+0x2da>
    7aaa:	66 20       	and	r6, r6
    7aac:	29 f0       	breq	.+10     	; 0x7ab8 <vfprintf+0x2fa>
    7aae:	b7 01       	movw	r22, r14
    7ab0:	86 2d       	mov	r24, r6
    7ab2:	90 e0       	ldi	r25, 0x00	; 0
    7ab4:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7ab8:	73 fc       	sbrc	r7, 3
    7aba:	09 c0       	rjmp	.+18     	; 0x7ace <vfprintf+0x310>
    7abc:	55 20       	and	r5, r5
    7abe:	39 f0       	breq	.+14     	; 0x7ace <vfprintf+0x310>
    7ac0:	b7 01       	movw	r22, r14
    7ac2:	80 e3       	ldi	r24, 0x30	; 48
    7ac4:	90 e0       	ldi	r25, 0x00	; 0
    7ac6:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7aca:	5a 94       	dec	r5
    7acc:	f7 cf       	rjmp	.-18     	; 0x7abc <vfprintf+0x2fe>
    7ace:	77 fe       	sbrs	r7, 7
    7ad0:	5f c0       	rjmp	.+190    	; 0x7b90 <vfprintf+0x3d2>
    7ad2:	9c 2d       	mov	r25, r12
    7ad4:	8d 2d       	mov	r24, r13
    7ad6:	d7 fe       	sbrs	r13, 7
    7ad8:	02 c0       	rjmp	.+4      	; 0x7ade <vfprintf+0x320>
    7ada:	90 e0       	ldi	r25, 0x00	; 0
    7adc:	80 e0       	ldi	r24, 0x00	; 0
    7ade:	69 2e       	mov	r6, r25
    7ae0:	78 2e       	mov	r7, r24
    7ae2:	40 e0       	ldi	r20, 0x00	; 0
    7ae4:	50 e0       	ldi	r21, 0x00	; 0
    7ae6:	c6 01       	movw	r24, r12
    7ae8:	84 19       	sub	r24, r4
    7aea:	91 09       	sbc	r25, r1
    7aec:	8c 87       	std	Y+12, r24	; 0x0c
    7aee:	9d 87       	std	Y+13, r25	; 0x0d
    7af0:	96 01       	movw	r18, r12
    7af2:	26 19       	sub	r18, r6
    7af4:	37 09       	sbc	r19, r7
    7af6:	28 0d       	add	r18, r8
    7af8:	39 1d       	adc	r19, r9
    7afa:	81 2f       	mov	r24, r17
    7afc:	90 e0       	ldi	r25, 0x00	; 0
    7afe:	ee 27       	eor	r30, r30
    7b00:	ff 27       	eor	r31, r31
    7b02:	e8 1b       	sub	r30, r24
    7b04:	f9 0b       	sbc	r31, r25
    7b06:	ee 87       	std	Y+14, r30	; 0x0e
    7b08:	ff 87       	std	Y+15, r31	; 0x0f
    7b0a:	ff ef       	ldi	r31, 0xFF	; 255
    7b0c:	6f 16       	cp	r6, r31
    7b0e:	7f 06       	cpc	r7, r31
    7b10:	69 f4       	brne	.+26     	; 0x7b2c <vfprintf+0x36e>
    7b12:	b7 01       	movw	r22, r14
    7b14:	8e e2       	ldi	r24, 0x2E	; 46
    7b16:	90 e0       	ldi	r25, 0x00	; 0
    7b18:	2b 8b       	std	Y+19, r18	; 0x13
    7b1a:	3a 8b       	std	Y+18, r19	; 0x12
    7b1c:	48 8b       	std	Y+16, r20	; 0x10
    7b1e:	59 8b       	std	Y+17, r21	; 0x11
    7b20:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7b24:	59 89       	ldd	r21, Y+17	; 0x11
    7b26:	48 89       	ldd	r20, Y+16	; 0x10
    7b28:	3a 89       	ldd	r19, Y+18	; 0x12
    7b2a:	2b 89       	ldd	r18, Y+19	; 0x13
    7b2c:	c6 14       	cp	r12, r6
    7b2e:	d7 04       	cpc	r13, r7
    7b30:	54 f0       	brlt	.+20     	; 0x7b46 <vfprintf+0x388>
    7b32:	6c 85       	ldd	r22, Y+12	; 0x0c
    7b34:	7d 85       	ldd	r23, Y+13	; 0x0d
    7b36:	66 15       	cp	r22, r6
    7b38:	77 05       	cpc	r23, r7
    7b3a:	2c f4       	brge	.+10     	; 0x7b46 <vfprintf+0x388>
    7b3c:	f9 01       	movw	r30, r18
    7b3e:	e4 0f       	add	r30, r20
    7b40:	f5 1f       	adc	r31, r21
    7b42:	81 81       	ldd	r24, Z+1	; 0x01
    7b44:	01 c0       	rjmp	.+2      	; 0x7b48 <vfprintf+0x38a>
    7b46:	80 e3       	ldi	r24, 0x30	; 48
    7b48:	71 e0       	ldi	r23, 0x01	; 1
    7b4a:	67 1a       	sub	r6, r23
    7b4c:	71 08       	sbc	r7, r1
    7b4e:	4f 5f       	subi	r20, 0xFF	; 255
    7b50:	5f 4f       	sbci	r21, 0xFF	; 255
    7b52:	ee 85       	ldd	r30, Y+14	; 0x0e
    7b54:	ff 85       	ldd	r31, Y+15	; 0x0f
    7b56:	6e 16       	cp	r6, r30
    7b58:	7f 06       	cpc	r7, r31
    7b5a:	6c f0       	brlt	.+26     	; 0x7b76 <vfprintf+0x3b8>
    7b5c:	b7 01       	movw	r22, r14
    7b5e:	90 e0       	ldi	r25, 0x00	; 0
    7b60:	2b 8b       	std	Y+19, r18	; 0x13
    7b62:	3a 8b       	std	Y+18, r19	; 0x12
    7b64:	48 8b       	std	Y+16, r20	; 0x10
    7b66:	59 8b       	std	Y+17, r21	; 0x11
    7b68:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7b6c:	2b 89       	ldd	r18, Y+19	; 0x13
    7b6e:	3a 89       	ldd	r19, Y+18	; 0x12
    7b70:	48 89       	ldd	r20, Y+16	; 0x10
    7b72:	59 89       	ldd	r21, Y+17	; 0x11
    7b74:	ca cf       	rjmp	.-108    	; 0x7b0a <vfprintf+0x34c>
    7b76:	6c 14       	cp	r6, r12
    7b78:	7d 04       	cpc	r7, r13
    7b7a:	39 f4       	brne	.+14     	; 0x7b8a <vfprintf+0x3cc>
    7b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    7b7e:	96 33       	cpi	r25, 0x36	; 54
    7b80:	18 f4       	brcc	.+6      	; 0x7b88 <vfprintf+0x3ca>
    7b82:	95 33       	cpi	r25, 0x35	; 53
    7b84:	11 f4       	brne	.+4      	; 0x7b8a <vfprintf+0x3cc>
    7b86:	04 ff       	sbrs	r16, 4
    7b88:	81 e3       	ldi	r24, 0x31	; 49
    7b8a:	b7 01       	movw	r22, r14
    7b8c:	90 e0       	ldi	r25, 0x00	; 0
    7b8e:	4b c0       	rjmp	.+150    	; 0x7c26 <vfprintf+0x468>
    7b90:	8a 81       	ldd	r24, Y+2	; 0x02
    7b92:	81 33       	cpi	r24, 0x31	; 49
    7b94:	09 f0       	breq	.+2      	; 0x7b98 <vfprintf+0x3da>
    7b96:	0f 7e       	andi	r16, 0xEF	; 239
    7b98:	b7 01       	movw	r22, r14
    7b9a:	90 e0       	ldi	r25, 0x00	; 0
    7b9c:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7ba0:	11 11       	cpse	r17, r1
    7ba2:	05 c0       	rjmp	.+10     	; 0x7bae <vfprintf+0x3f0>
    7ba4:	74 fe       	sbrs	r7, 4
    7ba6:	18 c0       	rjmp	.+48     	; 0x7bd8 <vfprintf+0x41a>
    7ba8:	85 e4       	ldi	r24, 0x45	; 69
    7baa:	90 e0       	ldi	r25, 0x00	; 0
    7bac:	17 c0       	rjmp	.+46     	; 0x7bdc <vfprintf+0x41e>
    7bae:	b7 01       	movw	r22, r14
    7bb0:	8e e2       	ldi	r24, 0x2E	; 46
    7bb2:	90 e0       	ldi	r25, 0x00	; 0
    7bb4:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7bb8:	82 e0       	ldi	r24, 0x02	; 2
    7bba:	66 24       	eor	r6, r6
    7bbc:	63 94       	inc	r6
    7bbe:	68 0e       	add	r6, r24
    7bc0:	f4 01       	movw	r30, r8
    7bc2:	e8 0f       	add	r30, r24
    7bc4:	f1 1d       	adc	r31, r1
    7bc6:	80 81       	ld	r24, Z
    7bc8:	b7 01       	movw	r22, r14
    7bca:	90 e0       	ldi	r25, 0x00	; 0
    7bcc:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7bd0:	11 50       	subi	r17, 0x01	; 1
    7bd2:	41 f3       	breq	.-48     	; 0x7ba4 <vfprintf+0x3e6>
    7bd4:	86 2d       	mov	r24, r6
    7bd6:	f1 cf       	rjmp	.-30     	; 0x7bba <vfprintf+0x3fc>
    7bd8:	85 e6       	ldi	r24, 0x65	; 101
    7bda:	90 e0       	ldi	r25, 0x00	; 0
    7bdc:	b7 01       	movw	r22, r14
    7bde:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7be2:	d7 fc       	sbrc	r13, 7
    7be4:	05 c0       	rjmp	.+10     	; 0x7bf0 <vfprintf+0x432>
    7be6:	c1 14       	cp	r12, r1
    7be8:	d1 04       	cpc	r13, r1
    7bea:	39 f4       	brne	.+14     	; 0x7bfa <vfprintf+0x43c>
    7bec:	04 ff       	sbrs	r16, 4
    7bee:	05 c0       	rjmp	.+10     	; 0x7bfa <vfprintf+0x43c>
    7bf0:	d1 94       	neg	r13
    7bf2:	c1 94       	neg	r12
    7bf4:	d1 08       	sbc	r13, r1
    7bf6:	8d e2       	ldi	r24, 0x2D	; 45
    7bf8:	01 c0       	rjmp	.+2      	; 0x7bfc <vfprintf+0x43e>
    7bfa:	8b e2       	ldi	r24, 0x2B	; 43
    7bfc:	b7 01       	movw	r22, r14
    7bfe:	90 e0       	ldi	r25, 0x00	; 0
    7c00:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7c04:	80 e3       	ldi	r24, 0x30	; 48
    7c06:	6a e0       	ldi	r22, 0x0A	; 10
    7c08:	c6 16       	cp	r12, r22
    7c0a:	d1 04       	cpc	r13, r1
    7c0c:	2c f0       	brlt	.+10     	; 0x7c18 <vfprintf+0x45a>
    7c0e:	8f 5f       	subi	r24, 0xFF	; 255
    7c10:	fa e0       	ldi	r31, 0x0A	; 10
    7c12:	cf 1a       	sub	r12, r31
    7c14:	d1 08       	sbc	r13, r1
    7c16:	f7 cf       	rjmp	.-18     	; 0x7c06 <vfprintf+0x448>
    7c18:	b7 01       	movw	r22, r14
    7c1a:	90 e0       	ldi	r25, 0x00	; 0
    7c1c:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7c20:	b7 01       	movw	r22, r14
    7c22:	c6 01       	movw	r24, r12
    7c24:	c0 96       	adiw	r24, 0x30	; 48
    7c26:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7c2a:	41 c1       	rjmp	.+642    	; 0x7eae <vfprintf+0x6f0>
    7c2c:	83 36       	cpi	r24, 0x63	; 99
    7c2e:	31 f0       	breq	.+12     	; 0x7c3c <vfprintf+0x47e>
    7c30:	83 37       	cpi	r24, 0x73	; 115
    7c32:	79 f0       	breq	.+30     	; 0x7c52 <vfprintf+0x494>
    7c34:	83 35       	cpi	r24, 0x53	; 83
    7c36:	09 f0       	breq	.+2      	; 0x7c3a <vfprintf+0x47c>
    7c38:	58 c0       	rjmp	.+176    	; 0x7cea <vfprintf+0x52c>
    7c3a:	21 c0       	rjmp	.+66     	; 0x7c7e <vfprintf+0x4c0>
    7c3c:	56 01       	movw	r10, r12
    7c3e:	72 e0       	ldi	r23, 0x02	; 2
    7c40:	a7 0e       	add	r10, r23
    7c42:	b1 1c       	adc	r11, r1
    7c44:	f6 01       	movw	r30, r12
    7c46:	80 81       	ld	r24, Z
    7c48:	89 83       	std	Y+1, r24	; 0x01
    7c4a:	01 e0       	ldi	r16, 0x01	; 1
    7c4c:	10 e0       	ldi	r17, 0x00	; 0
    7c4e:	64 01       	movw	r12, r8
    7c50:	14 c0       	rjmp	.+40     	; 0x7c7a <vfprintf+0x4bc>
    7c52:	56 01       	movw	r10, r12
    7c54:	f2 e0       	ldi	r31, 0x02	; 2
    7c56:	af 0e       	add	r10, r31
    7c58:	b1 1c       	adc	r11, r1
    7c5a:	f6 01       	movw	r30, r12
    7c5c:	c0 80       	ld	r12, Z
    7c5e:	d1 80       	ldd	r13, Z+1	; 0x01
    7c60:	26 ff       	sbrs	r18, 6
    7c62:	03 c0       	rjmp	.+6      	; 0x7c6a <vfprintf+0x4ac>
    7c64:	61 2f       	mov	r22, r17
    7c66:	70 e0       	ldi	r23, 0x00	; 0
    7c68:	02 c0       	rjmp	.+4      	; 0x7c6e <vfprintf+0x4b0>
    7c6a:	6f ef       	ldi	r22, 0xFF	; 255
    7c6c:	7f ef       	ldi	r23, 0xFF	; 255
    7c6e:	c6 01       	movw	r24, r12
    7c70:	2b 8b       	std	Y+19, r18	; 0x13
    7c72:	0e 94 02 43 	call	0x8604	; 0x8604 <strnlen>
    7c76:	8c 01       	movw	r16, r24
    7c78:	2b 89       	ldd	r18, Y+19	; 0x13
    7c7a:	2f 77       	andi	r18, 0x7F	; 127
    7c7c:	15 c0       	rjmp	.+42     	; 0x7ca8 <vfprintf+0x4ea>
    7c7e:	56 01       	movw	r10, r12
    7c80:	f2 e0       	ldi	r31, 0x02	; 2
    7c82:	af 0e       	add	r10, r31
    7c84:	b1 1c       	adc	r11, r1
    7c86:	f6 01       	movw	r30, r12
    7c88:	c0 80       	ld	r12, Z
    7c8a:	d1 80       	ldd	r13, Z+1	; 0x01
    7c8c:	26 ff       	sbrs	r18, 6
    7c8e:	03 c0       	rjmp	.+6      	; 0x7c96 <vfprintf+0x4d8>
    7c90:	61 2f       	mov	r22, r17
    7c92:	70 e0       	ldi	r23, 0x00	; 0
    7c94:	02 c0       	rjmp	.+4      	; 0x7c9a <vfprintf+0x4dc>
    7c96:	6f ef       	ldi	r22, 0xFF	; 255
    7c98:	7f ef       	ldi	r23, 0xFF	; 255
    7c9a:	c6 01       	movw	r24, r12
    7c9c:	2b 8b       	std	Y+19, r18	; 0x13
    7c9e:	0e 94 d5 42 	call	0x85aa	; 0x85aa <strnlen_P>
    7ca2:	8c 01       	movw	r16, r24
    7ca4:	2b 89       	ldd	r18, Y+19	; 0x13
    7ca6:	20 68       	ori	r18, 0x80	; 128
    7ca8:	72 2e       	mov	r7, r18
    7caa:	23 fd       	sbrc	r18, 3
    7cac:	1a c0       	rjmp	.+52     	; 0x7ce2 <vfprintf+0x524>
    7cae:	85 2d       	mov	r24, r5
    7cb0:	90 e0       	ldi	r25, 0x00	; 0
    7cb2:	08 17       	cp	r16, r24
    7cb4:	19 07       	cpc	r17, r25
    7cb6:	a8 f4       	brcc	.+42     	; 0x7ce2 <vfprintf+0x524>
    7cb8:	b7 01       	movw	r22, r14
    7cba:	80 e2       	ldi	r24, 0x20	; 32
    7cbc:	90 e0       	ldi	r25, 0x00	; 0
    7cbe:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7cc2:	5a 94       	dec	r5
    7cc4:	f4 cf       	rjmp	.-24     	; 0x7cae <vfprintf+0x4f0>
    7cc6:	f6 01       	movw	r30, r12
    7cc8:	77 fc       	sbrc	r7, 7
    7cca:	85 91       	lpm	r24, Z+
    7ccc:	77 fe       	sbrs	r7, 7
    7cce:	81 91       	ld	r24, Z+
    7cd0:	6f 01       	movw	r12, r30
    7cd2:	b7 01       	movw	r22, r14
    7cd4:	90 e0       	ldi	r25, 0x00	; 0
    7cd6:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7cda:	51 10       	cpse	r5, r1
    7cdc:	5a 94       	dec	r5
    7cde:	01 50       	subi	r16, 0x01	; 1
    7ce0:	11 09       	sbc	r17, r1
    7ce2:	01 15       	cp	r16, r1
    7ce4:	11 05       	cpc	r17, r1
    7ce6:	79 f7       	brne	.-34     	; 0x7cc6 <vfprintf+0x508>
    7ce8:	e2 c0       	rjmp	.+452    	; 0x7eae <vfprintf+0x6f0>
    7cea:	84 36       	cpi	r24, 0x64	; 100
    7cec:	11 f0       	breq	.+4      	; 0x7cf2 <vfprintf+0x534>
    7cee:	89 36       	cpi	r24, 0x69	; 105
    7cf0:	51 f5       	brne	.+84     	; 0x7d46 <vfprintf+0x588>
    7cf2:	56 01       	movw	r10, r12
    7cf4:	27 ff       	sbrs	r18, 7
    7cf6:	09 c0       	rjmp	.+18     	; 0x7d0a <vfprintf+0x54c>
    7cf8:	f4 e0       	ldi	r31, 0x04	; 4
    7cfa:	af 0e       	add	r10, r31
    7cfc:	b1 1c       	adc	r11, r1
    7cfe:	f6 01       	movw	r30, r12
    7d00:	60 81       	ld	r22, Z
    7d02:	71 81       	ldd	r23, Z+1	; 0x01
    7d04:	82 81       	ldd	r24, Z+2	; 0x02
    7d06:	93 81       	ldd	r25, Z+3	; 0x03
    7d08:	0a c0       	rjmp	.+20     	; 0x7d1e <vfprintf+0x560>
    7d0a:	f2 e0       	ldi	r31, 0x02	; 2
    7d0c:	af 0e       	add	r10, r31
    7d0e:	b1 1c       	adc	r11, r1
    7d10:	f6 01       	movw	r30, r12
    7d12:	60 81       	ld	r22, Z
    7d14:	71 81       	ldd	r23, Z+1	; 0x01
    7d16:	88 27       	eor	r24, r24
    7d18:	77 fd       	sbrc	r23, 7
    7d1a:	80 95       	com	r24
    7d1c:	98 2f       	mov	r25, r24
    7d1e:	02 2f       	mov	r16, r18
    7d20:	0f 76       	andi	r16, 0x6F	; 111
    7d22:	97 ff       	sbrs	r25, 7
    7d24:	08 c0       	rjmp	.+16     	; 0x7d36 <vfprintf+0x578>
    7d26:	90 95       	com	r25
    7d28:	80 95       	com	r24
    7d2a:	70 95       	com	r23
    7d2c:	61 95       	neg	r22
    7d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    7d30:	8f 4f       	sbci	r24, 0xFF	; 255
    7d32:	9f 4f       	sbci	r25, 0xFF	; 255
    7d34:	00 68       	ori	r16, 0x80	; 128
    7d36:	2a e0       	ldi	r18, 0x0A	; 10
    7d38:	30 e0       	ldi	r19, 0x00	; 0
    7d3a:	a4 01       	movw	r20, r8
    7d3c:	0e 94 a7 43 	call	0x874e	; 0x874e <__ultoa_invert>
    7d40:	c8 2e       	mov	r12, r24
    7d42:	c8 18       	sub	r12, r8
    7d44:	3e c0       	rjmp	.+124    	; 0x7dc2 <vfprintf+0x604>
    7d46:	02 2f       	mov	r16, r18
    7d48:	85 37       	cpi	r24, 0x75	; 117
    7d4a:	21 f4       	brne	.+8      	; 0x7d54 <vfprintf+0x596>
    7d4c:	0f 7e       	andi	r16, 0xEF	; 239
    7d4e:	2a e0       	ldi	r18, 0x0A	; 10
    7d50:	30 e0       	ldi	r19, 0x00	; 0
    7d52:	1d c0       	rjmp	.+58     	; 0x7d8e <vfprintf+0x5d0>
    7d54:	09 7f       	andi	r16, 0xF9	; 249
    7d56:	8f 36       	cpi	r24, 0x6F	; 111
    7d58:	91 f0       	breq	.+36     	; 0x7d7e <vfprintf+0x5c0>
    7d5a:	18 f4       	brcc	.+6      	; 0x7d62 <vfprintf+0x5a4>
    7d5c:	88 35       	cpi	r24, 0x58	; 88
    7d5e:	59 f0       	breq	.+22     	; 0x7d76 <vfprintf+0x5b8>
    7d60:	b0 c0       	rjmp	.+352    	; 0x7ec2 <vfprintf+0x704>
    7d62:	80 37       	cpi	r24, 0x70	; 112
    7d64:	19 f0       	breq	.+6      	; 0x7d6c <vfprintf+0x5ae>
    7d66:	88 37       	cpi	r24, 0x78	; 120
    7d68:	11 f0       	breq	.+4      	; 0x7d6e <vfprintf+0x5b0>
    7d6a:	ab c0       	rjmp	.+342    	; 0x7ec2 <vfprintf+0x704>
    7d6c:	00 61       	ori	r16, 0x10	; 16
    7d6e:	04 ff       	sbrs	r16, 4
    7d70:	09 c0       	rjmp	.+18     	; 0x7d84 <vfprintf+0x5c6>
    7d72:	04 60       	ori	r16, 0x04	; 4
    7d74:	07 c0       	rjmp	.+14     	; 0x7d84 <vfprintf+0x5c6>
    7d76:	24 ff       	sbrs	r18, 4
    7d78:	08 c0       	rjmp	.+16     	; 0x7d8a <vfprintf+0x5cc>
    7d7a:	06 60       	ori	r16, 0x06	; 6
    7d7c:	06 c0       	rjmp	.+12     	; 0x7d8a <vfprintf+0x5cc>
    7d7e:	28 e0       	ldi	r18, 0x08	; 8
    7d80:	30 e0       	ldi	r19, 0x00	; 0
    7d82:	05 c0       	rjmp	.+10     	; 0x7d8e <vfprintf+0x5d0>
    7d84:	20 e1       	ldi	r18, 0x10	; 16
    7d86:	30 e0       	ldi	r19, 0x00	; 0
    7d88:	02 c0       	rjmp	.+4      	; 0x7d8e <vfprintf+0x5d0>
    7d8a:	20 e1       	ldi	r18, 0x10	; 16
    7d8c:	32 e0       	ldi	r19, 0x02	; 2
    7d8e:	56 01       	movw	r10, r12
    7d90:	07 ff       	sbrs	r16, 7
    7d92:	09 c0       	rjmp	.+18     	; 0x7da6 <vfprintf+0x5e8>
    7d94:	f4 e0       	ldi	r31, 0x04	; 4
    7d96:	af 0e       	add	r10, r31
    7d98:	b1 1c       	adc	r11, r1
    7d9a:	f6 01       	movw	r30, r12
    7d9c:	60 81       	ld	r22, Z
    7d9e:	71 81       	ldd	r23, Z+1	; 0x01
    7da0:	82 81       	ldd	r24, Z+2	; 0x02
    7da2:	93 81       	ldd	r25, Z+3	; 0x03
    7da4:	08 c0       	rjmp	.+16     	; 0x7db6 <vfprintf+0x5f8>
    7da6:	f2 e0       	ldi	r31, 0x02	; 2
    7da8:	af 0e       	add	r10, r31
    7daa:	b1 1c       	adc	r11, r1
    7dac:	f6 01       	movw	r30, r12
    7dae:	60 81       	ld	r22, Z
    7db0:	71 81       	ldd	r23, Z+1	; 0x01
    7db2:	80 e0       	ldi	r24, 0x00	; 0
    7db4:	90 e0       	ldi	r25, 0x00	; 0
    7db6:	a4 01       	movw	r20, r8
    7db8:	0e 94 a7 43 	call	0x874e	; 0x874e <__ultoa_invert>
    7dbc:	c8 2e       	mov	r12, r24
    7dbe:	c8 18       	sub	r12, r8
    7dc0:	0f 77       	andi	r16, 0x7F	; 127
    7dc2:	06 ff       	sbrs	r16, 6
    7dc4:	0b c0       	rjmp	.+22     	; 0x7ddc <vfprintf+0x61e>
    7dc6:	20 2f       	mov	r18, r16
    7dc8:	2e 7f       	andi	r18, 0xFE	; 254
    7dca:	c1 16       	cp	r12, r17
    7dcc:	50 f4       	brcc	.+20     	; 0x7de2 <vfprintf+0x624>
    7dce:	04 ff       	sbrs	r16, 4
    7dd0:	0a c0       	rjmp	.+20     	; 0x7de6 <vfprintf+0x628>
    7dd2:	02 fd       	sbrc	r16, 2
    7dd4:	08 c0       	rjmp	.+16     	; 0x7de6 <vfprintf+0x628>
    7dd6:	20 2f       	mov	r18, r16
    7dd8:	2e 7e       	andi	r18, 0xEE	; 238
    7dda:	05 c0       	rjmp	.+10     	; 0x7de6 <vfprintf+0x628>
    7ddc:	dc 2c       	mov	r13, r12
    7dde:	20 2f       	mov	r18, r16
    7de0:	03 c0       	rjmp	.+6      	; 0x7de8 <vfprintf+0x62a>
    7de2:	dc 2c       	mov	r13, r12
    7de4:	01 c0       	rjmp	.+2      	; 0x7de8 <vfprintf+0x62a>
    7de6:	d1 2e       	mov	r13, r17
    7de8:	24 ff       	sbrs	r18, 4
    7dea:	0d c0       	rjmp	.+26     	; 0x7e06 <vfprintf+0x648>
    7dec:	fe 01       	movw	r30, r28
    7dee:	ec 0d       	add	r30, r12
    7df0:	f1 1d       	adc	r31, r1
    7df2:	80 81       	ld	r24, Z
    7df4:	80 33       	cpi	r24, 0x30	; 48
    7df6:	11 f4       	brne	.+4      	; 0x7dfc <vfprintf+0x63e>
    7df8:	29 7e       	andi	r18, 0xE9	; 233
    7dfa:	09 c0       	rjmp	.+18     	; 0x7e0e <vfprintf+0x650>
    7dfc:	22 ff       	sbrs	r18, 2
    7dfe:	06 c0       	rjmp	.+12     	; 0x7e0c <vfprintf+0x64e>
    7e00:	d3 94       	inc	r13
    7e02:	d3 94       	inc	r13
    7e04:	04 c0       	rjmp	.+8      	; 0x7e0e <vfprintf+0x650>
    7e06:	82 2f       	mov	r24, r18
    7e08:	86 78       	andi	r24, 0x86	; 134
    7e0a:	09 f0       	breq	.+2      	; 0x7e0e <vfprintf+0x650>
    7e0c:	d3 94       	inc	r13
    7e0e:	23 fd       	sbrc	r18, 3
    7e10:	13 c0       	rjmp	.+38     	; 0x7e38 <vfprintf+0x67a>
    7e12:	20 ff       	sbrs	r18, 0
    7e14:	06 c0       	rjmp	.+12     	; 0x7e22 <vfprintf+0x664>
    7e16:	1c 2d       	mov	r17, r12
    7e18:	d5 14       	cp	r13, r5
    7e1a:	18 f4       	brcc	.+6      	; 0x7e22 <vfprintf+0x664>
    7e1c:	15 0d       	add	r17, r5
    7e1e:	1d 19       	sub	r17, r13
    7e20:	d5 2c       	mov	r13, r5
    7e22:	d5 14       	cp	r13, r5
    7e24:	68 f4       	brcc	.+26     	; 0x7e40 <vfprintf+0x682>
    7e26:	b7 01       	movw	r22, r14
    7e28:	80 e2       	ldi	r24, 0x20	; 32
    7e2a:	90 e0       	ldi	r25, 0x00	; 0
    7e2c:	2b 8b       	std	Y+19, r18	; 0x13
    7e2e:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7e32:	d3 94       	inc	r13
    7e34:	2b 89       	ldd	r18, Y+19	; 0x13
    7e36:	f5 cf       	rjmp	.-22     	; 0x7e22 <vfprintf+0x664>
    7e38:	d5 14       	cp	r13, r5
    7e3a:	10 f4       	brcc	.+4      	; 0x7e40 <vfprintf+0x682>
    7e3c:	5d 18       	sub	r5, r13
    7e3e:	01 c0       	rjmp	.+2      	; 0x7e42 <vfprintf+0x684>
    7e40:	51 2c       	mov	r5, r1
    7e42:	24 ff       	sbrs	r18, 4
    7e44:	12 c0       	rjmp	.+36     	; 0x7e6a <vfprintf+0x6ac>
    7e46:	b7 01       	movw	r22, r14
    7e48:	80 e3       	ldi	r24, 0x30	; 48
    7e4a:	90 e0       	ldi	r25, 0x00	; 0
    7e4c:	2b 8b       	std	Y+19, r18	; 0x13
    7e4e:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7e52:	2b 89       	ldd	r18, Y+19	; 0x13
    7e54:	22 ff       	sbrs	r18, 2
    7e56:	17 c0       	rjmp	.+46     	; 0x7e86 <vfprintf+0x6c8>
    7e58:	21 ff       	sbrs	r18, 1
    7e5a:	03 c0       	rjmp	.+6      	; 0x7e62 <vfprintf+0x6a4>
    7e5c:	88 e5       	ldi	r24, 0x58	; 88
    7e5e:	90 e0       	ldi	r25, 0x00	; 0
    7e60:	02 c0       	rjmp	.+4      	; 0x7e66 <vfprintf+0x6a8>
    7e62:	88 e7       	ldi	r24, 0x78	; 120
    7e64:	90 e0       	ldi	r25, 0x00	; 0
    7e66:	b7 01       	movw	r22, r14
    7e68:	0c c0       	rjmp	.+24     	; 0x7e82 <vfprintf+0x6c4>
    7e6a:	82 2f       	mov	r24, r18
    7e6c:	86 78       	andi	r24, 0x86	; 134
    7e6e:	59 f0       	breq	.+22     	; 0x7e86 <vfprintf+0x6c8>
    7e70:	21 fd       	sbrc	r18, 1
    7e72:	02 c0       	rjmp	.+4      	; 0x7e78 <vfprintf+0x6ba>
    7e74:	80 e2       	ldi	r24, 0x20	; 32
    7e76:	01 c0       	rjmp	.+2      	; 0x7e7a <vfprintf+0x6bc>
    7e78:	8b e2       	ldi	r24, 0x2B	; 43
    7e7a:	27 fd       	sbrc	r18, 7
    7e7c:	8d e2       	ldi	r24, 0x2D	; 45
    7e7e:	b7 01       	movw	r22, r14
    7e80:	90 e0       	ldi	r25, 0x00	; 0
    7e82:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7e86:	c1 16       	cp	r12, r17
    7e88:	38 f4       	brcc	.+14     	; 0x7e98 <vfprintf+0x6da>
    7e8a:	b7 01       	movw	r22, r14
    7e8c:	80 e3       	ldi	r24, 0x30	; 48
    7e8e:	90 e0       	ldi	r25, 0x00	; 0
    7e90:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7e94:	11 50       	subi	r17, 0x01	; 1
    7e96:	f7 cf       	rjmp	.-18     	; 0x7e86 <vfprintf+0x6c8>
    7e98:	ca 94       	dec	r12
    7e9a:	f4 01       	movw	r30, r8
    7e9c:	ec 0d       	add	r30, r12
    7e9e:	f1 1d       	adc	r31, r1
    7ea0:	80 81       	ld	r24, Z
    7ea2:	b7 01       	movw	r22, r14
    7ea4:	90 e0       	ldi	r25, 0x00	; 0
    7ea6:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7eaa:	c1 10       	cpse	r12, r1
    7eac:	f5 cf       	rjmp	.-22     	; 0x7e98 <vfprintf+0x6da>
    7eae:	55 20       	and	r5, r5
    7eb0:	09 f4       	brne	.+2      	; 0x7eb4 <vfprintf+0x6f6>
    7eb2:	c2 cc       	rjmp	.-1660   	; 0x7838 <vfprintf+0x7a>
    7eb4:	b7 01       	movw	r22, r14
    7eb6:	80 e2       	ldi	r24, 0x20	; 32
    7eb8:	90 e0       	ldi	r25, 0x00	; 0
    7eba:	0e 94 0d 43 	call	0x861a	; 0x861a <fputc>
    7ebe:	5a 94       	dec	r5
    7ec0:	f6 cf       	rjmp	.-20     	; 0x7eae <vfprintf+0x6f0>
    7ec2:	f7 01       	movw	r30, r14
    7ec4:	86 81       	ldd	r24, Z+6	; 0x06
    7ec6:	97 81       	ldd	r25, Z+7	; 0x07
    7ec8:	02 c0       	rjmp	.+4      	; 0x7ece <vfprintf+0x710>
    7eca:	8f ef       	ldi	r24, 0xFF	; 255
    7ecc:	9f ef       	ldi	r25, 0xFF	; 255
    7ece:	63 96       	adiw	r28, 0x13	; 19
    7ed0:	cd bf       	out	0x3d, r28	; 61
    7ed2:	de bf       	out	0x3e, r29	; 62
    7ed4:	df 91       	pop	r29
    7ed6:	cf 91       	pop	r28
    7ed8:	1f 91       	pop	r17
    7eda:	0f 91       	pop	r16
    7edc:	ff 90       	pop	r15
    7ede:	ef 90       	pop	r14
    7ee0:	df 90       	pop	r13
    7ee2:	cf 90       	pop	r12
    7ee4:	bf 90       	pop	r11
    7ee6:	af 90       	pop	r10
    7ee8:	9f 90       	pop	r9
    7eea:	8f 90       	pop	r8
    7eec:	7f 90       	pop	r7
    7eee:	6f 90       	pop	r6
    7ef0:	5f 90       	pop	r5
    7ef2:	4f 90       	pop	r4
    7ef4:	3f 90       	pop	r3
    7ef6:	2f 90       	pop	r2
    7ef8:	08 95       	ret

00007efa <__mulsi3>:
    7efa:	db 01       	movw	r26, r22
    7efc:	8f 93       	push	r24
    7efe:	9f 93       	push	r25
    7f00:	0e 94 0b 40 	call	0x8016	; 0x8016 <__muluhisi3>
    7f04:	bf 91       	pop	r27
    7f06:	af 91       	pop	r26
    7f08:	a2 9f       	mul	r26, r18
    7f0a:	80 0d       	add	r24, r0
    7f0c:	91 1d       	adc	r25, r1
    7f0e:	a3 9f       	mul	r26, r19
    7f10:	90 0d       	add	r25, r0
    7f12:	b2 9f       	mul	r27, r18
    7f14:	90 0d       	add	r25, r0
    7f16:	11 24       	eor	r1, r1
    7f18:	08 95       	ret

00007f1a <__udivmodhi4>:
    7f1a:	aa 1b       	sub	r26, r26
    7f1c:	bb 1b       	sub	r27, r27
    7f1e:	51 e1       	ldi	r21, 0x11	; 17
    7f20:	07 c0       	rjmp	.+14     	; 0x7f30 <__udivmodhi4_ep>

00007f22 <__udivmodhi4_loop>:
    7f22:	aa 1f       	adc	r26, r26
    7f24:	bb 1f       	adc	r27, r27
    7f26:	a6 17       	cp	r26, r22
    7f28:	b7 07       	cpc	r27, r23
    7f2a:	10 f0       	brcs	.+4      	; 0x7f30 <__udivmodhi4_ep>
    7f2c:	a6 1b       	sub	r26, r22
    7f2e:	b7 0b       	sbc	r27, r23

00007f30 <__udivmodhi4_ep>:
    7f30:	88 1f       	adc	r24, r24
    7f32:	99 1f       	adc	r25, r25
    7f34:	5a 95       	dec	r21
    7f36:	a9 f7       	brne	.-22     	; 0x7f22 <__udivmodhi4_loop>
    7f38:	80 95       	com	r24
    7f3a:	90 95       	com	r25
    7f3c:	bc 01       	movw	r22, r24
    7f3e:	cd 01       	movw	r24, r26
    7f40:	08 95       	ret

00007f42 <__divmodhi4>:
    7f42:	97 fb       	bst	r25, 7
    7f44:	07 2e       	mov	r0, r23
    7f46:	16 f4       	brtc	.+4      	; 0x7f4c <__divmodhi4+0xa>
    7f48:	00 94       	com	r0
    7f4a:	07 d0       	rcall	.+14     	; 0x7f5a <__divmodhi4_neg1>
    7f4c:	77 fd       	sbrc	r23, 7
    7f4e:	09 d0       	rcall	.+18     	; 0x7f62 <__divmodhi4_neg2>
    7f50:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <__udivmodhi4>
    7f54:	07 fc       	sbrc	r0, 7
    7f56:	05 d0       	rcall	.+10     	; 0x7f62 <__divmodhi4_neg2>
    7f58:	3e f4       	brtc	.+14     	; 0x7f68 <__divmodhi4_exit>

00007f5a <__divmodhi4_neg1>:
    7f5a:	90 95       	com	r25
    7f5c:	81 95       	neg	r24
    7f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    7f60:	08 95       	ret

00007f62 <__divmodhi4_neg2>:
    7f62:	70 95       	com	r23
    7f64:	61 95       	neg	r22
    7f66:	7f 4f       	sbci	r23, 0xFF	; 255

00007f68 <__divmodhi4_exit>:
    7f68:	08 95       	ret

00007f6a <__udivmodsi4>:
    7f6a:	a1 e2       	ldi	r26, 0x21	; 33
    7f6c:	1a 2e       	mov	r1, r26
    7f6e:	aa 1b       	sub	r26, r26
    7f70:	bb 1b       	sub	r27, r27
    7f72:	fd 01       	movw	r30, r26
    7f74:	0d c0       	rjmp	.+26     	; 0x7f90 <__udivmodsi4_ep>

00007f76 <__udivmodsi4_loop>:
    7f76:	aa 1f       	adc	r26, r26
    7f78:	bb 1f       	adc	r27, r27
    7f7a:	ee 1f       	adc	r30, r30
    7f7c:	ff 1f       	adc	r31, r31
    7f7e:	a2 17       	cp	r26, r18
    7f80:	b3 07       	cpc	r27, r19
    7f82:	e4 07       	cpc	r30, r20
    7f84:	f5 07       	cpc	r31, r21
    7f86:	20 f0       	brcs	.+8      	; 0x7f90 <__udivmodsi4_ep>
    7f88:	a2 1b       	sub	r26, r18
    7f8a:	b3 0b       	sbc	r27, r19
    7f8c:	e4 0b       	sbc	r30, r20
    7f8e:	f5 0b       	sbc	r31, r21

00007f90 <__udivmodsi4_ep>:
    7f90:	66 1f       	adc	r22, r22
    7f92:	77 1f       	adc	r23, r23
    7f94:	88 1f       	adc	r24, r24
    7f96:	99 1f       	adc	r25, r25
    7f98:	1a 94       	dec	r1
    7f9a:	69 f7       	brne	.-38     	; 0x7f76 <__udivmodsi4_loop>
    7f9c:	60 95       	com	r22
    7f9e:	70 95       	com	r23
    7fa0:	80 95       	com	r24
    7fa2:	90 95       	com	r25
    7fa4:	9b 01       	movw	r18, r22
    7fa6:	ac 01       	movw	r20, r24
    7fa8:	bd 01       	movw	r22, r26
    7faa:	cf 01       	movw	r24, r30
    7fac:	08 95       	ret

00007fae <__divmodsi4>:
    7fae:	05 2e       	mov	r0, r21
    7fb0:	97 fb       	bst	r25, 7
    7fb2:	1e f4       	brtc	.+6      	; 0x7fba <__divmodsi4+0xc>
    7fb4:	00 94       	com	r0
    7fb6:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__negsi2>
    7fba:	57 fd       	sbrc	r21, 7
    7fbc:	07 d0       	rcall	.+14     	; 0x7fcc <__divmodsi4_neg2>
    7fbe:	0e 94 b5 3f 	call	0x7f6a	; 0x7f6a <__udivmodsi4>
    7fc2:	07 fc       	sbrc	r0, 7
    7fc4:	03 d0       	rcall	.+6      	; 0x7fcc <__divmodsi4_neg2>
    7fc6:	4e f4       	brtc	.+18     	; 0x7fda <__divmodsi4_exit>
    7fc8:	0c 94 ee 3f 	jmp	0x7fdc	; 0x7fdc <__negsi2>

00007fcc <__divmodsi4_neg2>:
    7fcc:	50 95       	com	r21
    7fce:	40 95       	com	r20
    7fd0:	30 95       	com	r19
    7fd2:	21 95       	neg	r18
    7fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    7fd6:	4f 4f       	sbci	r20, 0xFF	; 255
    7fd8:	5f 4f       	sbci	r21, 0xFF	; 255

00007fda <__divmodsi4_exit>:
    7fda:	08 95       	ret

00007fdc <__negsi2>:
    7fdc:	90 95       	com	r25
    7fde:	80 95       	com	r24
    7fe0:	70 95       	com	r23
    7fe2:	61 95       	neg	r22
    7fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    7fe6:	8f 4f       	sbci	r24, 0xFF	; 255
    7fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    7fea:	08 95       	ret

00007fec <__tablejump2__>:
    7fec:	ee 0f       	add	r30, r30
    7fee:	ff 1f       	adc	r31, r31

00007ff0 <__tablejump__>:
    7ff0:	05 90       	lpm	r0, Z+
    7ff2:	f4 91       	lpm	r31, Z
    7ff4:	e0 2d       	mov	r30, r0
    7ff6:	09 94       	ijmp

00007ff8 <__umulhisi3>:
    7ff8:	a2 9f       	mul	r26, r18
    7ffa:	b0 01       	movw	r22, r0
    7ffc:	b3 9f       	mul	r27, r19
    7ffe:	c0 01       	movw	r24, r0
    8000:	a3 9f       	mul	r26, r19
    8002:	70 0d       	add	r23, r0
    8004:	81 1d       	adc	r24, r1
    8006:	11 24       	eor	r1, r1
    8008:	91 1d       	adc	r25, r1
    800a:	b2 9f       	mul	r27, r18
    800c:	70 0d       	add	r23, r0
    800e:	81 1d       	adc	r24, r1
    8010:	11 24       	eor	r1, r1
    8012:	91 1d       	adc	r25, r1
    8014:	08 95       	ret

00008016 <__muluhisi3>:
    8016:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__umulhisi3>
    801a:	a5 9f       	mul	r26, r21
    801c:	90 0d       	add	r25, r0
    801e:	b4 9f       	mul	r27, r20
    8020:	90 0d       	add	r25, r0
    8022:	a4 9f       	mul	r26, r20
    8024:	80 0d       	add	r24, r0
    8026:	91 1d       	adc	r25, r1
    8028:	11 24       	eor	r1, r1
    802a:	08 95       	ret

0000802c <__muldi3>:
    802c:	df 93       	push	r29
    802e:	cf 93       	push	r28
    8030:	1f 93       	push	r17
    8032:	0f 93       	push	r16
    8034:	9a 9d       	mul	r25, r10
    8036:	f0 2d       	mov	r31, r0
    8038:	21 9f       	mul	r18, r17
    803a:	f0 0d       	add	r31, r0
    803c:	8b 9d       	mul	r24, r11
    803e:	f0 0d       	add	r31, r0
    8040:	8a 9d       	mul	r24, r10
    8042:	e0 2d       	mov	r30, r0
    8044:	f1 0d       	add	r31, r1
    8046:	03 9f       	mul	r16, r19
    8048:	f0 0d       	add	r31, r0
    804a:	02 9f       	mul	r16, r18
    804c:	e0 0d       	add	r30, r0
    804e:	f1 1d       	adc	r31, r1
    8050:	4e 9d       	mul	r20, r14
    8052:	e0 0d       	add	r30, r0
    8054:	f1 1d       	adc	r31, r1
    8056:	5e 9d       	mul	r21, r14
    8058:	f0 0d       	add	r31, r0
    805a:	4f 9d       	mul	r20, r15
    805c:	f0 0d       	add	r31, r0
    805e:	7f 93       	push	r23
    8060:	6f 93       	push	r22
    8062:	bf 92       	push	r11
    8064:	af 92       	push	r10
    8066:	5f 93       	push	r21
    8068:	4f 93       	push	r20
    806a:	d5 01       	movw	r26, r10
    806c:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__umulhisi3>
    8070:	8b 01       	movw	r16, r22
    8072:	ac 01       	movw	r20, r24
    8074:	d7 01       	movw	r26, r14
    8076:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__umulhisi3>
    807a:	eb 01       	movw	r28, r22
    807c:	e8 0f       	add	r30, r24
    807e:	f9 1f       	adc	r31, r25
    8080:	d6 01       	movw	r26, r12
    8082:	0e 94 66 40 	call	0x80cc	; 0x80cc <__muldi3_6>
    8086:	2f 91       	pop	r18
    8088:	3f 91       	pop	r19
    808a:	d6 01       	movw	r26, r12
    808c:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__umulhisi3>
    8090:	c6 0f       	add	r28, r22
    8092:	d7 1f       	adc	r29, r23
    8094:	e8 1f       	adc	r30, r24
    8096:	f9 1f       	adc	r31, r25
    8098:	af 91       	pop	r26
    809a:	bf 91       	pop	r27
    809c:	0e 94 66 40 	call	0x80cc	; 0x80cc <__muldi3_6>
    80a0:	2f 91       	pop	r18
    80a2:	3f 91       	pop	r19
    80a4:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__umulhisi3>
    80a8:	c6 0f       	add	r28, r22
    80aa:	d7 1f       	adc	r29, r23
    80ac:	e8 1f       	adc	r30, r24
    80ae:	f9 1f       	adc	r31, r25
    80b0:	d6 01       	movw	r26, r12
    80b2:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__umulhisi3>
    80b6:	e6 0f       	add	r30, r22
    80b8:	f7 1f       	adc	r31, r23
    80ba:	98 01       	movw	r18, r16
    80bc:	be 01       	movw	r22, r28
    80be:	cf 01       	movw	r24, r30
    80c0:	11 24       	eor	r1, r1
    80c2:	0f 91       	pop	r16
    80c4:	1f 91       	pop	r17
    80c6:	cf 91       	pop	r28
    80c8:	df 91       	pop	r29
    80ca:	08 95       	ret

000080cc <__muldi3_6>:
    80cc:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__umulhisi3>
    80d0:	46 0f       	add	r20, r22
    80d2:	57 1f       	adc	r21, r23
    80d4:	c8 1f       	adc	r28, r24
    80d6:	d9 1f       	adc	r29, r25
    80d8:	08 f4       	brcc	.+2      	; 0x80dc <__muldi3_6+0x10>
    80da:	31 96       	adiw	r30, 0x01	; 1
    80dc:	08 95       	ret

000080de <__ashldi3>:
    80de:	0f 93       	push	r16
    80e0:	08 30       	cpi	r16, 0x08	; 8
    80e2:	90 f0       	brcs	.+36     	; 0x8108 <__ashldi3+0x2a>
    80e4:	98 2f       	mov	r25, r24
    80e6:	87 2f       	mov	r24, r23
    80e8:	76 2f       	mov	r23, r22
    80ea:	65 2f       	mov	r22, r21
    80ec:	54 2f       	mov	r21, r20
    80ee:	43 2f       	mov	r20, r19
    80f0:	32 2f       	mov	r19, r18
    80f2:	22 27       	eor	r18, r18
    80f4:	08 50       	subi	r16, 0x08	; 8
    80f6:	f4 cf       	rjmp	.-24     	; 0x80e0 <__ashldi3+0x2>
    80f8:	22 0f       	add	r18, r18
    80fa:	33 1f       	adc	r19, r19
    80fc:	44 1f       	adc	r20, r20
    80fe:	55 1f       	adc	r21, r21
    8100:	66 1f       	adc	r22, r22
    8102:	77 1f       	adc	r23, r23
    8104:	88 1f       	adc	r24, r24
    8106:	99 1f       	adc	r25, r25
    8108:	0a 95       	dec	r16
    810a:	b2 f7       	brpl	.-20     	; 0x80f8 <__ashldi3+0x1a>
    810c:	0f 91       	pop	r16
    810e:	08 95       	ret

00008110 <__ashrdi3>:
    8110:	97 fb       	bst	r25, 7
    8112:	10 f8       	bld	r1, 0

00008114 <__lshrdi3>:
    8114:	16 94       	lsr	r1
    8116:	00 08       	sbc	r0, r0
    8118:	0f 93       	push	r16
    811a:	08 30       	cpi	r16, 0x08	; 8
    811c:	98 f0       	brcs	.+38     	; 0x8144 <__lshrdi3+0x30>
    811e:	08 50       	subi	r16, 0x08	; 8
    8120:	23 2f       	mov	r18, r19
    8122:	34 2f       	mov	r19, r20
    8124:	45 2f       	mov	r20, r21
    8126:	56 2f       	mov	r21, r22
    8128:	67 2f       	mov	r22, r23
    812a:	78 2f       	mov	r23, r24
    812c:	89 2f       	mov	r24, r25
    812e:	90 2d       	mov	r25, r0
    8130:	f4 cf       	rjmp	.-24     	; 0x811a <__lshrdi3+0x6>
    8132:	05 94       	asr	r0
    8134:	97 95       	ror	r25
    8136:	87 95       	ror	r24
    8138:	77 95       	ror	r23
    813a:	67 95       	ror	r22
    813c:	57 95       	ror	r21
    813e:	47 95       	ror	r20
    8140:	37 95       	ror	r19
    8142:	27 95       	ror	r18
    8144:	0a 95       	dec	r16
    8146:	aa f7       	brpl	.-22     	; 0x8132 <__lshrdi3+0x1e>
    8148:	0f 91       	pop	r16
    814a:	08 95       	ret

0000814c <__adddi3>:
    814c:	2a 0d       	add	r18, r10
    814e:	3b 1d       	adc	r19, r11
    8150:	4c 1d       	adc	r20, r12
    8152:	5d 1d       	adc	r21, r13
    8154:	6e 1d       	adc	r22, r14
    8156:	7f 1d       	adc	r23, r15
    8158:	80 1f       	adc	r24, r16
    815a:	91 1f       	adc	r25, r17
    815c:	08 95       	ret

0000815e <__adddi3_s8>:
    815e:	00 24       	eor	r0, r0
    8160:	a7 fd       	sbrc	r26, 7
    8162:	00 94       	com	r0
    8164:	2a 0f       	add	r18, r26
    8166:	30 1d       	adc	r19, r0
    8168:	40 1d       	adc	r20, r0
    816a:	50 1d       	adc	r21, r0
    816c:	60 1d       	adc	r22, r0
    816e:	70 1d       	adc	r23, r0
    8170:	80 1d       	adc	r24, r0
    8172:	90 1d       	adc	r25, r0
    8174:	08 95       	ret

00008176 <__subdi3>:
    8176:	2a 19       	sub	r18, r10
    8178:	3b 09       	sbc	r19, r11
    817a:	4c 09       	sbc	r20, r12
    817c:	5d 09       	sbc	r21, r13
    817e:	6e 09       	sbc	r22, r14
    8180:	7f 09       	sbc	r23, r15
    8182:	80 0b       	sbc	r24, r16
    8184:	91 0b       	sbc	r25, r17
    8186:	08 95       	ret

00008188 <__cmpdi2>:
    8188:	2a 15       	cp	r18, r10
    818a:	3b 05       	cpc	r19, r11
    818c:	4c 05       	cpc	r20, r12
    818e:	5d 05       	cpc	r21, r13
    8190:	6e 05       	cpc	r22, r14
    8192:	7f 05       	cpc	r23, r15
    8194:	80 07       	cpc	r24, r16
    8196:	91 07       	cpc	r25, r17
    8198:	08 95       	ret

0000819a <malloc>:
    819a:	cf 93       	push	r28
    819c:	df 93       	push	r29
    819e:	82 30       	cpi	r24, 0x02	; 2
    81a0:	91 05       	cpc	r25, r1
    81a2:	10 f4       	brcc	.+4      	; 0x81a8 <malloc+0xe>
    81a4:	82 e0       	ldi	r24, 0x02	; 2
    81a6:	90 e0       	ldi	r25, 0x00	; 0
    81a8:	e0 91 bb 29 	lds	r30, 0x29BB
    81ac:	f0 91 bc 29 	lds	r31, 0x29BC
    81b0:	20 e0       	ldi	r18, 0x00	; 0
    81b2:	30 e0       	ldi	r19, 0x00	; 0
    81b4:	a0 e0       	ldi	r26, 0x00	; 0
    81b6:	b0 e0       	ldi	r27, 0x00	; 0
    81b8:	30 97       	sbiw	r30, 0x00	; 0
    81ba:	39 f1       	breq	.+78     	; 0x820a <malloc+0x70>
    81bc:	40 81       	ld	r20, Z
    81be:	51 81       	ldd	r21, Z+1	; 0x01
    81c0:	48 17       	cp	r20, r24
    81c2:	59 07       	cpc	r21, r25
    81c4:	b8 f0       	brcs	.+46     	; 0x81f4 <malloc+0x5a>
    81c6:	48 17       	cp	r20, r24
    81c8:	59 07       	cpc	r21, r25
    81ca:	71 f4       	brne	.+28     	; 0x81e8 <malloc+0x4e>
    81cc:	82 81       	ldd	r24, Z+2	; 0x02
    81ce:	93 81       	ldd	r25, Z+3	; 0x03
    81d0:	10 97       	sbiw	r26, 0x00	; 0
    81d2:	29 f0       	breq	.+10     	; 0x81de <malloc+0x44>
    81d4:	12 96       	adiw	r26, 0x02	; 2
    81d6:	8d 93       	st	X+, r24
    81d8:	9c 93       	st	X, r25
    81da:	13 97       	sbiw	r26, 0x03	; 3
    81dc:	2c c0       	rjmp	.+88     	; 0x8236 <malloc+0x9c>
    81de:	80 93 bb 29 	sts	0x29BB, r24
    81e2:	90 93 bc 29 	sts	0x29BC, r25
    81e6:	27 c0       	rjmp	.+78     	; 0x8236 <malloc+0x9c>
    81e8:	21 15       	cp	r18, r1
    81ea:	31 05       	cpc	r19, r1
    81ec:	31 f0       	breq	.+12     	; 0x81fa <malloc+0x60>
    81ee:	42 17       	cp	r20, r18
    81f0:	53 07       	cpc	r21, r19
    81f2:	18 f0       	brcs	.+6      	; 0x81fa <malloc+0x60>
    81f4:	a9 01       	movw	r20, r18
    81f6:	db 01       	movw	r26, r22
    81f8:	01 c0       	rjmp	.+2      	; 0x81fc <malloc+0x62>
    81fa:	ef 01       	movw	r28, r30
    81fc:	9a 01       	movw	r18, r20
    81fe:	bd 01       	movw	r22, r26
    8200:	df 01       	movw	r26, r30
    8202:	02 80       	ldd	r0, Z+2	; 0x02
    8204:	f3 81       	ldd	r31, Z+3	; 0x03
    8206:	e0 2d       	mov	r30, r0
    8208:	d7 cf       	rjmp	.-82     	; 0x81b8 <malloc+0x1e>
    820a:	21 15       	cp	r18, r1
    820c:	31 05       	cpc	r19, r1
    820e:	f9 f0       	breq	.+62     	; 0x824e <malloc+0xb4>
    8210:	28 1b       	sub	r18, r24
    8212:	39 0b       	sbc	r19, r25
    8214:	24 30       	cpi	r18, 0x04	; 4
    8216:	31 05       	cpc	r19, r1
    8218:	80 f4       	brcc	.+32     	; 0x823a <malloc+0xa0>
    821a:	8a 81       	ldd	r24, Y+2	; 0x02
    821c:	9b 81       	ldd	r25, Y+3	; 0x03
    821e:	61 15       	cp	r22, r1
    8220:	71 05       	cpc	r23, r1
    8222:	21 f0       	breq	.+8      	; 0x822c <malloc+0x92>
    8224:	fb 01       	movw	r30, r22
    8226:	82 83       	std	Z+2, r24	; 0x02
    8228:	93 83       	std	Z+3, r25	; 0x03
    822a:	04 c0       	rjmp	.+8      	; 0x8234 <malloc+0x9a>
    822c:	80 93 bb 29 	sts	0x29BB, r24
    8230:	90 93 bc 29 	sts	0x29BC, r25
    8234:	fe 01       	movw	r30, r28
    8236:	32 96       	adiw	r30, 0x02	; 2
    8238:	44 c0       	rjmp	.+136    	; 0x82c2 <malloc+0x128>
    823a:	fe 01       	movw	r30, r28
    823c:	e2 0f       	add	r30, r18
    823e:	f3 1f       	adc	r31, r19
    8240:	81 93       	st	Z+, r24
    8242:	91 93       	st	Z+, r25
    8244:	22 50       	subi	r18, 0x02	; 2
    8246:	31 09       	sbc	r19, r1
    8248:	28 83       	st	Y, r18
    824a:	39 83       	std	Y+1, r19	; 0x01
    824c:	3a c0       	rjmp	.+116    	; 0x82c2 <malloc+0x128>
    824e:	20 91 b9 29 	lds	r18, 0x29B9
    8252:	30 91 ba 29 	lds	r19, 0x29BA
    8256:	23 2b       	or	r18, r19
    8258:	41 f4       	brne	.+16     	; 0x826a <malloc+0xd0>
    825a:	20 91 02 20 	lds	r18, 0x2002
    825e:	30 91 03 20 	lds	r19, 0x2003
    8262:	20 93 b9 29 	sts	0x29B9, r18
    8266:	30 93 ba 29 	sts	0x29BA, r19
    826a:	20 91 00 20 	lds	r18, 0x2000
    826e:	30 91 01 20 	lds	r19, 0x2001
    8272:	21 15       	cp	r18, r1
    8274:	31 05       	cpc	r19, r1
    8276:	41 f4       	brne	.+16     	; 0x8288 <malloc+0xee>
    8278:	2d b7       	in	r18, 0x3d	; 61
    827a:	3e b7       	in	r19, 0x3e	; 62
    827c:	40 91 04 20 	lds	r20, 0x2004
    8280:	50 91 05 20 	lds	r21, 0x2005
    8284:	24 1b       	sub	r18, r20
    8286:	35 0b       	sbc	r19, r21
    8288:	e0 91 b9 29 	lds	r30, 0x29B9
    828c:	f0 91 ba 29 	lds	r31, 0x29BA
    8290:	e2 17       	cp	r30, r18
    8292:	f3 07       	cpc	r31, r19
    8294:	a0 f4       	brcc	.+40     	; 0x82be <malloc+0x124>
    8296:	2e 1b       	sub	r18, r30
    8298:	3f 0b       	sbc	r19, r31
    829a:	28 17       	cp	r18, r24
    829c:	39 07       	cpc	r19, r25
    829e:	78 f0       	brcs	.+30     	; 0x82be <malloc+0x124>
    82a0:	ac 01       	movw	r20, r24
    82a2:	4e 5f       	subi	r20, 0xFE	; 254
    82a4:	5f 4f       	sbci	r21, 0xFF	; 255
    82a6:	24 17       	cp	r18, r20
    82a8:	35 07       	cpc	r19, r21
    82aa:	48 f0       	brcs	.+18     	; 0x82be <malloc+0x124>
    82ac:	4e 0f       	add	r20, r30
    82ae:	5f 1f       	adc	r21, r31
    82b0:	40 93 b9 29 	sts	0x29B9, r20
    82b4:	50 93 ba 29 	sts	0x29BA, r21
    82b8:	81 93       	st	Z+, r24
    82ba:	91 93       	st	Z+, r25
    82bc:	02 c0       	rjmp	.+4      	; 0x82c2 <malloc+0x128>
    82be:	e0 e0       	ldi	r30, 0x00	; 0
    82c0:	f0 e0       	ldi	r31, 0x00	; 0
    82c2:	cf 01       	movw	r24, r30
    82c4:	df 91       	pop	r29
    82c6:	cf 91       	pop	r28
    82c8:	08 95       	ret

000082ca <free>:
    82ca:	cf 93       	push	r28
    82cc:	df 93       	push	r29
    82ce:	00 97       	sbiw	r24, 0x00	; 0
    82d0:	09 f4       	brne	.+2      	; 0x82d4 <free+0xa>
    82d2:	87 c0       	rjmp	.+270    	; 0x83e2 <free+0x118>
    82d4:	fc 01       	movw	r30, r24
    82d6:	32 97       	sbiw	r30, 0x02	; 2
    82d8:	12 82       	std	Z+2, r1	; 0x02
    82da:	13 82       	std	Z+3, r1	; 0x03
    82dc:	c0 91 bb 29 	lds	r28, 0x29BB
    82e0:	d0 91 bc 29 	lds	r29, 0x29BC
    82e4:	20 97       	sbiw	r28, 0x00	; 0
    82e6:	81 f4       	brne	.+32     	; 0x8308 <free+0x3e>
    82e8:	20 81       	ld	r18, Z
    82ea:	31 81       	ldd	r19, Z+1	; 0x01
    82ec:	28 0f       	add	r18, r24
    82ee:	39 1f       	adc	r19, r25
    82f0:	80 91 b9 29 	lds	r24, 0x29B9
    82f4:	90 91 ba 29 	lds	r25, 0x29BA
    82f8:	82 17       	cp	r24, r18
    82fa:	93 07       	cpc	r25, r19
    82fc:	79 f5       	brne	.+94     	; 0x835c <free+0x92>
    82fe:	e0 93 b9 29 	sts	0x29B9, r30
    8302:	f0 93 ba 29 	sts	0x29BA, r31
    8306:	6d c0       	rjmp	.+218    	; 0x83e2 <free+0x118>
    8308:	de 01       	movw	r26, r28
    830a:	20 e0       	ldi	r18, 0x00	; 0
    830c:	30 e0       	ldi	r19, 0x00	; 0
    830e:	ae 17       	cp	r26, r30
    8310:	bf 07       	cpc	r27, r31
    8312:	50 f4       	brcc	.+20     	; 0x8328 <free+0x5e>
    8314:	12 96       	adiw	r26, 0x02	; 2
    8316:	4d 91       	ld	r20, X+
    8318:	5c 91       	ld	r21, X
    831a:	13 97       	sbiw	r26, 0x03	; 3
    831c:	9d 01       	movw	r18, r26
    831e:	41 15       	cp	r20, r1
    8320:	51 05       	cpc	r21, r1
    8322:	09 f1       	breq	.+66     	; 0x8366 <free+0x9c>
    8324:	da 01       	movw	r26, r20
    8326:	f3 cf       	rjmp	.-26     	; 0x830e <free+0x44>
    8328:	a2 83       	std	Z+2, r26	; 0x02
    832a:	b3 83       	std	Z+3, r27	; 0x03
    832c:	40 81       	ld	r20, Z
    832e:	51 81       	ldd	r21, Z+1	; 0x01
    8330:	84 0f       	add	r24, r20
    8332:	95 1f       	adc	r25, r21
    8334:	8a 17       	cp	r24, r26
    8336:	9b 07       	cpc	r25, r27
    8338:	71 f4       	brne	.+28     	; 0x8356 <free+0x8c>
    833a:	8d 91       	ld	r24, X+
    833c:	9c 91       	ld	r25, X
    833e:	11 97       	sbiw	r26, 0x01	; 1
    8340:	84 0f       	add	r24, r20
    8342:	95 1f       	adc	r25, r21
    8344:	02 96       	adiw	r24, 0x02	; 2
    8346:	80 83       	st	Z, r24
    8348:	91 83       	std	Z+1, r25	; 0x01
    834a:	12 96       	adiw	r26, 0x02	; 2
    834c:	8d 91       	ld	r24, X+
    834e:	9c 91       	ld	r25, X
    8350:	13 97       	sbiw	r26, 0x03	; 3
    8352:	82 83       	std	Z+2, r24	; 0x02
    8354:	93 83       	std	Z+3, r25	; 0x03
    8356:	21 15       	cp	r18, r1
    8358:	31 05       	cpc	r19, r1
    835a:	29 f4       	brne	.+10     	; 0x8366 <free+0x9c>
    835c:	e0 93 bb 29 	sts	0x29BB, r30
    8360:	f0 93 bc 29 	sts	0x29BC, r31
    8364:	3e c0       	rjmp	.+124    	; 0x83e2 <free+0x118>
    8366:	d9 01       	movw	r26, r18
    8368:	12 96       	adiw	r26, 0x02	; 2
    836a:	ed 93       	st	X+, r30
    836c:	fc 93       	st	X, r31
    836e:	13 97       	sbiw	r26, 0x03	; 3
    8370:	4d 91       	ld	r20, X+
    8372:	5d 91       	ld	r21, X+
    8374:	a4 0f       	add	r26, r20
    8376:	b5 1f       	adc	r27, r21
    8378:	ea 17       	cp	r30, r26
    837a:	fb 07       	cpc	r31, r27
    837c:	79 f4       	brne	.+30     	; 0x839c <free+0xd2>
    837e:	80 81       	ld	r24, Z
    8380:	91 81       	ldd	r25, Z+1	; 0x01
    8382:	84 0f       	add	r24, r20
    8384:	95 1f       	adc	r25, r21
    8386:	02 96       	adiw	r24, 0x02	; 2
    8388:	d9 01       	movw	r26, r18
    838a:	8d 93       	st	X+, r24
    838c:	9c 93       	st	X, r25
    838e:	11 97       	sbiw	r26, 0x01	; 1
    8390:	82 81       	ldd	r24, Z+2	; 0x02
    8392:	93 81       	ldd	r25, Z+3	; 0x03
    8394:	12 96       	adiw	r26, 0x02	; 2
    8396:	8d 93       	st	X+, r24
    8398:	9c 93       	st	X, r25
    839a:	13 97       	sbiw	r26, 0x03	; 3
    839c:	e0 e0       	ldi	r30, 0x00	; 0
    839e:	f0 e0       	ldi	r31, 0x00	; 0
    83a0:	8a 81       	ldd	r24, Y+2	; 0x02
    83a2:	9b 81       	ldd	r25, Y+3	; 0x03
    83a4:	00 97       	sbiw	r24, 0x00	; 0
    83a6:	19 f0       	breq	.+6      	; 0x83ae <free+0xe4>
    83a8:	fe 01       	movw	r30, r28
    83aa:	ec 01       	movw	r28, r24
    83ac:	f9 cf       	rjmp	.-14     	; 0x83a0 <free+0xd6>
    83ae:	ce 01       	movw	r24, r28
    83b0:	02 96       	adiw	r24, 0x02	; 2
    83b2:	28 81       	ld	r18, Y
    83b4:	39 81       	ldd	r19, Y+1	; 0x01
    83b6:	82 0f       	add	r24, r18
    83b8:	93 1f       	adc	r25, r19
    83ba:	20 91 b9 29 	lds	r18, 0x29B9
    83be:	30 91 ba 29 	lds	r19, 0x29BA
    83c2:	28 17       	cp	r18, r24
    83c4:	39 07       	cpc	r19, r25
    83c6:	69 f4       	brne	.+26     	; 0x83e2 <free+0x118>
    83c8:	30 97       	sbiw	r30, 0x00	; 0
    83ca:	29 f4       	brne	.+10     	; 0x83d6 <free+0x10c>
    83cc:	10 92 bb 29 	sts	0x29BB, r1
    83d0:	10 92 bc 29 	sts	0x29BC, r1
    83d4:	02 c0       	rjmp	.+4      	; 0x83da <free+0x110>
    83d6:	12 82       	std	Z+2, r1	; 0x02
    83d8:	13 82       	std	Z+3, r1	; 0x03
    83da:	c0 93 b9 29 	sts	0x29B9, r28
    83de:	d0 93 ba 29 	sts	0x29BA, r29
    83e2:	df 91       	pop	r29
    83e4:	cf 91       	pop	r28
    83e6:	08 95       	ret

000083e8 <__ftoa_engine>:
    83e8:	28 30       	cpi	r18, 0x08	; 8
    83ea:	08 f0       	brcs	.+2      	; 0x83ee <__ftoa_engine+0x6>
    83ec:	27 e0       	ldi	r18, 0x07	; 7
    83ee:	33 27       	eor	r19, r19
    83f0:	da 01       	movw	r26, r20
    83f2:	99 0f       	add	r25, r25
    83f4:	31 1d       	adc	r19, r1
    83f6:	87 fd       	sbrc	r24, 7
    83f8:	91 60       	ori	r25, 0x01	; 1
    83fa:	00 96       	adiw	r24, 0x00	; 0
    83fc:	61 05       	cpc	r22, r1
    83fe:	71 05       	cpc	r23, r1
    8400:	39 f4       	brne	.+14     	; 0x8410 <__ftoa_engine+0x28>
    8402:	32 60       	ori	r19, 0x02	; 2
    8404:	2e 5f       	subi	r18, 0xFE	; 254
    8406:	3d 93       	st	X+, r19
    8408:	30 e3       	ldi	r19, 0x30	; 48
    840a:	2a 95       	dec	r18
    840c:	e1 f7       	brne	.-8      	; 0x8406 <__ftoa_engine+0x1e>
    840e:	08 95       	ret
    8410:	9f 3f       	cpi	r25, 0xFF	; 255
    8412:	30 f0       	brcs	.+12     	; 0x8420 <__ftoa_engine+0x38>
    8414:	80 38       	cpi	r24, 0x80	; 128
    8416:	71 05       	cpc	r23, r1
    8418:	61 05       	cpc	r22, r1
    841a:	09 f0       	breq	.+2      	; 0x841e <__ftoa_engine+0x36>
    841c:	3c 5f       	subi	r19, 0xFC	; 252
    841e:	3c 5f       	subi	r19, 0xFC	; 252
    8420:	3d 93       	st	X+, r19
    8422:	91 30       	cpi	r25, 0x01	; 1
    8424:	08 f0       	brcs	.+2      	; 0x8428 <__ftoa_engine+0x40>
    8426:	80 68       	ori	r24, 0x80	; 128
    8428:	91 1d       	adc	r25, r1
    842a:	df 93       	push	r29
    842c:	cf 93       	push	r28
    842e:	1f 93       	push	r17
    8430:	0f 93       	push	r16
    8432:	ff 92       	push	r15
    8434:	ef 92       	push	r14
    8436:	19 2f       	mov	r17, r25
    8438:	98 7f       	andi	r25, 0xF8	; 248
    843a:	96 95       	lsr	r25
    843c:	e9 2f       	mov	r30, r25
    843e:	96 95       	lsr	r25
    8440:	96 95       	lsr	r25
    8442:	e9 0f       	add	r30, r25
    8444:	ff 27       	eor	r31, r31
    8446:	e2 52       	subi	r30, 0x22	; 34
    8448:	f5 4f       	sbci	r31, 0xF5	; 245
    844a:	99 27       	eor	r25, r25
    844c:	33 27       	eor	r19, r19
    844e:	ee 24       	eor	r14, r14
    8450:	ff 24       	eor	r15, r15
    8452:	a7 01       	movw	r20, r14
    8454:	e7 01       	movw	r28, r14
    8456:	05 90       	lpm	r0, Z+
    8458:	08 94       	sec
    845a:	07 94       	ror	r0
    845c:	28 f4       	brcc	.+10     	; 0x8468 <__ftoa_engine+0x80>
    845e:	36 0f       	add	r19, r22
    8460:	e7 1e       	adc	r14, r23
    8462:	f8 1e       	adc	r15, r24
    8464:	49 1f       	adc	r20, r25
    8466:	51 1d       	adc	r21, r1
    8468:	66 0f       	add	r22, r22
    846a:	77 1f       	adc	r23, r23
    846c:	88 1f       	adc	r24, r24
    846e:	99 1f       	adc	r25, r25
    8470:	06 94       	lsr	r0
    8472:	a1 f7       	brne	.-24     	; 0x845c <__ftoa_engine+0x74>
    8474:	05 90       	lpm	r0, Z+
    8476:	07 94       	ror	r0
    8478:	28 f4       	brcc	.+10     	; 0x8484 <__ftoa_engine+0x9c>
    847a:	e7 0e       	add	r14, r23
    847c:	f8 1e       	adc	r15, r24
    847e:	49 1f       	adc	r20, r25
    8480:	56 1f       	adc	r21, r22
    8482:	c1 1d       	adc	r28, r1
    8484:	77 0f       	add	r23, r23
    8486:	88 1f       	adc	r24, r24
    8488:	99 1f       	adc	r25, r25
    848a:	66 1f       	adc	r22, r22
    848c:	06 94       	lsr	r0
    848e:	a1 f7       	brne	.-24     	; 0x8478 <__ftoa_engine+0x90>
    8490:	05 90       	lpm	r0, Z+
    8492:	07 94       	ror	r0
    8494:	28 f4       	brcc	.+10     	; 0x84a0 <__ftoa_engine+0xb8>
    8496:	f8 0e       	add	r15, r24
    8498:	49 1f       	adc	r20, r25
    849a:	56 1f       	adc	r21, r22
    849c:	c7 1f       	adc	r28, r23
    849e:	d1 1d       	adc	r29, r1
    84a0:	88 0f       	add	r24, r24
    84a2:	99 1f       	adc	r25, r25
    84a4:	66 1f       	adc	r22, r22
    84a6:	77 1f       	adc	r23, r23
    84a8:	06 94       	lsr	r0
    84aa:	a1 f7       	brne	.-24     	; 0x8494 <__ftoa_engine+0xac>
    84ac:	05 90       	lpm	r0, Z+
    84ae:	07 94       	ror	r0
    84b0:	20 f4       	brcc	.+8      	; 0x84ba <__ftoa_engine+0xd2>
    84b2:	49 0f       	add	r20, r25
    84b4:	56 1f       	adc	r21, r22
    84b6:	c7 1f       	adc	r28, r23
    84b8:	d8 1f       	adc	r29, r24
    84ba:	99 0f       	add	r25, r25
    84bc:	66 1f       	adc	r22, r22
    84be:	77 1f       	adc	r23, r23
    84c0:	88 1f       	adc	r24, r24
    84c2:	06 94       	lsr	r0
    84c4:	a9 f7       	brne	.-22     	; 0x84b0 <__ftoa_engine+0xc8>
    84c6:	84 91       	lpm	r24, Z
    84c8:	10 95       	com	r17
    84ca:	17 70       	andi	r17, 0x07	; 7
    84cc:	41 f0       	breq	.+16     	; 0x84de <__ftoa_engine+0xf6>
    84ce:	d6 95       	lsr	r29
    84d0:	c7 95       	ror	r28
    84d2:	57 95       	ror	r21
    84d4:	47 95       	ror	r20
    84d6:	f7 94       	ror	r15
    84d8:	e7 94       	ror	r14
    84da:	1a 95       	dec	r17
    84dc:	c1 f7       	brne	.-16     	; 0x84ce <__ftoa_engine+0xe6>
    84de:	e4 e8       	ldi	r30, 0x84	; 132
    84e0:	fa e0       	ldi	r31, 0x0A	; 10
    84e2:	68 94       	set
    84e4:	15 90       	lpm	r1, Z+
    84e6:	15 91       	lpm	r17, Z+
    84e8:	35 91       	lpm	r19, Z+
    84ea:	65 91       	lpm	r22, Z+
    84ec:	95 91       	lpm	r25, Z+
    84ee:	05 90       	lpm	r0, Z+
    84f0:	7f e2       	ldi	r23, 0x2F	; 47
    84f2:	73 95       	inc	r23
    84f4:	e1 18       	sub	r14, r1
    84f6:	f1 0a       	sbc	r15, r17
    84f8:	43 0b       	sbc	r20, r19
    84fa:	56 0b       	sbc	r21, r22
    84fc:	c9 0b       	sbc	r28, r25
    84fe:	d0 09       	sbc	r29, r0
    8500:	c0 f7       	brcc	.-16     	; 0x84f2 <__ftoa_engine+0x10a>
    8502:	e1 0c       	add	r14, r1
    8504:	f1 1e       	adc	r15, r17
    8506:	43 1f       	adc	r20, r19
    8508:	56 1f       	adc	r21, r22
    850a:	c9 1f       	adc	r28, r25
    850c:	d0 1d       	adc	r29, r0
    850e:	7e f4       	brtc	.+30     	; 0x852e <__ftoa_engine+0x146>
    8510:	70 33       	cpi	r23, 0x30	; 48
    8512:	11 f4       	brne	.+4      	; 0x8518 <__ftoa_engine+0x130>
    8514:	8a 95       	dec	r24
    8516:	e6 cf       	rjmp	.-52     	; 0x84e4 <__ftoa_engine+0xfc>
    8518:	e8 94       	clt
    851a:	01 50       	subi	r16, 0x01	; 1
    851c:	30 f0       	brcs	.+12     	; 0x852a <__ftoa_engine+0x142>
    851e:	08 0f       	add	r16, r24
    8520:	0a f4       	brpl	.+2      	; 0x8524 <__ftoa_engine+0x13c>
    8522:	00 27       	eor	r16, r16
    8524:	02 17       	cp	r16, r18
    8526:	08 f4       	brcc	.+2      	; 0x852a <__ftoa_engine+0x142>
    8528:	20 2f       	mov	r18, r16
    852a:	23 95       	inc	r18
    852c:	02 2f       	mov	r16, r18
    852e:	7a 33       	cpi	r23, 0x3A	; 58
    8530:	28 f0       	brcs	.+10     	; 0x853c <__ftoa_engine+0x154>
    8532:	79 e3       	ldi	r23, 0x39	; 57
    8534:	7d 93       	st	X+, r23
    8536:	2a 95       	dec	r18
    8538:	e9 f7       	brne	.-6      	; 0x8534 <__ftoa_engine+0x14c>
    853a:	10 c0       	rjmp	.+32     	; 0x855c <__ftoa_engine+0x174>
    853c:	7d 93       	st	X+, r23
    853e:	2a 95       	dec	r18
    8540:	89 f6       	brne	.-94     	; 0x84e4 <__ftoa_engine+0xfc>
    8542:	06 94       	lsr	r0
    8544:	97 95       	ror	r25
    8546:	67 95       	ror	r22
    8548:	37 95       	ror	r19
    854a:	17 95       	ror	r17
    854c:	17 94       	ror	r1
    854e:	e1 18       	sub	r14, r1
    8550:	f1 0a       	sbc	r15, r17
    8552:	43 0b       	sbc	r20, r19
    8554:	56 0b       	sbc	r21, r22
    8556:	c9 0b       	sbc	r28, r25
    8558:	d0 09       	sbc	r29, r0
    855a:	98 f0       	brcs	.+38     	; 0x8582 <__ftoa_engine+0x19a>
    855c:	23 95       	inc	r18
    855e:	7e 91       	ld	r23, -X
    8560:	73 95       	inc	r23
    8562:	7a 33       	cpi	r23, 0x3A	; 58
    8564:	08 f0       	brcs	.+2      	; 0x8568 <__ftoa_engine+0x180>
    8566:	70 e3       	ldi	r23, 0x30	; 48
    8568:	7c 93       	st	X, r23
    856a:	20 13       	cpse	r18, r16
    856c:	b8 f7       	brcc	.-18     	; 0x855c <__ftoa_engine+0x174>
    856e:	7e 91       	ld	r23, -X
    8570:	70 61       	ori	r23, 0x10	; 16
    8572:	7d 93       	st	X+, r23
    8574:	30 f0       	brcs	.+12     	; 0x8582 <__ftoa_engine+0x19a>
    8576:	83 95       	inc	r24
    8578:	71 e3       	ldi	r23, 0x31	; 49
    857a:	7d 93       	st	X+, r23
    857c:	70 e3       	ldi	r23, 0x30	; 48
    857e:	2a 95       	dec	r18
    8580:	e1 f7       	brne	.-8      	; 0x857a <__ftoa_engine+0x192>
    8582:	11 24       	eor	r1, r1
    8584:	ef 90       	pop	r14
    8586:	ff 90       	pop	r15
    8588:	0f 91       	pop	r16
    858a:	1f 91       	pop	r17
    858c:	cf 91       	pop	r28
    858e:	df 91       	pop	r29
    8590:	99 27       	eor	r25, r25
    8592:	87 fd       	sbrc	r24, 7
    8594:	90 95       	com	r25
    8596:	08 95       	ret

00008598 <memcpy_P>:
    8598:	fb 01       	movw	r30, r22
    859a:	dc 01       	movw	r26, r24
    859c:	02 c0       	rjmp	.+4      	; 0x85a2 <memcpy_P+0xa>
    859e:	05 90       	lpm	r0, Z+
    85a0:	0d 92       	st	X+, r0
    85a2:	41 50       	subi	r20, 0x01	; 1
    85a4:	50 40       	sbci	r21, 0x00	; 0
    85a6:	d8 f7       	brcc	.-10     	; 0x859e <memcpy_P+0x6>
    85a8:	08 95       	ret

000085aa <strnlen_P>:
    85aa:	fc 01       	movw	r30, r24
    85ac:	05 90       	lpm	r0, Z+
    85ae:	61 50       	subi	r22, 0x01	; 1
    85b0:	70 40       	sbci	r23, 0x00	; 0
    85b2:	01 10       	cpse	r0, r1
    85b4:	d8 f7       	brcc	.-10     	; 0x85ac <strnlen_P+0x2>
    85b6:	80 95       	com	r24
    85b8:	90 95       	com	r25
    85ba:	8e 0f       	add	r24, r30
    85bc:	9f 1f       	adc	r25, r31
    85be:	08 95       	ret

000085c0 <memcpy>:
    85c0:	fb 01       	movw	r30, r22
    85c2:	dc 01       	movw	r26, r24
    85c4:	02 c0       	rjmp	.+4      	; 0x85ca <memcpy+0xa>
    85c6:	01 90       	ld	r0, Z+
    85c8:	0d 92       	st	X+, r0
    85ca:	41 50       	subi	r20, 0x01	; 1
    85cc:	50 40       	sbci	r21, 0x00	; 0
    85ce:	d8 f7       	brcc	.-10     	; 0x85c6 <memcpy+0x6>
    85d0:	08 95       	ret

000085d2 <strchr>:
    85d2:	fc 01       	movw	r30, r24
    85d4:	81 91       	ld	r24, Z+
    85d6:	86 17       	cp	r24, r22
    85d8:	21 f0       	breq	.+8      	; 0x85e2 <strchr+0x10>
    85da:	88 23       	and	r24, r24
    85dc:	d9 f7       	brne	.-10     	; 0x85d4 <strchr+0x2>
    85de:	99 27       	eor	r25, r25
    85e0:	08 95       	ret
    85e2:	31 97       	sbiw	r30, 0x01	; 1
    85e4:	cf 01       	movw	r24, r30
    85e6:	08 95       	ret

000085e8 <strncmp>:
    85e8:	fb 01       	movw	r30, r22
    85ea:	dc 01       	movw	r26, r24
    85ec:	41 50       	subi	r20, 0x01	; 1
    85ee:	50 40       	sbci	r21, 0x00	; 0
    85f0:	30 f0       	brcs	.+12     	; 0x85fe <strncmp+0x16>
    85f2:	8d 91       	ld	r24, X+
    85f4:	01 90       	ld	r0, Z+
    85f6:	80 19       	sub	r24, r0
    85f8:	19 f4       	brne	.+6      	; 0x8600 <strncmp+0x18>
    85fa:	00 20       	and	r0, r0
    85fc:	b9 f7       	brne	.-18     	; 0x85ec <strncmp+0x4>
    85fe:	88 1b       	sub	r24, r24
    8600:	99 0b       	sbc	r25, r25
    8602:	08 95       	ret

00008604 <strnlen>:
    8604:	fc 01       	movw	r30, r24
    8606:	61 50       	subi	r22, 0x01	; 1
    8608:	70 40       	sbci	r23, 0x00	; 0
    860a:	01 90       	ld	r0, Z+
    860c:	01 10       	cpse	r0, r1
    860e:	d8 f7       	brcc	.-10     	; 0x8606 <strnlen+0x2>
    8610:	80 95       	com	r24
    8612:	90 95       	com	r25
    8614:	8e 0f       	add	r24, r30
    8616:	9f 1f       	adc	r25, r31
    8618:	08 95       	ret

0000861a <fputc>:
    861a:	0f 93       	push	r16
    861c:	1f 93       	push	r17
    861e:	cf 93       	push	r28
    8620:	df 93       	push	r29
    8622:	18 2f       	mov	r17, r24
    8624:	09 2f       	mov	r16, r25
    8626:	eb 01       	movw	r28, r22
    8628:	8b 81       	ldd	r24, Y+3	; 0x03
    862a:	81 fd       	sbrc	r24, 1
    862c:	03 c0       	rjmp	.+6      	; 0x8634 <fputc+0x1a>
    862e:	8f ef       	ldi	r24, 0xFF	; 255
    8630:	9f ef       	ldi	r25, 0xFF	; 255
    8632:	20 c0       	rjmp	.+64     	; 0x8674 <fputc+0x5a>
    8634:	82 ff       	sbrs	r24, 2
    8636:	10 c0       	rjmp	.+32     	; 0x8658 <fputc+0x3e>
    8638:	4e 81       	ldd	r20, Y+6	; 0x06
    863a:	5f 81       	ldd	r21, Y+7	; 0x07
    863c:	2c 81       	ldd	r18, Y+4	; 0x04
    863e:	3d 81       	ldd	r19, Y+5	; 0x05
    8640:	42 17       	cp	r20, r18
    8642:	53 07       	cpc	r21, r19
    8644:	7c f4       	brge	.+30     	; 0x8664 <fputc+0x4a>
    8646:	e8 81       	ld	r30, Y
    8648:	f9 81       	ldd	r31, Y+1	; 0x01
    864a:	9f 01       	movw	r18, r30
    864c:	2f 5f       	subi	r18, 0xFF	; 255
    864e:	3f 4f       	sbci	r19, 0xFF	; 255
    8650:	28 83       	st	Y, r18
    8652:	39 83       	std	Y+1, r19	; 0x01
    8654:	10 83       	st	Z, r17
    8656:	06 c0       	rjmp	.+12     	; 0x8664 <fputc+0x4a>
    8658:	e8 85       	ldd	r30, Y+8	; 0x08
    865a:	f9 85       	ldd	r31, Y+9	; 0x09
    865c:	81 2f       	mov	r24, r17
    865e:	09 95       	icall
    8660:	89 2b       	or	r24, r25
    8662:	29 f7       	brne	.-54     	; 0x862e <fputc+0x14>
    8664:	2e 81       	ldd	r18, Y+6	; 0x06
    8666:	3f 81       	ldd	r19, Y+7	; 0x07
    8668:	2f 5f       	subi	r18, 0xFF	; 255
    866a:	3f 4f       	sbci	r19, 0xFF	; 255
    866c:	2e 83       	std	Y+6, r18	; 0x06
    866e:	3f 83       	std	Y+7, r19	; 0x07
    8670:	81 2f       	mov	r24, r17
    8672:	90 2f       	mov	r25, r16
    8674:	df 91       	pop	r29
    8676:	cf 91       	pop	r28
    8678:	1f 91       	pop	r17
    867a:	0f 91       	pop	r16
    867c:	08 95       	ret

0000867e <printf>:
    867e:	cf 93       	push	r28
    8680:	df 93       	push	r29
    8682:	cd b7       	in	r28, 0x3d	; 61
    8684:	de b7       	in	r29, 0x3e	; 62
    8686:	fe 01       	movw	r30, r28
    8688:	35 96       	adiw	r30, 0x05	; 5
    868a:	61 91       	ld	r22, Z+
    868c:	71 91       	ld	r23, Z+
    868e:	af 01       	movw	r20, r30
    8690:	80 91 bf 29 	lds	r24, 0x29BF
    8694:	90 91 c0 29 	lds	r25, 0x29C0
    8698:	0e 94 df 3b 	call	0x77be	; 0x77be <vfprintf>
    869c:	df 91       	pop	r29
    869e:	cf 91       	pop	r28
    86a0:	08 95       	ret

000086a2 <puts>:
    86a2:	0f 93       	push	r16
    86a4:	1f 93       	push	r17
    86a6:	cf 93       	push	r28
    86a8:	df 93       	push	r29
    86aa:	e0 91 bf 29 	lds	r30, 0x29BF
    86ae:	f0 91 c0 29 	lds	r31, 0x29C0
    86b2:	23 81       	ldd	r18, Z+3	; 0x03
    86b4:	21 ff       	sbrs	r18, 1
    86b6:	1b c0       	rjmp	.+54     	; 0x86ee <puts+0x4c>
    86b8:	ec 01       	movw	r28, r24
    86ba:	00 e0       	ldi	r16, 0x00	; 0
    86bc:	10 e0       	ldi	r17, 0x00	; 0
    86be:	89 91       	ld	r24, Y+
    86c0:	60 91 bf 29 	lds	r22, 0x29BF
    86c4:	70 91 c0 29 	lds	r23, 0x29C0
    86c8:	db 01       	movw	r26, r22
    86ca:	18 96       	adiw	r26, 0x08	; 8
    86cc:	ed 91       	ld	r30, X+
    86ce:	fc 91       	ld	r31, X
    86d0:	19 97       	sbiw	r26, 0x09	; 9
    86d2:	88 23       	and	r24, r24
    86d4:	31 f0       	breq	.+12     	; 0x86e2 <puts+0x40>
    86d6:	09 95       	icall
    86d8:	89 2b       	or	r24, r25
    86da:	89 f3       	breq	.-30     	; 0x86be <puts+0x1c>
    86dc:	0f ef       	ldi	r16, 0xFF	; 255
    86de:	1f ef       	ldi	r17, 0xFF	; 255
    86e0:	ee cf       	rjmp	.-36     	; 0x86be <puts+0x1c>
    86e2:	8a e0       	ldi	r24, 0x0A	; 10
    86e4:	09 95       	icall
    86e6:	89 2b       	or	r24, r25
    86e8:	11 f4       	brne	.+4      	; 0x86ee <puts+0x4c>
    86ea:	c8 01       	movw	r24, r16
    86ec:	02 c0       	rjmp	.+4      	; 0x86f2 <puts+0x50>
    86ee:	8f ef       	ldi	r24, 0xFF	; 255
    86f0:	9f ef       	ldi	r25, 0xFF	; 255
    86f2:	df 91       	pop	r29
    86f4:	cf 91       	pop	r28
    86f6:	1f 91       	pop	r17
    86f8:	0f 91       	pop	r16
    86fa:	08 95       	ret

000086fc <sprintf>:
    86fc:	0f 93       	push	r16
    86fe:	1f 93       	push	r17
    8700:	cf 93       	push	r28
    8702:	df 93       	push	r29
    8704:	cd b7       	in	r28, 0x3d	; 61
    8706:	de b7       	in	r29, 0x3e	; 62
    8708:	2e 97       	sbiw	r28, 0x0e	; 14
    870a:	cd bf       	out	0x3d, r28	; 61
    870c:	de bf       	out	0x3e, r29	; 62
    870e:	0d 89       	ldd	r16, Y+21	; 0x15
    8710:	1e 89       	ldd	r17, Y+22	; 0x16
    8712:	86 e0       	ldi	r24, 0x06	; 6
    8714:	8c 83       	std	Y+4, r24	; 0x04
    8716:	09 83       	std	Y+1, r16	; 0x01
    8718:	1a 83       	std	Y+2, r17	; 0x02
    871a:	8f ef       	ldi	r24, 0xFF	; 255
    871c:	9f e7       	ldi	r25, 0x7F	; 127
    871e:	8d 83       	std	Y+5, r24	; 0x05
    8720:	9e 83       	std	Y+6, r25	; 0x06
    8722:	ae 01       	movw	r20, r28
    8724:	47 5e       	subi	r20, 0xE7	; 231
    8726:	5f 4f       	sbci	r21, 0xFF	; 255
    8728:	6f 89       	ldd	r22, Y+23	; 0x17
    872a:	78 8d       	ldd	r23, Y+24	; 0x18
    872c:	ce 01       	movw	r24, r28
    872e:	01 96       	adiw	r24, 0x01	; 1
    8730:	0e 94 df 3b 	call	0x77be	; 0x77be <vfprintf>
    8734:	ef 81       	ldd	r30, Y+7	; 0x07
    8736:	f8 85       	ldd	r31, Y+8	; 0x08
    8738:	e0 0f       	add	r30, r16
    873a:	f1 1f       	adc	r31, r17
    873c:	10 82       	st	Z, r1
    873e:	2e 96       	adiw	r28, 0x0e	; 14
    8740:	cd bf       	out	0x3d, r28	; 61
    8742:	de bf       	out	0x3e, r29	; 62
    8744:	df 91       	pop	r29
    8746:	cf 91       	pop	r28
    8748:	1f 91       	pop	r17
    874a:	0f 91       	pop	r16
    874c:	08 95       	ret

0000874e <__ultoa_invert>:
    874e:	fa 01       	movw	r30, r20
    8750:	aa 27       	eor	r26, r26
    8752:	28 30       	cpi	r18, 0x08	; 8
    8754:	51 f1       	breq	.+84     	; 0x87aa <__ultoa_invert+0x5c>
    8756:	20 31       	cpi	r18, 0x10	; 16
    8758:	81 f1       	breq	.+96     	; 0x87ba <__ultoa_invert+0x6c>
    875a:	e8 94       	clt
    875c:	6f 93       	push	r22
    875e:	6e 7f       	andi	r22, 0xFE	; 254
    8760:	6e 5f       	subi	r22, 0xFE	; 254
    8762:	7f 4f       	sbci	r23, 0xFF	; 255
    8764:	8f 4f       	sbci	r24, 0xFF	; 255
    8766:	9f 4f       	sbci	r25, 0xFF	; 255
    8768:	af 4f       	sbci	r26, 0xFF	; 255
    876a:	b1 e0       	ldi	r27, 0x01	; 1
    876c:	3e d0       	rcall	.+124    	; 0x87ea <__ultoa_invert+0x9c>
    876e:	b4 e0       	ldi	r27, 0x04	; 4
    8770:	3c d0       	rcall	.+120    	; 0x87ea <__ultoa_invert+0x9c>
    8772:	67 0f       	add	r22, r23
    8774:	78 1f       	adc	r23, r24
    8776:	89 1f       	adc	r24, r25
    8778:	9a 1f       	adc	r25, r26
    877a:	a1 1d       	adc	r26, r1
    877c:	68 0f       	add	r22, r24
    877e:	79 1f       	adc	r23, r25
    8780:	8a 1f       	adc	r24, r26
    8782:	91 1d       	adc	r25, r1
    8784:	a1 1d       	adc	r26, r1
    8786:	6a 0f       	add	r22, r26
    8788:	71 1d       	adc	r23, r1
    878a:	81 1d       	adc	r24, r1
    878c:	91 1d       	adc	r25, r1
    878e:	a1 1d       	adc	r26, r1
    8790:	20 d0       	rcall	.+64     	; 0x87d2 <__ultoa_invert+0x84>
    8792:	09 f4       	brne	.+2      	; 0x8796 <__ultoa_invert+0x48>
    8794:	68 94       	set
    8796:	3f 91       	pop	r19
    8798:	2a e0       	ldi	r18, 0x0A	; 10
    879a:	26 9f       	mul	r18, r22
    879c:	11 24       	eor	r1, r1
    879e:	30 19       	sub	r19, r0
    87a0:	30 5d       	subi	r19, 0xD0	; 208
    87a2:	31 93       	st	Z+, r19
    87a4:	de f6       	brtc	.-74     	; 0x875c <__ultoa_invert+0xe>
    87a6:	cf 01       	movw	r24, r30
    87a8:	08 95       	ret
    87aa:	46 2f       	mov	r20, r22
    87ac:	47 70       	andi	r20, 0x07	; 7
    87ae:	40 5d       	subi	r20, 0xD0	; 208
    87b0:	41 93       	st	Z+, r20
    87b2:	b3 e0       	ldi	r27, 0x03	; 3
    87b4:	0f d0       	rcall	.+30     	; 0x87d4 <__ultoa_invert+0x86>
    87b6:	c9 f7       	brne	.-14     	; 0x87aa <__ultoa_invert+0x5c>
    87b8:	f6 cf       	rjmp	.-20     	; 0x87a6 <__ultoa_invert+0x58>
    87ba:	46 2f       	mov	r20, r22
    87bc:	4f 70       	andi	r20, 0x0F	; 15
    87be:	40 5d       	subi	r20, 0xD0	; 208
    87c0:	4a 33       	cpi	r20, 0x3A	; 58
    87c2:	18 f0       	brcs	.+6      	; 0x87ca <__ultoa_invert+0x7c>
    87c4:	49 5d       	subi	r20, 0xD9	; 217
    87c6:	31 fd       	sbrc	r19, 1
    87c8:	40 52       	subi	r20, 0x20	; 32
    87ca:	41 93       	st	Z+, r20
    87cc:	02 d0       	rcall	.+4      	; 0x87d2 <__ultoa_invert+0x84>
    87ce:	a9 f7       	brne	.-22     	; 0x87ba <__ultoa_invert+0x6c>
    87d0:	ea cf       	rjmp	.-44     	; 0x87a6 <__ultoa_invert+0x58>
    87d2:	b4 e0       	ldi	r27, 0x04	; 4
    87d4:	a6 95       	lsr	r26
    87d6:	97 95       	ror	r25
    87d8:	87 95       	ror	r24
    87da:	77 95       	ror	r23
    87dc:	67 95       	ror	r22
    87de:	ba 95       	dec	r27
    87e0:	c9 f7       	brne	.-14     	; 0x87d4 <__ultoa_invert+0x86>
    87e2:	00 97       	sbiw	r24, 0x00	; 0
    87e4:	61 05       	cpc	r22, r1
    87e6:	71 05       	cpc	r23, r1
    87e8:	08 95       	ret
    87ea:	9b 01       	movw	r18, r22
    87ec:	ac 01       	movw	r20, r24
    87ee:	0a 2e       	mov	r0, r26
    87f0:	06 94       	lsr	r0
    87f2:	57 95       	ror	r21
    87f4:	47 95       	ror	r20
    87f6:	37 95       	ror	r19
    87f8:	27 95       	ror	r18
    87fa:	ba 95       	dec	r27
    87fc:	c9 f7       	brne	.-14     	; 0x87f0 <__ultoa_invert+0xa2>
    87fe:	62 0f       	add	r22, r18
    8800:	73 1f       	adc	r23, r19
    8802:	84 1f       	adc	r24, r20
    8804:	95 1f       	adc	r25, r21
    8806:	a0 1d       	adc	r26, r0
    8808:	08 95       	ret

0000880a <_exit>:
    880a:	f8 94       	cli

0000880c <__stop_program>:
    880c:	ff cf       	rjmp	.-2      	; 0x880c <__stop_program>
