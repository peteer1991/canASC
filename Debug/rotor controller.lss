
rotor controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007292  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000270  00802000  00007292  00007326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004ed  00802270  00802270  00007596  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007596  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00004440  00000000  00000000  000075f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0005dad4  00000000  00000000  0000ba32  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00016090  00000000  00000000  00069506  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0001c742  00000000  00000000  0007f596  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00006d48  00000000  00000000  0009bcd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000ecc8  00000000  00000000  000a2a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002e71b  00000000  00000000  000b16e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000020b0  00000000  00000000  000dfe03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	uint8_t data[8];
}can_message_t;

// skannar alla 255 adresser på canbusen 
void Scan_canbuss(can_message_t message_recive)
{
       0:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__ctors_end>
       4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
       8:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
       c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      10:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      14:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
	can_message_t message_handeling;
	// send to all canbus units
	for(int i=0;i<Max_units;i++)
      18:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      1c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      20:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      24:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      28:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
	{
		message_handeling.msg_id=i;
		// sending comand for scan 
		message_handeling.data[0] = 100;
      2c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      30:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
		message_handeling.data[1] = Master_unit_id;
      34:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      38:	0c 94 4f 2e 	jmp	0x5c9e	; 0x5c9e <__vector_14>
      3c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
	// send to all canbus units
	for(int i=0;i<Max_units;i++)
	{
		message_handeling.msg_id=i;
		// sending comand for scan 
		message_handeling.data[0] = 100;
      40:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
		message_handeling.data[1] = Master_unit_id;
      44:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
		CAN_message_send(&message_handeling);
      48:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      4c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
// skannar alla 255 adresser på canbusen 
void Scan_canbuss(can_message_t message_recive)
{
	can_message_t message_handeling;
	// send to all canbus units
	for(int i=0;i<Max_units;i++)
      50:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      54:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      58:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      5c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      60:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
		message_handeling.data[0] = 100;
		message_handeling.data[1] = Master_unit_id;
		CAN_message_send(&message_handeling);

	}
}
      64:	0c 94 f0 2d 	jmp	0x5be0	; 0x5be0 <__vector_25>
      68:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      6c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      70:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      74:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
		{
			meny_selected=meny_selected-5;
		}
		if (buttion_two() == 1)
		{
			meny_selected=meny_selected+5;
      78:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      7c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
		}
		
		
		// 360 deg fix
		if(meny_selected > 360)
      80:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      84:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      88:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      8c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
			 meny_selected =0;
      90:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      94:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      98:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
		if(meny_selected <0)
      9c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
			 meny_selected =360;
      a0:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      a4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
		
		u8g_FirstPage(&u8g);
      a8:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      ac:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
		do
		{
		 
		  u8g_SetFont(&u8g, u8g_font_6x10);
      b0:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      b4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      b8:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
		  draw_angel_circle(rad_test);
      bc:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      c0:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      c4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
				  
 
		} while ( u8g_NextPage(&u8g) );
      c8:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      cc:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      d0:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
	while(buttion_one() == 1)
	{
		_delay_ms(2);
	}

	while(Select_buttion() == 0)
      d4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      d8:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
 
		} while ( u8g_NextPage(&u8g) );
		
	}
	
	meny_selected =meny_saved; 
      dc:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      e0:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
	
}
      e4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      e8:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      ec:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      {
        if ( ((i^j) & 8)  == 0 )
        {
          u8g_DrawPixel(lrc_u8g, j+0+x_offset, chess_low_edge - i-0);
          u8g_DrawPixel(lrc_u8g, j+0+x_offset, chess_low_edge - i-2);
          u8g_DrawPixel(lrc_u8g, j+0+x_offset, chess_low_edge - i-4);
      f0:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+0+x_offset, chess_low_edge - i-6);
      f4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      f8:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      fc:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     100:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__vector_64>
     104:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+2+x_offset, chess_low_edge - i-0);
     108:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <__vector_66>
     10c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     110:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     114:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     118:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     11c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+2+x_offset, chess_low_edge - i-6);
     120:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     124:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     128:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     12c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     130:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     134:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+4+x_offset, chess_low_edge - i-0);
     138:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     13c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     140:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     144:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     148:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     14c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+4+x_offset, chess_low_edge - i-6);
     150:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     154:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     158:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     15c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     160:	0c 94 85 2d 	jmp	0x5b0a	; 0x5b0a <__vector_88>
          u8g_DrawPixel(lrc_u8g, j+6+x_offset, chess_low_edge - i-0);
     164:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     168:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     16c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     170:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     174:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     178:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+6+x_offset, chess_low_edge - i-2);
     17c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     180:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__vector_96>
     184:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__vector_97>
     188:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     18c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     190:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+6+x_offset, chess_low_edge - i-4);
     194:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     198:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     19c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     1a0:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     1a4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
          u8g_DrawPixel(lrc_u8g, j+6+x_offset, chess_low_edge - i-6);
     1a8:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     1ac:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     1b0:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     1b4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     1b8:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     1bc:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
  {
    uint8_t x_offset = 1;
    u8g_SetDefaultForegroundColor(lrc_u8g);  
    for( i = 0; i < 8*8; i+=8 )
    {
      for( j = 0; j < 8*8; j+=8 )
     1c0:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     1c4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
  }
  else
  {
    uint8_t x_offset = 1;
    u8g_SetDefaultForegroundColor(lrc_u8g);  
    for( i = 0; i < 8*8; i+=8 )
     1c8:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     1cc:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
void chess_DrawBoard(void)
{
  uint8_t i, j, cp;
  const uint8_t *ptr;  /* pointer into PROGMEM */
  
  if ( U8G_MODE_GET_BITS_PER_PIXEL(u8g_GetMode(lrc_u8g)) > 1 )
     1d0:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
  for ( i = 0; i < 8; i++ )
  {
    for ( j = 0; j < 8; j++ )
    {
      /* get piece from global board */
      if ( lrc_obj.orientation == COLOR_WHITE )
     1d4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     1d8:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
     1dc:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__vector_119>
     1e0:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      {
	cp =  lrc_obj.board[i*8+j];
     1e4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      }
      else
      {
	cp =  lrc_obj.board[(7-i)*8+7-j];
     1e8:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
}

/* inline is better than a macro */
static uint8_t cp_GetPiece(uint8_t cp)
{
  cp &= 0x0f;
     1ec:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      }
      else
      {
	cp =  lrc_obj.board[(7-i)*8+7-j];
      }
      if ( cp_GetPiece(cp) != PIECE_NONE )
     1f0:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__bad_interrupt>
      {
	ptr = chess_black_pieces_bm;
	ptr += (cp_GetPiece(cp)-1)*8;
     1f4:	f2 23       	and	r31, r18
     1f6:	80 24       	eor	r8, r0
     1f8:	35 24       	eor	r3, r5
     1fa:	84 24       	eor	r8, r4
     1fc:	68 24       	eor	r6, r8
     1fe:	ec 23       	and	r30, r28
     200:	ef 23       	and	r30, r31
     202:	b4 2a       	or	r11, r20
     204:	bc 2a       	or	r11, r28
     206:	d6 2a       	or	r13, r22
        u8g_SetDefaultForegroundColor(lrc_u8g);
     208:	c6 2a       	or	r12, r22
     20a:	d6 2a       	or	r13, r22
     20c:	d6 2a       	or	r13, r22
     20e:	d6 2a       	or	r13, r22
     210:	d6 2a       	or	r13, r22
     212:	d6 2a       	or	r13, r22
        u8g_DrawBitmapP(lrc_u8g, j*chess_boxsize+chess_boxoffset-1, chess_low_edge - (i*chess_boxsize+chess_boxsize-chess_boxoffset), 1, 8, ptr);
     214:	d6 2a       	or	r13, r22
     216:	d6 2a       	or	r13, r22
     218:	d6 2a       	or	r13, r22
     21a:	d6 2a       	or	r13, r22
	cp =  lrc_obj.board[(7-i)*8+7-j];
      }
      if ( cp_GetPiece(cp) != PIECE_NONE )
      {
	ptr = chess_black_pieces_bm;
	ptr += (cp_GetPiece(cp)-1)*8;
     21c:	d6 2a       	or	r13, r22
     21e:	d6 2a       	or	r13, r22
     220:	d6 2a       	or	r13, r22
     222:	d6 2a       	or	r13, r22
        u8g_SetDefaultForegroundColor(lrc_u8g);
        u8g_DrawBitmapP(lrc_u8g, j*chess_boxsize+chess_boxoffset-1, chess_low_edge - (i*chess_boxsize+chess_boxsize-chess_boxoffset), 1, 8, ptr);
     224:	d6 2a       	or	r13, r22
     226:	d6 2a       	or	r13, r22
     228:	d6 2a       	or	r13, r22
     22a:	d6 2a       	or	r13, r22
     22c:	d6 2a       	or	r13, r22
     22e:	d6 2a       	or	r13, r22
     230:	d6 2a       	or	r13, r22
     232:	d6 2a       	or	r13, r22
     234:	d6 2a       	or	r13, r22
     236:	d6 2a       	or	r13, r22
     238:	d6 2a       	or	r13, r22
     23a:	d6 2a       	or	r13, r22
     23c:	d6 2a       	or	r13, r22
     23e:	ae 2a       	or	r10, r30
     240:	d6 2a       	or	r13, r22
     242:	d6 2a       	or	r13, r22
     244:	d6 2a       	or	r13, r22
     246:	d6 2a       	or	r13, r22
  however, inlined functions are sometimes much better
*/
static uint8_t cp_GetColor(uint8_t cp)
{
  cp >>= 4;
  cp &= 1;
     248:	d6 2a       	or	r13, r22
     24a:	d6 2a       	or	r13, r22
	ptr = chess_black_pieces_bm;
	ptr += (cp_GetPiece(cp)-1)*8;
        u8g_SetDefaultForegroundColor(lrc_u8g);
        u8g_DrawBitmapP(lrc_u8g, j*chess_boxsize+chess_boxoffset-1, chess_low_edge - (i*chess_boxsize+chess_boxsize-chess_boxoffset), 1, 8, ptr);
        
	if ( cp_GetColor(cp) == lrc_obj.strike_out_color ) 
     24c:	d6 2a       	or	r13, r22
     24e:	d6 2a       	or	r13, r22
     250:	a2 2a       	or	r10, r18
     252:	d6 2a       	or	r13, r22
     254:	d6 2a       	or	r13, r22
	{
	  ptr = chess_pieces_body_bm;
	  ptr += (cp_GetPiece(cp)-1)*8;
          u8g_SetDefaultBackgroundColor(lrc_u8g);
     256:	d6 2a       	or	r13, r22
     258:	d6 2a       	or	r13, r22
     25a:	d6 2a       	or	r13, r22
     25c:	d6 2a       	or	r13, r22
     25e:	d6 2a       	or	r13, r22
     260:	d6 2a       	or	r13, r22
          u8g_DrawBitmapP(lrc_u8g, j*chess_boxsize+chess_boxoffset-1, chess_low_edge - (i*chess_boxsize+chess_boxsize-chess_boxoffset), 1, 8, ptr);
     262:	d6 2a       	or	r13, r22
     264:	d6 2a       	or	r13, r22
     266:	cc 2a       	or	r12, r28
     268:	d1 2a       	or	r13, r17
        u8g_DrawBitmapP(lrc_u8g, j*chess_boxsize+chess_boxoffset-1, chess_low_edge - (i*chess_boxsize+chess_boxsize-chess_boxoffset), 1, 8, ptr);
        
	if ( cp_GetColor(cp) == lrc_obj.strike_out_color ) 
	{
	  ptr = chess_pieces_body_bm;
	  ptr += (cp_GetPiece(cp)-1)*8;
     26a:	05 a8       	ldd	r0, Z+53	; 0x35
     26c:	4c cd       	rjmp	.-1384   	; 0xfffffd06 <__eeprom_end+0xff7efd06>
     26e:	b2 d4       	rcall	.+2404   	; 0xbd4 <CAN_MCP2515_setBitrate+0x8a>
     270:	4e b9       	out	0x0e, r20	; 14
          u8g_SetDefaultBackgroundColor(lrc_u8g);
          u8g_DrawBitmapP(lrc_u8g, j*chess_boxsize+chess_boxoffset-1, chess_low_edge - (i*chess_boxsize+chess_boxsize-chess_boxoffset), 1, 8, ptr);
     272:	38 36       	cpi	r19, 0x68	; 104
     274:	a9 02       	muls	r26, r25
     276:	0c 50       	subi	r16, 0x0C	; 12
     278:	b9 91       	ld	r27, Y+
     27a:	86 88       	ldd	r8, Z+22	; 0x16
     27c:	08 3c       	cpi	r16, 0xC8	; 200
     27e:	a6 aa       	std	Z+54, r10	; 0x36
     280:	aa 2a       	or	r10, r26
     282:	be 00       	.word	0x00be	; ????
     284:	00 00       	nop
     286:	80 3f       	cpi	r24, 0xF0	; 240

00000288 <__trampolines_end>:
     288:	04 06       	cpc	r0, r20
     28a:	24 06       	cpc	r2, r20
     28c:	04 07       	cpc	r16, r20
     28e:	24 07       	cpc	r18, r20
     290:	84 06       	cpc	r8, r20

00000292 <u8g_avr_ddr_P>:
     292:	00 06 20 06 00 07 20 07 80 06                       .. ... ...

0000029c <u8g_dev_ks0108_128x64_init_seq>:
    }
  }
  
  for ( i = 0; i < 8; i++ )
  {
    for ( j = 0; j < 8; j++ )
     29c:	ff d0 ff e0 ff c1 ff d1 3f c0 ff 14 ff d2 3f c0     ........?.....?.
     2ac:	ff 14 ff d0 ff fe                                   ......

000002b2 <u8g_font_6x10>:
        }
      }
    }
  }
  
  for ( i = 0; i < 8; i++ )
     2b2:	01 06 0a 00 fe 07 01 36 02 68 20 ff fe 08 fe 07     .......6.h .....
	}
      }
    }
  }
  
  if ( (chess_source_pos & 0x88) == 0 )
     2c2:	fe 0a 00 60 22 17 67 80 80 80 80 80 00 80 16 33     ...`".g........3
  {
    chess_DrawFrame(chess_source_pos, 1);
  }

  if ( (chess_target_pos & 0x88) == 0 )
     2d2:	63 a0 a0 a0 02 57 67 50 50 f8 50 f8 50 50 02 57     c....WgPP.P.PP.W
  {
    chess_DrawFrame(chess_target_pos, 0);
     2e2:	67 20 70 a0 70 28 70 20 02 57 67 48 a8 50 20 50     g p.p(p .WgH.P P
     2f2:	a8 90 02 57 67 40 a0 a0 40 a8 90 68 26 13 63 80     ...Wg@..@..h&.c.
  for ( i = 0; i < 8; i++ )
  {
    for ( j = 0; j < 8; j++ )
    {
      /* get piece from global board */
      if ( lrc_obj.orientation == COLOR_WHITE )
     302:	80 80 12 37 67 20 40 80 80 80 40 20 12 37 67 80     ...7g @...@ .7g.
  if ( (chess_target_pos & 0x88) == 0 )
  {
    chess_DrawFrame(chess_target_pos, 0);
  }
  
}
     312:	40 20 20 20 40 80 03 55 65 88 50 f8 50 88 03 55     @   @..Ue.P.P..U
     322:	65 20 20 f8 20 20 11 33 63 60 40 80 05 51 61 f8     e  .  .3c`@..Qa.
     332:	11 33 63 40 e0 40 02 57 67 08 08 10 20 40 80 80     .3c@.@.Wg... @..
     342:	02 57 67 20 50 88 88 88 50 20 02 57 67 20 60 a0     .Wg P...P .Wg `.
     352:	20 20 20 f8 02 57 67 70 88 08 30 40 80 f8 02 57        ..Wgp..0@...W
     362:	67 f8 08 10 30 08 88 70 02 57 67 10 30 50 90 f8     g...0..p.Wg.0P..
     372:	10 10 02 57 67 f8 80 b0 c8 08 88 70 02 57 67 30     ...Wg......p.Wg0
     382:	40 80 b0 c8 88 70 02 57 67 f8 08 10 10 20 40 40     @....p.Wg.... @@
     392:	02 57 67 70 88 88 70 88 88 70 02 57 67 70 88 98     .Wgp..p..p.Wgp..
     3a2:	68 08 10 60 11 37 67 40 e0 40 00 40 e0 40 11 37     h..`.7g@.@.@.@.7
     3b2:	67 40 e0 40 00 60 40 80 12 47 67 10 20 40 80 40     g@.@.`@..Gg. @.@
     3c2:	20 10 04 53 63 f8 00 f8 12 47 67 80 40 20 10 20      ..Sc....Gg.@ . 
     3d2:	40 80 02 57 67 70 88 10 20 20 00 20 02 57 67 70     @..Wgp..  . .Wgp
     3e2:	88 98 a8 b0 80 70 02 57 67 20 50 88 88 f8 88 88     .....p.Wg P.....
     3f2:	02 57 67 f0 48 48 70 48 48 f0 02 57 67 70 88 80     .Wg.HHpHH..Wgp..
     402:	80 80 88 70 02 57 67 f0 48 48 48 48 48 f0 02 57     ...p.Wg.HHHHH..W
     412:	67 f8 80 80 f0 80 80 f8 02 57 67 f8 80 80 f0 80     g........Wg.....
     422:	80 80 02 57 67 70 88 80 80 98 88 70 02 57 67 88     ...Wgp.....p.Wg.
     432:	88 88 f8 88 88 88 12 37 67 e0 40 40 40 40 40 e0     .......7g.@@@@@.
     442:	02 57 67 38 10 10 10 10 90 60 02 57 67 88 90 a0     .Wg8.....`.Wg...
     452:	c0 a0 90 88 02 57 67 80 80 80 80 80 80 f8 02 57     .....Wg........W
     462:	67 88 88 d8 a8 88 88 88 02 57 67 88 88 c8 a8 98     g........Wg.....
     472:	88 88 02 57 67 70 88 88 88 88 88 70 02 57 67 f0     ...Wgp.....p.Wg.
     482:	88 88 f0 80 80 80 01 58 68 70 88 88 88 88 a8 70     .......Xhp.....p
     492:	08 02 57 67 f0 88 88 f0 a0 90 88 02 57 67 70 88     ..Wg........Wgp.
     4a2:	80 70 08 88 70 02 57 67 f8 20 20 20 20 20 20 02     .p..p.Wg.      .
     4b2:	57 67 88 88 88 88 88 88 70 02 57 67 88 88 88 50     Wg......p.Wg...P
     4c2:	50 50 20 02 57 67 88 88 88 a8 a8 d8 88 02 57 67     PP .Wg........Wg
     4d2:	88 88 50 20 50 88 88 02 57 67 88 88 50 20 20 20     ..P P...Wg..P   
     4e2:	20 02 57 67 f8 08 10 20 40 80 f8 12 37 67 e0 80      .Wg... @...7g..
     4f2:	80 80 80 80 e0 02 57 67 80 80 40 20 10 08 08 12     ......Wg..@ ....
     502:	37 67 e0 20 20 20 20 20 e0 06 53 63 20 50 88 01     7g.     ..Sc P..
     512:	51 61 f8 28 22 62 80 40 02 55 65 70 08 78 88 78     Qa.("b.@.Uep.x.x
     522:	02 57 67 80 80 b0 c8 88 c8 b0 02 55 65 70 88 80     .Wg........Uep..
     532:	88 70 02 57 67 08 08 68 98 88 98 68 02 55 65 70     .p.Wg..h...h.Uep
     542:	88 f8 80 70 02 57 67 30 48 40 f0 40 40 40 00 57     ...p.Wg0H@.@@@.W
     552:	67 78 88 88 78 08 88 70 02 57 67 80 80 b0 c8 88     gx..x..p.Wg.....
     562:	88 88 12 37 67 40 00 c0 40 40 40 e0 10 49 69 10     ...7g@..@@@..Ii.
     572:	00 30 10 10 10 90 90 60 02 57 67 80 80 88 90 e0     .0.....`.Wg.....
     582:	90 88 12 37 67 c0 40 40 40 40 40 e0 02 55 65 d0     ...7g.@@@@@..Ue.
     592:	a8 a8 a8 88 02 55 65 b0 c8 88 88 88 02 55 65 70     .....Ue......Uep
     5a2:	88 88 88 70 00 57 67 b0 c8 88 c8 b0 80 80 00 57     ...p.Wg........W
     5b2:	67 68 98 88 98 68 08 08 02 55 65 b0 c8 80 80 80     gh...h...Ue.....
     5c2:	02 55 65 70 80 70 08 f0 02 57 67 40 40 f0 40 40     .Uep.p...Wg@@.@@
     5d2:	48 30 02 55 65 88 88 88 98 68 02 55 65 88 88 50     H0.Ue....h.Ue..P
     5e2:	50 20 02 55 65 88 88 a8 a8 50 02 55 65 88 50 20     P .Ue....P.Ue.P 
     5f2:	50 88 00 57 67 88 88 98 68 08 88 70 02 55 65 f8     P..Wg...h..p.Ue.
     602:	10 20 40 f8 12 47 67 30 40 20 c0 20 40 30 22 17     . @..Gg0@ . @0".
     612:	67 80 80 80 80 80 80 80 12 47 67 c0 20 40 30 40     g........Gg. @0@
     622:	20 c0 06 53 63 48 a8 90 ff ff ff ff ff ff ff ff      ..ScH..........
     632:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     642:	ff ff ff ff ff ff ff ff ff 0a 00 60 22 17 67 80     ...........`".g.
     652:	00 80 80 80 80 80 01 57 67 20 78 a0 a0 a0 78 20     .......Wg x...x 
     662:	02 57 67 30 48 40 e0 40 48 b0 02 55 65 88 70 50     .Wg0H@.@H..Ue.pP
     672:	70 88 01 58 68 88 88 50 20 f8 20 20 20 22 17 67     p..Xh..P .   ".g
     682:	80 80 80 00 80 80 80 01 58 68 70 80 e0 90 48 38     ........Xhp...H8
     692:	08 70 19 31 61 a0 02 57 67 70 88 a8 c8 a8 88 70     .p.1a..Wgp.....p
     6a2:	13 46 66 70 90 b0 50 00 f0 02 65 65 24 48 90 48     .Ffp..P...ee$H.H
     6b2:	24 14 42 62 f0 10 15 41 61 f0 02 57 67 70 88 e8     $.Bb...Aa..Wgp..
     6c2:	c8 c8 88 70 09 51 61 f8 16 33 63 40 a0 40 02 56     ...p.Qa..3c@.@.V
     6d2:	66 20 20 f8 20 20 f8 15 45 65 60 90 20 40 f0 15     f  .  ..Ee`. @..
     6e2:	45 65 e0 10 60 10 e0 28 22 62 40 80 01 56 66 88     Ee..`..("b@..Vf.
     6f2:	88 88 c8 b0 80 02 57 67 78 e8 e8 68 28 28 28 25     ......Wgx..h(((%
     702:	11 61 80 20 22 62 40 80 15 35 65 40 c0 40 40 e0     .a. "b@..5e@.@@.
     712:	13 46 66 60 90 90 60 00 f0 02 65 65 90 48 24 48     .Ff`..`...ee.H$H
     722:	90 01 69 69 40 c0 40 40 e4 0c 14 3c 04 01 69 69     ..ii@.@@...<..ii
     732:	40 c0 40 40 e8 14 04 08 1c 01 59 69 c0 20 40 20     @.@@......Yi. @ 
     742:	c8 18 28 78 08 02 57 67 20 00 20 20 40 88 70 02     ..(x..Wg .  @.p.
     752:	58 68 40 20 70 88 88 f8 88 88 02 58 68 10 20 70     Xh@ p......Xh. p
     762:	88 88 f8 88 88 02 58 68 20 50 70 88 88 f8 88 88     ......Xh Pp.....
     772:	02 58 68 48 b0 70 88 88 f8 88 88 02 58 68 50 00     .XhH.p......XhP.
     782:	70 88 88 f8 88 88 02 58 68 20 50 70 88 88 f8 88     p......Xh Pp....
     792:	88 02 67 67 3c 50 90 9c f0 90 9c 00 59 69 70 88     ..gg<P......Yip.
     7a2:	80 80 80 88 70 20 40 02 58 68 40 f8 80 80 f0 80     ....p @.Xh@.....
     7b2:	80 f8 02 58 68 10 f8 80 80 f0 80 80 f8 02 58 68     ...Xh.........Xh
     7c2:	20 f8 80 80 f0 80 80 f8 02 58 68 50 f8 80 80 f0      ........XhP....
     7d2:	80 80 f8 12 38 68 80 40 e0 40 40 40 40 e0 12 38     ....8h.@.@@@@..8
     7e2:	68 20 40 e0 40 40 40 40 e0 12 38 68 40 a0 e0 40     h @.@@@@..8h@..@
     7f2:	40 40 40 e0 12 38 68 a0 00 e0 40 40 40 40 e0 02     @@@..8h...@@@@..
     802:	57 67 f0 48 48 e8 48 48 f0 02 58 68 28 50 88 c8     Wg.HH.HH..Xh(P..
     812:	a8 98 88 88 02 58 68 40 20 70 88 88 88 88 70 02     .....Xh@ p....p.
     822:	58 68 10 20 70 88 88 88 88 70 02 58 68 20 50 70     Xh. p....p.Xh Pp
     832:	88 88 88 88 70 02 58 68 28 50 70 88 88 88 88 70     ....p.Xh(Pp....p
     842:	02 58 68 50 00 70 88 88 88 88 70 02 55 65 88 50     .XhP.p....p.Ue.P
     852:	20 50 88 02 57 67 70 98 98 a8 c8 c8 70 02 58 68      P..Wgp.....p.Xh
     862:	40 20 88 88 88 88 88 70 02 58 68 10 20 88 88 88     @ .....p.Xh. ...
     872:	88 88 70 02 58 68 20 50 00 88 88 88 88 70 02 58     ..p.Xh P.....p.X
     882:	68 50 00 88 88 88 88 88 70 02 58 68 10 20 88 88     hP......p.Xh. ..
     892:	50 20 20 20 02 57 67 80 f0 88 f0 80 80 80 02 57     P   .Wg........W
     8a2:	67 70 88 90 a0 90 88 b0 02 58 68 40 20 00 70 08     gp.......Xh@ .p.
     8b2:	78 88 78 02 58 68 10 20 00 70 08 78 88 78 02 58     x.x.Xh. .p.x.x.X
     8c2:	68 20 50 00 70 08 78 88 78 02 58 68 28 50 00 70     h P.p.x.x.Xh(P.p
     8d2:	08 78 88 78 02 57 67 50 00 70 08 78 88 78 02 58     .x.x.WgP.p.x.x.X
     8e2:	68 20 50 20 70 08 78 88 78 02 65 65 78 14 7c 90     h P p.x.x.eex.|.
     8f2:	7c 00 57 67 70 88 80 88 70 20 40 02 58 68 40 20     |.Wgp...p @.Xh@ 
     902:	00 70 88 f8 80 70 02 58 68 10 20 00 70 88 f8 80     .p...p.Xh. .p...
     912:	70 02 58 68 20 50 00 70 88 f8 80 70 02 57 67 50     p.Xh P.p...p.WgP
     922:	00 70 88 f8 80 70 12 38 68 80 40 00 c0 40 40 40     .p...p.8h.@..@@@
     932:	e0 12 38 68 40 80 00 c0 40 40 40 e0 12 38 68 40     ..8h@...@@@..8h@
     942:	a0 00 c0 40 40 40 e0 12 37 67 a0 00 c0 40 40 40     ...@@@..7g...@@@
     952:	e0 02 57 67 c0 30 70 88 88 88 70 02 58 68 28 50     ..Wg.0p...p.Xh(P
     962:	00 b0 c8 88 88 88 02 58 68 40 20 00 70 88 88 88     .......Xh@ .p...
     972:	70 02 58 68 10 20 00 70 88 88 88 70 02 58 68 20     p.Xh. .p...p.Xh 
     982:	50 00 70 88 88 88 70 02 58 68 28 50 00 70 88 88     P.p...p.Xh(P.p..
     992:	88 70 02 57 67 50 00 70 88 88 88 70 03 55 65 20     .p.WgP.p...p.Ue 
     9a2:	00 f8 00 20 02 55 65 78 98 a8 c8 f0 02 58 68 40     ... .Uex.....Xh@
     9b2:	20 00 88 88 88 98 68 02 58 68 10 20 00 88 88 88      .....h.Xh. ....
     9c2:	98 68 02 58 68 20 50 00 88 88 88 98 68 02 57 67     .h.Xh P.....h.Wg
     9d2:	50 00 88 88 88 98 68 00 59 69 10 20 88 88 98 68     P.....h.Yi. ...h
     9e2:	08 88 70 00 58 68 80 f0 88 88 88 f0 80 80 00 59     ..p.Xh.........Y
     9f2:	69 50 00 88 88 98 68 08 88 70                       iP....h..p

000009fc <__c.2161>:
     9fc:	6e 61 6e 00                                         nan.

00000a00 <__c.2159>:
     a00:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     a10:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     a20:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     a30:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     a40:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     a50:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     a60:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     a70:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     a80:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     a90:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     aa0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     ab0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     ac0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     ad0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     ae0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     af0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000afe <__ctors_end>:
     afe:	11 24       	eor	r1, r1
     b00:	1f be       	out	0x3f, r1	; 63
     b02:	cf ef       	ldi	r28, 0xFF	; 255
     b04:	cd bf       	out	0x3d, r28	; 61
     b06:	df e2       	ldi	r29, 0x2F	; 47
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	18 be       	out	0x38, r1	; 56
     b0c:	19 be       	out	0x39, r1	; 57
     b0e:	1a be       	out	0x3a, r1	; 58
     b10:	1b be       	out	0x3b, r1	; 59

00000b12 <__do_copy_data>:
     b12:	12 e2       	ldi	r17, 0x22	; 34
     b14:	a0 e0       	ldi	r26, 0x00	; 0
     b16:	b0 e2       	ldi	r27, 0x20	; 32
     b18:	e2 e9       	ldi	r30, 0x92	; 146
     b1a:	f2 e7       	ldi	r31, 0x72	; 114
     b1c:	00 e0       	ldi	r16, 0x00	; 0
     b1e:	0b bf       	out	0x3b, r16	; 59
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <__do_copy_data+0x14>
     b22:	07 90       	elpm	r0, Z+
     b24:	0d 92       	st	X+, r0
     b26:	a0 37       	cpi	r26, 0x70	; 112
     b28:	b1 07       	cpc	r27, r17
     b2a:	d9 f7       	brne	.-10     	; 0xb22 <__do_copy_data+0x10>
     b2c:	1b be       	out	0x3b, r1	; 59

00000b2e <__do_clear_bss>:
     b2e:	27 e2       	ldi	r18, 0x27	; 39
     b30:	a0 e7       	ldi	r26, 0x70	; 112
     b32:	b2 e2       	ldi	r27, 0x22	; 34
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <.do_clear_bss_start>

00000b36 <.do_clear_bss_loop>:
     b36:	1d 92       	st	X+, r1

00000b38 <.do_clear_bss_start>:
     b38:	ad 35       	cpi	r26, 0x5D	; 93
     b3a:	b2 07       	cpc	r27, r18
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <.do_clear_bss_loop>
     b3e:	0e 94 30 12 	call	0x2460	; 0x2460 <main>
     b42:	0c 94 47 39 	jmp	0x728e	; 0x728e <_exit>

00000b46 <__bad_interrupt>:
     b46:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b4a <CAN_MCP2515_setBitrate>:
        CAN_int_flag = 0;
		
}

void CAN_MCP2515_setBitrate(uint32_t bitrate)
{
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
  uint8_t CNF1 = 0; 
  uint8_t CNF2 = 0;
  uint8_t CNF3 = 0;
 if (bitrate == 5000)
     b4e:	68 38       	cpi	r22, 0x88	; 136
     b50:	23 e1       	ldi	r18, 0x13	; 19
     b52:	72 07       	cpc	r23, r18
     b54:	81 05       	cpc	r24, r1
     b56:	91 05       	cpc	r25, r1
     b58:	09 f4       	brne	.+2      	; 0xb5c <CAN_MCP2515_setBitrate+0x12>
     b5a:	58 c0       	rjmp	.+176    	; 0xc0c <CAN_MCP2515_setBitrate+0xc2>
  {
    CNF1 = 0x3F;
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 10000)
     b5c:	60 31       	cpi	r22, 0x10	; 16
     b5e:	27 e2       	ldi	r18, 0x27	; 39
     b60:	72 07       	cpc	r23, r18
     b62:	81 05       	cpc	r24, r1
     b64:	91 05       	cpc	r25, r1
     b66:	09 f4       	brne	.+2      	; 0xb6a <CAN_MCP2515_setBitrate+0x20>
     b68:	55 c0       	rjmp	.+170    	; 0xc14 <CAN_MCP2515_setBitrate+0xca>
  {
    CNF1 = 0x1F;
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 20000)
     b6a:	60 32       	cpi	r22, 0x20	; 32
     b6c:	2e e4       	ldi	r18, 0x4E	; 78
     b6e:	72 07       	cpc	r23, r18
     b70:	81 05       	cpc	r24, r1
     b72:	91 05       	cpc	r25, r1
     b74:	09 f4       	brne	.+2      	; 0xb78 <CAN_MCP2515_setBitrate+0x2e>
     b76:	52 c0       	rjmp	.+164    	; 0xc1c <CAN_MCP2515_setBitrate+0xd2>
  {
    CNF1 = 0x0F;
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 31025)
     b78:	61 33       	cpi	r22, 0x31	; 49
     b7a:	29 e7       	ldi	r18, 0x79	; 121
     b7c:	72 07       	cpc	r23, r18
     b7e:	81 05       	cpc	r24, r1
     b80:	91 05       	cpc	r25, r1
     b82:	09 f4       	brne	.+2      	; 0xb86 <CAN_MCP2515_setBitrate+0x3c>
     b84:	4f c0       	rjmp	.+158    	; 0xc24 <CAN_MCP2515_setBitrate+0xda>
  {
    CNF1 = 0x0F;
    CNF2 = 0xF1;
    CNF3 = 0x85;
  }
  else if (bitrate == 40000)
     b86:	60 34       	cpi	r22, 0x40	; 64
     b88:	2c e9       	ldi	r18, 0x9C	; 156
     b8a:	72 07       	cpc	r23, r18
     b8c:	81 05       	cpc	r24, r1
     b8e:	91 05       	cpc	r25, r1
     b90:	09 f4       	brne	.+2      	; 0xb94 <CAN_MCP2515_setBitrate+0x4a>
     b92:	4c c0       	rjmp	.+152    	; 0xc2c <CAN_MCP2515_setBitrate+0xe2>
  {
    CNF1 = 0x07;
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 50000)
     b94:	60 35       	cpi	r22, 0x50	; 80
     b96:	23 ec       	ldi	r18, 0xC3	; 195
     b98:	72 07       	cpc	r23, r18
     b9a:	81 05       	cpc	r24, r1
     b9c:	91 05       	cpc	r25, r1
     b9e:	09 f4       	brne	.+2      	; 0xba2 <CAN_MCP2515_setBitrate+0x58>
     ba0:	49 c0       	rjmp	.+146    	; 0xc34 <CAN_MCP2515_setBitrate+0xea>
  {
    CNF1 = 0x07;
    CNF2 = 0xFA;
    CNF3 = 0x87;
  }
  else if (bitrate == 80000)
     ba2:	60 38       	cpi	r22, 0x80	; 128
     ba4:	28 e3       	ldi	r18, 0x38	; 56
     ba6:	72 07       	cpc	r23, r18
     ba8:	21 e0       	ldi	r18, 0x01	; 1
     baa:	82 07       	cpc	r24, r18
     bac:	91 05       	cpc	r25, r1
     bae:	09 f4       	brne	.+2      	; 0xbb2 <CAN_MCP2515_setBitrate+0x68>
     bb0:	45 c0       	rjmp	.+138    	; 0xc3c <CAN_MCP2515_setBitrate+0xf2>
  {
    CNF1 = 0x03;
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 100000)
     bb2:	60 3a       	cpi	r22, 0xA0	; 160
     bb4:	26 e8       	ldi	r18, 0x86	; 134
     bb6:	72 07       	cpc	r23, r18
     bb8:	21 e0       	ldi	r18, 0x01	; 1
     bba:	82 07       	cpc	r24, r18
     bbc:	91 05       	cpc	r25, r1
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <CAN_MCP2515_setBitrate+0x78>
     bc0:	41 c0       	rjmp	.+130    	; 0xc44 <CAN_MCP2515_setBitrate+0xfa>
  {
    CNF1 = 0x03;
    CNF2 = 0xFA;
    CNF3 = 0x87;
  }
  else if (bitrate == 125000)
     bc2:	68 34       	cpi	r22, 0x48	; 72
     bc4:	28 ee       	ldi	r18, 0xE8	; 232
     bc6:	72 07       	cpc	r23, r18
     bc8:	21 e0       	ldi	r18, 0x01	; 1
     bca:	82 07       	cpc	r24, r18
     bcc:	91 05       	cpc	r25, r1
     bce:	f1 f1       	breq	.+124    	; 0xc4c <CAN_MCP2515_setBitrate+0x102>
  {
    CNF1 = 0x03;
    CNF2 = 0xF0;
    CNF3 = 0x86;
  }
  else if (bitrate == 200000)
     bd0:	60 34       	cpi	r22, 0x40	; 64
     bd2:	2d e0       	ldi	r18, 0x0D	; 13
     bd4:	72 07       	cpc	r23, r18
     bd6:	23 e0       	ldi	r18, 0x03	; 3
     bd8:	82 07       	cpc	r24, r18
     bda:	91 05       	cpc	r25, r1
     bdc:	d9 f1       	breq	.+118    	; 0xc54 <CAN_MCP2515_setBitrate+0x10a>
  {
    CNF1 = 0x01;
    CNF2 = 0xFA;
    CNF3 = 0x87;
  }
  else if (bitrate == 250000)
     bde:	60 39       	cpi	r22, 0x90	; 144
     be0:	20 ed       	ldi	r18, 0xD0	; 208
     be2:	72 07       	cpc	r23, r18
     be4:	23 e0       	ldi	r18, 0x03	; 3
     be6:	82 07       	cpc	r24, r18
     be8:	91 05       	cpc	r25, r1
     bea:	c1 f1       	breq	.+112    	; 0xc5c <CAN_MCP2515_setBitrate+0x112>
  {
    CNF1 = 0x41;
    CNF2 = 0xF1;
    CNF3 = 0x85;
  }
  else if (bitrate == 500000)
     bec:	60 32       	cpi	r22, 0x20	; 32
     bee:	21 ea       	ldi	r18, 0xA1	; 161
     bf0:	72 07       	cpc	r23, r18
     bf2:	27 e0       	ldi	r18, 0x07	; 7
     bf4:	82 07       	cpc	r24, r18
     bf6:	91 05       	cpc	r25, r1
     bf8:	a9 f1       	breq	.+106    	; 0xc64 <CAN_MCP2515_setBitrate+0x11a>
  {
    CNF1 = 0x00;
    CNF2 = 0xF0;
    CNF3 = 0x86;
  }
  else if (bitrate == 1000000)
     bfa:	60 34       	cpi	r22, 0x40	; 64
     bfc:	72 44       	sbci	r23, 0x42	; 66
     bfe:	8f 40       	sbci	r24, 0x0F	; 15
     c00:	91 05       	cpc	r25, r1
     c02:	a1 f1       	breq	.+104    	; 0xc6c <CAN_MCP2515_setBitrate+0x122>

void CAN_MCP2515_setBitrate(uint32_t bitrate)
{
  uint8_t CNF1 = 0; 
  uint8_t CNF2 = 0;
  uint8_t CNF3 = 0;
     c04:	c0 e0       	ldi	r28, 0x00	; 0
}

void CAN_MCP2515_setBitrate(uint32_t bitrate)
{
  uint8_t CNF1 = 0; 
  uint8_t CNF2 = 0;
     c06:	d0 e0       	ldi	r29, 0x00	; 0
		
}

void CAN_MCP2515_setBitrate(uint32_t bitrate)
{
  uint8_t CNF1 = 0; 
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	33 c0       	rjmp	.+102    	; 0xc72 <CAN_MCP2515_setBitrate+0x128>
  uint8_t CNF3 = 0;
 if (bitrate == 5000)
  {
    CNF1 = 0x3F;
    CNF2 = 0xFF;
    CNF3 = 0x87;
     c0c:	c7 e8       	ldi	r28, 0x87	; 135
  uint8_t CNF2 = 0;
  uint8_t CNF3 = 0;
 if (bitrate == 5000)
  {
    CNF1 = 0x3F;
    CNF2 = 0xFF;
     c0e:	df ef       	ldi	r29, 0xFF	; 255
  uint8_t CNF1 = 0; 
  uint8_t CNF2 = 0;
  uint8_t CNF3 = 0;
 if (bitrate == 5000)
  {
    CNF1 = 0x3F;
     c10:	6f e3       	ldi	r22, 0x3F	; 63
     c12:	2f c0       	rjmp	.+94     	; 0xc72 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 10000)
  {
    CNF1 = 0x1F;
    CNF2 = 0xFF;
    CNF3 = 0x87;
     c14:	c7 e8       	ldi	r28, 0x87	; 135
    CNF3 = 0x87;
  }
  else if (bitrate == 10000)
  {
    CNF1 = 0x1F;
    CNF2 = 0xFF;
     c16:	df ef       	ldi	r29, 0xFF	; 255
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 10000)
  {
    CNF1 = 0x1F;
     c18:	6f e1       	ldi	r22, 0x1F	; 31
     c1a:	2b c0       	rjmp	.+86     	; 0xc72 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 20000)
  {
    CNF1 = 0x0F;
    CNF2 = 0xFF;
    CNF3 = 0x87;
     c1c:	c7 e8       	ldi	r28, 0x87	; 135
    CNF3 = 0x87;
  }
  else if (bitrate == 20000)
  {
    CNF1 = 0x0F;
    CNF2 = 0xFF;
     c1e:	df ef       	ldi	r29, 0xFF	; 255
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 20000)
  {
    CNF1 = 0x0F;
     c20:	6f e0       	ldi	r22, 0x0F	; 15
     c22:	27 c0       	rjmp	.+78     	; 0xc72 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 31025)
  {
    CNF1 = 0x0F;
    CNF2 = 0xF1;
    CNF3 = 0x85;
     c24:	c5 e8       	ldi	r28, 0x85	; 133
    CNF3 = 0x87;
  }
  else if (bitrate == 31025)
  {
    CNF1 = 0x0F;
    CNF2 = 0xF1;
     c26:	d1 ef       	ldi	r29, 0xF1	; 241
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 31025)
  {
    CNF1 = 0x0F;
     c28:	6f e0       	ldi	r22, 0x0F	; 15
     c2a:	23 c0       	rjmp	.+70     	; 0xc72 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 40000)
  {
    CNF1 = 0x07;
    CNF2 = 0xFF;
    CNF3 = 0x87;
     c2c:	c7 e8       	ldi	r28, 0x87	; 135
    CNF3 = 0x85;
  }
  else if (bitrate == 40000)
  {
    CNF1 = 0x07;
    CNF2 = 0xFF;
     c2e:	df ef       	ldi	r29, 0xFF	; 255
    CNF2 = 0xF1;
    CNF3 = 0x85;
  }
  else if (bitrate == 40000)
  {
    CNF1 = 0x07;
     c30:	67 e0       	ldi	r22, 0x07	; 7
     c32:	1f c0       	rjmp	.+62     	; 0xc72 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 50000)
  {
    CNF1 = 0x07;
    CNF2 = 0xFA;
    CNF3 = 0x87;
     c34:	c7 e8       	ldi	r28, 0x87	; 135
    CNF3 = 0x87;
  }
  else if (bitrate == 50000)
  {
    CNF1 = 0x07;
    CNF2 = 0xFA;
     c36:	da ef       	ldi	r29, 0xFA	; 250
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 50000)
  {
    CNF1 = 0x07;
     c38:	67 e0       	ldi	r22, 0x07	; 7
     c3a:	1b c0       	rjmp	.+54     	; 0xc72 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 80000)
  {
    CNF1 = 0x03;
    CNF2 = 0xFF;
    CNF3 = 0x87;
     c3c:	c7 e8       	ldi	r28, 0x87	; 135
    CNF3 = 0x87;
  }
  else if (bitrate == 80000)
  {
    CNF1 = 0x03;
    CNF2 = 0xFF;
     c3e:	df ef       	ldi	r29, 0xFF	; 255
    CNF2 = 0xFA;
    CNF3 = 0x87;
  }
  else if (bitrate == 80000)
  {
    CNF1 = 0x03;
     c40:	63 e0       	ldi	r22, 0x03	; 3
     c42:	17 c0       	rjmp	.+46     	; 0xc72 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 100000)
  {
    CNF1 = 0x03;
    CNF2 = 0xFA;
    CNF3 = 0x87;
     c44:	c7 e8       	ldi	r28, 0x87	; 135
    CNF3 = 0x87;
  }
  else if (bitrate == 100000)
  {
    CNF1 = 0x03;
    CNF2 = 0xFA;
     c46:	da ef       	ldi	r29, 0xFA	; 250
    CNF2 = 0xFF;
    CNF3 = 0x87;
  }
  else if (bitrate == 100000)
  {
    CNF1 = 0x03;
     c48:	63 e0       	ldi	r22, 0x03	; 3
     c4a:	13 c0       	rjmp	.+38     	; 0xc72 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 125000)
  {
    CNF1 = 0x03;
    CNF2 = 0xF0;
    CNF3 = 0x86;
     c4c:	c6 e8       	ldi	r28, 0x86	; 134
    CNF3 = 0x87;
  }
  else if (bitrate == 125000)
  {
    CNF1 = 0x03;
    CNF2 = 0xF0;
     c4e:	d0 ef       	ldi	r29, 0xF0	; 240
    CNF2 = 0xFA;
    CNF3 = 0x87;
  }
  else if (bitrate == 125000)
  {
    CNF1 = 0x03;
     c50:	63 e0       	ldi	r22, 0x03	; 3
     c52:	0f c0       	rjmp	.+30     	; 0xc72 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 200000)
  {
    CNF1 = 0x01;
    CNF2 = 0xFA;
    CNF3 = 0x87;
     c54:	c7 e8       	ldi	r28, 0x87	; 135
    CNF3 = 0x86;
  }
  else if (bitrate == 200000)
  {
    CNF1 = 0x01;
    CNF2 = 0xFA;
     c56:	da ef       	ldi	r29, 0xFA	; 250
    CNF2 = 0xF0;
    CNF3 = 0x86;
  }
  else if (bitrate == 200000)
  {
    CNF1 = 0x01;
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	0b c0       	rjmp	.+22     	; 0xc72 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 250000)
  {
    CNF1 = 0x41;
    CNF2 = 0xF1;
    CNF3 = 0x85;
     c5c:	c5 e8       	ldi	r28, 0x85	; 133
    CNF3 = 0x87;
  }
  else if (bitrate == 250000)
  {
    CNF1 = 0x41;
    CNF2 = 0xF1;
     c5e:	d1 ef       	ldi	r29, 0xF1	; 241
    CNF2 = 0xFA;
    CNF3 = 0x87;
  }
  else if (bitrate == 250000)
  {
    CNF1 = 0x41;
     c60:	61 e4       	ldi	r22, 0x41	; 65
     c62:	07 c0       	rjmp	.+14     	; 0xc72 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 500000)
  {
    CNF1 = 0x00;
    CNF2 = 0xF0;
    CNF3 = 0x86;
     c64:	c6 e8       	ldi	r28, 0x86	; 134
    CNF3 = 0x85;
  }
  else if (bitrate == 500000)
  {
    CNF1 = 0x00;
    CNF2 = 0xF0;
     c66:	d0 ef       	ldi	r29, 0xF0	; 240
    CNF2 = 0xF1;
    CNF3 = 0x85;
  }
  else if (bitrate == 500000)
  {
    CNF1 = 0x00;
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	03 c0       	rjmp	.+6      	; 0xc72 <CAN_MCP2515_setBitrate+0x128>
  }
  else if (bitrate == 1000000)
  {
    CNF1 = 0x00;
    CNF2 = 0xD0;
    CNF3 = 0x82;
     c6c:	c2 e8       	ldi	r28, 0x82	; 130
    CNF3 = 0x86;
  }
  else if (bitrate == 1000000)
  {
    CNF1 = 0x00;
    CNF2 = 0xD0;
     c6e:	d0 ed       	ldi	r29, 0xD0	; 208
    CNF2 = 0xF0;
    CNF3 = 0x86;
  }
  else if (bitrate == 1000000)
  {
    CNF1 = 0x00;
     c70:	60 e0       	ldi	r22, 0x00	; 0
  }

// 	mcp2515_write_register(MCP2515_CNF1, CNF1);//Write config address 1
// 	mcp2515_write_register(MCP2515_CNF2, CNF2);//Write config address 2
// 	mcp2515_write_register(MCP2515_CNF3, CNF3);//Write config address 3
	mcp2515_bit_modify(MCP2515_CNF1, CNF1,0xFF);//Write config address 1
     c72:	4f ef       	ldi	r20, 0xFF	; 255
     c74:	8a e2       	ldi	r24, 0x2A	; 42
     c76:	0e 94 cd 07 	call	0xf9a	; 0xf9a <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP2515_CNF2, CNF2,0xFF);//Write config address 2
     c7a:	4f ef       	ldi	r20, 0xFF	; 255
     c7c:	6d 2f       	mov	r22, r29
     c7e:	89 e2       	ldi	r24, 0x29	; 41
     c80:	0e 94 cd 07 	call	0xf9a	; 0xf9a <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP2515_CNF3, CNF3,0xFF);//Write config address 3
     c84:	4f ef       	ldi	r20, 0xFF	; 255
     c86:	6c 2f       	mov	r22, r28
     c88:	88 e2       	ldi	r24, 0x28	; 40
     c8a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <mcp2515_bit_modify>
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <CAN_init>:

/****************************************************************************
Call this function to set up the CAN to its initial standby state.
****************************************************************************/
void CAN_init(){
        mcp2515_init();
     c94:	0e 94 02 08 	call	0x1004	; 0x1004 <mcp2515_init>
        //Set receive interrupt

       // set speed to 
	    //mcp2515_bit_modify(MCP2515_CANCTRL,MCP2515_MODE_CONFIG , MCP2515_REQOPn);
		CAN_MCP2515_clearTxBuffers();
     c98:	0e 94 64 07 	call	0xec8	; 0xec8 <CAN_MCP2515_clearTxBuffers>
		CAN_MCP2515_clearRxBuffers();
     c9c:	0e 94 36 07 	call	0xe6c	; 0xe6c <CAN_MCP2515_clearRxBuffers>
		

		CAN_MCP2515_setBitrate(250000);
     ca0:	60 e9       	ldi	r22, 0x90	; 144
     ca2:	70 ed       	ldi	r23, 0xD0	; 208
     ca4:	83 e0       	ldi	r24, 0x03	; 3
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <CAN_MCP2515_setBitrate>
		
		mcp2515_bit_modify(MCP_CANINTE, 0x3, MCP_RX_INT);
     cac:	43 e0       	ldi	r20, 0x03	; 3
     cae:	63 e0       	ldi	r22, 0x03	; 3
     cb0:	8b e2       	ldi	r24, 0x2B	; 43
     cb2:	0e 94 cd 07 	call	0xf9a	; 0xf9a <mcp2515_bit_modify>
        //Set control register to turn off mask filter and receive any msgs
        mcp2515_bit_modify(MCP_RXB0CTRL, 0x60, 0xFF);
     cb6:	4f ef       	ldi	r20, 0xFF	; 255
     cb8:	60 e6       	ldi	r22, 0x60	; 96
     cba:	80 e6       	ldi	r24, 0x60	; 96
     cbc:	0e 94 cd 07 	call	0xf9a	; 0xf9a <mcp2515_bit_modify>
		//Set mode normal
        mcp2515_bit_modify(MCP_CANCTRL, MODE_NORMAL, MODE_MASK);
     cc0:	40 ee       	ldi	r20, 0xE0	; 224
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	8f e0       	ldi	r24, 0x0F	; 15
     cc6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <mcp2515_bit_modify>
		
				
		printf("\n Can setings %i \t",mcp2515_read_register(MCP2515_CNF1));
     cca:	8a e2       	ldi	r24, 0x2A	; 42
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 1d 07 	call	0xe3a	; 0xe3a <mcp2515_read_register>
     cd2:	1f 92       	push	r1
     cd4:	8f 93       	push	r24
     cd6:	83 e9       	ldi	r24, 0x93	; 147
     cd8:	90 e2       	ldi	r25, 0x20	; 32
     cda:	9f 93       	push	r25
     cdc:	8f 93       	push	r24
     cde:	0e 94 81 38 	call	0x7102	; 0x7102 <printf>
		printf("%i\t",mcp2515_read_register(MCP2515_CNF2));
     ce2:	89 e2       	ldi	r24, 0x29	; 41
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 1d 07 	call	0xe3a	; 0xe3a <mcp2515_read_register>
     cea:	1f 92       	push	r1
     cec:	8f 93       	push	r24
     cee:	86 ea       	ldi	r24, 0xA6	; 166
     cf0:	90 e2       	ldi	r25, 0x20	; 32
     cf2:	9f 93       	push	r25
     cf4:	8f 93       	push	r24
     cf6:	0e 94 81 38 	call	0x7102	; 0x7102 <printf>
		printf("%i\n",mcp2515_read_register(MCP2515_CNF3));
     cfa:	88 e2       	ldi	r24, 0x28	; 40
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 1d 07 	call	0xe3a	; 0xe3a <mcp2515_read_register>
     d02:	1f 92       	push	r1
     d04:	8f 93       	push	r24
     d06:	8a ea       	ldi	r24, 0xAA	; 170
     d08:	90 e2       	ldi	r25, 0x20	; 32
     d0a:	9f 93       	push	r25
     d0c:	8f 93       	push	r24
     d0e:	0e 94 81 38 	call	0x7102	; 0x7102 <printf>

        CAN_int_flag = 0;
     d12:	10 92 d4 25 	sts	0x25D4, r1
     d16:	8d b7       	in	r24, 0x3d	; 61
     d18:	9e b7       	in	r25, 0x3e	; 62
     d1a:	0c 96       	adiw	r24, 0x0c	; 12
     d1c:	8d bf       	out	0x3d, r24	; 61
     d1e:	9e bf       	out	0x3e, r25	; 62
     d20:	08 95       	ret

00000d22 <CAN_message_send>:
}

/****************************************************************************
Call this function to send a message over the CAN bus
****************************************************************************/
void CAN_message_send(can_message_t* msg){
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	ec 01       	movw	r28, r24
        mcp2515_write(msg->msg_id, MCP_TXB0SIDH);
     d2a:	61 e3       	ldi	r22, 0x31	; 49
     d2c:	88 81       	ld	r24, Y
     d2e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <mcp2515_write>
		//mcp2515_write(msg->msg_id, MCP2515_TXB0EID0);
        mcp2515_bit_modify(MCP_TXB0DLC, msg->data_length, 0x0F);
     d32:	4f e0       	ldi	r20, 0x0F	; 15
     d34:	69 81       	ldd	r22, Y+1	; 0x01
     d36:	85 e3       	ldi	r24, 0x35	; 53
     d38:	0e 94 cd 07 	call	0xf9a	; 0xf9a <mcp2515_bit_modify>
        BYTE i;
        for(i = 0; i <  msg->data_length; i++){
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	88 23       	and	r24, r24
     d40:	69 f0       	breq	.+26     	; 0xd5c <CAN_message_send+0x3a>
     d42:	10 e0       	ldi	r17, 0x00	; 0
     d44:	66 e3       	ldi	r22, 0x36	; 54
     d46:	61 0f       	add	r22, r17
                mcp2515_write(msg->data[i], MCP_TXB0D0 + i);
     d48:	fe 01       	movw	r30, r28
     d4a:	e1 0f       	add	r30, r17
     d4c:	f1 1d       	adc	r31, r1
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	0e 94 ff 06 	call	0xdfe	; 0xdfe <mcp2515_write>
void CAN_message_send(can_message_t* msg){
        mcp2515_write(msg->msg_id, MCP_TXB0SIDH);
		//mcp2515_write(msg->msg_id, MCP2515_TXB0EID0);
        mcp2515_bit_modify(MCP_TXB0DLC, msg->data_length, 0x0F);
        BYTE i;
        for(i = 0; i <  msg->data_length; i++){
     d54:	1f 5f       	subi	r17, 0xFF	; 255
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	18 17       	cp	r17, r24
     d5a:	a0 f3       	brcs	.-24     	; 0xd44 <CAN_message_send+0x22>
                mcp2515_write(msg->data[i], MCP_TXB0D0 + i);
        }
        mcp2515_request_to_send(MCP_RTS_TX0);
     d5c:	81 e8       	ldi	r24, 0x81	; 129
     d5e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mcp2515_request_to_send>
}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	08 95       	ret

00000d6a <CAN_data_receive>:

/****************************************************************************
Call this function to receive a message over the CAN bus. Note that
the interrupt is cleared by bit modification.
****************************************************************************/
void CAN_data_receive(can_message_t* msg) {
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	ec 01       	movw	r28, r24
     d72:	fc 01       	movw	r30, r24
     d74:	32 96       	adiw	r30, 0x02	; 2
     d76:	88 e0       	ldi	r24, 0x08	; 8
        BYTE i;
        for(i = 0; i < 8; i++){
                msg->data[i] = 0;
     d78:	11 92       	st	Z+, r1
     d7a:	81 50       	subi	r24, 0x01	; 1
Call this function to receive a message over the CAN bus. Note that
the interrupt is cleared by bit modification.
****************************************************************************/
void CAN_data_receive(can_message_t* msg) {
        BYTE i;
        for(i = 0; i < 8; i++){
     d7c:	e9 f7       	brne	.-6      	; 0xd78 <CAN_data_receive+0xe>
                msg->data[i] = 0;
        }
        msg->msg_id = mcp2515_read(MCP_RXB0SIDH);
     d7e:	81 e6       	ldi	r24, 0x61	; 97
     d80:	0e 94 e6 06 	call	0xdcc	; 0xdcc <mcp2515_read>
     d84:	88 83       	st	Y, r24
		
		
		char val;
		val = mcp2515_read(MCP2515_RXB0EID0);
     d86:	84 e6       	ldi	r24, 0x64	; 100
     d88:	0e 94 e6 06 	call	0xdcc	; 0xdcc <mcp2515_read>
		if (msg->msg_id ==0)
     d8c:	98 81       	ld	r25, Y
     d8e:	91 11       	cpse	r25, r1
     d90:	01 c0       	rjmp	.+2      	; 0xd94 <CAN_data_receive+0x2a>
		{
			 msg->msg_id  = (msg->msg_id  << 8) | val;
     d92:	88 83       	st	Y, r24
		}
      
		
        msg->data_length = mcp2515_read(MCP_RXB0DLC);
     d94:	85 e6       	ldi	r24, 0x65	; 101
     d96:	0e 94 e6 06 	call	0xdcc	; 0xdcc <mcp2515_read>
     d9a:	89 83       	std	Y+1, r24	; 0x01
        for(i = 0; i < msg->data_length; i++){
     d9c:	88 23       	and	r24, r24
     d9e:	69 f0       	breq	.+26     	; 0xdba <CAN_data_receive+0x50>
     da0:	10 e0       	ldi	r17, 0x00	; 0
                msg->data[i] = mcp2515_read(MCP_RXB0D0 + i);
     da2:	86 e6       	ldi	r24, 0x66	; 102
     da4:	81 0f       	add	r24, r17
     da6:	0e 94 e6 06 	call	0xdcc	; 0xdcc <mcp2515_read>
     daa:	fe 01       	movw	r30, r28
     dac:	e1 0f       	add	r30, r17
     dae:	f1 1d       	adc	r31, r1
     db0:	82 83       	std	Z+2, r24	; 0x02
			 msg->msg_id  = (msg->msg_id  << 8) | val;
		}
      
		
        msg->data_length = mcp2515_read(MCP_RXB0DLC);
        for(i = 0; i < msg->data_length; i++){
     db2:	1f 5f       	subi	r17, 0xFF	; 255
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	18 17       	cp	r17, r24
     db8:	a0 f3       	brcs	.-24     	; 0xda2 <CAN_data_receive+0x38>
                msg->data[i] = mcp2515_read(MCP_RXB0D0 + i);
        }
        //Clear interrupt
        mcp2515_bit_modify(MCP_CANINTF, 0x00, 0x01);
     dba:	41 e0       	ldi	r20, 0x01	; 1
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	8c e2       	ldi	r24, 0x2C	; 44
     dc0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <mcp2515_bit_modify>
        //CAN_int_flag = 0;
}
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	08 95       	ret

00000dcc <mcp2515_read>:
}

/****************************************************************************
Call this function to read from a specified address.
****************************************************************************/
BYTE mcp2515_read(BYTE address){
     dcc:	0f 93       	push	r16
     dce:	1f 93       	push	r17
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	08 2f       	mov	r16, r24
 
        // Chip select
       PORTD.OUTCLR =PIN4_bm;
     dd6:	c0 e6       	ldi	r28, 0x60	; 96
     dd8:	d6 e0       	ldi	r29, 0x06	; 6
     dda:	10 e1       	ldi	r17, 0x10	; 16
     ddc:	1e 83       	std	Y+6, r17	; 0x06
		BYTE result;
        // Write instruction
        SPI_write(0x03);
     dde:	83 e0       	ldi	r24, 0x03	; 3
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
        // Where to read from
        SPI_write(address);
     de6:	80 2f       	mov	r24, r16
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
        result = SPI_read();
     dee:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <SPI_read>
        PORTD.OUTSET =PIN4_bm;
     df2:	1d 83       	std	Y+5, r17	; 0x05
    
        return result;
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	08 95       	ret

00000dfe <mcp2515_write>:
}

/****************************************************************************
Call this function to write a byte to a specified address.
****************************************************************************/
void mcp2515_write(BYTE data, BYTE address){
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	08 2f       	mov	r16, r24
     e0a:	f6 2e       	mov	r15, r22
       
        // Chip select
        PORTD.OUTCLR =PIN4_bm;
     e0c:	c0 e6       	ldi	r28, 0x60	; 96
     e0e:	d6 e0       	ldi	r29, 0x06	; 6
     e10:	10 e1       	ldi	r17, 0x10	; 16
     e12:	1e 83       	std	Y+6, r17	; 0x06
        // Write instruction
        SPI_write(MCP_WRITE);
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
        // Where to write to
        SPI_write(address);
     e1c:	8f 2d       	mov	r24, r15
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
        // What to send
        SPI_write(data);
     e24:	80 2f       	mov	r24, r16
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
        // Chip unselect
        PORTD.OUTSET =PIN4_bm;
     e2c:	1d 83       	std	Y+5, r17	; 0x05
       
}
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	08 95       	ret

00000e3a <mcp2515_read_register>:

uint8_t mcp2515_read_register(uint8_t address)
{
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	08 2f       	mov	r16, r24
	uint8_t data;

	PORTD.OUTCLR =PIN4_bm;
     e44:	c0 e6       	ldi	r28, 0x60	; 96
     e46:	d6 e0       	ldi	r29, 0x06	; 6
     e48:	10 e1       	ldi	r17, 0x10	; 16
     e4a:	1e 83       	std	Y+6, r17	; 0x06
	SPI_write(MCP2515_SPI_READ);     //READ Instruction
     e4c:	83 e0       	ldi	r24, 0x03	; 3
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
	SPI_write(address);
     e54:	80 2f       	mov	r24, r16
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
	data=SPI_read();
     e5c:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <SPI_read>
	PORTD.OUTSET =PIN4_bm;
     e60:	1d 83       	std	Y+5, r17	; 0x05

	return data;
}
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	08 95       	ret

00000e6c <CAN_MCP2515_clearRxBuffers>:
}

//At power up, MCP2515 buffers are not truly empty. There is random data in the registers
//This loads buffers with zeros to prevent incorrect data to be sent.
void CAN_MCP2515_clearRxBuffers()
{
     e6c:	cf 93       	push	r28
	PORTD.OUTCLR =PIN4_bm;
     e6e:	80 e1       	ldi	r24, 0x10	; 16
     e70:	e0 e6       	ldi	r30, 0x60	; 96
     e72:	f6 e0       	ldi	r31, 0x06	; 6
     e74:	86 83       	std	Z+6, r24	; 0x06
	SPI_write(MCP2515_SPI_WRITE);
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
	SPI_write(MCP2515_RXB0SIDH);
     e7e:	81 e6       	ldi	r24, 0x61	; 97
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
     e86:	cd e0       	ldi	r28, 0x0D	; 13
	for (uint8_t i = 0; i < 13; i++)
	{
		SPI_write(0x00);
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
     e90:	c1 50       	subi	r28, 0x01	; 1
void CAN_MCP2515_clearRxBuffers()
{
	PORTD.OUTCLR =PIN4_bm;
	SPI_write(MCP2515_SPI_WRITE);
	SPI_write(MCP2515_RXB0SIDH);
	for (uint8_t i = 0; i < 13; i++)
     e92:	d1 f7       	brne	.-12     	; 0xe88 <CAN_MCP2515_clearRxBuffers+0x1c>
	{
		SPI_write(0x00);
	}
	PORTD.OUTSET =PIN4_bm;
     e94:	e0 e6       	ldi	r30, 0x60	; 96
     e96:	f6 e0       	ldi	r31, 0x06	; 6
     e98:	80 e1       	ldi	r24, 0x10	; 16
     e9a:	85 83       	std	Z+5, r24	; 0x05
	PORTD.OUTCLR =PIN4_bm;;
     e9c:	86 83       	std	Z+6, r24	; 0x06
	SPI_write (MCP2515_SPI_WRITE);
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
	SPI_write(MCP2515_RXB1SIDH);
     ea6:	81 e7       	ldi	r24, 0x71	; 113
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
     eae:	cd e0       	ldi	r28, 0x0D	; 13
	for (uint8_t i = 0; i < 13; i++)
	{
		SPI_write(0x00);
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
     eb8:	c1 50       	subi	r28, 0x01	; 1
	}
	PORTD.OUTSET =PIN4_bm;
	PORTD.OUTCLR =PIN4_bm;;
	SPI_write (MCP2515_SPI_WRITE);
	SPI_write(MCP2515_RXB1SIDH);
	for (uint8_t i = 0; i < 13; i++)
     eba:	d1 f7       	brne	.-12     	; 0xeb0 <CAN_MCP2515_clearRxBuffers+0x44>
	{
		SPI_write(0x00);
	}
		PORTD.OUTSET =PIN4_bm;
     ebc:	80 e1       	ldi	r24, 0x10	; 16
     ebe:	e0 e6       	ldi	r30, 0x60	; 96
     ec0:	f6 e0       	ldi	r31, 0x06	; 6
     ec2:	85 83       	std	Z+5, r24	; 0x05
}
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <CAN_MCP2515_clearTxBuffers>:

// This loads buffers with zeros to prevent incorrect data to be sent.
// Note: If RTS is sent to a buffer that has all zeros it will still send a message with all zeros.
void CAN_MCP2515_clearTxBuffers()
{
     ec8:	cf 93       	push	r28
	PORTD.OUTCLR =PIN4_bm;;
     eca:	80 e1       	ldi	r24, 0x10	; 16
     ecc:	e0 e6       	ldi	r30, 0x60	; 96
     ece:	f6 e0       	ldi	r31, 0x06	; 6
     ed0:	86 83       	std	Z+6, r24	; 0x06
	SPI_write(MCP2515_SPI_WRITE);
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
	SPI_write(MCP2515_TXB0SIDH);
     eda:	81 e3       	ldi	r24, 0x31	; 49
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
     ee2:	cd e0       	ldi	r28, 0x0D	; 13
	for (uint8_t i = 0; i < 13; i++)
	{
		SPI_write(0x00);
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
     eec:	c1 50       	subi	r28, 0x01	; 1
void CAN_MCP2515_clearTxBuffers()
{
	PORTD.OUTCLR =PIN4_bm;;
	SPI_write(MCP2515_SPI_WRITE);
	SPI_write(MCP2515_TXB0SIDH);
	for (uint8_t i = 0; i < 13; i++)
     eee:	d1 f7       	brne	.-12     	; 0xee4 <CAN_MCP2515_clearTxBuffers+0x1c>
	{
		SPI_write(0x00);
	}
	PORTD.OUTSET =PIN4_bm;
     ef0:	e0 e6       	ldi	r30, 0x60	; 96
     ef2:	f6 e0       	ldi	r31, 0x06	; 6
     ef4:	80 e1       	ldi	r24, 0x10	; 16
     ef6:	85 83       	std	Z+5, r24	; 0x05
	PORTD.OUTCLR =PIN4_bm;;
     ef8:	86 83       	std	Z+6, r24	; 0x06
	SPI_write (MCP2515_SPI_WRITE);
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
	SPI_write (MCP2515_TXB1SIDH);
     f02:	81 e4       	ldi	r24, 0x41	; 65
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
     f0a:	cd e0       	ldi	r28, 0x0D	; 13
	for (uint8_t i = 0; i < 13; i++)
	{
	  SPI_write(0x00);
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
     f14:	c1 50       	subi	r28, 0x01	; 1
	}
	PORTD.OUTSET =PIN4_bm;
	PORTD.OUTCLR =PIN4_bm;;
	SPI_write (MCP2515_SPI_WRITE);
	SPI_write (MCP2515_TXB1SIDH);
	for (uint8_t i = 0; i < 13; i++)
     f16:	d1 f7       	brne	.-12     	; 0xf0c <CAN_MCP2515_clearTxBuffers+0x44>
	{
	  SPI_write(0x00);
	}
	PORTD.OUTSET =PIN4_bm;
     f18:	e0 e6       	ldi	r30, 0x60	; 96
     f1a:	f6 e0       	ldi	r31, 0x06	; 6
     f1c:	80 e1       	ldi	r24, 0x10	; 16
     f1e:	85 83       	std	Z+5, r24	; 0x05
	PORTD.OUTCLR =PIN4_bm;	
     f20:	86 83       	std	Z+6, r24	; 0x06
	
	SPI_write (MCP2515_SPI_WRITE);
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
	SPI_write (MCP2515_TXB2SIDH);
     f2a:	81 e5       	ldi	r24, 0x51	; 81
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
     f32:	cd e0       	ldi	r28, 0x0D	; 13
	for (uint8_t i = 0; i < 13; i++)
	{
		SPI_write(0x00);
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
     f3c:	c1 50       	subi	r28, 0x01	; 1
	PORTD.OUTSET =PIN4_bm;
	PORTD.OUTCLR =PIN4_bm;	
	
	SPI_write (MCP2515_SPI_WRITE);
	SPI_write (MCP2515_TXB2SIDH);
	for (uint8_t i = 0; i < 13; i++)
     f3e:	d1 f7       	brne	.-12     	; 0xf34 <CAN_MCP2515_clearTxBuffers+0x6c>
	{
		SPI_write(0x00);
	}
	PORTD.OUTSET =PIN4_bm;
     f40:	80 e1       	ldi	r24, 0x10	; 16
     f42:	e0 e6       	ldi	r30, 0x60	; 96
     f44:	f6 e0       	ldi	r31, 0x06	; 6
     f46:	85 83       	std	Z+5, r24	; 0x05
}
     f48:	cf 91       	pop	r28
     f4a:	08 95       	ret

00000f4c <mcp2515_request_to_send>:
Call this function to send from a specified buffer.
****************************************************************************/
void mcp2515_request_to_send(BYTE rts_buffer)
{
        // Chip select
        PORTD.OUTCLR =PIN4_bm;
     f4c:	90 e1       	ldi	r25, 0x10	; 16
     f4e:	e0 e6       	ldi	r30, 0x60	; 96
     f50:	f6 e0       	ldi	r31, 0x06	; 6
     f52:	96 83       	std	Z+6, r25	; 0x06
        // Write instruction
        switch(rts_buffer){
     f54:	82 38       	cpi	r24, 0x82	; 130
     f56:	71 f0       	breq	.+28     	; 0xf74 <mcp2515_request_to_send+0x28>
     f58:	18 f4       	brcc	.+6      	; 0xf60 <mcp2515_request_to_send+0x14>
     f5a:	81 38       	cpi	r24, 0x81	; 129
     f5c:	31 f0       	breq	.+12     	; 0xf6a <mcp2515_request_to_send+0x1e>
     f5e:	18 c0       	rjmp	.+48     	; 0xf90 <mcp2515_request_to_send+0x44>
     f60:	84 38       	cpi	r24, 0x84	; 132
     f62:	69 f0       	breq	.+26     	; 0xf7e <mcp2515_request_to_send+0x32>
     f64:	87 38       	cpi	r24, 0x87	; 135
     f66:	81 f0       	breq	.+32     	; 0xf88 <mcp2515_request_to_send+0x3c>
     f68:	13 c0       	rjmp	.+38     	; 0xf90 <mcp2515_request_to_send+0x44>
                case MCP_RTS_TX0:
                        SPI_write(MCP_RTS_TX0);
     f6a:	81 e8       	ldi	r24, 0x81	; 129
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
                        break;
     f72:	0e c0       	rjmp	.+28     	; 0xf90 <mcp2515_request_to_send+0x44>
                case MCP_RTS_TX1:
                        SPI_write(MCP_RTS_TX1);
     f74:	82 e8       	ldi	r24, 0x82	; 130
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
                        break;
     f7c:	09 c0       	rjmp	.+18     	; 0xf90 <mcp2515_request_to_send+0x44>
                case MCP_RTS_TX2:
                        SPI_write(MCP_RTS_TX2);
     f7e:	84 e8       	ldi	r24, 0x84	; 132
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
                        break;
     f86:	04 c0       	rjmp	.+8      	; 0xf90 <mcp2515_request_to_send+0x44>
                case MCP_RTS_ALL:
                        SPI_write(MCP_RTS_ALL);
     f88:	87 e8       	ldi	r24, 0x87	; 135
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
                        break;
        }
        // Chip Unselect
        PORTD.OUTSET =PIN4_bm;
     f90:	80 e1       	ldi	r24, 0x10	; 16
     f92:	e0 e6       	ldi	r30, 0x60	; 96
     f94:	f6 e0       	ldi	r31, 0x06	; 6
     f96:	85 83       	std	Z+5, r24	; 0x05
     f98:	08 95       	ret

00000f9a <mcp2515_bit_modify>:

/****************************************************************************
Call this function to bit modify a specified buffer
****************************************************************************/
void mcp2515_bit_modify(BYTE address, uint8_t data, BYTE mask)
{
     f9a:	ef 92       	push	r14
     f9c:	ff 92       	push	r15
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	e8 2e       	mov	r14, r24
     fa8:	06 2f       	mov	r16, r22
     faa:	f4 2e       	mov	r15, r20
        // Chip Select
        PORTD.OUTCLR =PIN4_bm;
     fac:	c0 e6       	ldi	r28, 0x60	; 96
     fae:	d6 e0       	ldi	r29, 0x06	; 6
     fb0:	10 e1       	ldi	r17, 0x10	; 16
     fb2:	1e 83       	std	Y+6, r17	; 0x06
        // Write instruction
        SPI_write(MCP_BITMOD);
     fb4:	85 e0       	ldi	r24, 0x05	; 5
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
        // Write address
        SPI_write(address);             // Where we will change bits
     fbc:	8e 2d       	mov	r24, r14
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
		// Write mask
        SPI_write(mask);                // Which bits are allowed to change
     fc4:	8f 2d       	mov	r24, r15
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
		// Write data
        SPI_write(data);                // Which bits we will change to
     fcc:	80 2f       	mov	r24, r16
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
        // Chip Unselect
        PORTD.OUTSET =PIN4_bm;
     fd4:	1d 83       	std	Y+5, r17	; 0x05
}
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	08 95       	ret

00000fe4 <mcp2515_reset>:

/****************************************************************************
Call this function to reset the mcp2515
****************************************************************************/
void mcp2515_reset()
{
     fe4:	1f 93       	push	r17
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
        // Chip select
        PORTD.OUTCLR =PIN4_bm;
     fea:	c0 e6       	ldi	r28, 0x60	; 96
     fec:	d6 e0       	ldi	r29, 0x06	; 6
     fee:	10 e1       	ldi	r17, 0x10	; 16
     ff0:	1e 83       	std	Y+6, r17	; 0x06
        // Write instruction
        SPI_write(MCP2515_SPI_RESET);
     ff2:	80 ec       	ldi	r24, 0xC0	; 192
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
        // Chip unselect
        PORTD.OUTSET =PIN4_bm;
     ffa:	1d 83       	std	Y+5, r17	; 0x05
}
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	08 95       	ret

00001004 <mcp2515_init>:
/****************************************************************************
Call this function to set up the mcp2515 to its initial standby state.
****************************************************************************/
BYTE mcp2515_init(){    
	 
        SPI_init();		
    1004:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <SPI_init>
        mcp2515_reset();       
    1008:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <mcp2515_reset>
        return 0;
}
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	08 95       	ret

00001010 <can_queue_Enqueue>:
// Two glboal variables to store address of front and rear nodes.
struct Node* front = NULL;
struct Node* rear = NULL;

// To Enqueue an integer
void can_queue_Enqueue(can_message_t x) {
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	2a 97       	sbiw	r28, 0x0a	; 10
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	09 83       	std	Y+1, r16	; 0x01
    1024:	1a 83       	std	Y+2, r17	; 0x02
    1026:	2b 83       	std	Y+3, r18	; 0x03
    1028:	3c 83       	std	Y+4, r19	; 0x04
    102a:	4d 83       	std	Y+5, r20	; 0x05
    102c:	5e 83       	std	Y+6, r21	; 0x06
    102e:	6f 83       	std	Y+7, r22	; 0x07
    1030:	78 87       	std	Y+8, r23	; 0x08
    1032:	89 87       	std	Y+9, r24	; 0x09
    1034:	9a 87       	std	Y+10, r25	; 0x0a
	struct Node* temp =
    1036:	8c e0       	ldi	r24, 0x0C	; 12
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <malloc>
	(struct Node*)malloc(sizeof(struct Node));
	temp->data =x;
    103e:	2a e0       	ldi	r18, 0x0A	; 10
    1040:	fe 01       	movw	r30, r28
    1042:	31 96       	adiw	r30, 0x01	; 1
    1044:	dc 01       	movw	r26, r24
    1046:	01 90       	ld	r0, Z+
    1048:	0d 92       	st	X+, r0
    104a:	2a 95       	dec	r18
    104c:	e1 f7       	brne	.-8      	; 0x1046 <can_queue_Enqueue+0x36>
	temp->next = NULL;
    104e:	fc 01       	movw	r30, r24
    1050:	12 86       	std	Z+10, r1	; 0x0a
    1052:	13 86       	std	Z+11, r1	; 0x0b
	if(front == NULL && rear == NULL){
    1054:	20 91 72 22 	lds	r18, 0x2272
    1058:	30 91 73 22 	lds	r19, 0x2273
    105c:	23 2b       	or	r18, r19
    105e:	79 f4       	brne	.+30     	; 0x107e <can_queue_Enqueue+0x6e>
    1060:	20 91 70 22 	lds	r18, 0x2270
    1064:	30 91 71 22 	lds	r19, 0x2271
    1068:	23 2b       	or	r18, r19
    106a:	49 f4       	brne	.+18     	; 0x107e <can_queue_Enqueue+0x6e>
		front = rear = temp;
    106c:	80 93 70 22 	sts	0x2270, r24
    1070:	90 93 71 22 	sts	0x2271, r25
    1074:	80 93 72 22 	sts	0x2272, r24
    1078:	90 93 73 22 	sts	0x2273, r25
		return;
    107c:	0a c0       	rjmp	.+20     	; 0x1092 <can_queue_Enqueue+0x82>
	}
	rear->next = temp;
    107e:	e0 91 70 22 	lds	r30, 0x2270
    1082:	f0 91 71 22 	lds	r31, 0x2271
    1086:	82 87       	std	Z+10, r24	; 0x0a
    1088:	93 87       	std	Z+11, r25	; 0x0b
	rear = temp;
    108a:	80 93 70 22 	sts	0x2270, r24
    108e:	90 93 71 22 	sts	0x2271, r25
}
    1092:	2a 96       	adiw	r28, 0x0a	; 10
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	08 95       	ret

000010a2 <can_queue_Dequeue>:

// To Dequeue an integer.
void can_queue_Dequeue() {
	struct Node* temp = front;
    10a2:	80 91 72 22 	lds	r24, 0x2272
    10a6:	90 91 73 22 	lds	r25, 0x2273
	if(front == NULL) {
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	c9 f0       	breq	.+50     	; 0x10e0 <can_queue_Dequeue+0x3e>

		return;
	}
	if(front == rear) {
    10ae:	20 91 70 22 	lds	r18, 0x2270
    10b2:	30 91 71 22 	lds	r19, 0x2271
    10b6:	82 17       	cp	r24, r18
    10b8:	93 07       	cpc	r25, r19
    10ba:	49 f4       	brne	.+18     	; 0x10ce <can_queue_Dequeue+0x2c>
		front = rear = NULL;
    10bc:	10 92 70 22 	sts	0x2270, r1
    10c0:	10 92 71 22 	sts	0x2271, r1
    10c4:	10 92 72 22 	sts	0x2272, r1
    10c8:	10 92 73 22 	sts	0x2273, r1
    10cc:	07 c0       	rjmp	.+14     	; 0x10dc <can_queue_Dequeue+0x3a>
	}
	else {
		front = front->next;
    10ce:	fc 01       	movw	r30, r24
    10d0:	22 85       	ldd	r18, Z+10	; 0x0a
    10d2:	33 85       	ldd	r19, Z+11	; 0x0b
    10d4:	20 93 72 22 	sts	0x2272, r18
    10d8:	30 93 73 22 	sts	0x2273, r19
	}
	free(temp);
    10dc:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <free>
    10e0:	08 95       	ret

000010e2 <can_queue_Front>:
}

can_message_t can_queue_Front() {
	if(front == NULL) {
    10e2:	e0 91 72 22 	lds	r30, 0x2272
    10e6:	f0 91 73 22 	lds	r31, 0x2273
    10ea:	30 97       	sbiw	r30, 0x00	; 0
    10ec:	21 f4       	brne	.+8      	; 0x10f6 <can_queue_Front+0x14>
		
		can_message_t emp;
		emp.msg_id=0xFF;
		return emp;
    10ee:	2f ef       	ldi	r18, 0xFF	; 255
    10f0:	fc 01       	movw	r30, r24
    10f2:	20 83       	st	Z, r18
    10f4:	08 95       	ret
	}
	return front->data;
    10f6:	2a e0       	ldi	r18, 0x0A	; 10
    10f8:	dc 01       	movw	r26, r24
    10fa:	01 90       	ld	r0, Z+
    10fc:	0d 92       	st	X+, r0
    10fe:	2a 95       	dec	r18
    1100:	e1 f7       	brne	.-8      	; 0x10fa <can_queue_Front+0x18>
}
    1102:	08 95       	ret

00001104 <can_queue_is_empty>:
int can_queue_is_empty()
{
		if(front == NULL) {
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	20 91 72 22 	lds	r18, 0x2272
    110c:	30 91 73 22 	lds	r19, 0x2273
    1110:	23 2b       	or	r18, r19
    1112:	11 f0       	breq	.+4      	; 0x1118 <can_queue_is_empty+0x14>
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
			//printf("Queue is empty\n");
			return 1;
		}
		return 0;
}
    1118:	08 95       	ret

0000111a <uart_putchar>:
	}
}


static int uart_putchar (char c, FILE *stream)
{
    111a:	cf 93       	push	r28
    111c:	c8 2f       	mov	r28, r24
    if (c == '\n')
    111e:	8a 30       	cpi	r24, 0x0A	; 10
    1120:	19 f4       	brne	.+6      	; 0x1128 <uart_putchar+0xe>
    uart_putchar('\r', stream);
    1122:	8d e0       	ldi	r24, 0x0D	; 13
    1124:	0e 94 8d 08 	call	0x111a	; 0x111a <uart_putchar>
     
    // Wait for the transmit buffer to be empty
    while (  !(USARTE0_STATUS & USART_DREIF_bm) );
    1128:	e1 ea       	ldi	r30, 0xA1	; 161
    112a:	fa e0       	ldi	r31, 0x0A	; 10
    112c:	90 81       	ld	r25, Z
    112e:	95 ff       	sbrs	r25, 5
    1130:	fd cf       	rjmp	.-6      	; 0x112c <uart_putchar+0x12>
     
    // Put our character into the transmit buffer
    USARTE0_DATA = c;
    1132:	c0 93 a0 0a 	sts	0x0AA0, r28
	
	
    return 0;
}
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <uart_getchar>:

int uart_getchar(FILE *stream)
{
    113e:	cf 93       	push	r28
    1140:	bc 01       	movw	r22, r24
    while( !(USARTE0_STATUS & USART_RXCIF_bm) ); //Wait until data has been received.
    1142:	e1 ea       	ldi	r30, 0xA1	; 161
    1144:	fa e0       	ldi	r31, 0x0A	; 10
    1146:	80 81       	ld	r24, Z
    1148:	88 23       	and	r24, r24
    114a:	ec f7       	brge	.-6      	; 0x1146 <uart_getchar+0x8>
    char data = USARTE0_DATA; //Temporarly store received data
    114c:	c0 91 a0 0a 	lds	r28, 0x0AA0
    if(data == '\r')
    1150:	cd 30       	cpi	r28, 0x0D	; 13
    1152:	09 f4       	brne	.+2      	; 0x1156 <uart_getchar+0x18>
        data = '\n';    
    1154:	ca e0       	ldi	r28, 0x0A	; 10
    uart_putchar(data, stream); //Send to console what has been received, so we can see when typing
    1156:	8c 2f       	mov	r24, r28
    1158:	0e 94 8d 08 	call	0x111a	; 0x111a <uart_putchar>
    return data;        
}
    115c:	8c 2f       	mov	r24, r28
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	cf 91       	pop	r28
    1162:	08 95       	ret

00001164 <setClockTo32MHz>:
	// 	CCP = CCP_IOREG_gc;              // disable register security for oscillator update
	// 	OSC.CTRL = OSC_RC32MEN_bm;       // enable 32MHz oscillator
	// 	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); // wait for oscillator to be ready
	// 	CCP = CCP_IOREG_gc;              // disable register security for clock update
	// 	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; // switch to 32MHz clock
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc ;
    1164:	e0 e5       	ldi	r30, 0x50	; 80
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	8b ec       	ldi	r24, 0xCB	; 203
    116a:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_XOSCEN_bm ; // enable it
    116c:	80 81       	ld	r24, Z
    116e:	88 60       	ori	r24, 0x08	; 8
    1170:	80 83       	st	Z, r24
	while( (OSC.STATUS & OSC_XOSCRDY_bm) == 0 ){} // wait until it's stable
    1172:	81 81       	ldd	r24, Z+1	; 0x01
    1174:	83 ff       	sbrs	r24, 3
    1176:	fd cf       	rjmp	.-6      	; 0x1172 <setClockTo32MHz+0xe>

	// The external crystal is now running and stable.
	// (Note that it's not yet selected as the clock source)
	// Now configure the PLL to be eXternal oscillator * 2
	OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | 2 ;
    1178:	e0 e5       	ldi	r30, 0x50	; 80
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	82 ec       	ldi	r24, 0xC2	; 194
    117e:	85 83       	std	Z+5, r24	; 0x05

	// now enable the PLL...
	OSC.CTRL |= OSC_PLLEN_bm ; // enable the PLL...
    1180:	80 81       	ld	r24, Z
    1182:	80 61       	ori	r24, 0x10	; 16
    1184:	80 83       	st	Z, r24
	while( (OSC.STATUS & OSC_PLLRDY_bm) == 0 ){} // wait until it's stable
    1186:	81 81       	ldd	r24, Z+1	; 0x01
    1188:	84 ff       	sbrs	r24, 4
    118a:	fd cf       	rjmp	.-6      	; 0x1186 <setClockTo32MHz+0x22>

	// And now, *finally*, we can switch from the internal 2Mhz clock to the PLL
	CCP = CCP_IOREG_gc;	// protected write follows
    118c:	88 ed       	ldi	r24, 0xD8	; 216
    118e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_PLL_gc;	// The System clock is now  PLL (16Mhz * 2)
    1190:	84 e0       	ldi	r24, 0x04	; 4
    1192:	80 93 40 00 	sts	0x0040, r24
    1196:	08 95       	ret

00001198 <send_data_to_pi>:
  }
   
}
/** Send a mode pacet for pi i band*/ 
void send_data_to_pi()
{
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	2a 97       	sbiw	r28, 0x0a	; 10
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	de bf       	out	0x3e, r29	; 62
	can_message_t  pimsg;
	pimsg.msg_id=200;
	pimsg.data_length=7;
	pimsg.data[0] = 252;
	/* send band in 16 bit over can*/
	pimsg.data[1] = (rs232radio.band& 0xFF);
    11ac:	80 91 7c 26 	lds	r24, 0x267C
    11b0:	90 91 7d 26 	lds	r25, 0x267D
    11b4:	a0 91 7e 26 	lds	r26, 0x267E
    11b8:	b0 91 7f 26 	lds	r27, 0x267F
	pimsg.data[2] = (rs232radio.band >>8);
    11bc:	49 2f       	mov	r20, r25
    11be:	5a 2f       	mov	r21, r26
    11c0:	6b 2f       	mov	r22, r27
    11c2:	77 27       	eor	r23, r23
	pimsg.data[3] = rs232radio.meter;
    11c4:	f0 90 80 26 	lds	r15, 0x2680
	pimsg.data[4] = rs232radio.ptt;
    11c8:	f0 91 84 26 	lds	r31, 0x2684
	pimsg.data[5] = rs232radio.amp_id;
    11cc:	e0 91 88 26 	lds	r30, 0x2688
	pimsg.data[6] = rs232radio.mode_id;

	
	can_queue_Enqueue(pimsg);
    11d0:	08 ec       	ldi	r16, 0xC8	; 200
    11d2:	17 e0       	ldi	r17, 0x07	; 7
    11d4:	2c ef       	ldi	r18, 0xFC	; 252
    11d6:	38 2f       	mov	r19, r24
    11d8:	5f 2d       	mov	r21, r15
    11da:	6f 2f       	mov	r22, r31
    11dc:	7e 2f       	mov	r23, r30
    11de:	80 91 86 26 	lds	r24, 0x2686
    11e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e4:	0e 94 08 08 	call	0x1010	; 0x1010 <can_queue_Enqueue>
	
	
}
    11e8:	2a 96       	adiw	r28, 0x0a	; 10
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	ff 90       	pop	r15
    11f8:	08 95       	ret

000011fa <send_data_to_freq>:
/** create a 32bit int from freq to send to canbus for freq*/ 
void send_data_to_freq()
{	
    11fa:	8f 92       	push	r8
    11fc:	9f 92       	push	r9
    11fe:	af 92       	push	r10
    1200:	bf 92       	push	r11
    1202:	cf 92       	push	r12
    1204:	df 92       	push	r13
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	2a 97       	sbiw	r28, 0x0a	; 10
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	de bf       	out	0x3e, r29	; 62
		/** create a 32bit int to send to pi for freq*/ 
		uint32_t Freq_to_send;
		Freq_to_send= rs232radio.freqvensy;
    121c:	ec e8       	ldi	r30, 0x8C	; 140
    121e:	f6 e2       	ldi	r31, 0x26	; 38
    1220:	30 81       	ld	r19, Z
    1222:	83 2f       	mov	r24, r19
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	a2 81       	ldd	r26, Z+2	; 0x02
    1228:	b3 81       	ldd	r27, Z+3	; 0x03
		can_message_t  pimsg;
		pimsg.msg_id=200;
		pimsg.data_length=5;
		pimsg.data[0]= 253;
		pimsg.data[1]= Freq_to_send;
		pimsg.data[2]= Freq_to_send >> 8;
    122a:	89 2e       	mov	r8, r25
    122c:	9a 2e       	mov	r9, r26
    122e:	ab 2e       	mov	r10, r27
    1230:	bb 24       	eor	r11, r11
		pimsg.data[3]= Freq_to_send >> 16;
    1232:	6d 01       	movw	r12, r26
    1234:	ee 24       	eor	r14, r14
    1236:	ff 24       	eor	r15, r15
		pimsg.data[4]= Freq_to_send >> 24;
    1238:	6b 2f       	mov	r22, r27
    123a:	77 27       	eor	r23, r23
    123c:	88 27       	eor	r24, r24
    123e:	99 27       	eor	r25, r25
		can_queue_Enqueue(pimsg);
    1240:	08 ec       	ldi	r16, 0xC8	; 200
    1242:	15 e0       	ldi	r17, 0x05	; 5
    1244:	2d ef       	ldi	r18, 0xFD	; 253
    1246:	48 2d       	mov	r20, r8
    1248:	5c 2d       	mov	r21, r12
    124a:	78 85       	ldd	r23, Y+8	; 0x08
    124c:	89 85       	ldd	r24, Y+9	; 0x09
    124e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1250:	0e 94 08 08 	call	0x1010	; 0x1010 <can_queue_Enqueue>
	

}
    1254:	2a 96       	adiw	r28, 0x0a	; 10
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	ff 90       	pop	r15
    1264:	ef 90       	pop	r14
    1266:	df 90       	pop	r13
    1268:	cf 90       	pop	r12
    126a:	bf 90       	pop	r11
    126c:	af 90       	pop	r10
    126e:	9f 90       	pop	r9
    1270:	8f 90       	pop	r8
    1272:	08 95       	ret

00001274 <send_data_on_canbus>:
/**
Sending the CAN Buss messasge to MCP2515 with a delay
*/
void send_data_on_canbus()
{
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	64 97       	sbiw	r28, 0x14	; 20
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	de bf       	out	0x3e, r29	; 62
	if (can_queue_is_empty() ==0)
    1282:	0e 94 82 08 	call	0x1104	; 0x1104 <can_queue_is_empty>
    1286:	89 2b       	or	r24, r25
    1288:	99 f4       	brne	.+38     	; 0x12b0 <send_data_on_canbus+0x3c>
	{
		//printf("send_data\n");
		can_message_t send;
		send = can_queue_Front();
    128a:	ce 01       	movw	r24, r28
    128c:	0b 96       	adiw	r24, 0x0b	; 11
    128e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <can_queue_Front>
    1292:	8a e0       	ldi	r24, 0x0A	; 10
    1294:	fe 01       	movw	r30, r28
    1296:	3b 96       	adiw	r30, 0x0b	; 11
    1298:	de 01       	movw	r26, r28
    129a:	11 96       	adiw	r26, 0x01	; 1
    129c:	01 90       	ld	r0, Z+
    129e:	0d 92       	st	X+, r0
    12a0:	8a 95       	dec	r24
    12a2:	e1 f7       	brne	.-8      	; 0x129c <send_data_on_canbus+0x28>
		//printf("%i\n",send.data[0]);
		CAN_message_send(&send);
    12a4:	ce 01       	movw	r24, r28
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	0e 94 91 06 	call	0xd22	; 0xd22 <CAN_message_send>
		can_queue_Dequeue();
    12ac:	0e 94 51 08 	call	0x10a2	; 0x10a2 <can_queue_Dequeue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12b0:	2f ef       	ldi	r18, 0xFF	; 255
    12b2:	89 ef       	ldi	r24, 0xF9	; 249
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	21 50       	subi	r18, 0x01	; 1
    12b8:	80 40       	sbci	r24, 0x00	; 0
    12ba:	90 40       	sbci	r25, 0x00	; 0
    12bc:	e1 f7       	brne	.-8      	; 0x12b6 <send_data_on_canbus+0x42>
    12be:	00 c0       	rjmp	.+0      	; 0x12c0 <send_data_on_canbus+0x4c>
    12c0:	00 00       	nop
	}
	
	_delay_ms(10);
}
    12c2:	64 96       	adiw	r28, 0x14	; 20
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	08 95       	ret

000012ce <send_tx_message>:
/*
Sending the PTT message to the system uniterupted
*/
void send_tx_message(int unit)
{
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	2a 97       	sbiw	r28, 0x0a	; 10
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	de bf       	out	0x3e, r29	; 62
		can_message_t send;
		send.msg_id=1;
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	99 83       	std	Y+1, r25	; 0x01
		send.data_length=2;
    12e0:	22 e0       	ldi	r18, 0x02	; 2
    12e2:	2a 83       	std	Y+2, r18	; 0x02
		send.data[0]=unit;
    12e4:	8b 83       	std	Y+3, r24	; 0x03
		send.data[1]=1;
    12e6:	9c 83       	std	Y+4, r25	; 0x04
		CAN_message_send(&send);
    12e8:	ce 01       	movw	r24, r28
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	0e 94 91 06 	call	0xd22	; 0xd22 <CAN_message_send>
    12f0:	8f e3       	ldi	r24, 0x3F	; 63
    12f2:	9c e9       	ldi	r25, 0x9C	; 156
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	f1 f7       	brne	.-4      	; 0x12f4 <send_tx_message+0x26>
    12f8:	00 c0       	rjmp	.+0      	; 0x12fa <send_tx_message+0x2c>
    12fa:	00 00       	nop
		_delay_ms(5);
}
    12fc:	2a 96       	adiw	r28, 0x0a	; 10
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret

00001308 <send_stoptx_message>:
void send_stoptx_message(int unit)
{
    1308:	0f 93       	push	r16
    130a:	1f 93       	push	r17
    130c:	cf 93       	push	r28
    130e:	df 93       	push	r29
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	2a 97       	sbiw	r28, 0x0a	; 10
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	de bf       	out	0x3e, r29	; 62
	can_message_t send;
	send.msg_id=1;
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	99 83       	std	Y+1, r25	; 0x01
	send.data_length=2;
    131e:	92 e0       	ldi	r25, 0x02	; 2
    1320:	9a 83       	std	Y+2, r25	; 0x02
	send.data[0]=unit;
    1322:	8b 83       	std	Y+3, r24	; 0x03
	send.data[1]=2;
    1324:	9c 83       	std	Y+4, r25	; 0x04
	can_queue_Enqueue(send);
    1326:	01 e0       	ldi	r16, 0x01	; 1
    1328:	12 e0       	ldi	r17, 0x02	; 2
    132a:	28 2f       	mov	r18, r24
    132c:	32 e0       	ldi	r19, 0x02	; 2
    132e:	4d 81       	ldd	r20, Y+5	; 0x05
    1330:	5e 81       	ldd	r21, Y+6	; 0x06
    1332:	6f 81       	ldd	r22, Y+7	; 0x07
    1334:	78 85       	ldd	r23, Y+8	; 0x08
    1336:	89 85       	ldd	r24, Y+9	; 0x09
    1338:	9a 85       	ldd	r25, Y+10	; 0x0a
    133a:	0e 94 08 08 	call	0x1010	; 0x1010 <can_queue_Enqueue>
    133e:	8f e3       	ldi	r24, 0x3F	; 63
    1340:	9c e9       	ldi	r25, 0x9C	; 156
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	f1 f7       	brne	.-4      	; 0x1342 <send_stoptx_message+0x3a>
    1346:	00 c0       	rjmp	.+0      	; 0x1348 <send_stoptx_message+0x40>
    1348:	00 00       	nop
	_delay_ms(5);
}
    134a:	2a 96       	adiw	r28, 0x0a	; 10
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	08 95       	ret

0000135a <trasmit_slide>:

void trasmit_slide()
{
    135a:	4f 92       	push	r4
    135c:	5f 92       	push	r5
    135e:	6f 92       	push	r6
    1360:	7f 92       	push	r7
    1362:	8f 92       	push	r8
    1364:	9f 92       	push	r9
    1366:	af 92       	push	r10
    1368:	bf 92       	push	r11
    136a:	cf 92       	push	r12
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	64 97       	sbiw	r28, 0x14	; 20
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	de bf       	out	0x3e, r29	; 62
		u8g_FirstPage(&u8g);
    1384:	85 ed       	ldi	r24, 0xD5	; 213
    1386:	95 e2       	ldi	r25, 0x25	; 37
    1388:	0e 94 6d 29 	call	0x52da	; 0x52da <u8g_FirstPage>
		//float procennt_fwd =200/amplifier.power_max;
		double procennt_fwd =(100 * amplifier.power_fwd) / amplifier.power_max;
    138c:	c0 90 74 26 	lds	r12, 0x2674
    1390:	d0 90 75 26 	lds	r13, 0x2675
    1394:	20 91 70 26 	lds	r18, 0x2670
    1398:	30 91 71 26 	lds	r19, 0x2671
    139c:	04 e6       	ldi	r16, 0x64	; 100
    139e:	02 9f       	mul	r16, r18
    13a0:	c0 01       	movw	r24, r0
    13a2:	03 9f       	mul	r16, r19
    13a4:	90 0d       	add	r25, r0
    13a6:	11 24       	eor	r1, r1
    13a8:	b6 01       	movw	r22, r12
    13aa:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <__divmodhi4>
    13ae:	88 27       	eor	r24, r24
    13b0:	77 fd       	sbrc	r23, 7
    13b2:	80 95       	com	r24
    13b4:	98 2f       	mov	r25, r24
    13b6:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <__floatsisf>
		double procennt_rev =(100 * amplifier.power_rev) / amplifier.power_max;
		int fwd = 2+(procennt_fwd)*1.2;
    13ba:	2a e9       	ldi	r18, 0x9A	; 154
    13bc:	39 e9       	ldi	r19, 0x99	; 153
    13be:	49 e9       	ldi	r20, 0x99	; 153
    13c0:	5f e3       	ldi	r21, 0x3F	; 63
    13c2:	0e 94 74 30 	call	0x60e8	; 0x60e8 <__mulsf3>
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	50 e4       	ldi	r21, 0x40	; 64
    13ce:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <__addsf3>
    13d2:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <__fixsfsi>
    13d6:	16 2f       	mov	r17, r22
void trasmit_slide()
{
		u8g_FirstPage(&u8g);
		//float procennt_fwd =200/amplifier.power_max;
		double procennt_fwd =(100 * amplifier.power_fwd) / amplifier.power_max;
		double procennt_rev =(100 * amplifier.power_rev) / amplifier.power_max;
    13d8:	20 91 72 26 	lds	r18, 0x2672
    13dc:	30 91 73 26 	lds	r19, 0x2673
    13e0:	02 9f       	mul	r16, r18
    13e2:	c0 01       	movw	r24, r0
    13e4:	03 9f       	mul	r16, r19
    13e6:	90 0d       	add	r25, r0
    13e8:	11 24       	eor	r1, r1
    13ea:	b6 01       	movw	r22, r12
    13ec:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <__divmodhi4>
    13f0:	88 27       	eor	r24, r24
    13f2:	77 fd       	sbrc	r23, 7
    13f4:	80 95       	com	r24
    13f6:	98 2f       	mov	r25, r24
    13f8:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <__floatsisf>
		int fwd = 2+(procennt_fwd)*1.2;
		int ref = 2+(procennt_rev*1.2);
    13fc:	2a e9       	ldi	r18, 0x9A	; 154
    13fe:	39 e9       	ldi	r19, 0x99	; 153
    1400:	49 e9       	ldi	r20, 0x99	; 153
    1402:	5f e3       	ldi	r21, 0x3F	; 63
    1404:	0e 94 74 30 	call	0x60e8	; 0x60e8 <__mulsf3>
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	50 e4       	ldi	r21, 0x40	; 64
    1410:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <__addsf3>
    1414:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <__fixsfsi>
    1418:	f6 2e       	mov	r15, r22
		{
			u8g_SetFont(&u8g, u8g_font_6x10);
			u8g_DrawRFrame(&u8g, 1, 1, 126, 15, 2);
			u8g_DrawStr(&u8g, 1, 17, "FWD Power:");
		
			sprintf(text,"%i W",amplifier.power_fwd);
    141a:	0f 2e       	mov	r0, r31
    141c:	f0 e7       	ldi	r31, 0x70	; 112
    141e:	4f 2e       	mov	r4, r31
    1420:	f6 e2       	ldi	r31, 0x26	; 38
    1422:	5f 2e       	mov	r5, r31
    1424:	f0 2d       	mov	r31, r0
    1426:	0f 2e       	mov	r0, r31
    1428:	f9 eb       	ldi	r31, 0xB9	; 185
    142a:	af 2e       	mov	r10, r31
    142c:	f0 e2       	ldi	r31, 0x20	; 32
    142e:	bf 2e       	mov	r11, r31
    1430:	f0 2d       	mov	r31, r0
    1432:	9e 01       	movw	r18, r28
    1434:	2f 5f       	subi	r18, 0xFF	; 255
    1436:	3f 4f       	sbci	r19, 0xFF	; 255
    1438:	69 01       	movw	r12, r18
			u8g_DrawStr(&u8g, 67, 17, text);
			
			u8g_DrawRFrame(&u8g, 1, 28, 126, 15, 2);
			
			sprintf(text,"%i W",amplifier.power_rev);
    143a:	0f 2e       	mov	r0, r31
    143c:	f2 e7       	ldi	r31, 0x72	; 114
    143e:	6f 2e       	mov	r6, r31
    1440:	f6 e2       	ldi	r31, 0x26	; 38
    1442:	7f 2e       	mov	r7, r31
    1444:	f0 2d       	mov	r31, r0
			// bars fwd
			u8g_DrawBox(&u8g,3,3,fwd,11);
			//ref
			u8g_DrawBox(&u8g,3,30,ref,11);
			
			sprintf(text,"SWR : 1:%.03f ",swr);
    1446:	0f 2e       	mov	r0, r31
    1448:	f9 ec       	ldi	r31, 0xC9	; 201
    144a:	8f 2e       	mov	r8, r31
    144c:	f0 e2       	ldi	r31, 0x20	; 32
    144e:	9f 2e       	mov	r9, r31
    1450:	f0 2d       	mov	r31, r0
		float swr=0;
		char text[20];
	
		do
		{
			u8g_SetFont(&u8g, u8g_font_6x10);
    1452:	62 eb       	ldi	r22, 0xB2	; 178
    1454:	72 e0       	ldi	r23, 0x02	; 2
    1456:	85 ed       	ldi	r24, 0xD5	; 213
    1458:	95 e2       	ldi	r25, 0x25	; 37
    145a:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <u8g_SetFont>
			u8g_DrawRFrame(&u8g, 1, 1, 126, 15, 2);
    145e:	68 94       	set
    1460:	ee 24       	eor	r14, r14
    1462:	e1 f8       	bld	r14, 1
    1464:	0f e0       	ldi	r16, 0x0F	; 15
    1466:	2e e7       	ldi	r18, 0x7E	; 126
    1468:	41 e0       	ldi	r20, 0x01	; 1
    146a:	61 e0       	ldi	r22, 0x01	; 1
    146c:	85 ed       	ldi	r24, 0xD5	; 213
    146e:	95 e2       	ldi	r25, 0x25	; 37
    1470:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <u8g_DrawRFrame>
			u8g_DrawStr(&u8g, 1, 17, "FWD Power:");
    1474:	2e ea       	ldi	r18, 0xAE	; 174
    1476:	30 e2       	ldi	r19, 0x20	; 32
    1478:	41 e1       	ldi	r20, 0x11	; 17
    147a:	61 e0       	ldi	r22, 0x01	; 1
    147c:	85 ed       	ldi	r24, 0xD5	; 213
    147e:	95 e2       	ldi	r25, 0x25	; 37
    1480:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
		
			sprintf(text,"%i W",amplifier.power_fwd);
    1484:	f2 01       	movw	r30, r4
    1486:	81 81       	ldd	r24, Z+1	; 0x01
    1488:	8f 93       	push	r24
    148a:	80 81       	ld	r24, Z
    148c:	8f 93       	push	r24
    148e:	bf 92       	push	r11
    1490:	af 92       	push	r10
    1492:	df 92       	push	r13
    1494:	cf 92       	push	r12
    1496:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>
			u8g_DrawStr(&u8g, 67, 17, text);
    149a:	96 01       	movw	r18, r12
    149c:	41 e1       	ldi	r20, 0x11	; 17
    149e:	63 e4       	ldi	r22, 0x43	; 67
    14a0:	85 ed       	ldi	r24, 0xD5	; 213
    14a2:	95 e2       	ldi	r25, 0x25	; 37
    14a4:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
			
			u8g_DrawRFrame(&u8g, 1, 28, 126, 15, 2);
    14a8:	2e e7       	ldi	r18, 0x7E	; 126
    14aa:	4c e1       	ldi	r20, 0x1C	; 28
    14ac:	61 e0       	ldi	r22, 0x01	; 1
    14ae:	85 ed       	ldi	r24, 0xD5	; 213
    14b0:	95 e2       	ldi	r25, 0x25	; 37
    14b2:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <u8g_DrawRFrame>
			
			sprintf(text,"%i W",amplifier.power_rev);
    14b6:	f3 01       	movw	r30, r6
    14b8:	81 81       	ldd	r24, Z+1	; 0x01
    14ba:	8f 93       	push	r24
    14bc:	80 81       	ld	r24, Z
    14be:	8f 93       	push	r24
    14c0:	bf 92       	push	r11
    14c2:	af 92       	push	r10
    14c4:	df 92       	push	r13
    14c6:	cf 92       	push	r12
    14c8:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>
			u8g_DrawStr(&u8g, 1, 45, "REF Power:");
    14cc:	2e eb       	ldi	r18, 0xBE	; 190
    14ce:	30 e2       	ldi	r19, 0x20	; 32
    14d0:	4d e2       	ldi	r20, 0x2D	; 45
    14d2:	61 e0       	ldi	r22, 0x01	; 1
    14d4:	85 ed       	ldi	r24, 0xD5	; 213
    14d6:	95 e2       	ldi	r25, 0x25	; 37
    14d8:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
			u8g_DrawStr(&u8g, 67,45 ,text);
    14dc:	96 01       	movw	r18, r12
    14de:	4d e2       	ldi	r20, 0x2D	; 45
    14e0:	63 e4       	ldi	r22, 0x43	; 67
    14e2:	85 ed       	ldi	r24, 0xD5	; 213
    14e4:	95 e2       	ldi	r25, 0x25	; 37
    14e6:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>

			// bars fwd
			u8g_DrawBox(&u8g,3,3,fwd,11);
    14ea:	0b e0       	ldi	r16, 0x0B	; 11
    14ec:	21 2f       	mov	r18, r17
    14ee:	43 e0       	ldi	r20, 0x03	; 3
    14f0:	63 e0       	ldi	r22, 0x03	; 3
    14f2:	85 ed       	ldi	r24, 0xD5	; 213
    14f4:	95 e2       	ldi	r25, 0x25	; 37
    14f6:	0e 94 b8 2b 	call	0x5770	; 0x5770 <u8g_DrawBox>
			//ref
			u8g_DrawBox(&u8g,3,30,ref,11);
    14fa:	2f 2d       	mov	r18, r15
    14fc:	4e e1       	ldi	r20, 0x1E	; 30
    14fe:	63 e0       	ldi	r22, 0x03	; 3
    1500:	85 ed       	ldi	r24, 0xD5	; 213
    1502:	95 e2       	ldi	r25, 0x25	; 37
    1504:	0e 94 b8 2b 	call	0x5770	; 0x5770 <u8g_DrawBox>
			
			sprintf(text,"SWR : 1:%.03f ",swr);
    1508:	1f 92       	push	r1
    150a:	1f 92       	push	r1
    150c:	1f 92       	push	r1
    150e:	1f 92       	push	r1
    1510:	9f 92       	push	r9
    1512:	8f 92       	push	r8
    1514:	df 92       	push	r13
    1516:	cf 92       	push	r12
    1518:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>
			u8g_DrawStr(&u8g,1,54 ,text);
    151c:	96 01       	movw	r18, r12
    151e:	46 e3       	ldi	r20, 0x36	; 54
    1520:	61 e0       	ldi	r22, 0x01	; 1
    1522:	85 ed       	ldi	r24, 0xD5	; 213
    1524:	95 e2       	ldi	r25, 0x25	; 37
    1526:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
					
		} while ( u8g_NextPage(&u8g) );
    152a:	85 ed       	ldi	r24, 0xD5	; 213
    152c:	95 e2       	ldi	r25, 0x25	; 37
    152e:	0e 94 73 29 	call	0x52e6	; 0x52e6 <u8g_NextPage>
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	81 11       	cpse	r24, r1
    1538:	8c cf       	rjmp	.-232    	; 0x1452 <trasmit_slide+0xf8>
	
		
}
    153a:	64 96       	adiw	r28, 0x14	; 20
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	bf 90       	pop	r11
    1552:	af 90       	pop	r10
    1554:	9f 90       	pop	r9
    1556:	8f 90       	pop	r8
    1558:	7f 90       	pop	r7
    155a:	6f 90       	pop	r6
    155c:	5f 90       	pop	r5
    155e:	4f 90       	pop	r4
    1560:	08 95       	ret

00001562 <screen_int>:


void screen_int()
{
    1562:	ef 92       	push	r14
    1564:	0f 93       	push	r16

	u8g_FirstPage(&u8g);
    1566:	85 ed       	ldi	r24, 0xD5	; 213
    1568:	95 e2       	ldi	r25, 0x25	; 37
    156a:	0e 94 6d 29 	call	0x52da	; 0x52da <u8g_FirstPage>
    do
    {
	  u8g_SetFont(&u8g, u8g_font_6x10);
    156e:	62 eb       	ldi	r22, 0xB2	; 178
    1570:	72 e0       	ldi	r23, 0x02	; 2
    1572:	85 ed       	ldi	r24, 0xD5	; 213
    1574:	95 e2       	ldi	r25, 0x25	; 37
    1576:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <u8g_SetFont>
	  u8g_DrawRFrame(&u8g, 1, 1, 126, 62, 2);
    157a:	68 94       	set
    157c:	ee 24       	eor	r14, r14
    157e:	e1 f8       	bld	r14, 1
    1580:	0e e3       	ldi	r16, 0x3E	; 62
    1582:	2e e7       	ldi	r18, 0x7E	; 126
    1584:	41 e0       	ldi	r20, 0x01	; 1
    1586:	61 e0       	ldi	r22, 0x01	; 1
    1588:	85 ed       	ldi	r24, 0xD5	; 213
    158a:	95 e2       	ldi	r25, 0x25	; 37
    158c:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <u8g_DrawRFrame>
      u8g_DrawStr(&u8g, 5, 10, "ANTENNA CONTROLLER");
    1590:	28 ed       	ldi	r18, 0xD8	; 216
    1592:	30 e2       	ldi	r19, 0x20	; 32
    1594:	4a e0       	ldi	r20, 0x0A	; 10
    1596:	65 e0       	ldi	r22, 0x05	; 5
    1598:	85 ed       	ldi	r24, 0xD5	; 213
    159a:	95 e2       	ldi	r25, 0x25	; 37
    159c:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
	  u8g_DrawStr(&u8g, 5, 20, "BY SA2BLV");
    15a0:	2b ee       	ldi	r18, 0xEB	; 235
    15a2:	30 e2       	ldi	r19, 0x20	; 32
    15a4:	44 e1       	ldi	r20, 0x14	; 20
    15a6:	65 e0       	ldi	r22, 0x05	; 5
    15a8:	85 ed       	ldi	r24, 0xD5	; 213
    15aa:	95 e2       	ldi	r25, 0x25	; 37
    15ac:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
	  
	  u8g_DrawStr(&u8g, 5, 50, "Loading ....");
    15b0:	25 ef       	ldi	r18, 0xF5	; 245
    15b2:	30 e2       	ldi	r19, 0x20	; 32
    15b4:	42 e3       	ldi	r20, 0x32	; 50
    15b6:	65 e0       	ldi	r22, 0x05	; 5
    15b8:	85 ed       	ldi	r24, 0xD5	; 213
    15ba:	95 e2       	ldi	r25, 0x25	; 37
    15bc:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
 
    } while ( u8g_NextPage(&u8g) );
    15c0:	85 ed       	ldi	r24, 0xD5	; 213
    15c2:	95 e2       	ldi	r25, 0x25	; 37
    15c4:	0e 94 73 29 	call	0x52e6	; 0x52e6 <u8g_NextPage>
    15c8:	81 11       	cpse	r24, r1
    15ca:	d1 cf       	rjmp	.-94     	; 0x156e <screen_int+0xc>
// 	u8g_Delay(100);
 	
}
    15cc:	0f 91       	pop	r16
    15ce:	ef 90       	pop	r14
    15d0:	08 95       	ret

000015d2 <Select_buttion>:
int meny_selected =0;

int Select_buttion()
{
	int ret =0;
	if((PORTH.IN & PIN7_bm) ==0 )
    15d2:	e0 ee       	ldi	r30, 0xE0	; 224
    15d4:	f6 e0       	ldi	r31, 0x06	; 6
    15d6:	80 85       	ldd	r24, Z+8	; 0x08
    15d8:	99 27       	eor	r25, r25
    15da:	87 fd       	sbrc	r24, 7
    15dc:	90 95       	com	r25
    15de:	80 95       	com	r24
    15e0:	90 95       	com	r25
	{
	 ret =1;
	}
	
	return ret;
}
    15e2:	89 2f       	mov	r24, r25
    15e4:	88 1f       	adc	r24, r24
    15e6:	88 27       	eor	r24, r24
    15e8:	88 1f       	adc	r24, r24
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	08 95       	ret

000015ee <hr_x_coordinate_finder>:
	radian=(degree*(0.0174));
	return radian;
}

int hr_x_coordinate_finder(uint16_t degree,uint16_t radius)
{
    15ee:	cf 92       	push	r12
    15f0:	df 92       	push	r13
    15f2:	ef 92       	push	r14
    15f4:	ff 92       	push	r15
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	eb 01       	movw	r28, r22
	int xcoordinate,intermediate;
	double radian;
	radian= degree_to_radian(degree+90);
    15fc:	86 5a       	subi	r24, 0xA6	; 166
    15fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1600:	bc 01       	movw	r22, r24
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <__floatunsisf>


double degree_to_radian(double degree)
{
	double radian;
	radian=(degree*(0.0174));
    160a:	22 e7       	ldi	r18, 0x72	; 114
    160c:	3a e8       	ldi	r19, 0x8A	; 138
    160e:	4e e8       	ldi	r20, 0x8E	; 142
    1610:	5c e3       	ldi	r21, 0x3C	; 60
    1612:	0e 94 74 30 	call	0x60e8	; 0x60e8 <__mulsf3>
int hr_x_coordinate_finder(uint16_t degree,uint16_t radius)
{
	int xcoordinate,intermediate;
	double radian;
	radian= degree_to_radian(degree+90);
	intermediate= radius*(cos(radian));
    1616:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <cos>
    161a:	6b 01       	movw	r12, r22
    161c:	7c 01       	movw	r14, r24
    161e:	be 01       	movw	r22, r28
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <__floatunsisf>
    1628:	a7 01       	movw	r20, r14
    162a:	96 01       	movw	r18, r12
    162c:	0e 94 74 30 	call	0x60e8	; 0x60e8 <__mulsf3>
    1630:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <__fixsfsi>
	xcoordinate= (32-intermediate);
	return xcoordinate;
}
    1634:	20 e2       	ldi	r18, 0x20	; 32
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	c9 01       	movw	r24, r18
    163a:	86 1b       	sub	r24, r22
    163c:	97 0b       	sbc	r25, r23
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	df 90       	pop	r13
    1648:	cf 90       	pop	r12
    164a:	08 95       	ret

0000164c <hr_y_coordinate_finder>:
double status_degree;
int hr_y_coordinate_finder(uint16_t degree,uint16_t radius)
{
    164c:	cf 92       	push	r12
    164e:	df 92       	push	r13
    1650:	ef 92       	push	r14
    1652:	ff 92       	push	r15
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	eb 01       	movw	r28, r22
	int ycoordinate;
	int intermediate;
	double radian;
	radian= degree_to_radian(degree+92);
    165a:	84 5a       	subi	r24, 0xA4	; 164
    165c:	9f 4f       	sbci	r25, 0xFF	; 255
    165e:	bc 01       	movw	r22, r24
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <__floatunsisf>


double degree_to_radian(double degree)
{
	double radian;
	radian=(degree*(0.0174));
    1668:	22 e7       	ldi	r18, 0x72	; 114
    166a:	3a e8       	ldi	r19, 0x8A	; 138
    166c:	4e e8       	ldi	r20, 0x8E	; 142
    166e:	5c e3       	ldi	r21, 0x3C	; 60
    1670:	0e 94 74 30 	call	0x60e8	; 0x60e8 <__mulsf3>
{
	int ycoordinate;
	int intermediate;
	double radian;
	radian= degree_to_radian(degree+92);
	intermediate= radius*(sin(radian));
    1674:	0e 94 d7 30 	call	0x61ae	; 0x61ae <sin>
    1678:	6b 01       	movw	r12, r22
    167a:	7c 01       	movw	r14, r24
    167c:	be 01       	movw	r22, r28
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <__floatunsisf>
    1686:	a7 01       	movw	r20, r14
    1688:	96 01       	movw	r18, r12
    168a:	0e 94 74 30 	call	0x60e8	; 0x60e8 <__mulsf3>
    168e:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <__fixsfsi>
	ycoordinate= (32-intermediate);
	return ycoordinate;
}
    1692:	20 e2       	ldi	r18, 0x20	; 32
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	c9 01       	movw	r24, r18
    1698:	86 1b       	sub	r24, r22
    169a:	97 0b       	sbc	r25, r23
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	ff 90       	pop	r15
    16a2:	ef 90       	pop	r14
    16a4:	df 90       	pop	r13
    16a6:	cf 90       	pop	r12
    16a8:	08 95       	ret

000016aa <draw_angel_circle>:


void draw_angel_circle(int angel, int type )
{
    16aa:	cf 92       	push	r12
    16ac:	df 92       	push	r13
    16ae:	ef 92       	push	r14
    16b0:	ff 92       	push	r15
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <draw_angel_circle+0x12>
    16bc:	00 d0       	rcall	.+0      	; 0x16be <draw_angel_circle+0x14>
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	d8 2e       	mov	r13, r24
    16c4:	19 2f       	mov	r17, r25
    16c6:	7b 01       	movw	r14, r22
	int size_a =26;
	if (type == 1)
    16c8:	61 30       	cpi	r22, 0x01	; 1
    16ca:	71 05       	cpc	r23, r1
    16cc:	d1 f1       	breq	.+116    	; 0x1742 <draw_angel_circle+0x98>
	{
		size_a =12;
	}
	
	u8g_DrawCircle(&u8g, 30, 30, size_a+1,U8G_DRAW_ALL);
    16ce:	0f e0       	ldi	r16, 0x0F	; 15
    16d0:	2b e1       	ldi	r18, 0x1B	; 27
    16d2:	4e e1       	ldi	r20, 0x1E	; 30
    16d4:	6e e1       	ldi	r22, 0x1E	; 30
    16d6:	85 ed       	ldi	r24, 0xD5	; 213
    16d8:	95 e2       	ldi	r25, 0x25	; 37
    16da:	0e 94 75 22 	call	0x44ea	; 0x44ea <u8g_DrawCircle>
	// rotorns peklinje
	int x_rad= hr_x_coordinate_finder(angel,(size_a-2));
    16de:	68 e1       	ldi	r22, 0x18	; 24
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	8d 2d       	mov	r24, r13
    16e4:	91 2f       	mov	r25, r17
    16e6:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <hr_x_coordinate_finder>
    16ea:	c8 2e       	mov	r12, r24
	int y_rad= hr_y_coordinate_finder(angel,(size_a-2));
    16ec:	68 e1       	ldi	r22, 0x18	; 24
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	8d 2d       	mov	r24, r13
    16f2:	91 2f       	mov	r25, r17
    16f4:	0e 94 26 0b 	call	0x164c	; 0x164c <hr_y_coordinate_finder>
	u8g_DrawLine(&u8g, x_rad, y_rad,  32,  32);
    16f8:	00 e2       	ldi	r16, 0x20	; 32
    16fa:	20 e2       	ldi	r18, 0x20	; 32
    16fc:	48 2f       	mov	r20, r24
    16fe:	6c 2d       	mov	r22, r12
    1700:	85 ed       	ldi	r24, 0xD5	; 213
    1702:	95 e2       	ldi	r25, 0x25	; 37
    1704:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <u8g_DrawLine>
	// text radie
	
	// target / heading
	if (type == 0)
    1708:	ef 28       	or	r14, r15
    170a:	c1 f5       	brne	.+112    	; 0x177c <draw_angel_circle+0xd2>
	{
	char str[4];
	sprintf(str, "%i°",angel);
    170c:	1f 93       	push	r17
    170e:	df 92       	push	r13
    1710:	82 e0       	ldi	r24, 0x02	; 2
    1712:	91 e2       	ldi	r25, 0x21	; 33
    1714:	9f 93       	push	r25
    1716:	8f 93       	push	r24
    1718:	8e 01       	movw	r16, r28
    171a:	0f 5f       	subi	r16, 0xFF	; 255
    171c:	1f 4f       	sbci	r17, 0xFF	; 255
    171e:	1f 93       	push	r17
    1720:	0f 93       	push	r16
    1722:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>

	u8g_DrawStr(&u8g, 1, 1, str);
    1726:	98 01       	movw	r18, r16
    1728:	41 e0       	ldi	r20, 0x01	; 1
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	85 ed       	ldi	r24, 0xD5	; 213
    172e:	95 e2       	ldi	r25, 0x25	; 37
    1730:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	1d c0       	rjmp	.+58     	; 0x177c <draw_angel_circle+0xd2>
	if (type == 1)
	{
		size_a =12;
	}
	
	u8g_DrawCircle(&u8g, 30, 30, size_a+1,U8G_DRAW_ALL);
    1742:	0f e0       	ldi	r16, 0x0F	; 15
    1744:	2d e0       	ldi	r18, 0x0D	; 13
    1746:	4e e1       	ldi	r20, 0x1E	; 30
    1748:	6e e1       	ldi	r22, 0x1E	; 30
    174a:	85 ed       	ldi	r24, 0xD5	; 213
    174c:	95 e2       	ldi	r25, 0x25	; 37
    174e:	0e 94 75 22 	call	0x44ea	; 0x44ea <u8g_DrawCircle>
	// rotorns peklinje
	int x_rad= hr_x_coordinate_finder(angel,(size_a-2));
    1752:	6a e0       	ldi	r22, 0x0A	; 10
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	8d 2d       	mov	r24, r13
    1758:	91 2f       	mov	r25, r17
    175a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <hr_x_coordinate_finder>
    175e:	f8 2e       	mov	r15, r24
	int y_rad= hr_y_coordinate_finder(angel,(size_a-2));
    1760:	6a e0       	ldi	r22, 0x0A	; 10
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	8d 2d       	mov	r24, r13
    1766:	91 2f       	mov	r25, r17
    1768:	0e 94 26 0b 	call	0x164c	; 0x164c <hr_y_coordinate_finder>
	u8g_DrawLine(&u8g, x_rad, y_rad,  32,  32);
    176c:	00 e2       	ldi	r16, 0x20	; 32
    176e:	20 e2       	ldi	r18, 0x20	; 32
    1770:	48 2f       	mov	r20, r24
    1772:	6f 2d       	mov	r22, r15
    1774:	85 ed       	ldi	r24, 0xD5	; 213
    1776:	95 e2       	ldi	r25, 0x25	; 37
    1778:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <u8g_DrawLine>

	u8g_DrawStr(&u8g, 1, 1, str);
	}
	
	
}
    177c:	24 96       	adiw	r28, 0x04	; 4
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	1f 91       	pop	r17
    1788:	0f 91       	pop	r16
    178a:	ff 90       	pop	r15
    178c:	ef 90       	pop	r14
    178e:	df 90       	pop	r13
    1790:	cf 90       	pop	r12
    1792:	08 95       	ret

00001794 <setUpSerial_main>:


void setUpSerial_main()
{
	 // uart port E
	PORTE_OUTSET = PIN3_bm; //Let's make PC7 as TX
    1794:	98 e0       	ldi	r25, 0x08	; 8
    1796:	90 93 85 06 	sts	0x0685, r25
	PORTE_DIRSET = PIN3_bm; //TX pin as output
    179a:	90 93 81 06 	sts	0x0681, r25
     
	PORTE_OUTCLR = PIN2_bm;
    179e:	84 e0       	ldi	r24, 0x04	; 4
    17a0:	80 93 86 06 	sts	0x0686, r24
	PORTE_DIRCLR = PIN2_bm; //PC6 as RX
    17a4:	80 93 82 06 	sts	0x0682, r24
 
    // Baud rate selection
    // BSEL = (32000000 / (2^0 * 16*9600) -1 = 207.333 -> BSCALE = 0
    // FBAUD = ( (32000000)/(2^0*16(207+1)) = 9615.384 -> it's alright
     
    USARTE0_BAUDCTRLB = 0; //Just to be sure that BSCALE is 0
    17a8:	10 92 a7 0a 	sts	0x0AA7, r1
    USARTE0_BAUDCTRLA = 0xCF; // 207
    17ac:	4f ec       	ldi	r20, 0xCF	; 207
    17ae:	40 93 a6 0a 	sts	0x0AA6, r20
     
     
    
	//8 data bits, no parity and 1 stop bit 
    USARTE0_CTRLC = USART_CHSIZE_8BIT_gc;
    17b2:	33 e0       	ldi	r19, 0x03	; 3
    17b4:	30 93 a5 0a 	sts	0x0AA5, r19
     
    //Enable receive and transmit
    USARTE0_CTRLB = USART_TXEN_bm | USART_RXEN_bm; // And enable high speed mode
    17b8:	28 e1       	ldi	r18, 0x18	; 24
    17ba:	20 93 a4 0a 	sts	0x0AA4, r18
	USARTE0_CTRLA|= USART_RXCINTLVL_LO_gc;
    17be:	e3 ea       	ldi	r30, 0xA3	; 163
    17c0:	fa e0       	ldi	r31, 0x0A	; 10
    17c2:	50 81       	ld	r21, Z
    17c4:	50 61       	ori	r21, 0x10	; 16
    17c6:	50 83       	st	Z, r21
	
	// usart port F0
	
	PORTF_OUTSET = PIN3_bm; //Let's make PC7 as TX
    17c8:	90 93 a5 06 	sts	0x06A5, r25
	PORTF_DIRSET = PIN3_bm; //TX pin as output
    17cc:	90 93 a1 06 	sts	0x06A1, r25
     
	PORTF_OUTCLR = PIN2_bm;
    17d0:	80 93 a6 06 	sts	0x06A6, r24
	PORTF_DIRCLR = PIN2_bm; //PC6 as RX
    17d4:	80 93 a2 06 	sts	0x06A2, r24
 
    // Baud rate selection
    // BSEL = (32000000 / (2^0 * 16*9600) -1 = 207.333 -> BSCALE = 0
    // FBAUD = ( (32000000)/(2^0*16(207+1)) = 9615.384 -> it's alright
     
    USARTF0_BAUDCTRLB = 0; //Just to be sure that BSCALE is 0
    17d8:	10 92 a7 0b 	sts	0x0BA7, r1
    USARTF0_BAUDCTRLA = 0xCF; // 207
    17dc:	40 93 a6 0b 	sts	0x0BA6, r20
     
     
    
	//8 data bits, no parity and 1 stop bit 
    USARTF0_CTRLC = USART_CHSIZE_8BIT_gc;
    17e0:	30 93 a5 0b 	sts	0x0BA5, r19
     
    //Enable receive and transmit
    USARTF0_CTRLB = USART_TXEN_bm | USART_RXEN_bm; // And enable high speed mode
    17e4:	20 93 a4 0b 	sts	0x0BA4, r18
	USARTF0_CTRLA|= USART_RXCINTLVL_LO_gc;
    17e8:	e3 ea       	ldi	r30, 0xA3	; 163
    17ea:	fb e0       	ldi	r31, 0x0B	; 11
    17ec:	80 81       	ld	r24, Z
    17ee:	80 61       	ori	r24, 0x10	; 16
    17f0:	80 83       	st	Z, r24
    17f2:	08 95       	ret

000017f4 <setUpSerial_rpt>:

void setUpSerial_rpt()
{

     // uart port c
	PORTC_OUTSET = PIN3_bm; //Let's make PC3 as TX
    17f4:	98 e0       	ldi	r25, 0x08	; 8
    17f6:	90 93 45 06 	sts	0x0645, r25
	PORTC_DIRSET = PIN3_bm; //TX pin as output
    17fa:	90 93 41 06 	sts	0x0641, r25
	PORTC_OUTCLR = PIN2_bm;
    17fe:	84 e0       	ldi	r24, 0x04	; 4
    1800:	80 93 46 06 	sts	0x0646, r24
	PORTC_DIRCLR = PIN2_bm; //PC2 as RX	
    1804:	80 93 42 06 	sts	0x0642, r24
	bool twoStopBits =1;
    // Baud rate selection
    // BSEL = (32000000 / (2^0 * 16*9600) -1 = 207.333 -> BSCALE = 0
    // FBAUD = ( (32000000)/(2^0*16(207+1)) = 9615.384 -> it's alright
     
    USARTC0_BAUDCTRLB = rs232radio.rs232_prescale; //Just to be sure that BSCALE is 0
    1808:	40 91 78 26 	lds	r20, 0x2678
    180c:	40 93 a7 08 	sts	0x08A7, r20
    USARTC0_BAUDCTRLA = rs232radio.radio_rs232; // 207
    1810:	e6 e7       	ldi	r30, 0x76	; 118
    1812:	f6 e2       	ldi	r31, 0x26	; 38
    1814:	20 81       	ld	r18, Z
    1816:	20 93 a6 08 	sts	0x08A6, r18
     
    //8 data bits, no parity and 2 stop bit 
    USARTC0_CTRLC = USART_CHSIZE_8BIT_gc |(twoStopBits ? USART_SBMODE_bm : 0);
    181a:	3b e0       	ldi	r19, 0x0B	; 11
    181c:	30 93 a5 08 	sts	0x08A5, r19
     
    //Enable receive and transmit
    USARTC0_CTRLB = USART_TXEN_bm | USART_RXEN_bm; // And enable high speed mode
    1820:	28 e1       	ldi	r18, 0x18	; 24
    1822:	20 93 a4 08 	sts	0x08A4, r18
	USARTC0_CTRLA|= USART_RXCINTLVL_HI_gc;
    1826:	a3 ea       	ldi	r26, 0xA3	; 163
    1828:	b8 e0       	ldi	r27, 0x08	; 8
    182a:	5c 91       	ld	r21, X
    182c:	50 63       	ori	r21, 0x30	; 48
    182e:	5c 93       	st	X, r21
	
	// port d init
	PORTD_OUTSET = PIN3_bm; //Let's make PC7 as TX
    1830:	90 93 65 06 	sts	0x0665, r25
	PORTD_DIRSET = PIN3_bm; //TX pin as output
    1834:	90 93 61 06 	sts	0x0661, r25
     
	PORTD_OUTCLR = PIN2_bm;
    1838:	80 93 66 06 	sts	0x0666, r24
	PORTD_DIRCLR = PIN2_bm; //PC6 as RX
    183c:	80 93 62 06 	sts	0x0662, r24

    // Baud rate selection
    // BSEL = (32000000 / (2^0 * 16*9600) -1 = 207.333 -> BSCALE = 0
    // FBAUD = ( (32000000)/(2^0*16(207+1)) = 9615.384 -> it's alright
     
    USARTD0_BAUDCTRLB = rs232radio.rs232_prescale; //Just to be sure that BSCALE is 0
    1840:	40 93 a7 09 	sts	0x09A7, r20
    USARTD0_BAUDCTRLA = rs232radio.radio_rs232; // 207
    1844:	80 81       	ld	r24, Z
    1846:	80 93 a6 09 	sts	0x09A6, r24
     
     
    
	//8 data bits, no parity and 2 stop bit 
    USARTD0_CTRLC = USART_CHSIZE_8BIT_gc | (twoStopBits ? USART_SBMODE_bm : 0);
    184a:	30 93 a5 09 	sts	0x09A5, r19
     
    //Enable receive and transmit
    USARTD0_CTRLB = USART_TXEN_bm | USART_RXEN_bm; // And enable high speed mode
    184e:	20 93 a4 09 	sts	0x09A4, r18
	USARTD0_CTRLA|= USART_RXCINTLVL_HI_gc;
    1852:	e3 ea       	ldi	r30, 0xA3	; 163
    1854:	f9 e0       	ldi	r31, 0x09	; 9
    1856:	80 81       	ld	r24, Z
    1858:	80 63       	ori	r24, 0x30	; 48
    185a:	80 83       	st	Z, r24
    185c:	08 95       	ret

0000185e <setup>:




void setup()
{
    185e:	7f 92       	push	r7
    1860:	8f 92       	push	r8
    1862:	9f 92       	push	r9
    1864:	af 92       	push	r10
    1866:	bf 92       	push	r11
    1868:	cf 92       	push	r12
    186a:	df 92       	push	r13
    186c:	ef 92       	push	r14
    186e:	ff 92       	push	r15
    1870:	0f 93       	push	r16
    1872:	1f 93       	push	r17
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
	message_que.out_tx[0] =0xFF;
    1878:	cf ef       	ldi	r28, 0xFF	; 255
    187a:	c0 93 a5 26 	sts	0x26A5, r28
	message_que.out_tx[1] =0xFF;
    187e:	c0 93 a6 26 	sts	0x26A6, r28
	//toogle_alert();
	setClockTo32MHz();
    1882:	0e 94 b2 08 	call	0x1164	; 0x1164 <setClockTo32MHz>
	// set direcotion of lcd
	PORTK.DIRSET =0xFF;
    1886:	e0 e2       	ldi	r30, 0x20	; 32
    1888:	f7 e0       	ldi	r31, 0x07	; 7
    188a:	c1 83       	std	Z+1, r28	; 0x01
	PORTJ.DIRSET =0xFF;
    188c:	e0 e0       	ldi	r30, 0x00	; 0
    188e:	f7 e0       	ldi	r31, 0x07	; 7
    1890:	c1 83       	std	Z+1, r28	; 0x01
	PORTE.DIRSET =0xB0;
    1892:	80 eb       	ldi	r24, 0xB0	; 176
    1894:	e0 e8       	ldi	r30, 0x80	; 128
    1896:	f6 e0       	ldi	r31, 0x06	; 6
    1898:	81 83       	std	Z+1, r24	; 0x01
	// dir of inputs
	PORTH.DIRCLR    =    PIN2_bm;
    189a:	e0 ee       	ldi	r30, 0xE0	; 224
    189c:	f6 e0       	ldi	r31, 0x06	; 6
    189e:	84 e0       	ldi	r24, 0x04	; 4
    18a0:	82 83       	std	Z+2, r24	; 0x02
    PORTH.PIN2CTRL  =    PORT_OPC_PULLUP_gc;
    18a2:	88 e1       	ldi	r24, 0x18	; 24
    18a4:	82 8b       	std	Z+18, r24	; 0x12
	PORTH.DIRCLR    =    PIN3_bm;
    18a6:	98 e0       	ldi	r25, 0x08	; 8
    18a8:	92 83       	std	Z+2, r25	; 0x02
    PORTH.PIN3CTRL  =    PORT_OPC_PULLUP_gc;
    18aa:	83 8b       	std	Z+19, r24	; 0x13
	PORTH.DIRCLR    =    PIN4_bm;
    18ac:	90 e1       	ldi	r25, 0x10	; 16
    18ae:	92 83       	std	Z+2, r25	; 0x02
	PORTH.PIN4CTRL  =    PORT_OPC_PULLUP_gc;
    18b0:	84 8b       	std	Z+20, r24	; 0x14
	PORTH.DIRCLR    =    PIN5_bm;
    18b2:	20 e2       	ldi	r18, 0x20	; 32
    18b4:	22 83       	std	Z+2, r18	; 0x02
	PORTH.PIN5CTRL  =    PORT_OPC_PULLUP_gc;
    18b6:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN5CTRL  =    PORT_OPC_PULLDOWN_gc;
    18b8:	a0 e0       	ldi	r26, 0x00	; 0
    18ba:	b6 e0       	ldi	r27, 0x06	; 6
    18bc:	55 96       	adiw	r26, 0x15	; 21
    18be:	9c 93       	st	X, r25
    18c0:	55 97       	sbiw	r26, 0x15	; 21
	
	
	 // interupt rotary encoder
	PORTH.DIR = 0x00; // Port D als Eingang
    18c2:	10 82       	st	Z, r1
    PORTH.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_RISING_gc;// PD0: Pull up, erkenne Rising Edge
    18c4:	89 e1       	ldi	r24, 0x19	; 25
    18c6:	80 8b       	std	Z+16, r24	; 0x10
	PORTH.PIN1CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_RISING_gc;// PD0: Pull up, erkenne Rising Edge
    18c8:	81 8b       	std	Z+17, r24	; 0x11
	PORTH.PIN7CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_RISING_gc;// PD0: Pull up, erkenne Rising Edge
    18ca:	87 8b       	std	Z+23, r24	; 0x17

	PORTH.INT0MASK = PIN0_bm; // PD0 lÃ¶st Interrupt 0 aus. 
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	82 87       	std	Z+10, r24	; 0x0a
	PORTH.INT1MASK = PIN1_bm;
    18d0:	82 e0       	ldi	r24, 0x02	; 2
    18d2:	83 87       	std	Z+11, r24	; 0x0b
  
	PORTH_INTCTRL = PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc; // Port D Interrupt 0: Medium Level
    18d4:	9a e0       	ldi	r25, 0x0A	; 10
    18d6:	90 93 e9 06 	sts	0x06E9, r25
	
	
	//PORTH PTT INT
	PORTA.INT0MASK = PIN7_bm; // PD0 lÃ¶st Interrupt 0 aus. 
    18da:	90 e8       	ldi	r25, 0x80	; 128
    18dc:	1a 96       	adiw	r26, 0x0a	; 10
    18de:	9c 93       	st	X, r25
	PORTA_INTCTRL = PORT_INT0LVL_MED_gc; // Port D Interrupt 0: Medium Level
    18e0:	80 93 09 06 	sts	0x0609, r24
	
	
	// Can pin interupt
	
	PORTD.OUTCLR = PIN1_bm;
    18e4:	e0 e6       	ldi	r30, 0x60	; 96
    18e6:	f6 e0       	ldi	r31, 0x06	; 6
    18e8:	86 83       	std	Z+6, r24	; 0x06
	PORTD.PIN1CTRL = PORT_ISC_FALLING_gc | PORT_OPC_PULLUP_gc;// PD0: Pull up, erkenne Rising Edge
    18ea:	9a e1       	ldi	r25, 0x1A	; 26
    18ec:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.INT0MASK = PIN1_bm; // PD0 lÃ¶st Interrupt 0 aus. 
    18ee:	82 87       	std	Z+10, r24	; 0x0a
    PORTD_INTCTRL = PORT_INT0LVL_MED_gc; // Port D Interrupt 0: Medium Level
    18f0:	80 93 69 06 	sts	0x0669, r24
	PORTD.INTFLAGS = 0x00;
    18f4:	14 86       	std	Z+12, r1	; 0x0c
  
  
  //Enable Medium-Level-Interrupts 
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    18f6:	87 e0       	ldi	r24, 0x07	; 7
    18f8:	e0 ea       	ldi	r30, 0xA0	; 160
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	82 83       	std	Z+2, r24	; 0x02
  //Enable Interrupts 
	sei();
    18fe:	78 94       	sei
	// LCD REGISTER TOLKEN
	int DR = 2;
	int CR =3;
	// display deklaration

	u8g_Init8Bit( &u8g,&u8g_dev_ks0108_128x64 , u8g_Pin(DR,0), u8g_Pin(DR,1), u8g_Pin(DR,2), u8g_Pin(DR,3), PN(DR,4), PN(DR,5), PN(DR,6), PN(CR,6),PN(CR,5),PN(CR,0),PN(CR,1),PN(CR,4),PN(CR,3),PN(CR,2));
    1900:	62 e0       	ldi	r22, 0x02	; 2
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	0e 94 a7 24 	call	0x494e	; 0x494e <u8g_Pin>
    1908:	78 2e       	mov	r7, r24
    190a:	63 e0       	ldi	r22, 0x03	; 3
    190c:	83 e0       	ldi	r24, 0x03	; 3
    190e:	0e 94 a7 24 	call	0x494e	; 0x494e <u8g_Pin>
    1912:	98 2e       	mov	r9, r24
    1914:	64 e0       	ldi	r22, 0x04	; 4
    1916:	83 e0       	ldi	r24, 0x03	; 3
    1918:	0e 94 a7 24 	call	0x494e	; 0x494e <u8g_Pin>
    191c:	b8 2e       	mov	r11, r24
    191e:	61 e0       	ldi	r22, 0x01	; 1
    1920:	83 e0       	ldi	r24, 0x03	; 3
    1922:	0e 94 a7 24 	call	0x494e	; 0x494e <u8g_Pin>
    1926:	d8 2e       	mov	r13, r24
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	83 e0       	ldi	r24, 0x03	; 3
    192c:	0e 94 a7 24 	call	0x494e	; 0x494e <u8g_Pin>
    1930:	f8 2e       	mov	r15, r24
    1932:	65 e0       	ldi	r22, 0x05	; 5
    1934:	83 e0       	ldi	r24, 0x03	; 3
    1936:	0e 94 a7 24 	call	0x494e	; 0x494e <u8g_Pin>
    193a:	18 2f       	mov	r17, r24
    193c:	66 e0       	ldi	r22, 0x06	; 6
    193e:	83 e0       	ldi	r24, 0x03	; 3
    1940:	0e 94 a7 24 	call	0x494e	; 0x494e <u8g_Pin>
    1944:	d8 2f       	mov	r29, r24
    1946:	66 e0       	ldi	r22, 0x06	; 6
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	0e 94 a7 24 	call	0x494e	; 0x494e <u8g_Pin>
    194e:	88 2e       	mov	r8, r24
    1950:	65 e0       	ldi	r22, 0x05	; 5
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	0e 94 a7 24 	call	0x494e	; 0x494e <u8g_Pin>
    1958:	a8 2e       	mov	r10, r24
    195a:	64 e0       	ldi	r22, 0x04	; 4
    195c:	82 e0       	ldi	r24, 0x02	; 2
    195e:	0e 94 a7 24 	call	0x494e	; 0x494e <u8g_Pin>
    1962:	c8 2e       	mov	r12, r24
    1964:	63 e0       	ldi	r22, 0x03	; 3
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	0e 94 a7 24 	call	0x494e	; 0x494e <u8g_Pin>
    196c:	e8 2e       	mov	r14, r24
    196e:	62 e0       	ldi	r22, 0x02	; 2
    1970:	82 e0       	ldi	r24, 0x02	; 2
    1972:	0e 94 a7 24 	call	0x494e	; 0x494e <u8g_Pin>
    1976:	08 2f       	mov	r16, r24
    1978:	61 e0       	ldi	r22, 0x01	; 1
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	0e 94 a7 24 	call	0x494e	; 0x494e <u8g_Pin>
    1980:	c8 2f       	mov	r28, r24
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	82 e0       	ldi	r24, 0x02	; 2
    1986:	0e 94 a7 24 	call	0x494e	; 0x494e <u8g_Pin>
    198a:	7f 92       	push	r7
    198c:	9f 92       	push	r9
    198e:	bf 92       	push	r11
    1990:	df 92       	push	r13
    1992:	ff 92       	push	r15
    1994:	1f 93       	push	r17
    1996:	df 93       	push	r29
    1998:	2c 2f       	mov	r18, r28
    199a:	48 2f       	mov	r20, r24
    199c:	64 e1       	ldi	r22, 0x14	; 20
    199e:	70 e2       	ldi	r23, 0x20	; 32
    19a0:	85 ed       	ldi	r24, 0xD5	; 213
    19a2:	95 e2       	ldi	r25, 0x25	; 37
    19a4:	0e 94 2f 29 	call	0x525e	; 0x525e <u8g_Init8Bit>


	//sei();
	stdout = stdin = &usart_str;
    19a8:	86 e0       	ldi	r24, 0x06	; 6
    19aa:	90 e2       	ldi	r25, 0x20	; 32
    19ac:	80 93 57 27 	sts	0x2757, r24
    19b0:	90 93 58 27 	sts	0x2758, r25
    19b4:	80 93 59 27 	sts	0x2759, r24
    19b8:	90 93 5a 27 	sts	0x275A, r25
		// canbus init
	CAN_init();
    19bc:	0e 94 4a 06 	call	0xc94	; 0xc94 <CAN_init>
	//clear_alert();
	

	
	setup_timmer();	 
    19c0:	0e 94 4c 2c 	call	0x5898	; 0x5898 <setup_timmer>
	//uarts
	setUpSerial_rpt();
    19c4:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <setUpSerial_rpt>
	setUpSerial_main();
    19c8:	0e 94 ca 0b 	call	0x1794	; 0x1794 <setUpSerial_main>
    19cc:	8d b7       	in	r24, 0x3d	; 61
    19ce:	9e b7       	in	r25, 0x3e	; 62
    19d0:	07 96       	adiw	r24, 0x07	; 7
    19d2:	8d bf       	out	0x3d, r24	; 61
    19d4:	9e bf       	out	0x3e, r25	; 62

}
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	ff 90       	pop	r15
    19e0:	ef 90       	pop	r14
    19e2:	df 90       	pop	r13
    19e4:	cf 90       	pop	r12
    19e6:	bf 90       	pop	r11
    19e8:	af 90       	pop	r10
    19ea:	9f 90       	pop	r9
    19ec:	8f 90       	pop	r8
    19ee:	7f 90       	pop	r7
    19f0:	08 95       	ret

000019f2 <sendChar_d>:
	
}
void sendChar_d(char c)
{
	
	while( !(USARTD0_STATUS & USART_DREIF_bm) ); //Wait until DATA buffer is empty	
    19f2:	e1 ea       	ldi	r30, 0xA1	; 161
    19f4:	f9 e0       	ldi	r31, 0x09	; 9
    19f6:	90 81       	ld	r25, Z
    19f8:	95 ff       	sbrs	r25, 5
    19fa:	fd cf       	rjmp	.-6      	; 0x19f6 <sendChar_d+0x4>
	USARTD0_DATA =c;
    19fc:	80 93 a0 09 	sts	0x09A0, r24
    1a00:	08 95       	ret

00001a02 <sendChar_f>:
}

void sendChar_f(char c)
{
	
	while( !(USARTF0_STATUS & USART_DREIF_bm) ); //Wait until DATA buffer is empty
    1a02:	e1 ea       	ldi	r30, 0xA1	; 161
    1a04:	fb e0       	ldi	r31, 0x0B	; 11
    1a06:	90 81       	ld	r25, Z
    1a08:	95 ff       	sbrs	r25, 5
    1a0a:	fd cf       	rjmp	.-6      	; 0x1a06 <sendChar_f+0x4>
	
	USARTF0_DATA =c;
    1a0c:	80 93 a0 0b 	sts	0x0BA0, r24
    1a10:	08 95       	ret

00001a12 <sendString_f>:
		sendChar_d(*text++);

	}
}
void sendString_f(char *text)
{
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	ec 01       	movw	r28, r24
	while(*text)
    1a18:	88 81       	ld	r24, Y
    1a1a:	88 23       	and	r24, r24
    1a1c:	31 f0       	breq	.+12     	; 0x1a2a <sendString_f+0x18>
    1a1e:	21 96       	adiw	r28, 0x01	; 1
	{
		sendChar_f(*text++);
    1a20:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <sendChar_f>

	}
}
void sendString_f(char *text)
{
	while(*text)
    1a24:	89 91       	ld	r24, Y+
    1a26:	81 11       	cpse	r24, r1
    1a28:	fb cf       	rjmp	.-10     	; 0x1a20 <sendString_f+0xe>
	{
		sendChar_f(*text++);

	}
}
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	08 95       	ret

00001a30 <easy_com_angel>:
int EL =0;
/*
Funtion för easycom samt yeasu format för rotor med återkoppling
*/
void easy_com_angel(volatile unsigned char  * data_in)
{
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	2f 97       	sbiw	r28, 0x0f	; 15
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	8c 01       	movw	r16, r24
	char print_str[15];

	// easy com
	if (data_in[0] =='A' && data_in[1] =='Z')
    1a44:	fc 01       	movw	r30, r24
    1a46:	80 81       	ld	r24, Z
    1a48:	81 34       	cpi	r24, 0x41	; 65
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <easy_com_angel+0x1e>
    1a4c:	7d c0       	rjmp	.+250    	; 0x1b48 <easy_com_angel+0x118>
    1a4e:	81 81       	ldd	r24, Z+1	; 0x01
    1a50:	8a 35       	cpi	r24, 0x5A	; 90
    1a52:	09 f0       	breq	.+2      	; 0x1a56 <easy_com_angel+0x26>
    1a54:	79 c0       	rjmp	.+242    	; 0x1b48 <easy_com_angel+0x118>
	{
		if(data_in[4] != '.')
    1a56:	84 81       	ldd	r24, Z+4	; 0x04
    1a58:	8e 32       	cpi	r24, 0x2E	; 46
    1a5a:	e9 f1       	breq	.+122    	; 0x1ad6 <easy_com_angel+0xa6>
		{
			AZ = ((data_in[2]-'0')*100)+((data_in[3]-'0')*10)+(data_in[4]-'0');
    1a5c:	62 81       	ldd	r22, Z+2	; 0x02
    1a5e:	83 81       	ldd	r24, Z+3	; 0x03
    1a60:	24 81       	ldd	r18, Z+4	; 0x04
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	60 53       	subi	r22, 0x30	; 48
    1a66:	71 09       	sbc	r23, r1
    1a68:	94 e6       	ldi	r25, 0x64	; 100
    1a6a:	96 9f       	mul	r25, r22
    1a6c:	a0 01       	movw	r20, r0
    1a6e:	97 9f       	mul	r25, r23
    1a70:	50 0d       	add	r21, r0
    1a72:	11 24       	eor	r1, r1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	c0 97       	sbiw	r24, 0x30	; 48
    1a78:	bc 01       	movw	r22, r24
    1a7a:	66 0f       	add	r22, r22
    1a7c:	77 1f       	adc	r23, r23
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	86 0f       	add	r24, r22
    1a8c:	97 1f       	adc	r25, r23
    1a8e:	84 0f       	add	r24, r20
    1a90:	95 1f       	adc	r25, r21
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	20 53       	subi	r18, 0x30	; 48
    1a96:	31 09       	sbc	r19, r1
    1a98:	82 0f       	add	r24, r18
    1a9a:	93 1f       	adc	r25, r19
    1a9c:	80 93 78 22 	sts	0x2278, r24
    1aa0:	90 93 79 22 	sts	0x2279, r25
			EL = ((data_in[10]-'0')*10)+((data_in[11]-'0'));
    1aa4:	82 85       	ldd	r24, Z+10	; 0x0a
    1aa6:	23 85       	ldd	r18, Z+11	; 0x0b
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	c0 97       	sbiw	r24, 0x30	; 48
    1aac:	ac 01       	movw	r20, r24
    1aae:	44 0f       	add	r20, r20
    1ab0:	55 1f       	adc	r21, r21
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	84 0f       	add	r24, r20
    1ac0:	95 1f       	adc	r25, r21
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	20 53       	subi	r18, 0x30	; 48
    1ac6:	31 09       	sbc	r19, r1
    1ac8:	82 0f       	add	r24, r18
    1aca:	93 1f       	adc	r25, r19
    1acc:	80 93 76 22 	sts	0x2276, r24
    1ad0:	90 93 77 22 	sts	0x2277, r25
    1ad4:	31 c0       	rjmp	.+98     	; 0x1b38 <easy_com_angel+0x108>
		}
		else
		{
			AZ = ((data_in[2]-'0')*10)+((data_in[3]-'0'));
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	23 81       	ldd	r18, Z+3	; 0x03
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	c0 97       	sbiw	r24, 0x30	; 48
    1ae0:	ac 01       	movw	r20, r24
    1ae2:	44 0f       	add	r20, r20
    1ae4:	55 1f       	adc	r21, r21
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	84 0f       	add	r24, r20
    1af4:	95 1f       	adc	r25, r21
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	20 53       	subi	r18, 0x30	; 48
    1afa:	31 09       	sbc	r19, r1
    1afc:	82 0f       	add	r24, r18
    1afe:	93 1f       	adc	r25, r19
    1b00:	80 93 78 22 	sts	0x2278, r24
    1b04:	90 93 79 22 	sts	0x2279, r25
			EL = ((data_in[9]-'0')*10)+((data_in[10]-'0'));
    1b08:	81 85       	ldd	r24, Z+9	; 0x09
    1b0a:	22 85       	ldd	r18, Z+10	; 0x0a
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	c0 97       	sbiw	r24, 0x30	; 48
    1b10:	ac 01       	movw	r20, r24
    1b12:	44 0f       	add	r20, r20
    1b14:	55 1f       	adc	r21, r21
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	84 0f       	add	r24, r20
    1b24:	95 1f       	adc	r25, r21
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	20 53       	subi	r18, 0x30	; 48
    1b2a:	31 09       	sbc	r19, r1
    1b2c:	82 0f       	add	r24, r18
    1b2e:	93 1f       	adc	r25, r19
    1b30:	80 93 76 22 	sts	0x2276, r24
    1b34:	90 93 77 22 	sts	0x2277, r25
			
		}

/*		printf("AZ %i  EL %i\r",AZ,EL);	*/
		rotor_target  = AZ;
    1b38:	80 91 78 22 	lds	r24, 0x2278
    1b3c:	90 91 79 22 	lds	r25, 0x2279
    1b40:	80 93 7e 22 	sts	0x227E, r24
    1b44:	90 93 7f 22 	sts	0x227F, r25
	}
	// yeasu
	if (data_in[0] =='W')
    1b48:	f8 01       	movw	r30, r16
    1b4a:	80 81       	ld	r24, Z
    1b4c:	87 35       	cpi	r24, 0x57	; 87
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <easy_com_angel+0x122>
    1b50:	42 c0       	rjmp	.+132    	; 0x1bd6 <easy_com_angel+0x1a6>
	{
		AZ = ((data_in[1]-'0')*100)+((data_in[2]-'0')*10)+(data_in[3]-'0');
    1b52:	61 81       	ldd	r22, Z+1	; 0x01
    1b54:	22 81       	ldd	r18, Z+2	; 0x02
    1b56:	43 81       	ldd	r20, Z+3	; 0x03
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	60 53       	subi	r22, 0x30	; 48
    1b5c:	71 09       	sbc	r23, r1
    1b5e:	34 e6       	ldi	r19, 0x64	; 100
    1b60:	36 9f       	mul	r19, r22
    1b62:	c0 01       	movw	r24, r0
    1b64:	37 9f       	mul	r19, r23
    1b66:	90 0d       	add	r25, r0
    1b68:	11 24       	eor	r1, r1
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	20 53       	subi	r18, 0x30	; 48
    1b6e:	31 09       	sbc	r19, r1
    1b70:	b9 01       	movw	r22, r18
    1b72:	66 0f       	add	r22, r22
    1b74:	77 1f       	adc	r23, r23
    1b76:	22 0f       	add	r18, r18
    1b78:	33 1f       	adc	r19, r19
    1b7a:	22 0f       	add	r18, r18
    1b7c:	33 1f       	adc	r19, r19
    1b7e:	22 0f       	add	r18, r18
    1b80:	33 1f       	adc	r19, r19
    1b82:	26 0f       	add	r18, r22
    1b84:	37 1f       	adc	r19, r23
    1b86:	82 0f       	add	r24, r18
    1b88:	93 1f       	adc	r25, r19
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	40 53       	subi	r20, 0x30	; 48
    1b8e:	51 09       	sbc	r21, r1
    1b90:	84 0f       	add	r24, r20
    1b92:	95 1f       	adc	r25, r21
    1b94:	80 93 78 22 	sts	0x2278, r24
    1b98:	90 93 79 22 	sts	0x2279, r25
		EL = ((data_in[6]-'0')*10)+((data_in[7]-'0'));
    1b9c:	26 81       	ldd	r18, Z+6	; 0x06
    1b9e:	47 81       	ldd	r20, Z+7	; 0x07
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	20 53       	subi	r18, 0x30	; 48
    1ba4:	31 09       	sbc	r19, r1
    1ba6:	b9 01       	movw	r22, r18
    1ba8:	66 0f       	add	r22, r22
    1baa:	77 1f       	adc	r23, r23
    1bac:	22 0f       	add	r18, r18
    1bae:	33 1f       	adc	r19, r19
    1bb0:	22 0f       	add	r18, r18
    1bb2:	33 1f       	adc	r19, r19
    1bb4:	22 0f       	add	r18, r18
    1bb6:	33 1f       	adc	r19, r19
    1bb8:	26 0f       	add	r18, r22
    1bba:	37 1f       	adc	r19, r23
    1bbc:	50 e0       	ldi	r21, 0x00	; 0
    1bbe:	40 53       	subi	r20, 0x30	; 48
    1bc0:	51 09       	sbc	r21, r1
    1bc2:	24 0f       	add	r18, r20
    1bc4:	35 1f       	adc	r19, r21
    1bc6:	20 93 76 22 	sts	0x2276, r18
    1bca:	30 93 77 22 	sts	0x2277, r19
		rotor_target  = AZ;
    1bce:	80 93 7e 22 	sts	0x227E, r24
    1bd2:	90 93 7f 22 	sts	0x227F, r25
	}
	if (data_in[0] =='C' && data_in[1] =='2')
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	80 81       	ld	r24, Z
    1bda:	83 34       	cpi	r24, 0x43	; 67
    1bdc:	b9 f5       	brne	.+110    	; 0x1c4c <easy_com_angel+0x21c>
    1bde:	81 81       	ldd	r24, Z+1	; 0x01
    1be0:	82 33       	cpi	r24, 0x32	; 50
    1be2:	a1 f5       	brne	.+104    	; 0x1c4c <easy_com_angel+0x21c>
	{
		if (rotor_curent  <100)
    1be4:	80 91 80 22 	lds	r24, 0x2280
    1be8:	90 91 81 22 	lds	r25, 0x2281
    1bec:	84 36       	cpi	r24, 0x64	; 100
    1bee:	91 05       	cpc	r25, r1
    1bf0:	ac f4       	brge	.+42     	; 0x1c1c <easy_com_angel+0x1ec>
		{
			//printf("AZ=0%i EL=0%i\r",rad_test,EL);
			sprintf(print_str, "AZ=0%i EL=0%i\r", rotor_curent ,EL);
    1bf2:	20 91 77 22 	lds	r18, 0x2277
    1bf6:	2f 93       	push	r18
    1bf8:	20 91 76 22 	lds	r18, 0x2276
    1bfc:	2f 93       	push	r18
    1bfe:	9f 93       	push	r25
    1c00:	8f 93       	push	r24
    1c02:	83 e2       	ldi	r24, 0x23	; 35
    1c04:	91 e2       	ldi	r25, 0x21	; 33
    1c06:	9f 93       	push	r25
    1c08:	8f 93       	push	r24
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	9f 93       	push	r25
    1c10:	8f 93       	push	r24
    1c12:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	14 c0       	rjmp	.+40     	; 0x1c44 <easy_com_angel+0x214>
			
		}
		else
		{
			//printf("AZ=%i EL=0%i\r",rad_test,EL);
			sprintf(print_str, "AZ=%i EL=0%i\r", rotor_curent ,EL);
    1c1c:	20 91 77 22 	lds	r18, 0x2277
    1c20:	2f 93       	push	r18
    1c22:	20 91 76 22 	lds	r18, 0x2276
    1c26:	2f 93       	push	r18
    1c28:	9f 93       	push	r25
    1c2a:	8f 93       	push	r24
    1c2c:	82 e3       	ldi	r24, 0x32	; 50
    1c2e:	91 e2       	ldi	r25, 0x21	; 33
    1c30:	9f 93       	push	r25
    1c32:	8f 93       	push	r24
    1c34:	ce 01       	movw	r24, r28
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	9f 93       	push	r25
    1c3a:	8f 93       	push	r24
    1c3c:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	de bf       	out	0x3e, r29	; 62
		
		}

		//printf(print_str);
		sendString_f(print_str);
    1c44:	ce 01       	movw	r24, r28
    1c46:	01 96       	adiw	r24, 0x01	; 1
    1c48:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <sendString_f>
	// SEND AZ ALONE
	}
	 if(data_in[0] =='C' &&  data_in[1] !='2') 
    1c4c:	f8 01       	movw	r30, r16
    1c4e:	80 81       	ld	r24, Z
    1c50:	83 34       	cpi	r24, 0x43	; 67
    1c52:	99 f5       	brne	.+102    	; 0x1cba <easy_com_angel+0x28a>
    1c54:	81 81       	ldd	r24, Z+1	; 0x01
    1c56:	82 33       	cpi	r24, 0x32	; 50
    1c58:	81 f1       	breq	.+96     	; 0x1cba <easy_com_angel+0x28a>
	{
		if (rotor_curent  <100)
    1c5a:	80 91 80 22 	lds	r24, 0x2280
    1c5e:	90 91 81 22 	lds	r25, 0x2281
    1c62:	84 36       	cpi	r24, 0x64	; 100
    1c64:	91 05       	cpc	r25, r1
    1c66:	9c f4       	brge	.+38     	; 0x1c8e <easy_com_angel+0x25e>
		{
			//printf("AZ=0%i\r",rad_test);
			sprintf(print_str, "AZ=0%i\r", rotor_curent);
    1c68:	9f 93       	push	r25
    1c6a:	8f 93       	push	r24
    1c6c:	80 e4       	ldi	r24, 0x40	; 64
    1c6e:	91 e2       	ldi	r25, 0x21	; 33
    1c70:	9f 93       	push	r25
    1c72:	8f 93       	push	r24
    1c74:	ce 01       	movw	r24, r28
    1c76:	01 96       	adiw	r24, 0x01	; 1
    1c78:	9f 93       	push	r25
    1c7a:	8f 93       	push	r24
    1c7c:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	12 c0       	rjmp	.+36     	; 0x1cb2 <easy_com_angel+0x282>
		}
		else
		{
			
			sprintf(print_str, "AZ=%i\r", rotor_curent);
    1c8e:	9f 93       	push	r25
    1c90:	8f 93       	push	r24
    1c92:	88 e4       	ldi	r24, 0x48	; 72
    1c94:	91 e2       	ldi	r25, 0x21	; 33
    1c96:	9f 93       	push	r25
    1c98:	8f 93       	push	r24
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	01 96       	adiw	r24, 0x01	; 1
    1c9e:	9f 93       	push	r25
    1ca0:	8f 93       	push	r24
    1ca2:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
			
		}
		sendString_f(print_str);
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	01 96       	adiw	r24, 0x01	; 1
    1cb6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <sendString_f>
	}
	if(data_in[0] =='B')
    1cba:	f8 01       	movw	r30, r16
    1cbc:	80 81       	ld	r24, Z
    1cbe:	82 34       	cpi	r24, 0x42	; 66
    1cc0:	d1 f4       	brne	.+52     	; 0x1cf6 <easy_com_angel+0x2c6>
	{
		// send EL yeasu
		//printf("EL=0%i",EL);
		sprintf(print_str, "EL=0%i\r", EL);
    1cc2:	80 91 77 22 	lds	r24, 0x2277
    1cc6:	8f 93       	push	r24
    1cc8:	80 91 76 22 	lds	r24, 0x2276
    1ccc:	8f 93       	push	r24
    1cce:	8a e2       	ldi	r24, 0x2A	; 42
    1cd0:	91 e2       	ldi	r25, 0x21	; 33
    1cd2:	9f 93       	push	r25
    1cd4:	8f 93       	push	r24
    1cd6:	8e 01       	movw	r16, r28
    1cd8:	0f 5f       	subi	r16, 0xFF	; 255
    1cda:	1f 4f       	sbci	r17, 0xFF	; 255
    1cdc:	1f 93       	push	r17
    1cde:	0f 93       	push	r16
    1ce0:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>
		sendString_f(print_str);
    1ce4:	c8 01       	movw	r24, r16
    1ce6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <sendString_f>
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
	}
	// skriver ut i debugen inkommande data
	//printf(data_in);
	
}
    1cf6:	2f 96       	adiw	r28, 0x0f	; 15
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	08 95       	ret

00001d06 <get_band>:



int get_band()
{
    1d06:	cf 92       	push	r12
    1d08:	df 92       	push	r13
    1d0a:	ef 92       	push	r14
    1d0c:	ff 92       	push	r15
	// ft-857d paket
	// get band from freqvensy yeasu
	//printf("%02X%02X\n",message_que.tx[0],message_que.tx[4]);
	
	switch(rs232radio.radio_mode)
    1d0e:	80 91 90 26 	lds	r24, 0x2690
    1d12:	90 91 91 26 	lds	r25, 0x2691
    1d16:	86 30       	cpi	r24, 0x06	; 6
    1d18:	91 05       	cpc	r25, r1
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <get_band+0x18>
    1d1c:	74 c0       	rjmp	.+232    	; 0x1e06 <get_band+0x100>
    1d1e:	8c f4       	brge	.+34     	; 0x1d42 <get_band+0x3c>
    1d20:	82 30       	cpi	r24, 0x02	; 2
    1d22:	91 05       	cpc	r25, r1
    1d24:	e1 f1       	breq	.+120    	; 0x1d9e <get_band+0x98>
    1d26:	2c f4       	brge	.+10     	; 0x1d32 <get_band+0x2c>
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	09 f1       	breq	.+66     	; 0x1d6e <get_band+0x68>
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	51 f1       	breq	.+84     	; 0x1d84 <get_band+0x7e>
    1d30:	ab c0       	rjmp	.+342    	; 0x1e88 <get_band+0x182>
    1d32:	83 30       	cpi	r24, 0x03	; 3
    1d34:	91 05       	cpc	r25, r1
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <get_band+0x34>
    1d38:	3f c0       	rjmp	.+126    	; 0x1db8 <get_band+0xb2>
    1d3a:	04 97       	sbiw	r24, 0x04	; 4
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <get_band+0x3a>
    1d3e:	49 c0       	rjmp	.+146    	; 0x1dd2 <get_band+0xcc>
    1d40:	a3 c0       	rjmp	.+326    	; 0x1e88 <get_band+0x182>
    1d42:	8c 30       	cpi	r24, 0x0C	; 12
    1d44:	91 05       	cpc	r25, r1
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <get_band+0x44>
    1d48:	92 c0       	rjmp	.+292    	; 0x1e6e <get_band+0x168>
    1d4a:	44 f4       	brge	.+16     	; 0x1d5c <get_band+0x56>
    1d4c:	88 30       	cpi	r24, 0x08	; 8
    1d4e:	91 05       	cpc	r25, r1
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <get_band+0x4e>
    1d52:	66 c0       	rjmp	.+204    	; 0x1e20 <get_band+0x11a>
    1d54:	0a 97       	sbiw	r24, 0x0a	; 10
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <get_band+0x54>
    1d58:	7d c0       	rjmp	.+250    	; 0x1e54 <get_band+0x14e>
    1d5a:	96 c0       	rjmp	.+300    	; 0x1e88 <get_band+0x182>
    1d5c:	82 38       	cpi	r24, 0x82	; 130
    1d5e:	91 05       	cpc	r25, r1
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <get_band+0x5e>
    1d62:	44 c0       	rjmp	.+136    	; 0x1dec <get_band+0xe6>
    1d64:	88 38       	cpi	r24, 0x88	; 136
    1d66:	91 05       	cpc	r25, r1
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <get_band+0x66>
    1d6a:	67 c0       	rjmp	.+206    	; 0x1e3a <get_band+0x134>
    1d6c:	8d c0       	rjmp	.+282    	; 0x1e88 <get_band+0x182>
	{
		case 0x00:
			rs232radio.mode ="LSB";
    1d6e:	8f e4       	ldi	r24, 0x4F	; 79
    1d70:	91 e2       	ldi	r25, 0x21	; 33
    1d72:	80 93 92 26 	sts	0x2692, r24
    1d76:	90 93 93 26 	sts	0x2693, r25
			rs232radio.mode_id=0;
    1d7a:	10 92 86 26 	sts	0x2686, r1
    1d7e:	10 92 87 26 	sts	0x2687, r1
			break;
    1d82:	88 c0       	rjmp	.+272    	; 0x1e94 <get_band+0x18e>
		case 0x01:
			rs232radio.mode ="USB";
    1d84:	83 e5       	ldi	r24, 0x53	; 83
    1d86:	91 e2       	ldi	r25, 0x21	; 33
    1d88:	80 93 92 26 	sts	0x2692, r24
    1d8c:	90 93 93 26 	sts	0x2693, r25
			rs232radio.mode_id=1;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	80 93 86 26 	sts	0x2686, r24
    1d98:	90 93 87 26 	sts	0x2687, r25
			break;
    1d9c:	7b c0       	rjmp	.+246    	; 0x1e94 <get_band+0x18e>
		case 0x02:
			rs232radio.mode ="CW";
    1d9e:	87 e5       	ldi	r24, 0x57	; 87
    1da0:	91 e2       	ldi	r25, 0x21	; 33
    1da2:	80 93 92 26 	sts	0x2692, r24
    1da6:	90 93 93 26 	sts	0x2693, r25
			rs232radio.mode_id=2;
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	80 93 86 26 	sts	0x2686, r24
    1db2:	90 93 87 26 	sts	0x2687, r25
			break;
    1db6:	6e c0       	rjmp	.+220    	; 0x1e94 <get_band+0x18e>
		case 0x03:
			rs232radio.mode ="CW-R";
    1db8:	8a e5       	ldi	r24, 0x5A	; 90
    1dba:	91 e2       	ldi	r25, 0x21	; 33
    1dbc:	80 93 92 26 	sts	0x2692, r24
    1dc0:	90 93 93 26 	sts	0x2693, r25
			rs232radio.mode_id=3;
    1dc4:	83 e0       	ldi	r24, 0x03	; 3
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	80 93 86 26 	sts	0x2686, r24
    1dcc:	90 93 87 26 	sts	0x2687, r25
			break;
    1dd0:	61 c0       	rjmp	.+194    	; 0x1e94 <get_band+0x18e>
		case 0x4:
			rs232radio.mode ="AM";
    1dd2:	8f e5       	ldi	r24, 0x5F	; 95
    1dd4:	91 e2       	ldi	r25, 0x21	; 33
    1dd6:	80 93 92 26 	sts	0x2692, r24
    1dda:	90 93 93 26 	sts	0x2693, r25
			rs232radio.mode_id=4;
    1dde:	84 e0       	ldi	r24, 0x04	; 4
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	80 93 86 26 	sts	0x2686, r24
    1de6:	90 93 87 26 	sts	0x2687, r25
			break;
    1dea:	54 c0       	rjmp	.+168    	; 0x1e94 <get_band+0x18e>
		case 0x82:
			rs232radio.mode ="CW-N";
    1dec:	82 e6       	ldi	r24, 0x62	; 98
    1dee:	91 e2       	ldi	r25, 0x21	; 33
    1df0:	80 93 92 26 	sts	0x2692, r24
    1df4:	90 93 93 26 	sts	0x2693, r25
			rs232radio.mode_id=5;
    1df8:	85 e0       	ldi	r24, 0x05	; 5
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	80 93 86 26 	sts	0x2686, r24
    1e00:	90 93 87 26 	sts	0x2687, r25
			break;
    1e04:	47 c0       	rjmp	.+142    	; 0x1e94 <get_band+0x18e>
		case 0x06:
			rs232radio.mode ="WFM";
    1e06:	87 e6       	ldi	r24, 0x67	; 103
    1e08:	91 e2       	ldi	r25, 0x21	; 33
    1e0a:	80 93 92 26 	sts	0x2692, r24
    1e0e:	90 93 93 26 	sts	0x2693, r25
			rs232radio.mode_id=6;
    1e12:	86 e0       	ldi	r24, 0x06	; 6
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	80 93 86 26 	sts	0x2686, r24
    1e1a:	90 93 87 26 	sts	0x2687, r25
			break;
    1e1e:	3a c0       	rjmp	.+116    	; 0x1e94 <get_band+0x18e>
		case 0x08:
			rs232radio.mode_id=7;
    1e20:	87 e0       	ldi	r24, 0x07	; 7
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	80 93 86 26 	sts	0x2686, r24
    1e28:	90 93 87 26 	sts	0x2687, r25
			rs232radio.mode ="FM";
    1e2c:	8c e6       	ldi	r24, 0x6C	; 108
    1e2e:	91 e2       	ldi	r25, 0x21	; 33
    1e30:	80 93 92 26 	sts	0x2692, r24
    1e34:	90 93 93 26 	sts	0x2693, r25
			break;
    1e38:	2d c0       	rjmp	.+90     	; 0x1e94 <get_band+0x18e>
		case 0x88:
			rs232radio.mode_id=8;
    1e3a:	88 e0       	ldi	r24, 0x08	; 8
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	80 93 86 26 	sts	0x2686, r24
    1e42:	90 93 87 26 	sts	0x2687, r25
			rs232radio.mode ="NFM";
    1e46:	8b e6       	ldi	r24, 0x6B	; 107
    1e48:	91 e2       	ldi	r25, 0x21	; 33
    1e4a:	80 93 92 26 	sts	0x2692, r24
    1e4e:	90 93 93 26 	sts	0x2693, r25
			break;
    1e52:	20 c0       	rjmp	.+64     	; 0x1e94 <get_band+0x18e>
					
		case 0x0A:
			rs232radio.mode_id=9;
    1e54:	89 e0       	ldi	r24, 0x09	; 9
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	80 93 86 26 	sts	0x2686, r24
    1e5c:	90 93 87 26 	sts	0x2687, r25
			rs232radio.mode ="DIG";
    1e60:	8f e6       	ldi	r24, 0x6F	; 111
    1e62:	91 e2       	ldi	r25, 0x21	; 33
    1e64:	80 93 92 26 	sts	0x2692, r24
    1e68:	90 93 93 26 	sts	0x2693, r25
			break;
    1e6c:	13 c0       	rjmp	.+38     	; 0x1e94 <get_band+0x18e>
					
		case 0x0C:
			rs232radio.mode_id=10;
    1e6e:	8a e0       	ldi	r24, 0x0A	; 10
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	80 93 86 26 	sts	0x2686, r24
    1e76:	90 93 87 26 	sts	0x2687, r25
			rs232radio.mode ="PKT";
    1e7a:	83 e7       	ldi	r24, 0x73	; 115
    1e7c:	91 e2       	ldi	r25, 0x21	; 33
    1e7e:	80 93 92 26 	sts	0x2692, r24
    1e82:	90 93 93 26 	sts	0x2693, r25
			break;			
    1e86:	06 c0       	rjmp	.+12     	; 0x1e94 <get_band+0x18e>
		default:
			rs232radio.mode ="";
    1e88:	85 ea       	ldi	r24, 0xA5	; 165
    1e8a:	90 e2       	ldi	r25, 0x20	; 32
    1e8c:	80 93 92 26 	sts	0x2692, r24
    1e90:	90 93 93 26 	sts	0x2693, r25
			break;

	}
	float band = ((long)30000000 /rs232radio.freqvensy);		
    1e94:	20 91 8c 26 	lds	r18, 0x268C
    1e98:	30 91 8d 26 	lds	r19, 0x268D
    1e9c:	40 91 8e 26 	lds	r20, 0x268E
    1ea0:	50 91 8f 26 	lds	r21, 0x268F
    1ea4:	60 e8       	ldi	r22, 0x80	; 128
    1ea6:	73 ec       	ldi	r23, 0xC3	; 195
    1ea8:	89 ec       	ldi	r24, 0xC9	; 201
    1eaa:	91 e0       	ldi	r25, 0x01	; 1
    1eac:	0e 94 19 35 	call	0x6a32	; 0x6a32 <__divmodsi4>
    1eb0:	ca 01       	movw	r24, r20
    1eb2:	b9 01       	movw	r22, r18
    1eb4:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <__floatsisf>
    1eb8:	6b 01       	movw	r12, r22
    1eba:	7c 01       	movw	r14, r24
	// sparar frekvensen i struckt
	if (band >-1 && band < 800)
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e8       	ldi	r20, 0x80	; 128
    1ec2:	5f eb       	ldi	r21, 0xBF	; 191
    1ec4:	0e 94 70 30 	call	0x60e0	; 0x60e0 <__gesf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	bc f5       	brge	.+110    	; 0x1f3a <get_band+0x234>
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	48 e4       	ldi	r20, 0x48	; 72
    1ed2:	54 e4       	ldi	r21, 0x44	; 68
    1ed4:	c7 01       	movw	r24, r14
    1ed6:	b6 01       	movw	r22, r12
    1ed8:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <__cmpsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	6c f5       	brge	.+90     	; 0x1f3a <get_band+0x234>
	{			
		if((float)band <1)
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	c7 01       	movw	r24, r14
    1eea:	b6 01       	movw	r22, r12
    1eec:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <__cmpsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	8c f4       	brge	.+34     	; 0x1f16 <get_band+0x210>
		{
			rs232radio.meter=0;
    1ef4:	10 92 80 26 	sts	0x2680, r1
    1ef8:	10 92 81 26 	sts	0x2681, r1
			rs232radio.band = 70;
    1efc:	86 e4       	ldi	r24, 0x46	; 70
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a0 e0       	ldi	r26, 0x00	; 0
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	80 93 7c 26 	sts	0x267C, r24
    1f08:	90 93 7d 26 	sts	0x267D, r25
    1f0c:	a0 93 7e 26 	sts	0x267E, r26
    1f10:	b0 93 7f 26 	sts	0x267F, r27
    1f14:	12 c0       	rjmp	.+36     	; 0x1f3a <get_band+0x234>
		}
		else
		{
			rs232radio.meter=1;
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	80 93 80 26 	sts	0x2680, r24
    1f1e:	90 93 81 26 	sts	0x2681, r25
			rs232radio.band = band;
    1f22:	c7 01       	movw	r24, r14
    1f24:	b6 01       	movw	r22, r12
    1f26:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <__fixunssfsi>
    1f2a:	60 93 7c 26 	sts	0x267C, r22
    1f2e:	70 93 7d 26 	sts	0x267D, r23
    1f32:	80 93 7e 26 	sts	0x267E, r24
    1f36:	90 93 7f 26 	sts	0x267F, r25
		}
	}
	
	return 0;
}
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	ff 90       	pop	r15
    1f40:	ef 90       	pop	r14
    1f42:	df 90       	pop	r13
    1f44:	cf 90       	pop	r12
    1f46:	08 95       	ret

00001f48 <main_screen>:
	
}


void main_screen()
{
    1f48:	3f 92       	push	r3
    1f4a:	4f 92       	push	r4
    1f4c:	5f 92       	push	r5
    1f4e:	6f 92       	push	r6
    1f50:	7f 92       	push	r7
    1f52:	8f 92       	push	r8
    1f54:	9f 92       	push	r9
    1f56:	af 92       	push	r10
    1f58:	bf 92       	push	r11
    1f5a:	cf 92       	push	r12
    1f5c:	df 92       	push	r13
    1f5e:	ef 92       	push	r14
    1f60:	ff 92       	push	r15
    1f62:	0f 93       	push	r16
    1f64:	1f 93       	push	r17
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	ca 5a       	subi	r28, 0xAA	; 170
    1f70:	d1 09       	sbc	r29, r1
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	de bf       	out	0x3e, r29	; 62
	//meny_selectors(menu);
	u8g_FirstPage(&u8g);
    1f76:	85 ed       	ldi	r24, 0xD5	; 213
    1f78:	95 e2       	ldi	r25, 0x25	; 37
    1f7a:	0e 94 6d 29 	call	0x52da	; 0x52da <u8g_FirstPage>
	
	char menu_test[7][20] ={"Rotor","Radio","BUSS","CAN","test4"} ;
    1f7e:	de 01       	movw	r26, r28
    1f80:	11 96       	adiw	r26, 0x01	; 1
    1f82:	8c e8       	ldi	r24, 0x8C	; 140
    1f84:	fd 01       	movw	r30, r26
    1f86:	11 92       	st	Z+, r1
    1f88:	8a 95       	dec	r24
    1f8a:	e9 f7       	brne	.-6      	; 0x1f86 <main_screen+0x3e>
    1f8c:	86 e0       	ldi	r24, 0x06	; 6
    1f8e:	e2 e2       	ldi	r30, 0x22	; 34
    1f90:	f0 e2       	ldi	r31, 0x20	; 32
    1f92:	01 90       	ld	r0, Z+
    1f94:	0d 92       	st	X+, r0
    1f96:	8a 95       	dec	r24
    1f98:	e1 f7       	brne	.-8      	; 0x1f92 <main_screen+0x4a>
    1f9a:	2e e0       	ldi	r18, 0x0E	; 14
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	37 96       	adiw	r30, 0x07	; 7
    1fa0:	df 01       	movw	r26, r30
    1fa2:	32 2f       	mov	r19, r18
    1fa4:	1d 92       	st	X+, r1
    1fa6:	3a 95       	dec	r19
    1fa8:	e9 f7       	brne	.-6      	; 0x1fa4 <main_screen+0x5c>
    1faa:	86 e0       	ldi	r24, 0x06	; 6
    1fac:	e6 e3       	ldi	r30, 0x36	; 54
    1fae:	f0 e2       	ldi	r31, 0x20	; 32
    1fb0:	de 01       	movw	r26, r28
    1fb2:	55 96       	adiw	r26, 0x15	; 21
    1fb4:	01 90       	ld	r0, Z+
    1fb6:	0d 92       	st	X+, r0
    1fb8:	8a 95       	dec	r24
    1fba:	e1 f7       	brne	.-8      	; 0x1fb4 <main_screen+0x6c>
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	7b 96       	adiw	r30, 0x1b	; 27
    1fc0:	df 01       	movw	r26, r30
    1fc2:	32 2f       	mov	r19, r18
    1fc4:	1d 92       	st	X+, r1
    1fc6:	3a 95       	dec	r19
    1fc8:	e9 f7       	brne	.-6      	; 0x1fc4 <main_screen+0x7c>
    1fca:	85 e0       	ldi	r24, 0x05	; 5
    1fcc:	ea e4       	ldi	r30, 0x4A	; 74
    1fce:	f0 e2       	ldi	r31, 0x20	; 32
    1fd0:	de 01       	movw	r26, r28
    1fd2:	99 96       	adiw	r26, 0x29	; 41
    1fd4:	01 90       	ld	r0, Z+
    1fd6:	0d 92       	st	X+, r0
    1fd8:	8a 95       	dec	r24
    1fda:	e1 f7       	brne	.-8      	; 0x1fd4 <main_screen+0x8c>
    1fdc:	fe 01       	movw	r30, r28
    1fde:	be 96       	adiw	r30, 0x2e	; 46
    1fe0:	8f e0       	ldi	r24, 0x0F	; 15
    1fe2:	df 01       	movw	r26, r30
    1fe4:	1d 92       	st	X+, r1
    1fe6:	8a 95       	dec	r24
    1fe8:	e9 f7       	brne	.-6      	; 0x1fe4 <main_screen+0x9c>
    1fea:	83 e4       	ldi	r24, 0x43	; 67
    1fec:	91 e4       	ldi	r25, 0x41	; 65
    1fee:	ae e4       	ldi	r26, 0x4E	; 78
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	21 96       	adiw	r28, 0x01	; 1
    1ff4:	8c af       	std	Y+60, r24	; 0x3c
    1ff6:	9d af       	std	Y+61, r25	; 0x3d
    1ff8:	ae af       	std	Y+62, r26	; 0x3e
    1ffa:	bf af       	std	Y+63, r27	; 0x3f
    1ffc:	21 97       	sbiw	r28, 0x01	; 1
    1ffe:	73 96       	adiw	r30, 0x13	; 19
    2000:	80 e1       	ldi	r24, 0x10	; 16
    2002:	df 01       	movw	r26, r30
    2004:	1d 92       	st	X+, r1
    2006:	8a 95       	dec	r24
    2008:	e9 f7       	brne	.-6      	; 0x2004 <main_screen+0xbc>
    200a:	86 e0       	ldi	r24, 0x06	; 6
    200c:	ee e5       	ldi	r30, 0x5E	; 94
    200e:	f0 e2       	ldi	r31, 0x20	; 32
    2010:	de 01       	movw	r26, r28
    2012:	af 5a       	subi	r26, 0xAF	; 175
    2014:	bf 4f       	sbci	r27, 0xFF	; 255
    2016:	01 90       	ld	r0, Z+
    2018:	0d 92       	st	X+, r0
    201a:	8a 95       	dec	r24
    201c:	e1 f7       	brne	.-8      	; 0x2016 <main_screen+0xce>
    201e:	e1 e5       	ldi	r30, 0x51	; 81
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	ec 0f       	add	r30, r28
    2024:	fd 1f       	adc	r31, r29
    2026:	36 96       	adiw	r30, 0x06	; 6
    2028:	df 01       	movw	r26, r30
    202a:	1d 92       	st	X+, r1
    202c:	2a 95       	dec	r18
    202e:	e9 f7       	brne	.-6      	; 0x202a <main_screen+0xe2>
	  u8g_DrawFrame(&u8g, 70, 0, 58, 64);
	  u8g_SetFontRefHeightText(&u8g);
	  u8g_SetFontPosTop(&u8g);
	  get_band();
	  
	  h = u8g_GetFontAscent(&u8g)-u8g_GetFontDescent(&u8g);
    2030:	0f 2e       	mov	r0, r31
    2032:	fd ee       	ldi	r31, 0xED	; 237
    2034:	8f 2e       	mov	r8, r31
    2036:	f5 e2       	ldi	r31, 0x25	; 37
    2038:	9f 2e       	mov	r9, r31
    203a:	f0 2d       	mov	r31, r0
    203c:	0f 2e       	mov	r0, r31
    203e:	fe ee       	ldi	r31, 0xEE	; 238
    2040:	4f 2e       	mov	r4, r31
    2042:	f5 e2       	ldi	r31, 0x25	; 37
    2044:	5f 2e       	mov	r5, r31
    2046:	f0 2d       	mov	r31, r0
{
	u8g_SetFont(&u8g, u8g_font_6x10);
	

	char freq_basform[10];
		sprintf(freq_basform, "%ld", rs232radio.freqvensy);
    2048:	3e 01       	movw	r6, r28
    204a:	b5 e9       	ldi	r27, 0x95	; 149
    204c:	6b 0e       	add	r6, r27
    204e:	71 1c       	adc	r7, r1
			sprintf(str, "%.3s.%.3s.%.2s",freq_basform,freq_basform+3,freq_basform+6);
			
		}
		
		u8g_DrawStr(&u8g, 2, 2,"Frequency:" );
		u8g_DrawStr(&u8g, 2, 12,str );
    2050:	5e 01       	movw	r10, r28
    2052:	ed e8       	ldi	r30, 0x8D	; 141
    2054:	ae 0e       	add	r10, r30
    2056:	b1 1c       	adc	r11, r1
		{
			sprintf(str, "%.2s.%.3s.%.2s", freq_basform,freq_basform+2,freq_basform+5);
		}
		else
		{
			sprintf(str, "%.3s.%.3s.%.2s",freq_basform,freq_basform+3,freq_basform+6);
    2058:	93 01       	movw	r18, r6
    205a:	2a 5f       	subi	r18, 0xFA	; 250
    205c:	3f 4f       	sbci	r19, 0xFF	; 255
    205e:	c1 56       	subi	r28, 0x61	; 97
    2060:	df 4f       	sbci	r29, 0xFF	; 255
    2062:	28 83       	st	Y, r18
    2064:	39 83       	std	Y+1, r19	; 0x01
    2066:	cf 59       	subi	r28, 0x9F	; 159
    2068:	d0 40       	sbci	r29, 0x00	; 0
    206a:	c3 01       	movw	r24, r6
    206c:	03 96       	adiw	r24, 0x03	; 3
    206e:	cf 55       	subi	r28, 0x5F	; 95
    2070:	df 4f       	sbci	r29, 0xFF	; 255
    2072:	88 83       	st	Y, r24
    2074:	99 83       	std	Y+1, r25	; 0x01
    2076:	c1 5a       	subi	r28, 0xA1	; 161
    2078:	d0 40       	sbci	r29, 0x00	; 0
		{
			sprintf(str, "%.1s.%.3s.%.2s", freq_basform,freq_basform+1,freq_basform+4);
		}
		else if (rs232radio.band >3 && rs232radio.meter == 1)
		{
			sprintf(str, "%.2s.%.3s.%.2s", freq_basform,freq_basform+2,freq_basform+5);
    207a:	d3 01       	movw	r26, r6
    207c:	15 96       	adiw	r26, 0x05	; 5
    207e:	cd 55       	subi	r28, 0x5D	; 93
    2080:	df 4f       	sbci	r29, 0xFF	; 255
    2082:	a8 83       	st	Y, r26
    2084:	b9 83       	std	Y+1, r27	; 0x01
    2086:	c3 5a       	subi	r28, 0xA3	; 163
    2088:	d0 40       	sbci	r29, 0x00	; 0
    208a:	f3 01       	movw	r30, r6
    208c:	32 96       	adiw	r30, 0x02	; 2
    208e:	cb 55       	subi	r28, 0x5B	; 91
    2090:	df 4f       	sbci	r29, 0xFF	; 255
    2092:	e8 83       	st	Y, r30
    2094:	f9 83       	std	Y+1, r31	; 0x01
    2096:	c5 5a       	subi	r28, 0xA5	; 165
    2098:	d0 40       	sbci	r29, 0x00	; 0
	char freq_basform[10];
		sprintf(freq_basform, "%ld", rs232radio.freqvensy);
	
		if (rs232radio.band >30 && rs232radio.meter == 1)
		{
			sprintf(str, "%.1s.%.3s.%.2s", freq_basform,freq_basform+1,freq_basform+4);
    209a:	22 50       	subi	r18, 0x02	; 2
    209c:	31 09       	sbc	r19, r1
    209e:	c9 55       	subi	r28, 0x59	; 89
    20a0:	df 4f       	sbci	r29, 0xFF	; 255
    20a2:	28 83       	st	Y, r18
    20a4:	39 83       	std	Y+1, r19	; 0x01
    20a6:	c7 5a       	subi	r28, 0xA7	; 167
    20a8:	d0 40       	sbci	r29, 0x00	; 0
    20aa:	02 97       	sbiw	r24, 0x02	; 2
    20ac:	c7 55       	subi	r28, 0x57	; 87
    20ae:	df 4f       	sbci	r29, 0xFF	; 255
    20b0:	88 83       	st	Y, r24
    20b2:	99 83       	std	Y+1, r25	; 0x01
    20b4:	c9 5a       	subi	r28, 0xA9	; 169
    20b6:	d0 40       	sbci	r29, 0x00	; 0
	char str[8];
    do
    {
	  
	  uint8_t  h;
	  u8g_SetFont(&u8g, u8g_font_6x10);
    20b8:	62 eb       	ldi	r22, 0xB2	; 178
    20ba:	72 e0       	ldi	r23, 0x02	; 2
    20bc:	85 ed       	ldi	r24, 0xD5	; 213
    20be:	95 e2       	ldi	r25, 0x25	; 37
    20c0:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <u8g_SetFont>
	  u8g_DrawFrame(&u8g, 70, 0, 58, 64);
    20c4:	00 e4       	ldi	r16, 0x40	; 64
    20c6:	2a e3       	ldi	r18, 0x3A	; 58
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	66 e4       	ldi	r22, 0x46	; 70
    20cc:	85 ed       	ldi	r24, 0xD5	; 213
    20ce:	95 e2       	ldi	r25, 0x25	; 37
    20d0:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <u8g_DrawFrame>
	  u8g_SetFontRefHeightText(&u8g);
    20d4:	85 ed       	ldi	r24, 0xD5	; 213
    20d6:	95 e2       	ldi	r25, 0x25	; 37
    20d8:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <u8g_SetFontRefHeightText>
	  u8g_SetFontPosTop(&u8g);
    20dc:	85 ed       	ldi	r24, 0xD5	; 213
    20de:	95 e2       	ldi	r25, 0x25	; 37
    20e0:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <u8g_SetFontPosTop>
	  get_band();
    20e4:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <get_band>
	  
	  h = u8g_GetFontAscent(&u8g)-u8g_GetFontDescent(&u8g);
    20e8:	d4 01       	movw	r26, r8
    20ea:	9c 91       	ld	r25, X
    20ec:	f2 01       	movw	r30, r4
    20ee:	80 81       	ld	r24, Z
    20f0:	39 2e       	mov	r3, r25
    20f2:	38 1a       	sub	r3, r24
    20f4:	9e 01       	movw	r18, r28
    20f6:	2f 5f       	subi	r18, 0xFF	; 255
    20f8:	3f 4f       	sbci	r19, 0xFF	; 255
    20fa:	69 01       	movw	r12, r18
    20fc:	10 e0       	ldi	r17, 0x00	; 0
	  
	  for(int i=0;i <= 4; i++)
    20fe:	e1 2c       	mov	r14, r1
    2100:	f1 2c       	mov	r15, r1
	  {
		  u8g_SetDefaultForegroundColor(&u8g);
    2102:	85 ed       	ldi	r24, 0xD5	; 213
    2104:	95 e2       	ldi	r25, 0x25	; 37
    2106:	0e 94 aa 29 	call	0x5354	; 0x5354 <u8g_SetDefaultForegroundColor>
		// bakgrund_meny
		 if(meny_selected == i)
    210a:	80 91 7a 22 	lds	r24, 0x227A
    210e:	90 91 7b 22 	lds	r25, 0x227B
    2112:	8e 15       	cp	r24, r14
    2114:	9f 05       	cpc	r25, r15
    2116:	79 f4       	brne	.+30     	; 0x2136 <main_screen+0x1ee>
		 {
			  u8g_DrawBox(&u8g, 71, i*h+1, 57, 11);     // draw cursor bar
    2118:	38 9e       	mul	r3, r24
    211a:	40 2d       	mov	r20, r0
    211c:	11 24       	eor	r1, r1
    211e:	4f 5f       	subi	r20, 0xFF	; 255
    2120:	0b e0       	ldi	r16, 0x0B	; 11
    2122:	29 e3       	ldi	r18, 0x39	; 57
    2124:	67 e4       	ldi	r22, 0x47	; 71
    2126:	85 ed       	ldi	r24, 0xD5	; 213
    2128:	95 e2       	ldi	r25, 0x25	; 37
    212a:	0e 94 b8 2b 	call	0x5770	; 0x5770 <u8g_DrawBox>
			  u8g_SetDefaultBackgroundColor(&u8g);	  
    212e:	85 ed       	ldi	r24, 0xD5	; 213
    2130:	95 e2       	ldi	r25, 0x25	; 37
    2132:	0e 94 bb 29 	call	0x5376	; 0x5376 <u8g_SetDefaultBackgroundColor>
		 }
		  // skriver ut Antenner
		
		 u8g_DrawStr(&u8g, 72, 10*i, menu_test[i]);
    2136:	96 01       	movw	r18, r12
    2138:	41 2f       	mov	r20, r17
    213a:	68 e4       	ldi	r22, 0x48	; 72
    213c:	85 ed       	ldi	r24, 0xD5	; 213
    213e:	95 e2       	ldi	r25, 0x25	; 37
    2140:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
	 
		  
		  if (meny_selected == 4)
    2144:	80 91 7a 22 	lds	r24, 0x227A
    2148:	90 91 7b 22 	lds	r25, 0x227B
    214c:	04 97       	sbiw	r24, 0x04	; 4
    214e:	21 f4       	brne	.+8      	; 0x2158 <main_screen+0x210>
			u8g_SetDefaultForegroundColor(&u8g);
    2150:	85 ed       	ldi	r24, 0xD5	; 213
    2152:	95 e2       	ldi	r25, 0x25	; 37
    2154:	0e 94 aa 29 	call	0x5354	; 0x5354 <u8g_SetDefaultForegroundColor>
	  u8g_SetFontPosTop(&u8g);
	  get_band();
	  
	  h = u8g_GetFontAscent(&u8g)-u8g_GetFontDescent(&u8g);
	  
	  for(int i=0;i <= 4; i++)
    2158:	3f ef       	ldi	r19, 0xFF	; 255
    215a:	e3 1a       	sub	r14, r19
    215c:	f3 0a       	sbc	r15, r19
    215e:	16 5f       	subi	r17, 0xF6	; 246
    2160:	84 e1       	ldi	r24, 0x14	; 20
    2162:	c8 0e       	add	r12, r24
    2164:	d1 1c       	adc	r13, r1
    2166:	12 33       	cpi	r17, 0x32	; 50
    2168:	61 f6       	brne	.-104    	; 0x2102 <main_screen+0x1ba>
		

	  }	  
	  

if(meny_selected == 0)
    216a:	80 91 7a 22 	lds	r24, 0x227A
    216e:	90 91 7b 22 	lds	r25, 0x227B
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	09 f0       	breq	.+2      	; 0x2178 <main_screen+0x230>
    2176:	46 c0       	rjmp	.+140    	; 0x2204 <main_screen+0x2bc>
{
		draw_angel_circle(rotor_curent,0);
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	80 91 80 22 	lds	r24, 0x2280
    2180:	90 91 81 22 	lds	r25, 0x2281
    2184:	0e 94 55 0b 	call	0x16aa	; 0x16aa <draw_angel_circle>
	// showing the band
		
	
	

	if(rs232radio.meter == 1)
    2188:	80 91 80 26 	lds	r24, 0x2680
    218c:	90 91 81 26 	lds	r25, 0x2681
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	e1 f4       	brne	.+56     	; 0x21cc <main_screen+0x284>
	{
	
		sprintf(str, "%dM", rs232radio.band);
    2194:	ec e7       	ldi	r30, 0x7C	; 124
    2196:	f6 e2       	ldi	r31, 0x26	; 38
    2198:	83 81       	ldd	r24, Z+3	; 0x03
    219a:	8f 93       	push	r24
    219c:	82 81       	ldd	r24, Z+2	; 0x02
    219e:	8f 93       	push	r24
    21a0:	81 81       	ldd	r24, Z+1	; 0x01
    21a2:	8f 93       	push	r24
    21a4:	80 81       	ld	r24, Z
    21a6:	8f 93       	push	r24
    21a8:	87 e7       	ldi	r24, 0x77	; 119
    21aa:	91 e2       	ldi	r25, 0x21	; 33
    21ac:	9f 93       	push	r25
    21ae:	8f 93       	push	r24
    21b0:	bf 92       	push	r11
    21b2:	af 92       	push	r10
    21b4:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>
		u8g_DrawStr(&u8g, 2, 52,str );
    21b8:	95 01       	movw	r18, r10
    21ba:	44 e3       	ldi	r20, 0x34	; 52
    21bc:	62 e0       	ldi	r22, 0x02	; 2
    21be:	85 ed       	ldi	r24, 0xD5	; 213
    21c0:	95 e2       	ldi	r25, 0x25	; 37
    21c2:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	2e c1       	rjmp	.+604    	; 0x2428 <main_screen+0x4e0>

	}else
	{
		sprintf(str, "%dcM", rs232radio.band);
    21cc:	ec e7       	ldi	r30, 0x7C	; 124
    21ce:	f6 e2       	ldi	r31, 0x26	; 38
    21d0:	83 81       	ldd	r24, Z+3	; 0x03
    21d2:	8f 93       	push	r24
    21d4:	82 81       	ldd	r24, Z+2	; 0x02
    21d6:	8f 93       	push	r24
    21d8:	81 81       	ldd	r24, Z+1	; 0x01
    21da:	8f 93       	push	r24
    21dc:	80 81       	ld	r24, Z
    21de:	8f 93       	push	r24
    21e0:	8b e7       	ldi	r24, 0x7B	; 123
    21e2:	91 e2       	ldi	r25, 0x21	; 33
    21e4:	9f 93       	push	r25
    21e6:	8f 93       	push	r24
    21e8:	bf 92       	push	r11
    21ea:	af 92       	push	r10
    21ec:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>
		u8g_DrawStr(&u8g, 2, 52,str );
    21f0:	95 01       	movw	r18, r10
    21f2:	44 e3       	ldi	r20, 0x34	; 52
    21f4:	62 e0       	ldi	r22, 0x02	; 2
    21f6:	85 ed       	ldi	r24, 0xD5	; 213
    21f8:	95 e2       	ldi	r25, 0x25	; 37
    21fa:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	de bf       	out	0x3e, r29	; 62
    2202:	12 c1       	rjmp	.+548    	; 0x2428 <main_screen+0x4e0>
	

		
	
}
else if (meny_selected == 1)
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	09 f0       	breq	.+2      	; 0x220a <main_screen+0x2c2>
    2208:	0f c1       	rjmp	.+542    	; 0x2428 <main_screen+0x4e0>
{
	u8g_SetFont(&u8g, u8g_font_6x10);
    220a:	62 eb       	ldi	r22, 0xB2	; 178
    220c:	72 e0       	ldi	r23, 0x02	; 2
    220e:	85 ed       	ldi	r24, 0xD5	; 213
    2210:	95 e2       	ldi	r25, 0x25	; 37
    2212:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <u8g_SetFont>
	

	char freq_basform[10];
		sprintf(freq_basform, "%ld", rs232radio.freqvensy);
    2216:	80 91 8f 26 	lds	r24, 0x268F
    221a:	8f 93       	push	r24
    221c:	80 91 8e 26 	lds	r24, 0x268E
    2220:	8f 93       	push	r24
    2222:	80 91 8d 26 	lds	r24, 0x268D
    2226:	8f 93       	push	r24
    2228:	ac e8       	ldi	r26, 0x8C	; 140
    222a:	b6 e2       	ldi	r27, 0x26	; 38
    222c:	8c 91       	ld	r24, X
    222e:	8f 93       	push	r24
    2230:	a0 e8       	ldi	r26, 0x80	; 128
    2232:	b1 e2       	ldi	r27, 0x21	; 33
    2234:	bf 93       	push	r27
    2236:	af 93       	push	r26
    2238:	7f 92       	push	r7
    223a:	6f 92       	push	r6
    223c:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>
	
		if (rs232radio.band >30 && rs232radio.meter == 1)
    2240:	80 91 7c 26 	lds	r24, 0x267C
    2244:	90 91 7d 26 	lds	r25, 0x267D
    2248:	a0 91 7e 26 	lds	r26, 0x267E
    224c:	b0 91 7f 26 	lds	r27, 0x267F
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	8f 31       	cpi	r24, 0x1F	; 31
    2256:	91 05       	cpc	r25, r1
    2258:	a1 05       	cpc	r26, r1
    225a:	b1 05       	cpc	r27, r1
    225c:	60 f1       	brcs	.+88     	; 0x22b6 <main_screen+0x36e>
    225e:	20 91 80 26 	lds	r18, 0x2680
    2262:	30 91 81 26 	lds	r19, 0x2681
    2266:	21 30       	cpi	r18, 0x01	; 1
    2268:	31 05       	cpc	r19, r1
    226a:	29 f5       	brne	.+74     	; 0x22b6 <main_screen+0x36e>
		{
			sprintf(str, "%.1s.%.3s.%.2s", freq_basform,freq_basform+1,freq_basform+4);
    226c:	c8 55       	subi	r28, 0x58	; 88
    226e:	df 4f       	sbci	r29, 0xFF	; 255
    2270:	38 81       	ld	r19, Y
    2272:	c8 5a       	subi	r28, 0xA8	; 168
    2274:	d0 40       	sbci	r29, 0x00	; 0
    2276:	3f 93       	push	r19
    2278:	c9 55       	subi	r28, 0x59	; 89
    227a:	df 4f       	sbci	r29, 0xFF	; 255
    227c:	88 81       	ld	r24, Y
    227e:	c7 5a       	subi	r28, 0xA7	; 167
    2280:	d0 40       	sbci	r29, 0x00	; 0
    2282:	8f 93       	push	r24
    2284:	c6 55       	subi	r28, 0x56	; 86
    2286:	df 4f       	sbci	r29, 0xFF	; 255
    2288:	98 81       	ld	r25, Y
    228a:	ca 5a       	subi	r28, 0xAA	; 170
    228c:	d0 40       	sbci	r29, 0x00	; 0
    228e:	9f 93       	push	r25
    2290:	c7 55       	subi	r28, 0x57	; 87
    2292:	df 4f       	sbci	r29, 0xFF	; 255
    2294:	a8 81       	ld	r26, Y
    2296:	c9 5a       	subi	r28, 0xA9	; 169
    2298:	d0 40       	sbci	r29, 0x00	; 0
    229a:	af 93       	push	r26
    229c:	7f 92       	push	r7
    229e:	6f 92       	push	r6
    22a0:	84 e8       	ldi	r24, 0x84	; 132
    22a2:	91 e2       	ldi	r25, 0x21	; 33
    22a4:	9f 93       	push	r25
    22a6:	8f 93       	push	r24
    22a8:	bf 92       	push	r11
    22aa:	af 92       	push	r10
    22ac:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	53 c0       	rjmp	.+166    	; 0x235c <main_screen+0x414>
		}
		else if (rs232radio.band >3 && rs232radio.meter == 1)
    22b6:	04 97       	sbiw	r24, 0x04	; 4
    22b8:	a1 05       	cpc	r26, r1
    22ba:	b1 05       	cpc	r27, r1
    22bc:	58 f1       	brcs	.+86     	; 0x2314 <main_screen+0x3cc>
    22be:	80 91 80 26 	lds	r24, 0x2680
    22c2:	90 91 81 26 	lds	r25, 0x2681
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	29 f5       	brne	.+74     	; 0x2314 <main_screen+0x3cc>
		{
			sprintf(str, "%.2s.%.3s.%.2s", freq_basform,freq_basform+2,freq_basform+5);
    22ca:	cc 55       	subi	r28, 0x5C	; 92
    22cc:	df 4f       	sbci	r29, 0xFF	; 255
    22ce:	f8 81       	ld	r31, Y
    22d0:	c4 5a       	subi	r28, 0xA4	; 164
    22d2:	d0 40       	sbci	r29, 0x00	; 0
    22d4:	ff 93       	push	r31
    22d6:	cd 55       	subi	r28, 0x5D	; 93
    22d8:	df 4f       	sbci	r29, 0xFF	; 255
    22da:	28 81       	ld	r18, Y
    22dc:	c3 5a       	subi	r28, 0xA3	; 163
    22de:	d0 40       	sbci	r29, 0x00	; 0
    22e0:	2f 93       	push	r18
    22e2:	ca 55       	subi	r28, 0x5A	; 90
    22e4:	df 4f       	sbci	r29, 0xFF	; 255
    22e6:	38 81       	ld	r19, Y
    22e8:	c6 5a       	subi	r28, 0xA6	; 166
    22ea:	d0 40       	sbci	r29, 0x00	; 0
    22ec:	3f 93       	push	r19
    22ee:	cb 55       	subi	r28, 0x5B	; 91
    22f0:	df 4f       	sbci	r29, 0xFF	; 255
    22f2:	88 81       	ld	r24, Y
    22f4:	c5 5a       	subi	r28, 0xA5	; 165
    22f6:	d0 40       	sbci	r29, 0x00	; 0
    22f8:	8f 93       	push	r24
    22fa:	7f 92       	push	r7
    22fc:	6f 92       	push	r6
    22fe:	83 e9       	ldi	r24, 0x93	; 147
    2300:	91 e2       	ldi	r25, 0x21	; 33
    2302:	9f 93       	push	r25
    2304:	8f 93       	push	r24
    2306:	bf 92       	push	r11
    2308:	af 92       	push	r10
    230a:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	24 c0       	rjmp	.+72     	; 0x235c <main_screen+0x414>
		}
		else
		{
			sprintf(str, "%.3s.%.3s.%.2s",freq_basform,freq_basform+3,freq_basform+6);
    2314:	c0 56       	subi	r28, 0x60	; 96
    2316:	df 4f       	sbci	r29, 0xFF	; 255
    2318:	b8 81       	ld	r27, Y
    231a:	c0 5a       	subi	r28, 0xA0	; 160
    231c:	d0 40       	sbci	r29, 0x00	; 0
    231e:	bf 93       	push	r27
    2320:	c1 56       	subi	r28, 0x61	; 97
    2322:	df 4f       	sbci	r29, 0xFF	; 255
    2324:	e8 81       	ld	r30, Y
    2326:	cf 59       	subi	r28, 0x9F	; 159
    2328:	d0 40       	sbci	r29, 0x00	; 0
    232a:	ef 93       	push	r30
    232c:	ce 55       	subi	r28, 0x5E	; 94
    232e:	df 4f       	sbci	r29, 0xFF	; 255
    2330:	f8 81       	ld	r31, Y
    2332:	c2 5a       	subi	r28, 0xA2	; 162
    2334:	d0 40       	sbci	r29, 0x00	; 0
    2336:	ff 93       	push	r31
    2338:	cf 55       	subi	r28, 0x5F	; 95
    233a:	df 4f       	sbci	r29, 0xFF	; 255
    233c:	28 81       	ld	r18, Y
    233e:	c1 5a       	subi	r28, 0xA1	; 161
    2340:	d0 40       	sbci	r29, 0x00	; 0
    2342:	2f 93       	push	r18
    2344:	7f 92       	push	r7
    2346:	6f 92       	push	r6
    2348:	82 ea       	ldi	r24, 0xA2	; 162
    234a:	91 e2       	ldi	r25, 0x21	; 33
    234c:	9f 93       	push	r25
    234e:	8f 93       	push	r24
    2350:	bf 92       	push	r11
    2352:	af 92       	push	r10
    2354:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	de bf       	out	0x3e, r29	; 62
			
		}
		
		u8g_DrawStr(&u8g, 2, 2,"Frequency:" );
    235c:	21 eb       	ldi	r18, 0xB1	; 177
    235e:	31 e2       	ldi	r19, 0x21	; 33
    2360:	42 e0       	ldi	r20, 0x02	; 2
    2362:	62 e0       	ldi	r22, 0x02	; 2
    2364:	85 ed       	ldi	r24, 0xD5	; 213
    2366:	95 e2       	ldi	r25, 0x25	; 37
    2368:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
		u8g_DrawStr(&u8g, 2, 12,str );
    236c:	95 01       	movw	r18, r10
    236e:	4c e0       	ldi	r20, 0x0C	; 12
    2370:	62 e0       	ldi	r22, 0x02	; 2
    2372:	85 ed       	ldi	r24, 0xD5	; 213
    2374:	95 e2       	ldi	r25, 0x25	; 37
    2376:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
	
	u8g_DrawStr(&u8g, 2, 22,"Band:" );
    237a:	2c eb       	ldi	r18, 0xBC	; 188
    237c:	31 e2       	ldi	r19, 0x21	; 33
    237e:	46 e1       	ldi	r20, 0x16	; 22
    2380:	62 e0       	ldi	r22, 0x02	; 2
    2382:	85 ed       	ldi	r24, 0xD5	; 213
    2384:	95 e2       	ldi	r25, 0x25	; 37
    2386:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
	if(rs232radio.meter == 1)
    238a:	80 91 80 26 	lds	r24, 0x2680
    238e:	90 91 81 26 	lds	r25, 0x2681
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	e1 f4       	brne	.+56     	; 0x23ce <main_screen+0x486>
	{
		sprintf(str, "%dM", rs232radio.band);
    2396:	ec e7       	ldi	r30, 0x7C	; 124
    2398:	f6 e2       	ldi	r31, 0x26	; 38
    239a:	83 81       	ldd	r24, Z+3	; 0x03
    239c:	8f 93       	push	r24
    239e:	82 81       	ldd	r24, Z+2	; 0x02
    23a0:	8f 93       	push	r24
    23a2:	81 81       	ldd	r24, Z+1	; 0x01
    23a4:	8f 93       	push	r24
    23a6:	80 81       	ld	r24, Z
    23a8:	8f 93       	push	r24
    23aa:	87 e7       	ldi	r24, 0x77	; 119
    23ac:	91 e2       	ldi	r25, 0x21	; 33
    23ae:	9f 93       	push	r25
    23b0:	8f 93       	push	r24
    23b2:	bf 92       	push	r11
    23b4:	af 92       	push	r10
    23b6:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>
		u8g_DrawStr(&u8g, 40, 22,str );
    23ba:	95 01       	movw	r18, r10
    23bc:	46 e1       	ldi	r20, 0x16	; 22
    23be:	68 e2       	ldi	r22, 0x28	; 40
    23c0:	85 ed       	ldi	r24, 0xD5	; 213
    23c2:	95 e2       	ldi	r25, 0x25	; 37
    23c4:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
    23c8:	cd bf       	out	0x3d, r28	; 61
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	1b c0       	rjmp	.+54     	; 0x2404 <main_screen+0x4bc>

	}else
	{
		sprintf(str, "%dcM", rs232radio.band);
    23ce:	ec e7       	ldi	r30, 0x7C	; 124
    23d0:	f6 e2       	ldi	r31, 0x26	; 38
    23d2:	83 81       	ldd	r24, Z+3	; 0x03
    23d4:	8f 93       	push	r24
    23d6:	82 81       	ldd	r24, Z+2	; 0x02
    23d8:	8f 93       	push	r24
    23da:	81 81       	ldd	r24, Z+1	; 0x01
    23dc:	8f 93       	push	r24
    23de:	80 81       	ld	r24, Z
    23e0:	8f 93       	push	r24
    23e2:	8b e7       	ldi	r24, 0x7B	; 123
    23e4:	91 e2       	ldi	r25, 0x21	; 33
    23e6:	9f 93       	push	r25
    23e8:	8f 93       	push	r24
    23ea:	bf 92       	push	r11
    23ec:	af 92       	push	r10
    23ee:	0e 94 c0 38 	call	0x7180	; 0x7180 <sprintf>
		u8g_DrawStr(&u8g, 40, 22,str );
    23f2:	95 01       	movw	r18, r10
    23f4:	46 e1       	ldi	r20, 0x16	; 22
    23f6:	68 e2       	ldi	r22, 0x28	; 40
    23f8:	85 ed       	ldi	r24, 0xD5	; 213
    23fa:	95 e2       	ldi	r25, 0x25	; 37
    23fc:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	de bf       	out	0x3e, r29	; 62
	}
	u8g_DrawStr(&u8g, 2, 32,"Mode:" );
    2404:	22 ec       	ldi	r18, 0xC2	; 194
    2406:	31 e2       	ldi	r19, 0x21	; 33
    2408:	40 e2       	ldi	r20, 0x20	; 32
    240a:	62 e0       	ldi	r22, 0x02	; 2
    240c:	85 ed       	ldi	r24, 0xD5	; 213
    240e:	95 e2       	ldi	r25, 0x25	; 37
    2410:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>
	
	u8g_DrawStr(&u8g, 40, 32,rs232radio.mode);
    2414:	20 91 92 26 	lds	r18, 0x2692
    2418:	30 91 93 26 	lds	r19, 0x2693
    241c:	40 e2       	ldi	r20, 0x20	; 32
    241e:	68 e2       	ldi	r22, 0x28	; 40
    2420:	85 ed       	ldi	r24, 0xD5	; 213
    2422:	95 e2       	ldi	r25, 0x25	; 37
    2424:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8g_DrawStr>

	
	
}
	
    } while ( u8g_NextPage(&u8g) );	
    2428:	85 ed       	ldi	r24, 0xD5	; 213
    242a:	95 e2       	ldi	r25, 0x25	; 37
    242c:	0e 94 73 29 	call	0x52e6	; 0x52e6 <u8g_NextPage>
    2430:	81 11       	cpse	r24, r1
    2432:	42 ce       	rjmp	.-892    	; 0x20b8 <main_screen+0x170>
	
}
    2434:	c6 55       	subi	r28, 0x56	; 86
    2436:	df 4f       	sbci	r29, 0xFF	; 255
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	1f 91       	pop	r17
    2442:	0f 91       	pop	r16
    2444:	ff 90       	pop	r15
    2446:	ef 90       	pop	r14
    2448:	df 90       	pop	r13
    244a:	cf 90       	pop	r12
    244c:	bf 90       	pop	r11
    244e:	af 90       	pop	r10
    2450:	9f 90       	pop	r9
    2452:	8f 90       	pop	r8
    2454:	7f 90       	pop	r7
    2456:	6f 90       	pop	r6
    2458:	5f 90       	pop	r5
    245a:	4f 90       	pop	r4
    245c:	3f 90       	pop	r3
    245e:	08 95       	ret

00002460 <main>:
}

int y_pos = 0;  // global variable
char * test[23];
int main(void)
{	
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	2a 97       	sbiw	r28, 0x0a	; 10
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	de bf       	out	0x3e, r29	; 62
	rs232radio.enable = 0;
    246e:	10 92 82 26 	sts	0x2682, r1
    2472:	10 92 83 26 	sts	0x2683, r1
	rs232radio.rs232_prescale=0;
    2476:	10 92 78 26 	sts	0x2678, r1
    247a:	10 92 79 26 	sts	0x2679, r1
	rs232radio.radio_rs232 = 206;
    247e:	8e ec       	ldi	r24, 0xCE	; 206
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	80 93 76 26 	sts	0x2676, r24
    2486:	90 93 77 26 	sts	0x2677, r25
	rs232radio.model="Yesu-ft-857D";
    248a:	88 ec       	ldi	r24, 0xC8	; 200
    248c:	91 e2       	ldi	r25, 0x21	; 33
    248e:	80 93 7a 26 	sts	0x267A, r24
    2492:	90 93 7b 26 	sts	0x267B, r25
	//debug
	rs232radio.amp_id=2;
    2496:	82 e0       	ldi	r24, 0x02	; 2
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	80 93 88 26 	sts	0x2688, r24
    249e:	90 93 89 26 	sts	0x2689, r25

	printf("Bootloader Done!\n");
    24a2:	85 ed       	ldi	r24, 0xD5	; 213
    24a4:	91 e2       	ldi	r25, 0x21	; 33
    24a6:	0e 94 93 38 	call	0x7126	; 0x7126 <puts>
}

// alert led toogle functions
void toogle_alert()
{
	PORTK.OUTSET = PIN7_bm;
    24aa:	80 e8       	ldi	r24, 0x80	; 128
    24ac:	e0 e2       	ldi	r30, 0x20	; 32
    24ae:	f7 e0       	ldi	r31, 0x07	; 7
    24b0:	85 83       	std	Z+5, r24	; 0x05
	//debug
	rs232radio.amp_id=2;

	printf("Bootloader Done!\n");
	toogle_alert();
	printf("INT devices!\n");
    24b2:	86 ee       	ldi	r24, 0xE6	; 230
    24b4:	91 e2       	ldi	r25, 0x21	; 33
    24b6:	0e 94 93 38 	call	0x7126	; 0x7126 <puts>
	setup();
    24ba:	0e 94 2f 0c 	call	0x185e	; 0x185e <setup>
	printf("Done!\n");
    24be:	80 ee       	ldi	r24, 0xE0	; 224
    24c0:	91 e2       	ldi	r25, 0x21	; 33
    24c2:	0e 94 93 38 	call	0x7126	; 0x7126 <puts>

	// test
	printf("Loading SD card!\n");
    24c6:	83 ef       	ldi	r24, 0xF3	; 243
    24c8:	91 e2       	ldi	r25, 0x21	; 33
    24ca:	0e 94 93 38 	call	0x7126	; 0x7126 <puts>
	sd_raw_init();
    24ce:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <sd_raw_init>
	sd_card_open();
    24d2:	0e 94 82 21 	call	0x4304	; 0x4304 <sd_card_open>
	screen_int();
    24d6:	0e 94 b1 0a 	call	0x1562	; 0x1562 <screen_int>
	printf("Done!\n");
    24da:	80 ee       	ldi	r24, 0xE0	; 224
    24dc:	91 e2       	ldi	r25, 0x21	; 33
    24de:	0e 94 93 38 	call	0x7126	; 0x7126 <puts>
    24e2:	2f ef       	ldi	r18, 0xFF	; 255
    24e4:	83 ed       	ldi	r24, 0xD3	; 211
    24e6:	90 e3       	ldi	r25, 0x30	; 48
    24e8:	21 50       	subi	r18, 0x01	; 1
    24ea:	80 40       	sbci	r24, 0x00	; 0
    24ec:	90 40       	sbci	r25, 0x00	; 0
    24ee:	e1 f7       	brne	.-8      	; 0x24e8 <main+0x88>
    24f0:	00 c0       	rjmp	.+0      	; 0x24f2 <main+0x92>
    24f2:	00 00       	nop
	// sd_file_write(filetext);
	// sd_file_close();

	// struct form main controller functions
	//struct cont *controller;
	printf("Allocate memory menus!\n");
    24f4:	84 e0       	ldi	r24, 0x04	; 4
    24f6:	92 e2       	ldi	r25, 0x22	; 34
    24f8:	0e 94 93 38 	call	0x7126	; 0x7126 <puts>
	sei();
    24fc:	78 94       	sei
    24fe:	ef ef       	ldi	r30, 0xFF	; 255
    2500:	f3 ed       	ldi	r31, 0xD3	; 211
    2502:	20 e3       	ldi	r18, 0x30	; 48
    2504:	e1 50       	subi	r30, 0x01	; 1
    2506:	f0 40       	sbci	r31, 0x00	; 0
    2508:	20 40       	sbci	r18, 0x00	; 0
    250a:	e1 f7       	brne	.-8      	; 0x2504 <main+0xa4>
    250c:	00 c0       	rjmp	.+0      	; 0x250e <main+0xae>
    250e:	00 00       	nop
	_delay_ms(500);	
	// sd_file_new(filename);
	// sd_file_open(filename);
	// sd_file_write(filetext);
	// sd_file_close()
	printf("System Online!\n");
    2510:	8b e1       	ldi	r24, 0x1B	; 27
    2512:	92 e2       	ldi	r25, 0x22	; 34
    2514:	0e 94 93 38 	call	0x7126	; 0x7126 <puts>
{
	PORTK.OUTSET = PIN7_bm;
}
void clear_alert()
{
	PORTK.OUTCLR = PIN7_bm;
    2518:	80 e8       	ldi	r24, 0x80	; 128
    251a:	e0 e2       	ldi	r30, 0x20	; 32
    251c:	f7 e0       	ldi	r31, 0x07	; 7
    251e:	86 83       	std	Z+6, r24	; 0x06
	// sd_file_close()
	printf("System Online!\n");
	clear_alert();
	can_message_t  Rxmsg;
	//can_message_t  TXmsg;
	setUpSerial_rpt();
    2520:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <setUpSerial_rpt>
// 				break;
// 			  default:
// 				break;
// 		  }
	
 int send_counter=0;
    2524:	81 2c       	mov	r8, r1
    2526:	91 2c       	mov	r9, r1
	clear_alert();
	can_message_t  Rxmsg;
	//can_message_t  TXmsg;
	setUpSerial_rpt();
	
	int ptt_test =0;
    2528:	00 e0       	ldi	r16, 0x00	; 0
    252a:	10 e0       	ldi	r17, 0x00	; 0
		if (Rxmsg.data[0] !=128)
		{
			//printf("fwd %i \n",Rxmsg.data[0]);
		}
		
		if ( rs232radio.ptt == 1 || Select_buttion() == 1)
    252c:	0f 2e       	mov	r0, r31
    252e:	f4 e8       	ldi	r31, 0x84	; 132
    2530:	ef 2e       	mov	r14, r31
    2532:	f6 e2       	ldi	r31, 0x26	; 38
    2534:	ff 2e       	mov	r15, r31
    2536:	f0 2d       	mov	r31, r0
		{

			rs232radio.amp_id =2;
    2538:	0f 2e       	mov	r0, r31
    253a:	f8 e8       	ldi	r31, 0x88	; 136
    253c:	6f 2e       	mov	r6, r31
    253e:	f6 e2       	ldi	r31, 0x26	; 38
    2540:	7f 2e       	mov	r7, r31
    2542:	f0 2d       	mov	r31, r0
    2544:	68 94       	set
    2546:	cc 24       	eor	r12, r12
    2548:	c1 f8       	bld	r12, 1
    254a:	d1 2c       	mov	r13, r1
							
			}
			
			

			amplifier.power_max = 250;
    254c:	0f 2e       	mov	r0, r31
    254e:	f4 e7       	ldi	r31, 0x74	; 116
    2550:	4f 2e       	mov	r4, r31
    2552:	f6 e2       	ldi	r31, 0x26	; 38
    2554:	5f 2e       	mov	r5, r31
    2556:	f0 2d       	mov	r31, r0
    2558:	0f 2e       	mov	r0, r31
    255a:	fa ef       	ldi	r31, 0xFA	; 250
    255c:	af 2e       	mov	r10, r31
    255e:	b1 2c       	mov	r11, r1
    2560:	f0 2d       	mov	r31, r0
			}
			
			
			if (Rxmsg.data[1] == 7)
			{
				amplifier.power_fwd =((Rxmsg.data[2] << 8) | Rxmsg.data[3]);
    2562:	0f 2e       	mov	r0, r31
    2564:	f0 e7       	ldi	r31, 0x70	; 112
    2566:	2f 2e       	mov	r2, r31
    2568:	f6 e2       	ldi	r31, 0x26	; 38
    256a:	3f 2e       	mov	r3, r31
    256c:	f0 2d       	mov	r31, r0
	
 int send_counter=0;
 for(;;)		
  {  
	//CAN_data_receive(&Rxmsg);			
		CAN_data_receive(&Rxmsg);
    256e:	ce 01       	movw	r24, r28
    2570:	01 96       	adiw	r24, 0x01	; 1
    2572:	0e 94 b5 06 	call	0xd6a	; 0xd6a <CAN_data_receive>
		if (Rxmsg.data[0] !=128)
		{
			//printf("fwd %i \n",Rxmsg.data[0]);
		}
		
		if ( rs232radio.ptt == 1 || Select_buttion() == 1)
    2576:	f7 01       	movw	r30, r14
    2578:	80 81       	ld	r24, Z
    257a:	91 81       	ldd	r25, Z+1	; 0x01
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	21 f0       	breq	.+8      	; 0x2588 <main+0x128>
    2580:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <Select_buttion>
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	39 f5       	brne	.+78     	; 0x25d6 <main+0x176>
		{

			rs232radio.amp_id =2;
    2588:	f3 01       	movw	r30, r6
    258a:	c0 82       	st	Z, r12
    258c:	d1 82       	std	Z+1, r13	; 0x01
			
			if (ptt_test ==0)
    258e:	01 15       	cp	r16, r1
    2590:	11 05       	cpc	r17, r1
    2592:	29 f4       	brne	.+10     	; 0x259e <main+0x13e>
			{
				send_tx_message(2);
    2594:	c6 01       	movw	r24, r12
    2596:	0e 94 67 09 	call	0x12ce	; 0x12ce <send_tx_message>
				ptt_test =1;
    259a:	01 e0       	ldi	r16, 0x01	; 1
    259c:	10 e0       	ldi	r17, 0x00	; 0
			}
			
			
			if (Rxmsg.data[1] == 7)
    259e:	8c 81       	ldd	r24, Y+4	; 0x04
    25a0:	87 30       	cpi	r24, 0x07	; 7
    25a2:	99 f4       	brne	.+38     	; 0x25ca <main+0x16a>
			{
				amplifier.power_fwd =((Rxmsg.data[2] << 8) | Rxmsg.data[3]);
    25a4:	8d 81       	ldd	r24, Y+5	; 0x05
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	98 2f       	mov	r25, r24
    25aa:	88 27       	eor	r24, r24
    25ac:	2e 81       	ldd	r18, Y+6	; 0x06
    25ae:	82 2b       	or	r24, r18
    25b0:	f1 01       	movw	r30, r2
    25b2:	80 83       	st	Z, r24
    25b4:	91 83       	std	Z+1, r25	; 0x01
				amplifier.power_rev =((Rxmsg.data[4] << 8) | Rxmsg.data[5]);
    25b6:	8f 81       	ldd	r24, Y+7	; 0x07
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	98 2f       	mov	r25, r24
    25bc:	88 27       	eor	r24, r24
    25be:	28 85       	ldd	r18, Y+8	; 0x08
    25c0:	82 2b       	or	r24, r18
    25c2:	e2 e7       	ldi	r30, 0x72	; 114
    25c4:	f6 e2       	ldi	r31, 0x26	; 38
    25c6:	80 83       	st	Z, r24
    25c8:	91 83       	std	Z+1, r25	; 0x01
							
			}
			
			

			amplifier.power_max = 250;
    25ca:	f2 01       	movw	r30, r4
    25cc:	a0 82       	st	Z, r10
    25ce:	b1 82       	std	Z+1, r11	; 0x01
			trasmit_slide();
    25d0:	0e 94 ad 09 	call	0x135a	; 0x135a <trasmit_slide>
    25d4:	cc cf       	rjmp	.-104    	; 0x256e <main+0x10e>
		}
		else
		{
			if (ptt_test == 1)
    25d6:	01 30       	cpi	r16, 0x01	; 1
    25d8:	11 05       	cpc	r17, r1
    25da:	29 f4       	brne	.+10     	; 0x25e6 <main+0x186>
			{
				send_stoptx_message(2);					
    25dc:	c6 01       	movw	r24, r12
    25de:	0e 94 84 09 	call	0x1308	; 0x1308 <send_stoptx_message>
				ptt_test=0;
    25e2:	00 e0       	ldi	r16, 0x00	; 0
    25e4:	10 e0       	ldi	r17, 0x00	; 0
				
			}
			/* create a Function to send CAN data and when no packet print screen */
			if (can_queue_is_empty() == 1)
    25e6:	0e 94 82 08 	call	0x1104	; 0x1104 <can_queue_is_empty>
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	81 f4       	brne	.+32     	; 0x260e <main+0x1ae>
			{
				// main screen process
				main_screen();
    25ee:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <main_screen>
				if (send_counter > 10)
    25f2:	fb e0       	ldi	r31, 0x0B	; 11
    25f4:	8f 16       	cp	r8, r31
    25f6:	91 04       	cpc	r9, r1
    25f8:	34 f0       	brlt	.+12     	; 0x2606 <main+0x1a6>
				{
					send_data_to_pi();
    25fa:	0e 94 cc 08 	call	0x1198	; 0x1198 <send_data_to_pi>
					send_data_to_freq();
    25fe:	0e 94 fd 08 	call	0x11fa	; 0x11fa <send_data_to_freq>
					send_counter =0;
    2602:	81 2c       	mov	r8, r1
    2604:	91 2c       	mov	r9, r1
				}
				send_counter++;
    2606:	2f ef       	ldi	r18, 0xFF	; 255
    2608:	82 1a       	sub	r8, r18
    260a:	92 0a       	sbc	r9, r18
    260c:	b0 cf       	rjmp	.-160    	; 0x256e <main+0x10e>

				
			}
			else
			{
				send_data_on_canbus();
    260e:	0e 94 3a 09 	call	0x1274	; 0x1274 <send_data_on_canbus>
    2612:	ad cf       	rjmp	.-166    	; 0x256e <main+0x10e>

00002614 <__vector_119>:

volatile unsigned char data_rotor_in[20];

int data_count=0;
ISR(USARTF0_RXC_vect)
{
    2614:	1f 92       	push	r1
    2616:	0f 92       	push	r0
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	0f 92       	push	r0
    261c:	11 24       	eor	r1, r1
    261e:	08 b6       	in	r0, 0x38	; 56
    2620:	0f 92       	push	r0
    2622:	18 be       	out	0x38, r1	; 56
    2624:	09 b6       	in	r0, 0x39	; 57
    2626:	0f 92       	push	r0
    2628:	19 be       	out	0x39, r1	; 57
    262a:	0b b6       	in	r0, 0x3b	; 59
    262c:	0f 92       	push	r0
    262e:	1b be       	out	0x3b, r1	; 59
    2630:	2f 93       	push	r18
    2632:	3f 93       	push	r19
    2634:	4f 93       	push	r20
    2636:	5f 93       	push	r21
    2638:	6f 93       	push	r22
    263a:	7f 93       	push	r23
    263c:	8f 93       	push	r24
    263e:	9f 93       	push	r25
    2640:	af 93       	push	r26
    2642:	bf 93       	push	r27
    2644:	ef 93       	push	r30
    2646:	ff 93       	push	r31
    // Get data from the USART in register
		data_rotor_in[data_count] = USARTF0_DATA;
    2648:	80 91 74 22 	lds	r24, 0x2274
    264c:	90 91 75 22 	lds	r25, 0x2275
    2650:	20 91 a0 0b 	lds	r18, 0x0BA0
    2654:	fc 01       	movw	r30, r24
    2656:	ec 5d       	subi	r30, 0xDC	; 220
    2658:	f9 4d       	sbci	r31, 0xD9	; 217
    265a:	20 83       	st	Z, r18
	
		// End of line!
		if (data_rotor_in[data_count] == '\r') {
    265c:	20 81       	ld	r18, Z
    265e:	2d 30       	cpi	r18, 0x0D	; 13
    2660:	49 f4       	brne	.+18     	; 0x2674 <__vector_119+0x60>
			data_count = 0;
    2662:	10 92 74 22 	sts	0x2274, r1
    2666:	10 92 75 22 	sts	0x2275, r1
			easy_com_angel(data_rotor_in);
    266a:	84 e2       	ldi	r24, 0x24	; 36
    266c:	96 e2       	ldi	r25, 0x26	; 38
    266e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <easy_com_angel>
    2672:	05 c0       	rjmp	.+10     	; 0x267e <__vector_119+0x6a>
			// Reset to 0, ready to go again
        
		} else {
			data_count++;
    2674:	01 96       	adiw	r24, 0x01	; 1
    2676:	80 93 74 22 	sts	0x2274, r24
    267a:	90 93 75 22 	sts	0x2275, r25
		}

}
    267e:	ff 91       	pop	r31
    2680:	ef 91       	pop	r30
    2682:	bf 91       	pop	r27
    2684:	af 91       	pop	r26
    2686:	9f 91       	pop	r25
    2688:	8f 91       	pop	r24
    268a:	7f 91       	pop	r23
    268c:	6f 91       	pop	r22
    268e:	5f 91       	pop	r21
    2690:	4f 91       	pop	r20
    2692:	3f 91       	pop	r19
    2694:	2f 91       	pop	r18
    2696:	0f 90       	pop	r0
    2698:	0b be       	out	0x3b, r0	; 59
    269a:	0f 90       	pop	r0
    269c:	09 be       	out	0x39, r0	; 57
    269e:	0f 90       	pop	r0
    26a0:	08 be       	out	0x38, r0	; 56
    26a2:	0f 90       	pop	r0
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	0f 90       	pop	r0
    26a8:	1f 90       	pop	r1
    26aa:	18 95       	reti

000026ac <__vector_96>:


// interupt rotar encoder
// rotary encoder
ISR(PORTH_INT0_vect)
{
    26ac:	1f 92       	push	r1
    26ae:	0f 92       	push	r0
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	0f 92       	push	r0
    26b4:	11 24       	eor	r1, r1
    26b6:	08 b6       	in	r0, 0x38	; 56
    26b8:	0f 92       	push	r0
    26ba:	18 be       	out	0x38, r1	; 56
    26bc:	0b b6       	in	r0, 0x3b	; 59
    26be:	0f 92       	push	r0
    26c0:	1b be       	out	0x3b, r1	; 59
    26c2:	8f 93       	push	r24
    26c4:	9f 93       	push	r25
    26c6:	ef 93       	push	r30
    26c8:	ff 93       	push	r31
 if (!(PORTH.IN & PIN1_bm))
    26ca:	e0 ee       	ldi	r30, 0xE0	; 224
    26cc:	f6 e0       	ldi	r31, 0x06	; 6
    26ce:	80 85       	ldd	r24, Z+8	; 0x08
    26d0:	81 fd       	sbrc	r24, 1
    26d2:	0a c0       	rjmp	.+20     	; 0x26e8 <__vector_96+0x3c>
 {
	  meny_selected--;
    26d4:	80 91 7a 22 	lds	r24, 0x227A
    26d8:	90 91 7b 22 	lds	r25, 0x227B
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	80 93 7a 22 	sts	0x227A, r24
    26e2:	90 93 7b 22 	sts	0x227B, r25
    26e6:	09 c0       	rjmp	.+18     	; 0x26fa <__vector_96+0x4e>
 }else
 {
	  meny_selected++;
    26e8:	80 91 7a 22 	lds	r24, 0x227A
    26ec:	90 91 7b 22 	lds	r25, 0x227B
    26f0:	01 96       	adiw	r24, 0x01	; 1
    26f2:	80 93 7a 22 	sts	0x227A, r24
    26f6:	90 93 7b 22 	sts	0x227B, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    26fa:	8f e1       	ldi	r24, 0x1F	; 31
    26fc:	93 e0       	ldi	r25, 0x03	; 3
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <__vector_96+0x52>
    2702:	00 c0       	rjmp	.+0      	; 0x2704 <__vector_96+0x58>
    2704:	00 00       	nop
 }
 _delay_us(100);

}
    2706:	ff 91       	pop	r31
    2708:	ef 91       	pop	r30
    270a:	9f 91       	pop	r25
    270c:	8f 91       	pop	r24
    270e:	0f 90       	pop	r0
    2710:	0b be       	out	0x3b, r0	; 59
    2712:	0f 90       	pop	r0
    2714:	08 be       	out	0x38, r0	; 56
    2716:	0f 90       	pop	r0
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	0f 90       	pop	r0
    271c:	1f 90       	pop	r1
    271e:	18 95       	reti

00002720 <__vector_97>:

// rotary encoder
 ISR(PORTH_INT1_vect)
{
    2720:	1f 92       	push	r1
    2722:	0f 92       	push	r0
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	0f 92       	push	r0
    2728:	11 24       	eor	r1, r1
    272a:	08 b6       	in	r0, 0x38	; 56
    272c:	0f 92       	push	r0
    272e:	18 be       	out	0x38, r1	; 56

}
    2730:	0f 90       	pop	r0
    2732:	08 be       	out	0x38, r0	; 56
    2734:	0f 90       	pop	r0
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	0f 90       	pop	r0
    273a:	1f 90       	pop	r1
    273c:	18 95       	reti

0000273e <__vector_64>:

ISR(PORTD_INT0_vect)
{
    273e:	1f 92       	push	r1
    2740:	0f 92       	push	r0
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	0f 92       	push	r0
    2746:	11 24       	eor	r1, r1
    2748:	08 b6       	in	r0, 0x38	; 56
    274a:	0f 92       	push	r0
    274c:	18 be       	out	0x38, r1	; 56
    274e:	8f 93       	push	r24
    2750:	9f 93       	push	r25
	new_can_message =1;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	80 93 7c 22 	sts	0x227C, r24
    275a:	90 93 7d 22 	sts	0x227D, r25
}
    275e:	9f 91       	pop	r25
    2760:	8f 91       	pop	r24
    2762:	0f 90       	pop	r0
    2764:	08 be       	out	0x38, r0	; 56
    2766:	0f 90       	pop	r0
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	0f 90       	pop	r0
    276c:	1f 90       	pop	r1
    276e:	18 95       	reti

00002770 <__vector_66>:
ISR(PORTA_INT0_vect)
{
    2770:	1f 92       	push	r1
    2772:	0f 92       	push	r0
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	0f 92       	push	r0
    2778:	11 24       	eor	r1, r1
    277a:	08 b6       	in	r0, 0x38	; 56
    277c:	0f 92       	push	r0
    277e:	18 be       	out	0x38, r1	; 56
    2780:	0b b6       	in	r0, 0x3b	; 59
    2782:	0f 92       	push	r0
    2784:	1b be       	out	0x3b, r1	; 59
    2786:	8f 93       	push	r24
    2788:	9f 93       	push	r25
    278a:	ef 93       	push	r30
    278c:	ff 93       	push	r31
	if((PORTA.IN & PIN7_bm) ==0 )
    278e:	e0 e0       	ldi	r30, 0x00	; 0
    2790:	f6 e0       	ldi	r31, 0x06	; 6
    2792:	80 85       	ldd	r24, Z+8	; 0x08
    2794:	88 23       	and	r24, r24
    2796:	3c f0       	brlt	.+14     	; 0x27a6 <__vector_66+0x36>
		rs232radio.ptt =1;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	80 93 84 26 	sts	0x2684, r24
    27a0:	90 93 85 26 	sts	0x2685, r25
    27a4:	04 c0       	rjmp	.+8      	; 0x27ae <__vector_66+0x3e>
	else
		rs232radio.ptt =0;
    27a6:	10 92 84 26 	sts	0x2684, r1
    27aa:	10 92 85 26 	sts	0x2685, r1
	
    27ae:	ff 91       	pop	r31
    27b0:	ef 91       	pop	r30
    27b2:	9f 91       	pop	r25
    27b4:	8f 91       	pop	r24
    27b6:	0f 90       	pop	r0
    27b8:	0b be       	out	0x3b, r0	; 59
    27ba:	0f 90       	pop	r0
    27bc:	08 be       	out	0x38, r0	; 56
    27be:	0f 90       	pop	r0
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	0f 90       	pop	r0
    27c4:	1f 90       	pop	r1
    27c6:	18 95       	reti

000027c8 <SPI_init>:


		
void SPI_init()
{
	PORTD.DIRSET = 0xB0;  // configure MOSI, SS, CLK as outputs on PORTE
    27c8:	e0 e6       	ldi	r30, 0x60	; 96
    27ca:	f6 e0       	ldi	r31, 0x06	; 6
    27cc:	80 eb       	ldi	r24, 0xB0	; 176
    27ce:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET =PIN4_bm;
    27d0:	80 e1       	ldi	r24, 0x10	; 16
    27d2:	85 83       	std	Z+5, r24	; 0x05
	
	// enable SPI master mode, CLK/64 (@32MHz=>500KHz)
	SPID.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV128_gc;
    27d4:	83 e5       	ldi	r24, 0x53	; 83
    27d6:	80 93 c0 09 	sts	0x09C0, r24
    27da:	08 95       	ret

000027dc <SPI_write>:



void SPI_write(char cData)
{
	SPID.DATA = cData;
    27dc:	e0 ec       	ldi	r30, 0xC0	; 192
    27de:	f9 e0       	ldi	r31, 0x09	; 9
    27e0:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPID.STATUS & (1<<7)));
    27e2:	82 81       	ldd	r24, Z+2	; 0x02
    27e4:	88 23       	and	r24, r24
    27e6:	ec f7       	brge	.-6      	; 0x27e2 <SPI_write+0x6>
    27e8:	8a e6       	ldi	r24, 0x6A	; 106
    27ea:	8a 95       	dec	r24
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <SPI_write+0xe>
    27ee:	00 c0       	rjmp	.+0      	; 0x27f0 <SPI_write+0x14>
    27f0:	08 95       	ret

000027f2 <SPI_read>:
}


unsigned char SPI_read()	//Remember that to read something from the slave, the master must transmit a dummy
{
	SPI_write(0xff);
    27f2:	8f ef       	ldi	r24, 0xFF	; 255
    27f4:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SPI_write>
	return SPID.DATA;
    27f8:	e0 ec       	ldi	r30, 0xC0	; 192
    27fa:	f9 e0       	ldi	r31, 0x09	; 9
    27fc:	83 81       	ldd	r24, Z+3	; 0x03
}
    27fe:	08 95       	ret

00002800 <fat_get_next_cluster>:
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    2800:	8f 92       	push	r8
    2802:	9f 92       	push	r9
    2804:	af 92       	push	r10
    2806:	bf 92       	push	r11
    2808:	cf 92       	push	r12
    280a:	df 92       	push	r13
    280c:	ef 92       	push	r14
    280e:	ff 92       	push	r15
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	00 d0       	rcall	.+0      	; 0x281a <fat_get_next_cluster+0x1a>
    281a:	00 d0       	rcall	.+0      	; 0x281c <fat_get_next_cluster+0x1c>
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	fc 01       	movw	r30, r24
    if(!fs || cluster_num < 2)
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	09 f4       	brne	.+2      	; 0x2828 <fat_get_next_cluster+0x28>
    2826:	84 c0       	rjmp	.+264    	; 0x2930 <fat_get_next_cluster+0x130>
    2828:	42 30       	cpi	r20, 0x02	; 2
    282a:	51 05       	cpc	r21, r1
    282c:	61 05       	cpc	r22, r1
    282e:	71 05       	cpc	r23, r1
    2830:	08 f4       	brcc	.+2      	; 0x2834 <fat_get_next_cluster+0x34>
    2832:	83 c0       	rjmp	.+262    	; 0x293a <fat_get_next_cluster+0x13a>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    2834:	a0 81       	ld	r26, Z
    2836:	b1 81       	ldd	r27, Z+1	; 0x01
    2838:	18 96       	adiw	r26, 0x08	; 8
    283a:	8c 91       	ld	r24, X
    283c:	18 97       	sbiw	r26, 0x08	; 8
    283e:	8b 30       	cpi	r24, 0x0B	; 11
    2840:	09 f0       	breq	.+2      	; 0x2844 <fat_get_next_cluster+0x44>
    2842:	40 c0       	rjmp	.+128    	; 0x28c4 <fat_get_next_cluster+0xc4>
    {
        /* read appropriate fat entry */
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    2844:	4a 01       	movw	r8, r20
    2846:	5b 01       	movw	r10, r22
    2848:	24 2f       	mov	r18, r20
    284a:	39 2d       	mov	r19, r9
    284c:	4a 2d       	mov	r20, r10
    284e:	5b 2d       	mov	r21, r11
    2850:	60 e0       	ldi	r22, 0x00	; 0
    2852:	70 e0       	ldi	r23, 0x00	; 0
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	02 e0       	ldi	r16, 0x02	; 2
    285a:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <__ashldi3>
    285e:	a2 84       	ldd	r10, Z+10	; 0x0a
    2860:	b3 84       	ldd	r11, Z+11	; 0x0b
    2862:	c4 84       	ldd	r12, Z+12	; 0x0c
    2864:	d5 84       	ldd	r13, Z+13	; 0x0d
    2866:	e6 84       	ldd	r14, Z+14	; 0x0e
    2868:	f7 84       	ldd	r15, Z+15	; 0x0f
    286a:	00 89       	ldd	r16, Z+16	; 0x10
    286c:	11 89       	ldd	r17, Z+17	; 0x11
    286e:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <__adddi3>
    2872:	ed 91       	ld	r30, X+
    2874:	fc 91       	ld	r31, X
    2876:	68 94       	set
    2878:	ee 24       	eor	r14, r14
    287a:	e2 f8       	bld	r14, 2
    287c:	f1 2c       	mov	r15, r1
    287e:	8e 01       	movw	r16, r28
    2880:	0f 5f       	subi	r16, 0xFF	; 255
    2882:	1f 4f       	sbci	r17, 0xFF	; 255
    2884:	09 95       	icall
    2886:	88 23       	and	r24, r24
    2888:	c1 f0       	breq	.+48     	; 0x28ba <fat_get_next_cluster+0xba>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
    288a:	49 81       	ldd	r20, Y+1	; 0x01
    288c:	5a 81       	ldd	r21, Y+2	; 0x02
    288e:	6b 81       	ldd	r22, Y+3	; 0x03
    2890:	7c 81       	ldd	r23, Y+4	; 0x04
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
    2892:	41 15       	cp	r20, r1
    2894:	51 05       	cpc	r21, r1
    2896:	61 05       	cpc	r22, r1
    2898:	71 05       	cpc	r23, r1
    289a:	79 f0       	breq	.+30     	; 0x28ba <fat_get_next_cluster+0xba>
           cluster_num == FAT32_CLUSTER_BAD ||
    289c:	db 01       	movw	r26, r22
    289e:	ca 01       	movw	r24, r20
    28a0:	80 5f       	subi	r24, 0xF0	; 240
    28a2:	9f 4f       	sbci	r25, 0xFF	; 255
    28a4:	af 4f       	sbci	r26, 0xFF	; 255
    28a6:	bf 40       	sbci	r27, 0x0F	; 15
    28a8:	40 97       	sbiw	r24, 0x10	; 16
    28aa:	a1 05       	cpc	r26, r1
    28ac:	b1 05       	cpc	r27, r1
    28ae:	28 f0       	brcs	.+10     	; 0x28ba <fat_get_next_cluster+0xba>
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
    28b0:	34 2f       	mov	r19, r20
    28b2:	25 2f       	mov	r18, r21
    28b4:	86 2f       	mov	r24, r22
    28b6:	97 2f       	mov	r25, r23
    28b8:	44 c0       	rjmp	.+136    	; 0x2942 <fat_get_next_cluster+0x142>
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        /* read appropriate fat entry */
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
            return 0;
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	3f c0       	rjmp	.+126    	; 0x2942 <fat_get_next_cluster+0x142>
    else
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    28c4:	4a 01       	movw	r8, r20
    28c6:	5b 01       	movw	r10, r22
    28c8:	24 2f       	mov	r18, r20
    28ca:	39 2d       	mov	r19, r9
    28cc:	4a 2d       	mov	r20, r10
    28ce:	5b 2d       	mov	r21, r11
    28d0:	60 e0       	ldi	r22, 0x00	; 0
    28d2:	70 e0       	ldi	r23, 0x00	; 0
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	01 e0       	ldi	r16, 0x01	; 1
    28da:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <__ashldi3>
    28de:	a2 84       	ldd	r10, Z+10	; 0x0a
    28e0:	b3 84       	ldd	r11, Z+11	; 0x0b
    28e2:	c4 84       	ldd	r12, Z+12	; 0x0c
    28e4:	d5 84       	ldd	r13, Z+13	; 0x0d
    28e6:	e6 84       	ldd	r14, Z+14	; 0x0e
    28e8:	f7 84       	ldd	r15, Z+15	; 0x0f
    28ea:	00 89       	ldd	r16, Z+16	; 0x10
    28ec:	11 89       	ldd	r17, Z+17	; 0x11
    28ee:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <__adddi3>
    28f2:	ed 91       	ld	r30, X+
    28f4:	fc 91       	ld	r31, X
    28f6:	68 94       	set
    28f8:	ee 24       	eor	r14, r14
    28fa:	e1 f8       	bld	r14, 1
    28fc:	f1 2c       	mov	r15, r1
    28fe:	8e 01       	movw	r16, r28
    2900:	0f 5f       	subi	r16, 0xFF	; 255
    2902:	1f 4f       	sbci	r17, 0xFF	; 255
    2904:	09 95       	icall
    2906:	88 23       	and	r24, r24
    2908:	71 f0       	breq	.+28     	; 0x2926 <fat_get_next_cluster+0x126>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	ac 01       	movw	r20, r24
    2910:	60 e0       	ldi	r22, 0x00	; 0
    2912:	70 e0       	ldi	r23, 0x00	; 0
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	8f 3e       	cpi	r24, 0xEF	; 239
    2918:	9f 4f       	sbci	r25, 0xFF	; 255
    291a:	28 f4       	brcc	.+10     	; 0x2926 <fat_get_next_cluster+0x126>
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
    291c:	34 2f       	mov	r19, r20
    291e:	25 2f       	mov	r18, r21
    2920:	86 2f       	mov	r24, r22
    2922:	97 2f       	mov	r25, r23
    2924:	0e c0       	rjmp	.+28     	; 0x2942 <fat_get_next_cluster+0x142>
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
            return 0;
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	09 c0       	rjmp	.+18     	; 0x2942 <fat_get_next_cluster+0x142>
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	04 c0       	rjmp	.+8      	; 0x2942 <fat_get_next_cluster+0x142>
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	90 e0       	ldi	r25, 0x00	; 0
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    }

    return cluster_num;
}
    2942:	63 2f       	mov	r22, r19
    2944:	72 2f       	mov	r23, r18
    2946:	24 96       	adiw	r28, 0x04	; 4
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	de bf       	out	0x3e, r29	; 62
    294c:	df 91       	pop	r29
    294e:	cf 91       	pop	r28
    2950:	1f 91       	pop	r17
    2952:	0f 91       	pop	r16
    2954:	ff 90       	pop	r15
    2956:	ef 90       	pop	r14
    2958:	df 90       	pop	r13
    295a:	cf 90       	pop	r12
    295c:	bf 90       	pop	r11
    295e:	af 90       	pop	r10
    2960:	9f 90       	pop	r9
    2962:	8f 90       	pop	r8
    2964:	08 95       	ret

00002966 <fat_cluster_offset>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    2966:	2f 92       	push	r2
    2968:	3f 92       	push	r3
    296a:	4f 92       	push	r4
    296c:	5f 92       	push	r5
    296e:	6f 92       	push	r6
    2970:	7f 92       	push	r7
    2972:	8f 92       	push	r8
    2974:	9f 92       	push	r9
    2976:	af 92       	push	r10
    2978:	bf 92       	push	r11
    297a:	cf 92       	push	r12
    297c:	df 92       	push	r13
    297e:	ef 92       	push	r14
    2980:	ff 92       	push	r15
    2982:	0f 93       	push	r16
    2984:	1f 93       	push	r17
    2986:	cf 93       	push	r28
    2988:	df 93       	push	r29
    298a:	ec 01       	movw	r28, r24
    if(!fs || cluster_num < 2)
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	51 f1       	breq	.+84     	; 0x29e4 <fat_cluster_offset+0x7e>
    2990:	42 30       	cpi	r20, 0x02	; 2
    2992:	51 05       	cpc	r21, r1
    2994:	61 05       	cpc	r22, r1
    2996:	71 05       	cpc	r23, r1
    2998:	70 f1       	brcs	.+92     	; 0x29f6 <fat_cluster_offset+0x90>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    299a:	42 50       	subi	r20, 0x02	; 2
    299c:	51 09       	sbc	r21, r1
    299e:	61 09       	sbc	r22, r1
    29a0:	71 09       	sbc	r23, r1
    29a2:	1a 01       	movw	r2, r20
    29a4:	2b 01       	movw	r4, r22
    29a6:	08 8d       	ldd	r16, Y+24	; 0x18
    29a8:	19 8d       	ldd	r17, Y+25	; 0x19
    29aa:	a0 2e       	mov	r10, r16
    29ac:	b1 2e       	mov	r11, r17
    29ae:	c1 2c       	mov	r12, r1
    29b0:	d1 2c       	mov	r13, r1
    29b2:	e1 2c       	mov	r14, r1
    29b4:	f1 2c       	mov	r15, r1
    29b6:	00 e0       	ldi	r16, 0x00	; 0
    29b8:	10 e0       	ldi	r17, 0x00	; 0
    29ba:	22 2d       	mov	r18, r2
    29bc:	33 2d       	mov	r19, r3
    29be:	44 2d       	mov	r20, r4
    29c0:	55 2d       	mov	r21, r5
    29c2:	60 e0       	ldi	r22, 0x00	; 0
    29c4:	70 e0       	ldi	r23, 0x00	; 0
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <__muldi3>
    29ce:	aa 8c       	ldd	r10, Y+26	; 0x1a
    29d0:	bb 8c       	ldd	r11, Y+27	; 0x1b
    29d2:	cc 8c       	ldd	r12, Y+28	; 0x1c
    29d4:	dd 8c       	ldd	r13, Y+29	; 0x1d
    29d6:	ee 8c       	ldd	r14, Y+30	; 0x1e
    29d8:	ff 8c       	ldd	r15, Y+31	; 0x1f
    29da:	08 a1       	ldd	r16, Y+32	; 0x20
    29dc:	19 a1       	ldd	r17, Y+33	; 0x21
    29de:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <__adddi3>
    29e2:	11 c0       	rjmp	.+34     	; 0x2a06 <fat_cluster_offset+0xa0>
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e0       	ldi	r20, 0x00	; 0
    29ea:	50 e0       	ldi	r21, 0x00	; 0
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	70 e0       	ldi	r23, 0x00	; 0
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	08 c0       	rjmp	.+16     	; 0x2a06 <fat_cluster_offset+0xa0>
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	50 e0       	ldi	r21, 0x00	; 0
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
}
    2a06:	df 91       	pop	r29
    2a08:	cf 91       	pop	r28
    2a0a:	1f 91       	pop	r17
    2a0c:	0f 91       	pop	r16
    2a0e:	ff 90       	pop	r15
    2a10:	ef 90       	pop	r14
    2a12:	df 90       	pop	r13
    2a14:	cf 90       	pop	r12
    2a16:	bf 90       	pop	r11
    2a18:	af 90       	pop	r10
    2a1a:	9f 90       	pop	r9
    2a1c:	8f 90       	pop	r8
    2a1e:	7f 90       	pop	r7
    2a20:	6f 90       	pop	r6
    2a22:	5f 90       	pop	r5
    2a24:	4f 90       	pop	r4
    2a26:	3f 90       	pop	r3
    2a28:	2f 90       	pop	r2
    2a2a:	08 95       	ret

00002a2c <fat_calc_83_checksum>:
 * \param[in] file_name_83 The 11-byte file name buffer.
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	81 91       	ld	r24, Z+
    2a30:	9a e0       	ldi	r25, 0x0A	; 10
    for(uint8_t i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
    2a32:	80 fb       	bst	r24, 0
    2a34:	87 95       	ror	r24
    2a36:	87 f9       	bld	r24, 7
    2a38:	21 91       	ld	r18, Z+
    2a3a:	82 0f       	add	r24, r18
    2a3c:	91 50       	subi	r25, 0x01	; 1
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
    2a3e:	c9 f7       	brne	.-14     	; 0x2a32 <fat_calc_83_checksum+0x6>
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];

    return checksum;
}
    2a40:	08 95       	ret

00002a42 <fat_dir_entry_read_callback>:
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
    2a42:	2f 92       	push	r2
    2a44:	3f 92       	push	r3
    2a46:	4f 92       	push	r4
    2a48:	5f 92       	push	r5
    2a4a:	6f 92       	push	r6
    2a4c:	7f 92       	push	r7
    2a4e:	8f 92       	push	r8
    2a50:	9f 92       	push	r9
    2a52:	af 92       	push	r10
    2a54:	bf 92       	push	r11
    2a56:	cf 92       	push	r12
    2a58:	df 92       	push	r13
    2a5a:	ef 92       	push	r14
    2a5c:	ff 92       	push	r15
    2a5e:	0f 93       	push	r16
    2a60:	1f 93       	push	r17
    2a62:	cf 93       	push	r28
    2a64:	df 93       	push	r29
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	2d 97       	sbiw	r28, 0x0d	; 13
    2a6c:	cd bf       	out	0x3d, r28	; 61
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	6c 01       	movw	r12, r24
    2a72:	42 2e       	mov	r4, r18
    2a74:	53 2e       	mov	r5, r19
    2a76:	64 2e       	mov	r6, r20
    2a78:	75 2e       	mov	r7, r21
    2a7a:	36 2e       	mov	r3, r22
    2a7c:	27 2e       	mov	r2, r23
    struct fat_read_dir_callback_arg* arg = p;
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
    2a7e:	d7 01       	movw	r26, r14
    2a80:	ad 90       	ld	r10, X+
    2a82:	bc 90       	ld	r11, X
    2a84:	11 97       	sbiw	r26, 0x01	; 1

    arg->bytes_read += 32;
    2a86:	12 96       	adiw	r26, 0x02	; 2
    2a88:	8d 91       	ld	r24, X+
    2a8a:	9c 91       	ld	r25, X
    2a8c:	13 97       	sbiw	r26, 0x03	; 3
    2a8e:	80 96       	adiw	r24, 0x20	; 32
    2a90:	12 96       	adiw	r26, 0x02	; 2
    2a92:	8d 93       	st	X+, r24
    2a94:	9c 93       	st	X, r25
    2a96:	13 97       	sbiw	r26, 0x03	; 3

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    2a98:	f6 01       	movw	r30, r12
    2a9a:	80 81       	ld	r24, Z
    2a9c:	85 3e       	cpi	r24, 0xE5	; 229
    2a9e:	11 f0       	breq	.+4      	; 0x2aa4 <fat_dir_entry_read_callback+0x62>
    2aa0:	81 11       	cpse	r24, r1
    2aa2:	05 c0       	rjmp	.+10     	; 0x2aae <fat_dir_entry_read_callback+0x6c>
    {
#if FAT_LFN_SUPPORT
        arg->checksum = 0;
    2aa4:	d7 01       	movw	r26, r14
    2aa6:	14 96       	adiw	r26, 0x04	; 4
    2aa8:	1c 92       	st	X, r1
#endif
        return 1;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	34 c1       	rjmp	.+616    	; 0x2d16 <fat_dir_entry_read_callback+0x2d4>
    /* skip lfn entries */
    if(buffer[11] == 0x0f)
        return 1;
#endif

    char* long_name = dir_entry->long_name;
    2aae:	45 01       	movw	r8, r10
#if FAT_LFN_SUPPORT
    if(buffer[11] == 0x0f)
    2ab0:	f6 01       	movw	r30, r12
    2ab2:	83 85       	ldd	r24, Z+11	; 0x0b
    2ab4:	8f 30       	cpi	r24, 0x0F	; 15
    2ab6:	09 f0       	breq	.+2      	; 0x2aba <fat_dir_entry_read_callback+0x78>
    2ab8:	55 c0       	rjmp	.+170    	; 0x2b64 <fat_dir_entry_read_callback+0x122>
    {
        /* checksum validation */
        if(arg->checksum == 0 || arg->checksum != buffer[13])
    2aba:	d7 01       	movw	r26, r14
    2abc:	14 96       	adiw	r26, 0x04	; 4
    2abe:	8c 91       	ld	r24, X
    2ac0:	88 23       	and	r24, r24
    2ac2:	19 f0       	breq	.+6      	; 0x2aca <fat_dir_entry_read_callback+0x88>
    2ac4:	95 85       	ldd	r25, Z+13	; 0x0d
    2ac6:	89 17       	cp	r24, r25
    2ac8:	11 f1       	breq	.+68     	; 0x2b0e <fat_dir_entry_read_callback+0xcc>
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
    2aca:	81 e3       	ldi	r24, 0x31	; 49
    2acc:	f5 01       	movw	r30, r10
    2ace:	11 92       	st	Z+, r1
    2ad0:	8a 95       	dec	r24
    2ad2:	e9 f7       	brne	.-6      	; 0x2ace <fat_dir_entry_read_callback+0x8c>

            arg->checksum = buffer[13];
    2ad4:	d6 01       	movw	r26, r12
    2ad6:	1d 96       	adiw	r26, 0x0d	; 13
    2ad8:	8c 91       	ld	r24, X
    2ada:	f7 01       	movw	r30, r14
    2adc:	84 83       	std	Z+4, r24	; 0x04
            dir_entry->entry_offset = offset;
    2ade:	d5 01       	movw	r26, r10
    2ae0:	99 96       	adiw	r26, 0x29	; 41
    2ae2:	0c 93       	st	X, r16
    2ae4:	99 97       	sbiw	r26, 0x29	; 41
    2ae6:	9a 96       	adiw	r26, 0x2a	; 42
    2ae8:	1c 93       	st	X, r17
    2aea:	9a 97       	sbiw	r26, 0x2a	; 42
    2aec:	9b 96       	adiw	r26, 0x2b	; 43
    2aee:	4c 92       	st	X, r4
    2af0:	9b 97       	sbiw	r26, 0x2b	; 43
    2af2:	9c 96       	adiw	r26, 0x2c	; 44
    2af4:	5c 92       	st	X, r5
    2af6:	9c 97       	sbiw	r26, 0x2c	; 44
    2af8:	9d 96       	adiw	r26, 0x2d	; 45
    2afa:	6c 92       	st	X, r6
    2afc:	9d 97       	sbiw	r26, 0x2d	; 45
    2afe:	9e 96       	adiw	r26, 0x2e	; 46
    2b00:	7c 92       	st	X, r7
    2b02:	9e 97       	sbiw	r26, 0x2e	; 46
    2b04:	9f 96       	adiw	r26, 0x2f	; 47
    2b06:	3c 92       	st	X, r3
    2b08:	9f 97       	sbiw	r26, 0x2f	; 47
    2b0a:	d0 96       	adiw	r26, 0x30	; 48
    2b0c:	2c 92       	st	X, r2

        /* lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
    2b0e:	f6 01       	movw	r30, r12
    2b10:	20 81       	ld	r18, Z
    2b12:	2f 73       	andi	r18, 0x3F	; 63
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	21 50       	subi	r18, 0x01	; 1
    2b18:	31 09       	sbc	r19, r1
    2b1a:	4d e0       	ldi	r20, 0x0D	; 13
    2b1c:	42 9f       	mul	r20, r18
    2b1e:	c0 01       	movw	r24, r0
    2b20:	43 9f       	mul	r20, r19
    2b22:	90 0d       	add	r25, r0
    2b24:	11 24       	eor	r1, r1
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
    2b26:	2d e0       	ldi	r18, 0x0D	; 13
    2b28:	e2 e7       	ldi	r30, 0x72	; 114
    2b2a:	f0 e2       	ldi	r31, 0x20	; 32
    2b2c:	de 01       	movw	r26, r28
    2b2e:	11 96       	adiw	r26, 0x01	; 1
    2b30:	01 90       	ld	r0, Z+
    2b32:	0d 92       	st	X+, r0
    2b34:	2a 95       	dec	r18
    2b36:	e1 f7       	brne	.-8      	; 0x2b30 <fat_dir_entry_read_callback+0xee>
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    2b38:	8f 31       	cpi	r24, 0x1F	; 31
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	08 f4       	brcc	.+2      	; 0x2b40 <fat_dir_entry_read_callback+0xfe>
    2b3e:	d3 c0       	rjmp	.+422    	; 0x2ce6 <fat_dir_entry_read_callback+0x2a4>
    2b40:	0f c0       	rjmp	.+30     	; 0x2b60 <fat_dir_entry_read_callback+0x11e>
            long_name[char_offset + i] = buffer[char_mapping[i]];
    2b42:	81 91       	ld	r24, Z+
    2b44:	b6 01       	movw	r22, r12
    2b46:	68 0f       	add	r22, r24
    2b48:	71 1d       	adc	r23, r1
    2b4a:	db 01       	movw	r26, r22
    2b4c:	8c 91       	ld	r24, X
    2b4e:	d5 01       	movw	r26, r10
    2b50:	8d 93       	st	X+, r24
    2b52:	5d 01       	movw	r10, r26
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    2b54:	e4 17       	cp	r30, r20
    2b56:	f5 07       	cpc	r31, r21
    2b58:	19 f0       	breq	.+6      	; 0x2b60 <fat_dir_entry_read_callback+0x11e>
    2b5a:	e2 17       	cp	r30, r18
    2b5c:	f3 07       	cpc	r31, r19
    2b5e:	89 f7       	brne	.-30     	; 0x2b42 <fat_dir_entry_read_callback+0x100>
            long_name[char_offset + i] = buffer[char_mapping[i]];

        return 1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	d9 c0       	rjmp	.+434    	; 0x2d16 <fat_dir_entry_read_callback+0x2d4>
    else
#endif
    {
#if FAT_LFN_SUPPORT
        /* if we do not have a long name or the previous lfn does not match, take the 8.3 name */
        if(long_name[0] == '\0' || arg->checksum != fat_calc_83_checksum(buffer))
    2b64:	f5 01       	movw	r30, r10
    2b66:	80 81       	ld	r24, Z
    2b68:	88 23       	and	r24, r24
    2b6a:	49 f0       	breq	.+18     	; 0x2b7e <fat_dir_entry_read_callback+0x13c>
    2b6c:	c6 01       	movw	r24, r12
    2b6e:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fat_calc_83_checksum>
    2b72:	d7 01       	movw	r26, r14
    2b74:	14 96       	adiw	r26, 0x04	; 4
    2b76:	9c 91       	ld	r25, X
    2b78:	98 17       	cp	r25, r24
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <fat_dir_entry_read_callback+0x13c>
    2b7c:	85 c0       	rjmp	.+266    	; 0x2c88 <fat_dir_entry_read_callback+0x246>
#endif
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
    2b7e:	81 e3       	ldi	r24, 0x31	; 49
    2b80:	f5 01       	movw	r30, r10
    2b82:	11 92       	st	Z+, r1
    2b84:	8a 95       	dec	r24
    2b86:	e9 f7       	brne	.-6      	; 0x2b82 <fat_dir_entry_read_callback+0x140>
            dir_entry->entry_offset = offset;
    2b88:	d5 01       	movw	r26, r10
    2b8a:	99 96       	adiw	r26, 0x29	; 41
    2b8c:	0c 93       	st	X, r16
    2b8e:	99 97       	sbiw	r26, 0x29	; 41
    2b90:	9a 96       	adiw	r26, 0x2a	; 42
    2b92:	1c 93       	st	X, r17
    2b94:	9a 97       	sbiw	r26, 0x2a	; 42
    2b96:	9b 96       	adiw	r26, 0x2b	; 43
    2b98:	4c 92       	st	X, r4
    2b9a:	9b 97       	sbiw	r26, 0x2b	; 43
    2b9c:	9c 96       	adiw	r26, 0x2c	; 44
    2b9e:	5c 92       	st	X, r5
    2ba0:	9c 97       	sbiw	r26, 0x2c	; 44
    2ba2:	9d 96       	adiw	r26, 0x2d	; 45
    2ba4:	6c 92       	st	X, r6
    2ba6:	9d 97       	sbiw	r26, 0x2d	; 45
    2ba8:	9e 96       	adiw	r26, 0x2e	; 46
    2baa:	7c 92       	st	X, r7
    2bac:	9e 97       	sbiw	r26, 0x2e	; 46
    2bae:	9f 96       	adiw	r26, 0x2f	; 47
    2bb0:	3c 92       	st	X, r3
    2bb2:	9f 97       	sbiw	r26, 0x2f	; 47
    2bb4:	d0 96       	adiw	r26, 0x30	; 48
    2bb6:	2c 92       	st	X, r2

            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(buffer[i] == ' ')
    2bb8:	f6 01       	movw	r30, r12
    2bba:	60 81       	ld	r22, Z
    2bbc:	60 32       	cpi	r22, 0x20	; 32
    2bbe:	39 f1       	breq	.+78     	; 0x2c0e <fat_dir_entry_read_callback+0x1cc>
    2bc0:	31 96       	adiw	r30, 0x01	; 1
    2bc2:	96 01       	movw	r18, r12
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	a0 e0       	ldi	r26, 0x00	; 0
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	09 c0       	rjmp	.+18     	; 0x2be0 <fat_dir_entry_read_callback+0x19e>
    2bce:	9f 01       	movw	r18, r30
    2bd0:	61 91       	ld	r22, Z+
    2bd2:	ac 01       	movw	r20, r24
    2bd4:	4f 5f       	subi	r20, 0xFF	; 255
    2bd6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bd8:	60 32       	cpi	r22, 0x20	; 32
    2bda:	d1 f0       	breq	.+52     	; 0x2c10 <fat_dir_entry_read_callback+0x1ce>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	ca 01       	movw	r24, r20
                    break;
                long_name[i] = buffer[i];
    2be0:	8d 01       	movw	r16, r26
    2be2:	08 0d       	add	r16, r8
    2be4:	19 1d       	adc	r17, r9
    2be6:	d8 01       	movw	r26, r16
    2be8:	6c 93       	st	X, r22
                /* Windows NT and later versions do not store lfn entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
    2bea:	d6 01       	movw	r26, r12
    2bec:	1c 96       	adiw	r26, 0x0c	; 12
    2bee:	4c 91       	ld	r20, X
    2bf0:	43 ff       	sbrs	r20, 3
    2bf2:	08 c0       	rjmp	.+16     	; 0x2c04 <fat_dir_entry_read_callback+0x1c2>
    2bf4:	d9 01       	movw	r26, r18
    2bf6:	2c 91       	ld	r18, X
    2bf8:	21 54       	subi	r18, 0x41	; 65
    2bfa:	2a 31       	cpi	r18, 0x1A	; 26
    2bfc:	18 f4       	brcc	.+6      	; 0x2c04 <fat_dir_entry_read_callback+0x1c2>
                    long_name[i] += 'a' - 'A';
    2bfe:	60 5e       	subi	r22, 0xE0	; 224
    2c00:	d8 01       	movw	r26, r16
    2c02:	6c 93       	st	X, r22
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
    2c04:	78 2f       	mov	r23, r24
    2c06:	88 30       	cpi	r24, 0x08	; 8
    2c08:	91 05       	cpc	r25, r1
    2c0a:	09 f7       	brne	.-62     	; 0x2bce <fat_dir_entry_read_callback+0x18c>
    2c0c:	01 c0       	rjmp	.+2      	; 0x2c10 <fat_dir_entry_read_callback+0x1ce>
    2c0e:	70 e0       	ldi	r23, 0x00	; 0
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
    2c10:	f5 01       	movw	r30, r10
    2c12:	80 81       	ld	r24, Z
    2c14:	85 30       	cpi	r24, 0x05	; 5
    2c16:	11 f4       	brne	.+4      	; 0x2c1c <fat_dir_entry_read_callback+0x1da>
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
    2c18:	85 ee       	ldi	r24, 0xE5	; 229
    2c1a:	80 83       	st	Z, r24

            if(buffer[8] != ' ')
    2c1c:	d6 01       	movw	r26, r12
    2c1e:	18 96       	adiw	r26, 0x08	; 8
    2c20:	8c 91       	ld	r24, X
    2c22:	18 97       	sbiw	r26, 0x08	; 8
    2c24:	80 32       	cpi	r24, 0x20	; 32
    2c26:	59 f1       	breq	.+86     	; 0x2c7e <fat_dir_entry_read_callback+0x23c>
            {
                long_name[i++] = '.';
    2c28:	21 e0       	ldi	r18, 0x01	; 1
    2c2a:	27 0f       	add	r18, r23
    2c2c:	8e e2       	ldi	r24, 0x2E	; 46
    2c2e:	f5 01       	movw	r30, r10
    2c30:	e7 0f       	add	r30, r23
    2c32:	f1 1d       	adc	r31, r1
    2c34:	80 83       	st	Z, r24

                uint8_t j = 8;
                for(; j < 11; ++j)
                {
                    if(buffer[j] == ' ')
    2c36:	c6 01       	movw	r24, r12
    2c38:	08 96       	adiw	r24, 0x08	; 8
    2c3a:	18 96       	adiw	r26, 0x08	; 8
    2c3c:	3c 91       	ld	r19, X
    2c3e:	30 32       	cpi	r19, 0x20	; 32
    2c40:	f9 f0       	breq	.+62     	; 0x2c80 <fat_dir_entry_read_callback+0x23e>
    2c42:	f6 01       	movw	r30, r12
    2c44:	39 96       	adiw	r30, 0x09	; 9
    2c46:	7c 5f       	subi	r23, 0xFC	; 252
    2c48:	04 c0       	rjmp	.+8      	; 0x2c52 <fat_dir_entry_read_callback+0x210>
    2c4a:	cf 01       	movw	r24, r30
    2c4c:	31 91       	ld	r19, Z+
    2c4e:	30 32       	cpi	r19, 0x20	; 32
    2c50:	b9 f0       	breq	.+46     	; 0x2c80 <fat_dir_entry_read_callback+0x23e>
                        break;
                    long_name[i] = buffer[j];
    2c52:	84 01       	movw	r16, r8
    2c54:	02 0f       	add	r16, r18
    2c56:	11 1d       	adc	r17, r1
    2c58:	d8 01       	movw	r26, r16
    2c5a:	3c 93       	st	X, r19

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((buffer[12] & 0x10) && buffer[j] >= 'A' && buffer[j] <= 'Z')
    2c5c:	d6 01       	movw	r26, r12
    2c5e:	1c 96       	adiw	r26, 0x0c	; 12
    2c60:	4c 91       	ld	r20, X
    2c62:	44 ff       	sbrs	r20, 4
    2c64:	08 c0       	rjmp	.+16     	; 0x2c76 <fat_dir_entry_read_callback+0x234>
    2c66:	dc 01       	movw	r26, r24
    2c68:	8c 91       	ld	r24, X
    2c6a:	81 54       	subi	r24, 0x41	; 65
    2c6c:	8a 31       	cpi	r24, 0x1A	; 26
    2c6e:	18 f4       	brcc	.+6      	; 0x2c76 <fat_dir_entry_read_callback+0x234>
                        long_name[i] += 'a' - 'A';
    2c70:	30 5e       	subi	r19, 0xE0	; 224
    2c72:	d8 01       	movw	r26, r16
    2c74:	3c 93       	st	X, r19

                    ++i;
    2c76:	2f 5f       	subi	r18, 0xFF	; 255
            if(buffer[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
    2c78:	27 13       	cpse	r18, r23
    2c7a:	e7 cf       	rjmp	.-50     	; 0x2c4a <fat_dir_entry_read_callback+0x208>
    2c7c:	01 c0       	rjmp	.+2      	; 0x2c80 <fat_dir_entry_read_callback+0x23e>
    2c7e:	27 2f       	mov	r18, r23

                    ++i;
                }
            } 

            long_name[i] = '\0';
    2c80:	f5 01       	movw	r30, r10
    2c82:	e2 0f       	add	r30, r18
    2c84:	f1 1d       	adc	r31, r1
    2c86:	10 82       	st	Z, r1
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = buffer[11];
    2c88:	f6 01       	movw	r30, r12
    2c8a:	83 85       	ldd	r24, Z+11	; 0x0b
    2c8c:	d5 01       	movw	r26, r10
    2c8e:	90 96       	adiw	r26, 0x20	; 32
    2c90:	8c 93       	st	X, r24
        dir_entry->cluster = read16(&buffer[26]);
    2c92:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c94:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c96:	a0 e0       	ldi	r26, 0x00	; 0
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	f5 01       	movw	r30, r10
    2c9c:	81 a3       	std	Z+33, r24	; 0x21
    2c9e:	92 a3       	std	Z+34, r25	; 0x22
    2ca0:	a3 a3       	std	Z+35, r26	; 0x23
    2ca2:	b4 a3       	std	Z+36, r27	; 0x24
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) read16(&buffer[20])) << 16;
    2ca4:	f6 01       	movw	r30, r12
    2ca6:	44 89       	ldd	r20, Z+20	; 0x14
    2ca8:	55 89       	ldd	r21, Z+21	; 0x15
    2caa:	60 e0       	ldi	r22, 0x00	; 0
    2cac:	70 e0       	ldi	r23, 0x00	; 0
    2cae:	ba 01       	movw	r22, r20
    2cb0:	55 27       	eor	r21, r21
    2cb2:	44 27       	eor	r20, r20
    2cb4:	84 2b       	or	r24, r20
    2cb6:	95 2b       	or	r25, r21
    2cb8:	a6 2b       	or	r26, r22
    2cba:	b7 2b       	or	r27, r23
    2cbc:	f5 01       	movw	r30, r10
    2cbe:	81 a3       	std	Z+33, r24	; 0x21
    2cc0:	92 a3       	std	Z+34, r25	; 0x22
    2cc2:	a3 a3       	std	Z+35, r26	; 0x23
    2cc4:	b4 a3       	std	Z+36, r27	; 0x24
#endif
        dir_entry->file_size = read32(&buffer[28]);
    2cc6:	f6 01       	movw	r30, r12
    2cc8:	84 8d       	ldd	r24, Z+28	; 0x1c
    2cca:	95 8d       	ldd	r25, Z+29	; 0x1d
    2ccc:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2cce:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2cd0:	f5 01       	movw	r30, r10
    2cd2:	85 a3       	std	Z+37, r24	; 0x25
    2cd4:	96 a3       	std	Z+38, r25	; 0x26
    2cd6:	a7 a3       	std	Z+39, r26	; 0x27
    2cd8:	b0 a7       	std	Z+40, r27	; 0x28
#if FAT_DATETIME_SUPPORT
        dir_entry->modification_time = read16(&buffer[22]);
        dir_entry->modification_date = read16(&buffer[24]);
#endif

        arg->finished = 1;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	d7 01       	movw	r26, r14
    2cde:	15 96       	adiw	r26, 0x05	; 5
    2ce0:	8c 93       	st	X, r24
        return 0;
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	18 c0       	rjmp	.+48     	; 0x2d16 <fat_dir_entry_read_callback+0x2d4>
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = buffer[char_mapping[i]];
    2ce6:	29 81       	ldd	r18, Y+1	; 0x01
    2ce8:	f6 01       	movw	r30, r12
    2cea:	e2 0f       	add	r30, r18
    2cec:	f1 1d       	adc	r31, r1
    2cee:	20 81       	ld	r18, Z
    2cf0:	f5 01       	movw	r30, r10
    2cf2:	e8 0f       	add	r30, r24
    2cf4:	f9 1f       	adc	r31, r25
    2cf6:	20 83       	st	Z, r18
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	32 96       	adiw	r30, 0x02	; 2
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	11 96       	adiw	r26, 0x01	; 1
    2d00:	aa 0e       	add	r10, r26
    2d02:	bb 1e       	adc	r11, r27
    2d04:	9e 01       	movw	r18, r28
    2d06:	20 5e       	subi	r18, 0xE0	; 224
    2d08:	3f 4f       	sbci	r19, 0xFF	; 255
    2d0a:	28 1b       	sub	r18, r24
    2d0c:	39 0b       	sbc	r19, r25
    2d0e:	ae 01       	movw	r20, r28
    2d10:	42 5f       	subi	r20, 0xF2	; 242
    2d12:	5f 4f       	sbci	r21, 0xFF	; 255
    2d14:	22 cf       	rjmp	.-444    	; 0x2b5a <fat_dir_entry_read_callback+0x118>
#endif

        arg->finished = 1;
        return 0;
    }
}
    2d16:	2d 96       	adiw	r28, 0x0d	; 13
    2d18:	cd bf       	out	0x3d, r28	; 61
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	df 91       	pop	r29
    2d1e:	cf 91       	pop	r28
    2d20:	1f 91       	pop	r17
    2d22:	0f 91       	pop	r16
    2d24:	ff 90       	pop	r15
    2d26:	ef 90       	pop	r14
    2d28:	df 90       	pop	r13
    2d2a:	cf 90       	pop	r12
    2d2c:	bf 90       	pop	r11
    2d2e:	af 90       	pop	r10
    2d30:	9f 90       	pop	r9
    2d32:	8f 90       	pop	r8
    2d34:	7f 90       	pop	r7
    2d36:	6f 90       	pop	r6
    2d38:	5f 90       	pop	r5
    2d3a:	4f 90       	pop	r4
    2d3c:	3f 90       	pop	r3
    2d3e:	2f 90       	pop	r2
    2d40:	08 95       	ret

00002d42 <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
    2d42:	2f 92       	push	r2
    2d44:	3f 92       	push	r3
    2d46:	4f 92       	push	r4
    2d48:	5f 92       	push	r5
    2d4a:	6f 92       	push	r6
    2d4c:	7f 92       	push	r7
    2d4e:	8f 92       	push	r8
    2d50:	9f 92       	push	r9
    2d52:	af 92       	push	r10
    2d54:	bf 92       	push	r11
    2d56:	cf 92       	push	r12
    2d58:	df 92       	push	r13
    2d5a:	ef 92       	push	r14
    2d5c:	ff 92       	push	r15
    2d5e:	0f 93       	push	r16
    2d60:	1f 93       	push	r17
    2d62:	cf 93       	push	r28
    2d64:	df 93       	push	r29
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    2d6a:	cd 54       	subi	r28, 0x4D	; 77
    2d6c:	d1 09       	sbc	r29, r1
    2d6e:	cd bf       	out	0x3d, r28	; 61
    2d70:	de bf       	out	0x3e, r29	; 62
    2d72:	1c 01       	movw	r2, r24
    if(!partition ||
    2d74:	00 97       	sbiw	r24, 0x00	; 0
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <fat_open+0x38>
    2d78:	25 c2       	rjmp	.+1098   	; 0x31c4 <__stack+0x1c5>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	14 96       	adiw	r26, 0x04	; 4
    2d7e:	8d 91       	ld	r24, X+
    2d80:	9c 91       	ld	r25, X
    2d82:	15 97       	sbiw	r26, 0x05	; 5
    2d84:	89 2b       	or	r24, r25
    2d86:	09 f4       	brne	.+2      	; 0x2d8a <fat_open+0x48>
    2d88:	20 c2       	rjmp	.+1088   	; 0x31ca <__stack+0x1cb>
#if FAT_WRITE_SUPPORT
       !partition->device_write ||
    2d8a:	16 96       	adiw	r26, 0x06	; 6
    2d8c:	8d 91       	ld	r24, X+
    2d8e:	9c 91       	ld	r25, X
    2d90:	17 97       	sbiw	r26, 0x07	; 7
    2d92:	89 2b       	or	r24, r25
    2d94:	09 f4       	brne	.+2      	; 0x2d98 <fat_open+0x56>
    2d96:	1c c2       	rjmp	.+1080   	; 0x31d0 <__stack+0x1d1>
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
    2d98:	80 91 f4 22 	lds	r24, 0x22F4
    2d9c:	90 91 f5 22 	lds	r25, 0x22F5
    2da0:	89 2b       	or	r24, r25
    2da2:	09 f4       	brne	.+2      	; 0x2da6 <fat_open+0x64>
    2da4:	18 c2       	rjmp	.+1072   	; 0x31d6 <__stack+0x1d7>
            break;

        ++fs;
    }
    if(i >= FAT_FS_COUNT)
        return 0;
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	50 c2       	rjmp	.+1184   	; 0x324c <__stack+0x24d>
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
        return 0;

    uint16_t bytes_per_sector = read16(&buffer[0x00]);
    2dac:	e9 81       	ldd	r30, Y+1	; 0x01
    2dae:	fa 81       	ldd	r31, Y+2	; 0x02
    2db0:	ec ab       	std	Y+52, r30	; 0x34
    2db2:	fd ab       	std	Y+53, r31	; 0x35
    uint16_t reserved_sectors = read16(&buffer[0x03]);
    2db4:	ec 80       	ldd	r14, Y+4	; 0x04
    2db6:	fd 80       	ldd	r15, Y+5	; 0x05
    2db8:	ee aa       	std	Y+54, r14	; 0x36
    2dba:	ff aa       	std	Y+55, r15	; 0x37
    uint8_t sectors_per_cluster = buffer[0x02];
    2dbc:	fb 80       	ldd	r15, Y+3	; 0x03
    2dbe:	27 96       	adiw	r28, 0x07	; 7
    2dc0:	ff ae       	std	Y+63, r15	; 0x3f
    2dc2:	27 97       	sbiw	r28, 0x07	; 7
    uint8_t fat_copies = buffer[0x05];
    2dc4:	0e 81       	ldd	r16, Y+6	; 0x06
    2dc6:	28 96       	adiw	r28, 0x08	; 8
    2dc8:	0f af       	std	Y+63, r16	; 0x3f
    2dca:	28 97       	sbiw	r28, 0x08	; 8
    uint16_t max_root_entries = read16(&buffer[0x06]);
    2dcc:	2f 81       	ldd	r18, Y+7	; 0x07
    2dce:	38 85       	ldd	r19, Y+8	; 0x08
    2dd0:	2a 96       	adiw	r28, 0x0a	; 10
    2dd2:	2e af       	std	Y+62, r18	; 0x3e
    2dd4:	3f af       	std	Y+63, r19	; 0x3f
    2dd6:	2a 97       	sbiw	r28, 0x0a	; 10
    uint16_t sector_count_16 = read16(&buffer[0x08]);
    2dd8:	89 85       	ldd	r24, Y+9	; 0x09
    2dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    uint16_t sectors_per_fat = read16(&buffer[0x0b]);
    2ddc:	4c 85       	ldd	r20, Y+12	; 0x0c
    2dde:	5d 85       	ldd	r21, Y+13	; 0x0d
    2de0:	26 96       	adiw	r28, 0x06	; 6
    2de2:	4e af       	std	Y+62, r20	; 0x3e
    2de4:	5f af       	std	Y+63, r21	; 0x3f
    2de6:	26 97       	sbiw	r28, 0x06	; 6
    uint32_t sector_count = read32(&buffer[0x15]);
    2de8:	ce 88       	ldd	r12, Y+22	; 0x16
    2dea:	df 88       	ldd	r13, Y+23	; 0x17
    2dec:	e8 8c       	ldd	r14, Y+24	; 0x18
    2dee:	f9 8c       	ldd	r15, Y+25	; 0x19
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = read32(&buffer[0x19]);
    2df0:	0a 8d       	ldd	r16, Y+26	; 0x1a
    2df2:	1b 8d       	ldd	r17, Y+27	; 0x1b
    2df4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2df6:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2df8:	24 96       	adiw	r28, 0x04	; 4
    2dfa:	0c af       	std	Y+60, r16	; 0x3c
    2dfc:	1d af       	std	Y+61, r17	; 0x3d
    2dfe:	2e af       	std	Y+62, r18	; 0x3e
    2e00:	3f af       	std	Y+63, r19	; 0x3f
    2e02:	24 97       	sbiw	r28, 0x04	; 4
    uint32_t cluster_root_dir = read32(&buffer[0x21]);
    2e04:	2a a1       	ldd	r18, Y+34	; 0x22
    2e06:	3b a1       	ldd	r19, Y+35	; 0x23
    2e08:	4c a1       	ldd	r20, Y+36	; 0x24
    2e0a:	5d a1       	ldd	r21, Y+37	; 0x25
    2e0c:	2e 96       	adiw	r28, 0x0e	; 14
    2e0e:	2c af       	std	Y+60, r18	; 0x3c
    2e10:	3d af       	std	Y+61, r19	; 0x3d
    2e12:	4e af       	std	Y+62, r20	; 0x3e
    2e14:	5f af       	std	Y+63, r21	; 0x3f
    2e16:	2e 97       	sbiw	r28, 0x0e	; 14
#endif

    if(sector_count == 0)
    2e18:	c1 14       	cp	r12, r1
    2e1a:	d1 04       	cpc	r13, r1
    2e1c:	e1 04       	cpc	r14, r1
    2e1e:	f1 04       	cpc	r15, r1
    2e20:	31 f4       	brne	.+12     	; 0x2e2e <fat_open+0xec>
    {
        if(sector_count_16 == 0)
    2e22:	00 97       	sbiw	r24, 0x00	; 0
    2e24:	09 f4       	brne	.+2      	; 0x2e28 <fat_open+0xe6>
    2e26:	09 c2       	rjmp	.+1042   	; 0x323a <__stack+0x23b>
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
    2e28:	6c 01       	movw	r12, r24
    2e2a:	e1 2c       	mov	r14, r1
    2e2c:	f1 2c       	mov	r15, r1
    }
#if FAT_FAT32_SUPPORT
    if(sectors_per_fat != 0)
    2e2e:	26 96       	adiw	r28, 0x06	; 6
    2e30:	4e ad       	ldd	r20, Y+62	; 0x3e
    2e32:	5f ad       	ldd	r21, Y+63	; 0x3f
    2e34:	26 97       	sbiw	r28, 0x06	; 6
    2e36:	41 15       	cp	r20, r1
    2e38:	51 05       	cpc	r21, r1
    2e3a:	51 f0       	breq	.+20     	; 0x2e50 <fat_open+0x10e>
        sectors_per_fat32 = sectors_per_fat;
    2e3c:	ba 01       	movw	r22, r20
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	24 96       	adiw	r28, 0x04	; 4
    2e44:	6c af       	std	Y+60, r22	; 0x3c
    2e46:	7d af       	std	Y+61, r23	; 0x3d
    2e48:	8e af       	std	Y+62, r24	; 0x3e
    2e4a:	9f af       	std	Y+63, r25	; 0x3f
    2e4c:	24 97       	sbiw	r28, 0x04	; 4
    2e4e:	0b c0       	rjmp	.+22     	; 0x2e66 <fat_open+0x124>
    else if(sectors_per_fat32 == 0)
    2e50:	24 96       	adiw	r28, 0x04	; 4
    2e52:	0c ad       	ldd	r16, Y+60	; 0x3c
    2e54:	1d ad       	ldd	r17, Y+61	; 0x3d
    2e56:	2e ad       	ldd	r18, Y+62	; 0x3e
    2e58:	3f ad       	ldd	r19, Y+63	; 0x3f
    2e5a:	24 97       	sbiw	r28, 0x04	; 4
    2e5c:	01 2b       	or	r16, r17
    2e5e:	02 2b       	or	r16, r18
    2e60:	03 2b       	or	r16, r19
    2e62:	09 f4       	brne	.+2      	; 0x2e66 <fat_open+0x124>
    2e64:	ea c1       	rjmp	.+980    	; 0x323a <__stack+0x23b>

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
                                 - reserved_sectors
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
    2e66:	28 96       	adiw	r28, 0x08	; 8
    2e68:	1f ad       	ldd	r17, Y+63	; 0x3f
    2e6a:	28 97       	sbiw	r28, 0x08	; 8
    2e6c:	a1 2f       	mov	r26, r17
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	24 96       	adiw	r28, 0x04	; 4
    2e72:	2c ad       	ldd	r18, Y+60	; 0x3c
    2e74:	3d ad       	ldd	r19, Y+61	; 0x3d
    2e76:	4e ad       	ldd	r20, Y+62	; 0x3e
    2e78:	5f ad       	ldd	r21, Y+63	; 0x3f
    2e7a:	24 97       	sbiw	r28, 0x04	; 4
    2e7c:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <__muluhisi3>
    2e80:	26 01       	movw	r4, r12
    2e82:	37 01       	movw	r6, r14
    2e84:	2e a9       	ldd	r18, Y+54	; 0x36
    2e86:	3f a9       	ldd	r19, Y+55	; 0x37
    2e88:	42 1a       	sub	r4, r18
    2e8a:	53 0a       	sbc	r5, r19
    2e8c:	61 08       	sbc	r6, r1
    2e8e:	71 08       	sbc	r7, r1
    2e90:	46 1a       	sub	r4, r22
    2e92:	57 0a       	sbc	r5, r23
    2e94:	68 0a       	sbc	r6, r24
    2e96:	79 0a       	sbc	r7, r25
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    2e98:	2a 96       	adiw	r28, 0x0a	; 10
    2e9a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e9c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e9e:	2a 97       	sbiw	r28, 0x0a	; 10
    2ea0:	88 0f       	add	r24, r24
    2ea2:	99 1f       	adc	r25, r25
    2ea4:	82 95       	swap	r24
    2ea6:	92 95       	swap	r25
    2ea8:	90 7f       	andi	r25, 0xF0	; 240
    2eaa:	98 27       	eor	r25, r24
    2eac:	80 7f       	andi	r24, 0xF0	; 240
    2eae:	98 27       	eor	r25, r24
    2eb0:	2c a9       	ldd	r18, Y+52	; 0x34
    2eb2:	3d a9       	ldd	r19, Y+53	; 0x35
    2eb4:	21 50       	subi	r18, 0x01	; 1
    2eb6:	31 09       	sbc	r19, r1
    2eb8:	82 0f       	add	r24, r18
    2eba:	93 1f       	adc	r25, r19
    2ebc:	6c a9       	ldd	r22, Y+52	; 0x34
    2ebe:	7d a9       	ldd	r23, Y+53	; 0x35
    2ec0:	0e 94 cf 34 	call	0x699e	; 0x699e <__udivmodhi4>
        /* this is not a FAT16 */
        return 0;
#endif

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
    2ec4:	93 01       	movw	r18, r6
    2ec6:	82 01       	movw	r16, r4
    2ec8:	06 1b       	sub	r16, r22
    2eca:	17 0b       	sbc	r17, r23
    2ecc:	21 09       	sbc	r18, r1
    2ece:	31 09       	sbc	r19, r1
    2ed0:	c9 01       	movw	r24, r18
    2ed2:	b8 01       	movw	r22, r16
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    2ed4:	27 96       	adiw	r28, 0x07	; 7
    2ed6:	4f ad       	ldd	r20, Y+63	; 0x3f
    2ed8:	27 97       	sbiw	r28, 0x07	; 7
    2eda:	04 2f       	mov	r16, r20
    2edc:	10 e0       	ldi	r17, 0x00	; 0
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	a9 01       	movw	r20, r18
    2ee4:	98 01       	movw	r18, r16
    2ee6:	0e 94 f7 34 	call	0x69ee	; 0x69ee <__udivmodsi4>
    2eea:	29 01       	movw	r4, r18
    2eec:	3a 01       	movw	r6, r20
    if(data_cluster_count < 4085)
    2eee:	55 ef       	ldi	r21, 0xF5	; 245
    2ef0:	45 16       	cp	r4, r21
    2ef2:	5f e0       	ldi	r21, 0x0F	; 15
    2ef4:	55 06       	cpc	r5, r21
    2ef6:	61 04       	cpc	r6, r1
    2ef8:	71 04       	cpc	r7, r1
    2efa:	08 f4       	brcc	.+2      	; 0x2efe <fat_open+0x1bc>
    2efc:	9e c1       	rjmp	.+828    	; 0x323a <__stack+0x23b>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
    2efe:	65 ef       	ldi	r22, 0xF5	; 245
    2f00:	46 16       	cp	r4, r22
    2f02:	6f ef       	ldi	r22, 0xFF	; 255
    2f04:	56 06       	cpc	r5, r22
    2f06:	61 04       	cpc	r6, r1
    2f08:	71 04       	cpc	r7, r1
    2f0a:	28 f4       	brcc	.+10     	; 0x2f16 <fat_open+0x1d4>
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
    2f0c:	86 e0       	ldi	r24, 0x06	; 6
    2f0e:	d1 01       	movw	r26, r2
    2f10:	18 96       	adiw	r26, 0x08	; 8
    2f12:	8c 93       	st	X, r24
    2f14:	03 c0       	rjmp	.+6      	; 0x2f1c <fat_open+0x1da>
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;
    2f16:	8b e0       	ldi	r24, 0x0B	; 11
    2f18:	f1 01       	movw	r30, r2
    2f1a:	80 87       	std	Z+8, r24	; 0x08

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    2f1c:	8c e2       	ldi	r24, 0x2C	; 44
    2f1e:	a6 ef       	ldi	r26, 0xF6	; 246
    2f20:	b2 e2       	ldi	r27, 0x22	; 34
    2f22:	1d 92       	st	X+, r1
    2f24:	8a 95       	dec	r24
    2f26:	e9 f7       	brne	.-6      	; 0x2f22 <fat_open+0x1e0>
    
    header->size = (offset_t) sector_count * bytes_per_sector;
    2f28:	2c a9       	ldd	r18, Y+52	; 0x34
    2f2a:	3d a9       	ldd	r19, Y+53	; 0x35
    2f2c:	89 01       	movw	r16, r18
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	50 e0       	ldi	r21, 0x00	; 0
    2f36:	ba 01       	movw	r22, r20
    2f38:	0e a3       	std	Y+38, r16	; 0x26
    2f3a:	1f a3       	std	Y+39, r17	; 0x27
    2f3c:	28 a7       	std	Y+40, r18	; 0x28
    2f3e:	39 a7       	std	Y+41, r19	; 0x29
    2f40:	4a a7       	std	Y+42, r20	; 0x2a
    2f42:	5b a7       	std	Y+43, r21	; 0x2b
    2f44:	6c a7       	std	Y+44, r22	; 0x2c
    2f46:	7d a7       	std	Y+45, r23	; 0x2d
    2f48:	b7 01       	movw	r22, r14
    2f4a:	a6 01       	movw	r20, r12
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	dc 01       	movw	r26, r24
    2f52:	c8 ae       	std	Y+56, r12	; 0x38
    2f54:	59 af       	std	Y+57, r21	; 0x39
    2f56:	6a af       	std	Y+58, r22	; 0x3a
    2f58:	7b af       	std	Y+59, r23	; 0x3b
    2f5a:	8c af       	std	Y+60, r24	; 0x3c
    2f5c:	9d af       	std	Y+61, r25	; 0x3d
    2f5e:	ae af       	std	Y+62, r26	; 0x3e
    2f60:	bf af       	std	Y+63, r27	; 0x3f
    2f62:	a0 2e       	mov	r10, r16
    2f64:	b1 2e       	mov	r11, r17
    2f66:	c1 2c       	mov	r12, r1
    2f68:	d1 2c       	mov	r13, r1
    2f6a:	e1 2c       	mov	r14, r1
    2f6c:	f1 2c       	mov	r15, r1
    2f6e:	00 e0       	ldi	r16, 0x00	; 0
    2f70:	10 e0       	ldi	r17, 0x00	; 0
    2f72:	24 2f       	mov	r18, r20
    2f74:	35 2f       	mov	r19, r21
    2f76:	46 2f       	mov	r20, r22
    2f78:	57 2f       	mov	r21, r23
    2f7a:	60 e0       	ldi	r22, 0x00	; 0
    2f7c:	70 e0       	ldi	r23, 0x00	; 0
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <__muldi3>
    2f86:	a6 ef       	ldi	r26, 0xF6	; 246
    2f88:	b2 e2       	ldi	r27, 0x22	; 34
    2f8a:	2c 93       	st	X, r18
    2f8c:	30 93 f7 22 	sts	0x22F7, r19
    2f90:	40 93 f8 22 	sts	0x22F8, r20
    2f94:	50 93 f9 22 	sts	0x22F9, r21
    2f98:	60 93 fa 22 	sts	0x22FA, r22
    2f9c:	70 93 fb 22 	sts	0x22FB, r23
    2fa0:	80 93 fc 22 	sts	0x22FC, r24
    2fa4:	90 93 fd 22 	sts	0x22FD, r25

    header->fat_offset = /* jump to partition */
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    2fa8:	ee a9       	ldd	r30, Y+54	; 0x36
    2faa:	ff a9       	ldd	r31, Y+55	; 0x37
    2fac:	af 01       	movw	r20, r30
    2fae:	2e 2f       	mov	r18, r30
    2fb0:	35 2f       	mov	r19, r21
    2fb2:	40 e0       	ldi	r20, 0x00	; 0
    2fb4:	50 e0       	ldi	r21, 0x00	; 0
    2fb6:	60 e0       	ldi	r22, 0x00	; 0
    2fb8:	70 e0       	ldi	r23, 0x00	; 0
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <__muldi3>
    memset(header, 0, sizeof(*header));
    
    header->size = (offset_t) sector_count * bytes_per_sector;

    header->fat_offset = /* jump to partition */
                         partition_offset +
    2fc2:	a9 2c       	mov	r10, r9
    2fc4:	b8 2c       	mov	r11, r8
    2fc6:	ce a4       	ldd	r12, Y+46	; 0x2e
    2fc8:	df a4       	ldd	r13, Y+47	; 0x2f
    2fca:	e8 a8       	ldd	r14, Y+48	; 0x30
    2fcc:	f9 a8       	ldd	r15, Y+49	; 0x31
    2fce:	0a a9       	ldd	r16, Y+50	; 0x32
    2fd0:	1b a9       	ldd	r17, Y+51	; 0x33
    2fd2:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <__adddi3>
    2fd6:	2e a7       	std	Y+46, r18	; 0x2e
    2fd8:	3f a7       	std	Y+47, r19	; 0x2f
    2fda:	48 ab       	std	Y+48, r20	; 0x30
    2fdc:	59 ab       	std	Y+49, r21	; 0x31
    2fde:	6a ab       	std	Y+50, r22	; 0x32
    2fe0:	7b ab       	std	Y+51, r23	; 0x33
    2fe2:	8e ab       	std	Y+54, r24	; 0x36
    2fe4:	98 af       	std	Y+56, r25	; 0x38
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    
    header->size = (offset_t) sector_count * bytes_per_sector;

    header->fat_offset = /* jump to partition */
    2fe6:	ee ef       	ldi	r30, 0xFE	; 254
    2fe8:	f2 e2       	ldi	r31, 0x22	; 34
    2fea:	20 83       	st	Z, r18
    2fec:	31 83       	std	Z+1, r19	; 0x01
    2fee:	42 83       	std	Z+2, r20	; 0x02
    2ff0:	53 83       	std	Z+3, r21	; 0x03
    2ff2:	64 83       	std	Z+4, r22	; 0x04
    2ff4:	75 83       	std	Z+5, r23	; 0x05
    2ff6:	86 83       	std	Z+6, r24	; 0x06
    2ff8:	97 83       	std	Z+7, r25	; 0x07
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    2ffa:	c3 01       	movw	r24, r6
    2ffc:	b2 01       	movw	r22, r4
    2ffe:	6e 5f       	subi	r22, 0xFE	; 254
    3000:	7f 4f       	sbci	r23, 0xFF	; 255
    3002:	8f 4f       	sbci	r24, 0xFF	; 255
    3004:	9f 4f       	sbci	r25, 0xFF	; 255
    3006:	d1 01       	movw	r26, r2
    3008:	18 96       	adiw	r26, 0x08	; 8
    300a:	2c 91       	ld	r18, X
    300c:	26 30       	cpi	r18, 0x06	; 6
    300e:	29 f4       	brne	.+10     	; 0x301a <__stack+0x1b>
    3010:	22 e0       	ldi	r18, 0x02	; 2
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	40 e0       	ldi	r20, 0x00	; 0
    3016:	50 e0       	ldi	r21, 0x00	; 0
    3018:	04 c0       	rjmp	.+8      	; 0x3022 <__stack+0x23>
    301a:	24 e0       	ldi	r18, 0x04	; 4
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	40 e0       	ldi	r20, 0x00	; 0
    3020:	50 e0       	ldi	r21, 0x00	; 0
    3022:	0e 94 bf 34 	call	0x697e	; 0x697e <__mulsi3>
    3026:	60 93 06 23 	sts	0x2306, r22
    302a:	70 93 07 23 	sts	0x2307, r23
    302e:	80 93 08 23 	sts	0x2308, r24
    3032:	90 93 09 23 	sts	0x2309, r25

    header->sector_size = bytes_per_sector;
    3036:	ec a9       	ldd	r30, Y+52	; 0x34
    3038:	fd a9       	ldd	r31, Y+53	; 0x35
    303a:	e0 93 0a 23 	sts	0x230A, r30
    303e:	f0 93 0b 23 	sts	0x230B, r31
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    3042:	27 96       	adiw	r28, 0x07	; 7
    3044:	ef ac       	ldd	r14, Y+63	; 0x3f
    3046:	27 97       	sbiw	r28, 0x07	; 7
    3048:	ee 9e       	mul	r14, r30
    304a:	c0 01       	movw	r24, r0
    304c:	ef 9e       	mul	r14, r31
    304e:	90 0d       	add	r25, r0
    3050:	11 24       	eor	r1, r1
    3052:	80 93 0c 23 	sts	0x230C, r24
    3056:	90 93 0d 23 	sts	0x230D, r25

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
    305a:	d1 01       	movw	r26, r2
    305c:	18 96       	adiw	r26, 0x08	; 8
    305e:	8c 91       	ld	r24, X
    3060:	86 30       	cpi	r24, 0x06	; 6
    3062:	09 f0       	breq	.+2      	; 0x3066 <__stack+0x67>
    3064:	66 c0       	rjmp	.+204    	; 0x3132 <__stack+0x133>
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;
    3066:	ae a0       	ldd	r10, Y+38	; 0x26
    3068:	bf a0       	ldd	r11, Y+39	; 0x27
    306a:	c1 2c       	mov	r12, r1
    306c:	d1 2c       	mov	r13, r1
    306e:	e1 2c       	mov	r14, r1
    3070:	f1 2c       	mov	r15, r1
    3072:	00 e0       	ldi	r16, 0x00	; 0
    3074:	10 e0       	ldi	r17, 0x00	; 0
    3076:	28 96       	adiw	r28, 0x08	; 8
    3078:	2f ad       	ldd	r18, Y+63	; 0x3f
    307a:	28 97       	sbiw	r28, 0x08	; 8
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	40 e0       	ldi	r20, 0x00	; 0
    3080:	50 e0       	ldi	r21, 0x00	; 0
    3082:	60 e0       	ldi	r22, 0x00	; 0
    3084:	70 e0       	ldi	r23, 0x00	; 0
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <__muldi3>
    308e:	26 96       	adiw	r28, 0x06	; 6
    3090:	ee ad       	ldd	r30, Y+62	; 0x3e
    3092:	ff ad       	ldd	r31, Y+63	; 0x3f
    3094:	26 97       	sbiw	r28, 0x06	; 6
    3096:	1f 01       	movw	r2, r30
    3098:	ae 2e       	mov	r10, r30
    309a:	b3 2c       	mov	r11, r3
    309c:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <__muldi3>
#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
    30a0:	ae a4       	ldd	r10, Y+46	; 0x2e
    30a2:	bf a4       	ldd	r11, Y+47	; 0x2f
    30a4:	c8 a8       	ldd	r12, Y+48	; 0x30
    30a6:	d9 a8       	ldd	r13, Y+49	; 0x31
    30a8:	ea a8       	ldd	r14, Y+50	; 0x32
    30aa:	fb a8       	ldd	r15, Y+51	; 0x33
    30ac:	0e a9       	ldd	r16, Y+54	; 0x36
    30ae:	18 ad       	ldd	r17, Y+56	; 0x38
    30b0:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <__adddi3>
    30b4:	42 2e       	mov	r4, r18
    30b6:	53 2e       	mov	r5, r19
    30b8:	64 2e       	mov	r6, r20
    30ba:	75 2e       	mov	r7, r21
    30bc:	b6 2f       	mov	r27, r22
    30be:	a7 2f       	mov	r26, r23
    30c0:	28 2e       	mov	r2, r24
    30c2:	39 2e       	mov	r3, r25

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
    30c4:	e6 e1       	ldi	r30, 0x16	; 22
    30c6:	f3 e2       	ldi	r31, 0x23	; 35
    30c8:	20 83       	st	Z, r18
    30ca:	31 83       	std	Z+1, r19	; 0x01
    30cc:	42 83       	std	Z+2, r20	; 0x02
    30ce:	53 83       	std	Z+3, r21	; 0x03
    30d0:	64 83       	std	Z+4, r22	; 0x04
    30d2:	75 83       	std	Z+5, r23	; 0x05
    30d4:	86 83       	std	Z+6, r24	; 0x06
    30d6:	97 83       	std	Z+7, r25	; 0x07
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
                                      /* skip root directory entries */
                                      (offset_t) max_root_entries * 32;
    30d8:	2a 96       	adiw	r28, 0x0a	; 10
    30da:	0e ad       	ldd	r16, Y+62	; 0x3e
    30dc:	1f ad       	ldd	r17, Y+63	; 0x3f
    30de:	2a 97       	sbiw	r28, 0x0a	; 10
    30e0:	48 01       	movw	r8, r16
    30e2:	20 2f       	mov	r18, r16
    30e4:	39 2d       	mov	r19, r9
    30e6:	40 e0       	ldi	r20, 0x00	; 0
    30e8:	50 e0       	ldi	r21, 0x00	; 0
    30ea:	60 e0       	ldi	r22, 0x00	; 0
    30ec:	70 e0       	ldi	r23, 0x00	; 0
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	05 e0       	ldi	r16, 0x05	; 5
    30f4:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <__ashldi3>
    30f8:	a2 2e       	mov	r10, r18
    30fa:	b3 2e       	mov	r11, r19
    30fc:	c4 2e       	mov	r12, r20
    30fe:	d5 2e       	mov	r13, r21
    3100:	e6 2e       	mov	r14, r22
    3102:	f7 2e       	mov	r15, r23
    3104:	08 2f       	mov	r16, r24
    3106:	19 2f       	mov	r17, r25
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
    3108:	24 2d       	mov	r18, r4
    310a:	35 2d       	mov	r19, r5
    310c:	46 2d       	mov	r20, r6
    310e:	57 2d       	mov	r21, r7
    3110:	6b 2f       	mov	r22, r27
    3112:	7a 2f       	mov	r23, r26
    3114:	82 2d       	mov	r24, r2
    3116:	93 2d       	mov	r25, r3
    3118:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <__adddi3>
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
    311c:	ee e0       	ldi	r30, 0x0E	; 14
    311e:	f3 e2       	ldi	r31, 0x23	; 35
    3120:	20 83       	st	Z, r18
    3122:	31 83       	std	Z+1, r19	; 0x01
    3124:	42 83       	std	Z+2, r20	; 0x02
    3126:	53 83       	std	Z+3, r21	; 0x03
    3128:	64 83       	std	Z+4, r22	; 0x04
    312a:	75 83       	std	Z+5, r23	; 0x05
    312c:	86 83       	std	Z+6, r24	; 0x06
    312e:	97 83       	std	Z+7, r25	; 0x07
    3130:	8b c0       	rjmp	.+278    	; 0x3248 <__stack+0x249>
    else
    {
        header->cluster_zero_offset = /* jump to fats */
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;
    3132:	ae a0       	ldd	r10, Y+38	; 0x26
    3134:	bf a0       	ldd	r11, Y+39	; 0x27
    3136:	c1 2c       	mov	r12, r1
    3138:	d1 2c       	mov	r13, r1
    313a:	e1 2c       	mov	r14, r1
    313c:	f1 2c       	mov	r15, r1
    313e:	00 e0       	ldi	r16, 0x00	; 0
    3140:	10 e0       	ldi	r17, 0x00	; 0
    3142:	28 96       	adiw	r28, 0x08	; 8
    3144:	2f ad       	ldd	r18, Y+63	; 0x3f
    3146:	28 97       	sbiw	r28, 0x08	; 8
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e0       	ldi	r20, 0x00	; 0
    314c:	50 e0       	ldi	r21, 0x00	; 0
    314e:	60 e0       	ldi	r22, 0x00	; 0
    3150:	70 e0       	ldi	r23, 0x00	; 0
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <__muldi3>
    315a:	24 96       	adiw	r28, 0x04	; 4
    315c:	ec ac       	ldd	r14, Y+60	; 0x3c
    315e:	fd ac       	ldd	r15, Y+61	; 0x3d
    3160:	0e ad       	ldd	r16, Y+62	; 0x3e
    3162:	1f ad       	ldd	r17, Y+63	; 0x3f
    3164:	24 97       	sbiw	r28, 0x04	; 4
    3166:	17 01       	movw	r2, r14
    3168:	28 01       	movw	r4, r16
    316a:	ae 2c       	mov	r10, r14
    316c:	b3 2c       	mov	r11, r3
    316e:	c4 2c       	mov	r12, r4
    3170:	d5 2c       	mov	r13, r5
    3172:	e1 2c       	mov	r14, r1
    3174:	f1 2c       	mov	r15, r1
    3176:	00 e0       	ldi	r16, 0x00	; 0
    3178:	10 e0       	ldi	r17, 0x00	; 0
    317a:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <__muldi3>
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
                                      header->fat_offset +
    317e:	ae a4       	ldd	r10, Y+46	; 0x2e
    3180:	bf a4       	ldd	r11, Y+47	; 0x2f
    3182:	c8 a8       	ldd	r12, Y+48	; 0x30
    3184:	d9 a8       	ldd	r13, Y+49	; 0x31
    3186:	ea a8       	ldd	r14, Y+50	; 0x32
    3188:	fb a8       	ldd	r15, Y+51	; 0x33
    318a:	0e a9       	ldd	r16, Y+54	; 0x36
    318c:	18 ad       	ldd	r17, Y+56	; 0x38
    318e:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <__adddi3>
                                      (offset_t) max_root_entries * 32;
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
    3192:	ee e0       	ldi	r30, 0x0E	; 14
    3194:	f3 e2       	ldi	r31, 0x23	; 35
    3196:	20 83       	st	Z, r18
    3198:	31 83       	std	Z+1, r19	; 0x01
    319a:	42 83       	std	Z+2, r20	; 0x02
    319c:	53 83       	std	Z+3, r21	; 0x03
    319e:	64 83       	std	Z+4, r22	; 0x04
    31a0:	75 83       	std	Z+5, r23	; 0x05
    31a2:	86 83       	std	Z+6, r24	; 0x06
    31a4:	97 83       	std	Z+7, r25	; 0x07
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;

        header->root_dir_cluster = cluster_root_dir;
    31a6:	2e 96       	adiw	r28, 0x0e	; 14
    31a8:	0c ad       	ldd	r16, Y+60	; 0x3c
    31aa:	1d ad       	ldd	r17, Y+61	; 0x3d
    31ac:	2e ad       	ldd	r18, Y+62	; 0x3e
    31ae:	3f ad       	ldd	r19, Y+63	; 0x3f
    31b0:	2e 97       	sbiw	r28, 0x0e	; 14
    31b2:	00 93 1e 23 	sts	0x231E, r16
    31b6:	10 93 1f 23 	sts	0x231F, r17
    31ba:	20 93 20 23 	sts	0x2320, r18
    31be:	30 93 21 23 	sts	0x2321, r19
    31c2:	42 c0       	rjmp	.+132    	; 0x3248 <__stack+0x249>
       !partition->device_write_interval
#else
       0
#endif
      )
        return 0;
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	41 c0       	rjmp	.+130    	; 0x324c <__stack+0x24d>
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	3e c0       	rjmp	.+124    	; 0x324c <__stack+0x24d>
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	3b c0       	rjmp	.+118    	; 0x324c <__stack+0x24d>
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif

    memset(fs, 0, sizeof(*fs));
    31d6:	e4 ef       	ldi	r30, 0xF4	; 244
    31d8:	f2 e2       	ldi	r31, 0x22	; 34
    31da:	82 e3       	ldi	r24, 0x32	; 50
    31dc:	df 01       	movw	r26, r30
    31de:	1d 92       	st	X+, r1
    31e0:	8a 95       	dec	r24
    31e2:	e9 f7       	brne	.-6      	; 0x31de <__stack+0x1df>

    fs->partition = partition;
    31e4:	20 82       	st	Z, r2
    31e6:	31 82       	std	Z+1, r3	; 0x01
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    31e8:	f1 01       	movw	r30, r2
    31ea:	81 84       	ldd	r8, Z+9	; 0x09
    31ec:	92 84       	ldd	r9, Z+10	; 0x0a
    31ee:	a3 84       	ldd	r10, Z+11	; 0x0b
    31f0:	b4 84       	ldd	r11, Z+12	; 0x0c
    31f2:	28 2d       	mov	r18, r8
    31f4:	39 2d       	mov	r19, r9
    31f6:	4a 2d       	mov	r20, r10
    31f8:	5b 2d       	mov	r21, r11
    31fa:	60 e0       	ldi	r22, 0x00	; 0
    31fc:	70 e0       	ldi	r23, 0x00	; 0
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	09 e0       	ldi	r16, 0x09	; 9
    3204:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <__ashldi3>
    3208:	92 2e       	mov	r9, r18
    320a:	83 2e       	mov	r8, r19
    320c:	4e a7       	std	Y+46, r20	; 0x2e
    320e:	5f a7       	std	Y+47, r21	; 0x2f
    3210:	68 ab       	std	Y+48, r22	; 0x30
    3212:	79 ab       	std	Y+49, r23	; 0x31
    3214:	8a ab       	std	Y+50, r24	; 0x32
    3216:	9b ab       	std	Y+51, r25	; 0x33
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    3218:	ab e0       	ldi	r26, 0x0B	; 11
    321a:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__adddi3_s8>
    321e:	01 90       	ld	r0, Z+
    3220:	f0 81       	ld	r31, Z
    3222:	e0 2d       	mov	r30, r0
    3224:	0f 2e       	mov	r0, r31
    3226:	f5 e2       	ldi	r31, 0x25	; 37
    3228:	ef 2e       	mov	r14, r31
    322a:	f1 2c       	mov	r15, r1
    322c:	f0 2d       	mov	r31, r0
    322e:	8e 01       	movw	r16, r28
    3230:	0f 5f       	subi	r16, 0xFF	; 255
    3232:	1f 4f       	sbci	r17, 0xFF	; 255
    3234:	09 95       	icall
    3236:	81 11       	cpse	r24, r1
    3238:	b9 cd       	rjmp	.-1166   	; 0x2dac <fat_open+0x6a>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
    323a:	10 92 f4 22 	sts	0x22F4, r1
    323e:	10 92 f5 22 	sts	0x22F5, r1
#endif
        return 0;
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	02 c0       	rjmp	.+4      	; 0x324c <__stack+0x24d>
    3248:	84 ef       	ldi	r24, 0xF4	; 244
    324a:	92 e2       	ldi	r25, 0x22	; 34
    }
    
    return fs;
}
    324c:	c3 5b       	subi	r28, 0xB3	; 179
    324e:	df 4f       	sbci	r29, 0xFF	; 255
    3250:	cd bf       	out	0x3d, r28	; 61
    3252:	de bf       	out	0x3e, r29	; 62
    3254:	df 91       	pop	r29
    3256:	cf 91       	pop	r28
    3258:	1f 91       	pop	r17
    325a:	0f 91       	pop	r16
    325c:	ff 90       	pop	r15
    325e:	ef 90       	pop	r14
    3260:	df 90       	pop	r13
    3262:	cf 90       	pop	r12
    3264:	bf 90       	pop	r11
    3266:	af 90       	pop	r10
    3268:	9f 90       	pop	r9
    326a:	8f 90       	pop	r8
    326c:	7f 90       	pop	r7
    326e:	6f 90       	pop	r6
    3270:	5f 90       	pop	r5
    3272:	4f 90       	pop	r4
    3274:	3f 90       	pop	r3
    3276:	2f 90       	pop	r2
    3278:	08 95       	ret

0000327a <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    327a:	cf 93       	push	r28
    327c:	df 93       	push	r29
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    327e:	00 97       	sbiw	r24, 0x00	; 0
    3280:	b1 f0       	breq	.+44     	; 0x32ae <fat_open_dir+0x34>
    3282:	61 15       	cp	r22, r1
    3284:	71 05       	cpc	r23, r1
    3286:	b1 f0       	breq	.+44     	; 0x32b4 <fat_open_dir+0x3a>
    3288:	fb 01       	movw	r30, r22
    328a:	20 a1       	ldd	r18, Z+32	; 0x20
    328c:	24 ff       	sbrs	r18, 4
    328e:	15 c0       	rjmp	.+42     	; 0x32ba <fat_open_dir+0x40>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    3290:	20 91 82 22 	lds	r18, 0x2282
    3294:	30 91 83 22 	lds	r19, 0x2283
    3298:	23 2b       	or	r18, r19
    329a:	91 f0       	breq	.+36     	; 0x32c0 <fat_open_dir+0x46>
    329c:	20 91 bb 22 	lds	r18, 0x22BB
    32a0:	30 91 bc 22 	lds	r19, 0x22BC
    32a4:	23 2b       	or	r18, r19
    32a6:	79 f0       	breq	.+30     	; 0x32c6 <fat_open_dir+0x4c>
            break;

        ++dd;
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	25 c0       	rjmp	.+74     	; 0x32f8 <fat_open_dir+0x7e>
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
        return 0;
    32ae:	80 e0       	ldi	r24, 0x00	; 0
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	22 c0       	rjmp	.+68     	; 0x32f8 <fat_open_dir+0x7e>
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	1f c0       	rjmp	.+62     	; 0x32f8 <fat_open_dir+0x7e>
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	1c c0       	rjmp	.+56     	; 0x32f8 <fat_open_dir+0x7e>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    32c0:	c2 e8       	ldi	r28, 0x82	; 130
    32c2:	d2 e2       	ldi	r29, 0x22	; 34
    32c4:	02 c0       	rjmp	.+4      	; 0x32ca <fat_open_dir+0x50>
    32c6:	cb eb       	ldi	r28, 0xBB	; 187
    32c8:	d2 e2       	ldi	r29, 0x22	; 34
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    32ca:	de 01       	movw	r26, r28
    32cc:	12 96       	adiw	r26, 0x02	; 2
    32ce:	21 e3       	ldi	r18, 0x31	; 49
    32d0:	fb 01       	movw	r30, r22
    32d2:	01 90       	ld	r0, Z+
    32d4:	0d 92       	st	X+, r0
    32d6:	2a 95       	dec	r18
    32d8:	e1 f7       	brne	.-8      	; 0x32d2 <fat_open_dir+0x58>
    dd->fs = fs;
    32da:	88 83       	st	Y, r24
    32dc:	99 83       	std	Y+1, r25	; 0x01
    dd->entry_cluster = dir_entry->cluster;
    32de:	fb 01       	movw	r30, r22
    32e0:	81 a1       	ldd	r24, Z+33	; 0x21
    32e2:	92 a1       	ldd	r25, Z+34	; 0x22
    32e4:	a3 a1       	ldd	r26, Z+35	; 0x23
    32e6:	b4 a1       	ldd	r27, Z+36	; 0x24
    32e8:	8b ab       	std	Y+51, r24	; 0x33
    32ea:	9c ab       	std	Y+52, r25	; 0x34
    32ec:	ad ab       	std	Y+53, r26	; 0x35
    32ee:	be ab       	std	Y+54, r27	; 0x36
    dd->entry_offset = 0;
    32f0:	1f aa       	std	Y+55, r1	; 0x37
    32f2:	18 ae       	std	Y+56, r1	; 0x38

    return dd;
    32f4:	8c 2f       	mov	r24, r28
    32f6:	9d 2f       	mov	r25, r29
}
    32f8:	df 91       	pop	r29
    32fa:	cf 91       	pop	r28
    32fc:	08 95       	ret

000032fe <fat_close_dir>:
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    if(dd)
    32fe:	00 97       	sbiw	r24, 0x00	; 0
    3300:	19 f0       	breq	.+6      	; 0x3308 <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    3302:	fc 01       	movw	r30, r24
    3304:	10 82       	st	Z, r1
    3306:	11 82       	std	Z+1, r1	; 0x01
    3308:	08 95       	ret

0000330a <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    330a:	fc 01       	movw	r30, r24
    if(!dd)
    330c:	00 97       	sbiw	r24, 0x00	; 0
    330e:	61 f0       	breq	.+24     	; 0x3328 <fat_reset_dir+0x1e>
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    3310:	43 a1       	ldd	r20, Z+35	; 0x23
    3312:	54 a1       	ldd	r21, Z+36	; 0x24
    3314:	65 a1       	ldd	r22, Z+37	; 0x25
    3316:	76 a1       	ldd	r23, Z+38	; 0x26
    3318:	43 ab       	std	Z+51, r20	; 0x33
    331a:	54 ab       	std	Z+52, r21	; 0x34
    331c:	65 ab       	std	Z+53, r22	; 0x35
    331e:	76 ab       	std	Z+54, r23	; 0x36
    dd->entry_offset = 0;
    3320:	17 aa       	std	Z+55, r1	; 0x37
    3322:	10 ae       	std	Z+56, r1	; 0x38
    return 1;
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	08 95       	ret
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;
    3328:	80 e0       	ldi	r24, 0x00	; 0

    dd->entry_cluster = dd->dir_entry.cluster;
    dd->entry_offset = 0;
    return 1;
}
    332a:	08 95       	ret

0000332c <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    332c:	2f 92       	push	r2
    332e:	3f 92       	push	r3
    3330:	4f 92       	push	r4
    3332:	5f 92       	push	r5
    3334:	6f 92       	push	r6
    3336:	7f 92       	push	r7
    3338:	8f 92       	push	r8
    333a:	9f 92       	push	r9
    333c:	af 92       	push	r10
    333e:	bf 92       	push	r11
    3340:	cf 92       	push	r12
    3342:	df 92       	push	r13
    3344:	ef 92       	push	r14
    3346:	ff 92       	push	r15
    3348:	0f 93       	push	r16
    334a:	1f 93       	push	r17
    334c:	cf 93       	push	r28
    334e:	df 93       	push	r29
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	e8 97       	sbiw	r28, 0x38	; 56
    3356:	cd bf       	out	0x3d, r28	; 61
    3358:	de bf       	out	0x3e, r29	; 62
    335a:	8d ab       	std	Y+53, r24	; 0x35
    335c:	9e ab       	std	Y+54, r25	; 0x36
    if(!dd || !dir_entry)
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	09 f4       	brne	.+2      	; 0x3364 <fat_read_dir+0x38>
    3362:	fb c0       	rjmp	.+502    	; 0x355a <fat_read_dir+0x22e>
    3364:	61 15       	cp	r22, r1
    3366:	71 05       	cpc	r23, r1
    3368:	09 f4       	brne	.+2      	; 0x336c <fat_read_dir+0x40>
    336a:	f9 c0       	rjmp	.+498    	; 0x355e <fat_read_dir+0x232>
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    336c:	dc 01       	movw	r26, r24
    336e:	0d 90       	ld	r0, X+
    3370:	bc 91       	ld	r27, X
    3372:	a0 2d       	mov	r26, r0
    3374:	af ab       	std	Y+55, r26	; 0x37
    3376:	b8 af       	std	Y+56, r27	; 0x38
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    3378:	58 96       	adiw	r26, 0x18	; 24
    337a:	ed 91       	ld	r30, X+
    337c:	fc 91       	ld	r31, X
    337e:	59 97       	sbiw	r26, 0x19	; 25
    3380:	ef a7       	std	Y+47, r30	; 0x2f
    3382:	f8 ab       	std	Y+48, r31	; 0x30
    cluster_t cluster_num = dd->entry_cluster;
    3384:	dc 01       	movw	r26, r24
    3386:	d3 96       	adiw	r26, 0x33	; 51
    3388:	4d 90       	ld	r4, X+
    338a:	5d 90       	ld	r5, X+
    338c:	6d 90       	ld	r6, X+
    338e:	7c 90       	ld	r7, X
    3390:	d6 97       	sbiw	r26, 0x36	; 54
    uint16_t cluster_offset = dd->entry_offset;
    3392:	d7 96       	adiw	r26, 0x37	; 55
    3394:	2d 90       	ld	r2, X+
    3396:	3c 90       	ld	r3, X
    3398:	d8 97       	sbiw	r26, 0x38	; 56
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
    339a:	2e 16       	cp	r2, r30
    339c:	3f 06       	cpc	r3, r31
    339e:	20 f0       	brcs	.+8      	; 0x33a8 <fat_read_dir+0x7c>
        /* The latest call hit the border of the last cluster in
         * the chain, but it still returned a directory entry.
         * So we now reset the handle and signal the caller the
         * end of the listing.
         */
        fat_reset_dir(dd);
    33a0:	0e 94 85 19 	call	0x330a	; 0x330a <fat_reset_dir>
        return 0;
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	de c0       	rjmp	.+444    	; 0x3564 <fat_read_dir+0x238>
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    33a8:	fe 01       	movw	r30, r28
    33aa:	31 96       	adiw	r30, 0x01	; 1
    33ac:	86 e0       	ldi	r24, 0x06	; 6
    33ae:	df 01       	movw	r26, r30
    33b0:	1d 92       	st	X+, r1
    33b2:	8a 95       	dec	r24
    33b4:	e9 f7       	brne	.-6      	; 0x33b0 <fat_read_dir+0x84>
    memset(dir_entry, 0, sizeof(*dir_entry));
    33b6:	81 e3       	ldi	r24, 0x31	; 49
    33b8:	fb 01       	movw	r30, r22
    33ba:	11 92       	st	Z+, r1
    33bc:	8a 95       	dec	r24
    33be:	e9 f7       	brne	.-6      	; 0x33ba <fat_read_dir+0x8e>
    arg.dir_entry = dir_entry;
    33c0:	69 83       	std	Y+1, r22	; 0x01
    33c2:	7a 83       	std	Y+2, r23	; 0x02

    /* check if we read from the root directory */
    if(cluster_num == 0)
    33c4:	41 14       	cp	r4, r1
    33c6:	51 04       	cpc	r5, r1
    33c8:	61 04       	cpc	r6, r1
    33ca:	71 04       	cpc	r7, r1
    33cc:	09 f0       	breq	.+2      	; 0x33d0 <fat_read_dir+0xa4>
    33ce:	a9 c0       	rjmp	.+338    	; 0x3522 <fat_read_dir+0x1f6>
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
    33d0:	af a9       	ldd	r26, Y+55	; 0x37
    33d2:	b8 ad       	ldd	r27, Y+56	; 0x38
    33d4:	ed 91       	ld	r30, X+
    33d6:	fc 91       	ld	r31, X
    33d8:	11 97       	sbiw	r26, 0x01	; 1
    33da:	80 85       	ldd	r24, Z+8	; 0x08
    33dc:	8b 30       	cpi	r24, 0x0B	; 11
    33de:	39 f4       	brne	.+14     	; 0x33ee <fat_read_dir+0xc2>
            cluster_num = header->root_dir_cluster;
    33e0:	9a 96       	adiw	r26, 0x2a	; 42
    33e2:	4d 90       	ld	r4, X+
    33e4:	5d 90       	ld	r5, X+
    33e6:	6d 90       	ld	r6, X+
    33e8:	7c 90       	ld	r7, X
    33ea:	9d 97       	sbiw	r26, 0x2d	; 45
    33ec:	9a c0       	rjmp	.+308    	; 0x3522 <fat_read_dir+0x1f6>
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    33ee:	ef a9       	ldd	r30, Y+55	; 0x37
    33f0:	f8 ad       	ldd	r31, Y+56	; 0x38
    33f2:	22 8d       	ldd	r18, Z+26	; 0x1a
    33f4:	33 8d       	ldd	r19, Z+27	; 0x1b
    33f6:	82 a1       	ldd	r24, Z+34	; 0x22
    33f8:	93 a1       	ldd	r25, Z+35	; 0x23
    33fa:	a9 01       	movw	r20, r18
    33fc:	48 1b       	sub	r20, r24
    33fe:	59 0b       	sbc	r21, r25
    3400:	4f a7       	std	Y+47, r20	; 0x2f
    3402:	58 ab       	std	Y+48, r21	; 0x30
    3404:	8e c0       	rjmp	.+284    	; 0x3522 <fat_read_dir+0x1f6>
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
    3406:	6f a4       	ldd	r6, Y+47	; 0x2f
    3408:	78 a8       	ldd	r7, Y+48	; 0x30
    340a:	62 18       	sub	r6, r2
    340c:	73 08       	sbc	r7, r3
        offset_t pos = cluster_offset;
    340e:	91 01       	movw	r18, r2
    3410:	40 e0       	ldi	r20, 0x00	; 0
    3412:	50 e0       	ldi	r21, 0x00	; 0
    3414:	60 e0       	ldi	r22, 0x00	; 0
    3416:	70 e0       	ldi	r23, 0x00	; 0
    3418:	cb 01       	movw	r24, r22
    341a:	2f a2       	std	Y+39, r2	; 0x27
    341c:	38 a7       	std	Y+40, r19	; 0x28
    341e:	49 a7       	std	Y+41, r20	; 0x29
    3420:	5a a7       	std	Y+42, r21	; 0x2a
    3422:	6b a7       	std	Y+43, r22	; 0x2b
    3424:	7c a7       	std	Y+44, r23	; 0x2c
    3426:	8d a7       	std	Y+45, r24	; 0x2d
    3428:	9e a7       	std	Y+46, r25	; 0x2e
        if(cluster_num == 0)
    342a:	49 a9       	ldd	r20, Y+49	; 0x31
    342c:	5a a9       	ldd	r21, Y+50	; 0x32
    342e:	6b a9       	ldd	r22, Y+51	; 0x33
    3430:	7c a9       	ldd	r23, Y+52	; 0x34
    3432:	45 2b       	or	r20, r21
    3434:	46 2b       	or	r20, r22
    3436:	47 2b       	or	r20, r23
    3438:	09 f5       	brne	.+66     	; 0x347c <fat_read_dir+0x150>
            pos += header->root_dir_offset;
    343a:	40 e0       	ldi	r20, 0x00	; 0
    343c:	50 e0       	ldi	r21, 0x00	; 0
    343e:	60 e0       	ldi	r22, 0x00	; 0
    3440:	70 e0       	ldi	r23, 0x00	; 0
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	d2 01       	movw	r26, r4
    3448:	92 96       	adiw	r26, 0x22	; 34
    344a:	ac 90       	ld	r10, X
    344c:	92 97       	sbiw	r26, 0x22	; 34
    344e:	93 96       	adiw	r26, 0x23	; 35
    3450:	bc 90       	ld	r11, X
    3452:	93 97       	sbiw	r26, 0x23	; 35
    3454:	94 96       	adiw	r26, 0x24	; 36
    3456:	cc 90       	ld	r12, X
    3458:	94 97       	sbiw	r26, 0x24	; 36
    345a:	95 96       	adiw	r26, 0x25	; 37
    345c:	dc 90       	ld	r13, X
    345e:	95 97       	sbiw	r26, 0x25	; 37
    3460:	96 96       	adiw	r26, 0x26	; 38
    3462:	ec 90       	ld	r14, X
    3464:	96 97       	sbiw	r26, 0x26	; 38
    3466:	97 96       	adiw	r26, 0x27	; 39
    3468:	fc 90       	ld	r15, X
    346a:	97 97       	sbiw	r26, 0x27	; 39
    346c:	98 96       	adiw	r26, 0x28	; 40
    346e:	0c 91       	ld	r16, X
    3470:	98 97       	sbiw	r26, 0x28	; 40
    3472:	99 96       	adiw	r26, 0x29	; 41
    3474:	1c 91       	ld	r17, X
    3476:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <__adddi3>
    347a:	11 c0       	rjmp	.+34     	; 0x349e <fat_read_dir+0x172>
        else
            pos += fat_cluster_offset(fs, cluster_num);
    347c:	49 a9       	ldd	r20, Y+49	; 0x31
    347e:	5a a9       	ldd	r21, Y+50	; 0x32
    3480:	6b a9       	ldd	r22, Y+51	; 0x33
    3482:	7c a9       	ldd	r23, Y+52	; 0x34
    3484:	c2 01       	movw	r24, r4
    3486:	0e 94 b3 14 	call	0x2966	; 0x2966 <fat_cluster_offset>
    348a:	af a0       	ldd	r10, Y+39	; 0x27
    348c:	b8 a4       	ldd	r11, Y+40	; 0x28
    348e:	c1 2c       	mov	r12, r1
    3490:	d1 2c       	mov	r13, r1
    3492:	e1 2c       	mov	r14, r1
    3494:	f1 2c       	mov	r15, r1
    3496:	00 e0       	ldi	r16, 0x00	; 0
    3498:	10 e0       	ldi	r17, 0x00	; 0
    349a:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <__adddi3>

        arg.bytes_read = 0;
    349e:	1b 82       	std	Y+3, r1	; 0x03
    34a0:	1c 82       	std	Y+4, r1	; 0x04
        if(!fs->partition->device_read_interval(pos,
    34a2:	d2 01       	movw	r26, r4
    34a4:	ed 91       	ld	r30, X+
    34a6:	fc 91       	ld	r31, X
    34a8:	02 80       	ldd	r0, Z+2	; 0x02
    34aa:	f3 81       	ldd	r31, Z+3	; 0x03
    34ac:	e0 2d       	mov	r30, r0
    34ae:	de 01       	movw	r26, r28
    34b0:	11 96       	adiw	r26, 0x01	; 1
    34b2:	4d 01       	movw	r8, r26
    34b4:	0f 2e       	mov	r0, r31
    34b6:	f1 e2       	ldi	r31, 0x21	; 33
    34b8:	af 2e       	mov	r10, r31
    34ba:	f5 e1       	ldi	r31, 0x15	; 21
    34bc:	bf 2e       	mov	r11, r31
    34be:	f0 2d       	mov	r31, r0
    34c0:	63 01       	movw	r12, r6
    34c2:	68 94       	set
    34c4:	ee 24       	eor	r14, r14
    34c6:	e5 f8       	bld	r14, 5
    34c8:	f1 2c       	mov	r15, r1
    34ca:	8e 01       	movw	r16, r28
    34cc:	09 5f       	subi	r16, 0xF9	; 249
    34ce:	1f 4f       	sbci	r17, 0xFF	; 255
    34d0:	09 95       	icall
    34d2:	88 23       	and	r24, r24
    34d4:	09 f4       	brne	.+2      	; 0x34d8 <fat_read_dir+0x1ac>
    34d6:	45 c0       	rjmp	.+138    	; 0x3562 <fat_read_dir+0x236>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    34d8:	8b 81       	ldd	r24, Y+3	; 0x03
    34da:	9c 81       	ldd	r25, Y+4	; 0x04
    34dc:	28 0e       	add	r2, r24
    34de:	39 1e       	adc	r3, r25

        if(cluster_offset >= cluster_size)
    34e0:	ef a5       	ldd	r30, Y+47	; 0x2f
    34e2:	f8 a9       	ldd	r31, Y+48	; 0x30
    34e4:	2e 16       	cp	r2, r30
    34e6:	3f 06       	cpc	r3, r31
    34e8:	10 f1       	brcs	.+68     	; 0x352e <fat_read_dir+0x202>
    34ea:	49 a8       	ldd	r4, Y+49	; 0x31
    34ec:	5a a8       	ldd	r5, Y+50	; 0x32
    34ee:	6b a8       	ldd	r6, Y+51	; 0x33
    34f0:	7c a8       	ldd	r7, Y+52	; 0x34
        {
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
    34f2:	b3 01       	movw	r22, r6
    34f4:	a2 01       	movw	r20, r4
    34f6:	8f a9       	ldd	r24, Y+55	; 0x37
    34f8:	98 ad       	ldd	r25, Y+56	; 0x38
    34fa:	0e 94 00 14 	call	0x2800	; 0x2800 <fat_get_next_cluster>
    34fe:	2b 01       	movw	r4, r22
    3500:	3c 01       	movw	r6, r24
    3502:	61 15       	cp	r22, r1
    3504:	71 05       	cpc	r23, r1
    3506:	81 05       	cpc	r24, r1
    3508:	91 05       	cpc	r25, r1
    350a:	49 f4       	brne	.+18     	; 0x351e <fat_read_dir+0x1f2>
                cluster_offset = 0;
                continue;
            }

            /* we are at the end of the cluster chain */
            if(!arg.finished)
    350c:	8e 81       	ldd	r24, Y+6	; 0x06
    350e:	81 11       	cpse	r24, r1
    3510:	16 c0       	rjmp	.+44     	; 0x353e <fat_read_dir+0x212>
            {
                /* directory entry not found, reset directory handle */
                fat_reset_dir(dd);
    3512:	8d a9       	ldd	r24, Y+53	; 0x35
    3514:	9e a9       	ldd	r25, Y+54	; 0x36
    3516:	0e 94 85 19 	call	0x330a	; 0x330a <fat_reset_dir>
                return 0;
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	23 c0       	rjmp	.+70     	; 0x3564 <fat_read_dir+0x238>
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
            {
                cluster_offset = 0;
    351e:	21 2c       	mov	r2, r1
    3520:	31 2c       	mov	r3, r1
    3522:	49 aa       	std	Y+49, r4	; 0x31
    3524:	5a aa       	std	Y+50, r5	; 0x32
    3526:	6b aa       	std	Y+51, r6	; 0x33
    3528:	7c aa       	std	Y+52, r7	; 0x34
    352a:	4f a8       	ldd	r4, Y+55	; 0x37
    352c:	58 ac       	ldd	r5, Y+56	; 0x38
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    352e:	8e 81       	ldd	r24, Y+6	; 0x06
    3530:	88 23       	and	r24, r24
    3532:	09 f4       	brne	.+2      	; 0x3536 <fat_read_dir+0x20a>
    3534:	68 cf       	rjmp	.-304    	; 0x3406 <fat_read_dir+0xda>
    3536:	49 a8       	ldd	r4, Y+49	; 0x31
    3538:	5a a8       	ldd	r5, Y+50	; 0x32
    353a:	6b a8       	ldd	r6, Y+51	; 0x33
    353c:	7c a8       	ldd	r7, Y+52	; 0x34

            break;
        }
    }

    dd->entry_cluster = cluster_num;
    353e:	ad a9       	ldd	r26, Y+53	; 0x35
    3540:	be a9       	ldd	r27, Y+54	; 0x36
    3542:	d3 96       	adiw	r26, 0x33	; 51
    3544:	4d 92       	st	X+, r4
    3546:	5d 92       	st	X+, r5
    3548:	6d 92       	st	X+, r6
    354a:	7c 92       	st	X, r7
    354c:	d6 97       	sbiw	r26, 0x36	; 54
    dd->entry_offset = cluster_offset;
    354e:	d7 96       	adiw	r26, 0x37	; 55
    3550:	2d 92       	st	X+, r2
    3552:	3c 92       	st	X, r3
    3554:	d8 97       	sbiw	r26, 0x38	; 56

    return arg.finished;
    3556:	8e 81       	ldd	r24, Y+6	; 0x06
    3558:	05 c0       	rjmp	.+10     	; 0x3564 <fat_read_dir+0x238>
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    if(!dd || !dir_entry)
        return 0;
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	03 c0       	rjmp	.+6      	; 0x3564 <fat_read_dir+0x238>
    355e:	80 e0       	ldi	r24, 0x00	; 0
    3560:	01 c0       	rjmp	.+2      	; 0x3564 <fat_read_dir+0x238>
                                                sizeof(buffer),
                                                cluster_left,
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;
    3562:	80 e0       	ldi	r24, 0x00	; 0

    dd->entry_cluster = cluster_num;
    dd->entry_offset = cluster_offset;

    return arg.finished;
}
    3564:	e8 96       	adiw	r28, 0x38	; 56
    3566:	cd bf       	out	0x3d, r28	; 61
    3568:	de bf       	out	0x3e, r29	; 62
    356a:	df 91       	pop	r29
    356c:	cf 91       	pop	r28
    356e:	1f 91       	pop	r17
    3570:	0f 91       	pop	r16
    3572:	ff 90       	pop	r15
    3574:	ef 90       	pop	r14
    3576:	df 90       	pop	r13
    3578:	cf 90       	pop	r12
    357a:	bf 90       	pop	r11
    357c:	af 90       	pop	r10
    357e:	9f 90       	pop	r9
    3580:	8f 90       	pop	r8
    3582:	7f 90       	pop	r7
    3584:	6f 90       	pop	r6
    3586:	5f 90       	pop	r5
    3588:	4f 90       	pop	r4
    358a:	3f 90       	pop	r3
    358c:	2f 90       	pop	r2
    358e:	08 95       	ret

00003590 <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    3590:	6f 92       	push	r6
    3592:	7f 92       	push	r7
    3594:	8f 92       	push	r8
    3596:	9f 92       	push	r9
    3598:	af 92       	push	r10
    359a:	bf 92       	push	r11
    359c:	cf 92       	push	r12
    359e:	df 92       	push	r13
    35a0:	ef 92       	push	r14
    35a2:	ff 92       	push	r15
    35a4:	0f 93       	push	r16
    35a6:	1f 93       	push	r17
    35a8:	cf 93       	push	r28
    35aa:	df 93       	push	r29
    35ac:	5c 01       	movw	r10, r24
    35ae:	6b 01       	movw	r12, r22
    35b0:	ea 01       	movw	r28, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    35b2:	00 97       	sbiw	r24, 0x00	; 0
    35b4:	09 f4       	brne	.+2      	; 0x35b8 <fat_get_dir_entry_of_path+0x28>
    35b6:	72 c0       	rjmp	.+228    	; 0x369c <fat_get_dir_entry_of_path+0x10c>
    35b8:	61 15       	cp	r22, r1
    35ba:	71 05       	cpc	r23, r1
    35bc:	09 f4       	brne	.+2      	; 0x35c0 <fat_get_dir_entry_of_path+0x30>
    35be:	70 c0       	rjmp	.+224    	; 0x36a0 <fat_get_dir_entry_of_path+0x110>
    35c0:	fb 01       	movw	r30, r22
    35c2:	80 81       	ld	r24, Z
    35c4:	88 23       	and	r24, r24
    35c6:	09 f4       	brne	.+2      	; 0x35ca <fat_get_dir_entry_of_path+0x3a>
    35c8:	6d c0       	rjmp	.+218    	; 0x36a4 <fat_get_dir_entry_of_path+0x114>
    35ca:	20 97       	sbiw	r28, 0x00	; 0
    35cc:	09 f4       	brne	.+2      	; 0x35d0 <fat_get_dir_entry_of_path+0x40>
    35ce:	6c c0       	rjmp	.+216    	; 0x36a8 <fat_get_dir_entry_of_path+0x118>
        return 0;

    if(path[0] == '/')
    35d0:	8f 32       	cpi	r24, 0x2F	; 47
    35d2:	19 f4       	brne	.+6      	; 0x35da <fat_get_dir_entry_of_path+0x4a>
        ++path;
    35d4:	ff ef       	ldi	r31, 0xFF	; 255
    35d6:	cf 1a       	sub	r12, r31
    35d8:	df 0a       	sbc	r13, r31

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    35da:	81 e3       	ldi	r24, 0x31	; 49
    35dc:	fe 01       	movw	r30, r28
    35de:	11 92       	st	Z+, r1
    35e0:	8a 95       	dec	r24
    35e2:	e9 f7       	brne	.-6      	; 0x35de <fat_get_dir_entry_of_path+0x4e>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    35e4:	80 e1       	ldi	r24, 0x10	; 16
    35e6:	88 a3       	std	Y+32, r24	; 0x20

    while(1)
    {
        if(path[0] == '\0')
    35e8:	f6 01       	movw	r30, r12
    35ea:	80 81       	ld	r24, Z
    35ec:	88 23       	and	r24, r24
    35ee:	09 f4       	brne	.+2      	; 0x35f2 <fat_get_dir_entry_of_path+0x62>
    35f0:	5d c0       	rjmp	.+186    	; 0x36ac <fat_get_dir_entry_of_path+0x11c>
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    35f2:	be 01       	movw	r22, r28
    35f4:	c5 01       	movw	r24, r10
    35f6:	0e 94 3d 19 	call	0x327a	; 0x327a <fat_open_dir>
    35fa:	8c 01       	movw	r16, r24
        if(!dd)
    35fc:	00 97       	sbiw	r24, 0x00	; 0
    35fe:	09 f4       	brne	.+2      	; 0x3602 <fat_get_dir_entry_of_path+0x72>
    3600:	57 c0       	rjmp	.+174    	; 0x36b0 <fat_get_dir_entry_of_path+0x120>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    3602:	6f e2       	ldi	r22, 0x2F	; 47
    3604:	70 e0       	ldi	r23, 0x00	; 0
    3606:	c6 01       	movw	r24, r12
    3608:	0e 94 2b 38 	call	0x7056	; 0x7056 <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    360c:	00 97       	sbiw	r24, 0x00	; 0
    360e:	41 f0       	breq	.+16     	; 0x3620 <fat_get_dir_entry_of_path+0x90>
        {
            length_to_sep = sub_path - path;
    3610:	e8 2e       	mov	r14, r24
    3612:	ec 18       	sub	r14, r12
            ++sub_path;
    3614:	4c 01       	movw	r8, r24
    3616:	ff ef       	ldi	r31, 0xFF	; 255
    3618:	8f 1a       	sub	r8, r31
    361a:	9f 0a       	sbc	r9, r31
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    361c:	f1 2c       	mov	r15, r1
    361e:	2c c0       	rjmp	.+88     	; 0x3678 <fat_get_dir_entry_of_path+0xe8>
            length_to_sep = sub_path - path;
            ++sub_path;
        }
        else
        {
            length_to_sep = strlen(path);
    3620:	f6 01       	movw	r30, r12
    3622:	01 90       	ld	r0, Z+
    3624:	00 20       	and	r0, r0
    3626:	e9 f7       	brne	.-6      	; 0x3622 <fat_get_dir_entry_of_path+0x92>
    3628:	31 97       	sbiw	r30, 0x01	; 1
    362a:	ec 19       	sub	r30, r12
    362c:	fd 09       	sbc	r31, r13
    362e:	ee 2e       	mov	r14, r30
            sub_path = path + length_to_sep;
    3630:	46 01       	movw	r8, r12
    3632:	8e 0e       	add	r8, r30
    3634:	91 1c       	adc	r9, r1
    3636:	f2 cf       	rjmp	.-28     	; 0x361c <fat_get_dir_entry_of_path+0x8c>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    3638:	fe 01       	movw	r30, r28
    363a:	01 90       	ld	r0, Z+
    363c:	00 20       	and	r0, r0
    363e:	e9 f7       	brne	.-6      	; 0x363a <fat_get_dir_entry_of_path+0xaa>
    3640:	31 97       	sbiw	r30, 0x01	; 1
    3642:	3f 01       	movw	r6, r30
    3644:	6c 1a       	sub	r6, r28
    3646:	7d 0a       	sbc	r7, r29
    3648:	6e 14       	cp	r6, r14
    364a:	7f 04       	cpc	r7, r15
    364c:	a9 f4       	brne	.+42     	; 0x3678 <fat_get_dir_entry_of_path+0xe8>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
    364e:	a3 01       	movw	r20, r6
    3650:	be 01       	movw	r22, r28
    3652:	c6 01       	movw	r24, r12
    3654:	0e 94 36 38 	call	0x706c	; 0x706c <strncmp>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    3658:	89 2b       	or	r24, r25
    365a:	71 f4       	brne	.+28     	; 0x3678 <fat_get_dir_entry_of_path+0xe8>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
    365c:	c8 01       	movw	r24, r16
    365e:	0e 94 7f 19 	call	0x32fe	; 0x32fe <fat_close_dir>
            dd = 0;

            if(path[length_to_sep] == '\0')
    3662:	f6 01       	movw	r30, r12
    3664:	e6 0d       	add	r30, r6
    3666:	f7 1d       	adc	r31, r7
    3668:	80 81       	ld	r24, Z
    366a:	88 23       	and	r24, r24
    366c:	19 f1       	breq	.+70     	; 0x36b4 <fat_get_dir_entry_of_path+0x124>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    366e:	88 a1       	ldd	r24, Y+32	; 0x20
    3670:	84 fd       	sbrc	r24, 4
    3672:	09 c0       	rjmp	.+18     	; 0x3686 <fat_get_dir_entry_of_path+0xf6>
                path = sub_path;
                break;
            }

            /* a parent of the file exists, but not the file itself */
            return 0;
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	21 c0       	rjmp	.+66     	; 0x36ba <fat_get_dir_entry_of_path+0x12a>
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    3678:	be 01       	movw	r22, r28
    367a:	c8 01       	movw	r24, r16
    367c:	0e 94 96 19 	call	0x332c	; 0x332c <fat_read_dir>
    3680:	81 11       	cpse	r24, r1
    3682:	da cf       	rjmp	.-76     	; 0x3638 <fat_get_dir_entry_of_path+0xa8>
    3684:	03 c0       	rjmp	.+6      	; 0x368c <fat_get_dir_entry_of_path+0xfc>
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
            {
                /* we found a parent directory of the file we are searching for */
                path = sub_path;
    3686:	64 01       	movw	r12, r8
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
    3688:	00 e0       	ldi	r16, 0x00	; 0
    368a:	10 e0       	ldi	r17, 0x00	; 0

            /* a parent of the file exists, but not the file itself */
            return 0;
        }

        fat_close_dir(dd);
    368c:	c8 01       	movw	r24, r16
    368e:	0e 94 7f 19 	call	0x32fe	; 0x32fe <fat_close_dir>
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    3692:	f6 01       	movw	r30, r12
    3694:	80 81       	ld	r24, Z
    3696:	81 11       	cpse	r24, r1
    3698:	ac cf       	rjmp	.-168    	; 0x35f2 <fat_get_dir_entry_of_path+0x62>
    369a:	0e c0       	rjmp	.+28     	; 0x36b8 <fat_get_dir_entry_of_path+0x128>
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
        return 0;
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	0d c0       	rjmp	.+26     	; 0x36ba <fat_get_dir_entry_of_path+0x12a>
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	0b c0       	rjmp	.+22     	; 0x36ba <fat_get_dir_entry_of_path+0x12a>
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	09 c0       	rjmp	.+18     	; 0x36ba <fat_get_dir_entry_of_path+0x12a>
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	07 c0       	rjmp	.+14     	; 0x36ba <fat_get_dir_entry_of_path+0x12a>
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
            return 1;
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	05 c0       	rjmp	.+10     	; 0x36ba <fat_get_dir_entry_of_path+0x12a>
        }

        fat_close_dir(dd);
    }
    
    return 0;
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	03 c0       	rjmp	.+6      	; 0x36ba <fat_get_dir_entry_of_path+0x12a>
            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
                /* we iterated through the whole path and have found the file */
                return 1;
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	01 c0       	rjmp	.+2      	; 0x36ba <fat_get_dir_entry_of_path+0x12a>
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
            return 1;
    36b8:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    36ba:	df 91       	pop	r29
    36bc:	cf 91       	pop	r28
    36be:	1f 91       	pop	r17
    36c0:	0f 91       	pop	r16
    36c2:	ff 90       	pop	r15
    36c4:	ef 90       	pop	r14
    36c6:	df 90       	pop	r13
    36c8:	cf 90       	pop	r12
    36ca:	bf 90       	pop	r11
    36cc:	af 90       	pop	r10
    36ce:	9f 90       	pop	r9
    36d0:	8f 90       	pop	r8
    36d2:	7f 90       	pop	r7
    36d4:	6f 90       	pop	r6
    36d6:	08 95       	ret

000036d8 <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    36d8:	5f 92       	push	r5
    36da:	6f 92       	push	r6
    36dc:	7f 92       	push	r7
    36de:	8f 92       	push	r8
    36e0:	9f 92       	push	r9
    36e2:	af 92       	push	r10
    36e4:	bf 92       	push	r11
    36e6:	cf 92       	push	r12
    36e8:	df 92       	push	r13
    36ea:	ef 92       	push	r14
    36ec:	ff 92       	push	r15
    36ee:	0f 93       	push	r16
    36f0:	1f 93       	push	r17
    36f2:	cf 93       	push	r28
    36f4:	df 93       	push	r29
    36f6:	cd b7       	in	r28, 0x3d	; 61
    36f8:	de b7       	in	r29, 0x3e	; 62
    36fa:	60 97       	sbiw	r28, 0x10	; 16
    36fc:	cd bf       	out	0x3d, r28	; 61
    36fe:	de bf       	out	0x3e, r29	; 62
    3700:	6c 01       	movw	r12, r24
    3702:	5b 01       	movw	r10, r22
    3704:	3a 01       	movw	r6, r20
    3706:	49 01       	movw	r8, r18
    3708:	50 2e       	mov	r5, r16
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    370a:	00 97       	sbiw	r24, 0x00	; 0
    370c:	09 f4       	brne	.+2      	; 0x3710 <partition_open+0x38>
    370e:	53 c0       	rjmp	.+166    	; 0x37b6 <partition_open+0xde>
    3710:	61 15       	cp	r22, r1
    3712:	71 05       	cpc	r23, r1
    3714:	09 f4       	brne	.+2      	; 0x3718 <partition_open+0x40>
    3716:	52 c0       	rjmp	.+164    	; 0x37bc <partition_open+0xe4>
    3718:	83 e0       	ldi	r24, 0x03	; 3
    371a:	80 17       	cp	r24, r16
    371c:	0c f4       	brge	.+2      	; 0x3720 <partition_open+0x48>
    371e:	51 c0       	rjmp	.+162    	; 0x37c2 <partition_open+0xea>
        return 0;

    if(index >= 0)
    3720:	00 23       	and	r16, r16
    3722:	f4 f0       	brlt	.+60     	; 0x3760 <partition_open+0x88>
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    3724:	90 e1       	ldi	r25, 0x10	; 16
    3726:	09 02       	muls	r16, r25
    3728:	f0 01       	movw	r30, r0
    372a:	11 24       	eor	r1, r1
    372c:	e2 54       	subi	r30, 0x42	; 66
    372e:	fe 4f       	sbci	r31, 0xFE	; 254
    3730:	9f 2f       	mov	r25, r31
    3732:	99 0f       	add	r25, r25
    3734:	99 0b       	sbc	r25, r25
    3736:	68 94       	set
    3738:	ee 24       	eor	r14, r14
    373a:	e4 f8       	bld	r14, 4
    373c:	f1 2c       	mov	r15, r1
    373e:	8e 01       	movw	r16, r28
    3740:	0f 5f       	subi	r16, 0xFF	; 255
    3742:	1f 4f       	sbci	r17, 0xFF	; 255
    3744:	2e 2f       	mov	r18, r30
    3746:	3f 2f       	mov	r19, r31
    3748:	49 2f       	mov	r20, r25
    374a:	59 2f       	mov	r21, r25
    374c:	69 2f       	mov	r22, r25
    374e:	79 2f       	mov	r23, r25
    3750:	89 2f       	mov	r24, r25
    3752:	f6 01       	movw	r30, r12
    3754:	09 95       	icall
    3756:	88 23       	and	r24, r24
    3758:	b9 f1       	breq	.+110    	; 0x37c8 <partition_open+0xf0>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    375a:	8d 81       	ldd	r24, Y+5	; 0x05
    375c:	88 23       	and	r24, r24
    375e:	b9 f1       	breq	.+110    	; 0x37ce <partition_open+0xf6>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    3760:	80 91 2e 23 	lds	r24, 0x232E
    3764:	88 23       	and	r24, r24
    3766:	b1 f1       	breq	.+108    	; 0x37d4 <partition_open+0xfc>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	4c c0       	rjmp	.+152    	; 0x3806 <partition_open+0x12e>
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    376e:	8d 81       	ldd	r24, Y+5	; 0x05
    3770:	80 93 2e 23 	sts	0x232E, r24
        new_partition->offset = read32(&buffer[8]);
    3774:	89 85       	ldd	r24, Y+9	; 0x09
    3776:	9a 85       	ldd	r25, Y+10	; 0x0a
    3778:	ab 85       	ldd	r26, Y+11	; 0x0b
    377a:	bc 85       	ldd	r27, Y+12	; 0x0c
    377c:	80 93 2f 23 	sts	0x232F, r24
    3780:	90 93 30 23 	sts	0x2330, r25
    3784:	a0 93 31 23 	sts	0x2331, r26
    3788:	b0 93 32 23 	sts	0x2332, r27
        new_partition->length = read32(&buffer[12]);
    378c:	8d 85       	ldd	r24, Y+13	; 0x0d
    378e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3790:	af 85       	ldd	r26, Y+15	; 0x0f
    3792:	b8 89       	ldd	r27, Y+16	; 0x10
    3794:	80 93 33 23 	sts	0x2333, r24
    3798:	90 93 34 23 	sts	0x2334, r25
    379c:	a0 93 35 23 	sts	0x2335, r26
    37a0:	b0 93 36 23 	sts	0x2336, r27
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    37a4:	86 e2       	ldi	r24, 0x26	; 38
    37a6:	93 e2       	ldi	r25, 0x23	; 35
    37a8:	2e c0       	rjmp	.+92     	; 0x3806 <partition_open+0x12e>
        new_partition->offset = read32(&buffer[8]);
        new_partition->length = read32(&buffer[12]);
    }
    else
    {
        new_partition->type = 0xff;
    37aa:	8f ef       	ldi	r24, 0xFF	; 255
    37ac:	80 93 2e 23 	sts	0x232E, r24
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    37b0:	86 e2       	ldi	r24, 0x26	; 38
    37b2:	93 e2       	ldi	r25, 0x23	; 35
    37b4:	28 c0       	rjmp	.+80     	; 0x3806 <partition_open+0x12e>
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
        return 0;
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	25 c0       	rjmp	.+74     	; 0x3806 <partition_open+0x12e>
    37bc:	80 e0       	ldi	r24, 0x00	; 0
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	22 c0       	rjmp	.+68     	; 0x3806 <partition_open+0x12e>
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	1f c0       	rjmp	.+62     	; 0x3806 <partition_open+0x12e>

    if(index >= 0)
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
            return 0;
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	1c c0       	rjmp	.+56     	; 0x3806 <partition_open+0x12e>

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
            return 0;
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	19 c0       	rjmp	.+50     	; 0x3806 <partition_open+0x12e>
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    37d4:	e6 e2       	ldi	r30, 0x26	; 38
    37d6:	f3 e2       	ldi	r31, 0x23	; 35
    37d8:	81 e1       	ldi	r24, 0x11	; 17
    37da:	df 01       	movw	r26, r30
    37dc:	1d 92       	st	X+, r1
    37de:	8a 95       	dec	r24
    37e0:	e9 f7       	brne	.-6      	; 0x37dc <partition_open+0x104>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    37e2:	c0 82       	st	Z, r12
    37e4:	d1 82       	std	Z+1, r13	; 0x01
    new_partition->device_read_interval = device_read_interval;
    37e6:	a0 92 28 23 	sts	0x2328, r10
    37ea:	b0 92 29 23 	sts	0x2329, r11
    new_partition->device_write = device_write;
    37ee:	60 92 2a 23 	sts	0x232A, r6
    37f2:	70 92 2b 23 	sts	0x232B, r7
    new_partition->device_write_interval = device_write_interval;
    37f6:	80 92 2c 23 	sts	0x232C, r8
    37fa:	90 92 2d 23 	sts	0x232D, r9

    if(index >= 0)
    37fe:	55 20       	and	r5, r5
    3800:	0c f0       	brlt	.+2      	; 0x3804 <partition_open+0x12c>
    3802:	b5 cf       	rjmp	.-150    	; 0x376e <partition_open+0x96>
    3804:	d2 cf       	rjmp	.-92     	; 0x37aa <partition_open+0xd2>
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
    3806:	60 96       	adiw	r28, 0x10	; 16
    3808:	cd bf       	out	0x3d, r28	; 61
    380a:	de bf       	out	0x3e, r29	; 62
    380c:	df 91       	pop	r29
    380e:	cf 91       	pop	r28
    3810:	1f 91       	pop	r17
    3812:	0f 91       	pop	r16
    3814:	ff 90       	pop	r15
    3816:	ef 90       	pop	r14
    3818:	df 90       	pop	r13
    381a:	cf 90       	pop	r12
    381c:	bf 90       	pop	r11
    381e:	af 90       	pop	r10
    3820:	9f 90       	pop	r9
    3822:	8f 90       	pop	r8
    3824:	7f 90       	pop	r7
    3826:	6f 90       	pop	r6
    3828:	5f 90       	pop	r5
    382a:	08 95       	ret

0000382c <sd_raw_send_byte>:
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
#if XMEGA
    SPIE.DATA = b;
    382c:	e0 ec       	ldi	r30, 0xC0	; 192
    382e:	fa e0       	ldi	r31, 0x0A	; 10
    3830:	83 83       	std	Z+3, r24	; 0x03
    /* wait for byte to be shifted out */
    while(!(SPIE.STATUS & 0x80));
    3832:	82 81       	ldd	r24, Z+2	; 0x02
    3834:	88 23       	and	r24, r24
    3836:	ec f7       	brge	.-6      	; 0x3832 <sd_raw_send_byte+0x6>
    SPDR = b;
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    SPSR &= ~(1 << SPIF);
#endif
}
    3838:	08 95       	ret

0000383a <sd_raw_rec_byte>:
 */
uint8_t sd_raw_rec_byte()
{
#if XMEGA
    /* send dummy data for receiving some */
    SPIE.DATA = 0xff;
    383a:	8f ef       	ldi	r24, 0xFF	; 255
    383c:	e0 ec       	ldi	r30, 0xC0	; 192
    383e:	fa e0       	ldi	r31, 0x0A	; 10
    3840:	83 83       	std	Z+3, r24	; 0x03
    while(!(SPIE.STATUS & (1<<7)));
    3842:	82 81       	ldd	r24, Z+2	; 0x02
    3844:	88 23       	and	r24, r24
    3846:	ec f7       	brge	.-6      	; 0x3842 <sd_raw_rec_byte+0x8>

    return SPIE.DATA;
    3848:	e0 ec       	ldi	r30, 0xC0	; 192
    384a:	fa e0       	ldi	r31, 0x0A	; 10
    384c:	83 81       	ldd	r24, Z+3	; 0x03
    while(!(SPSR & (1 << SPIF)));
    SPSR &= ~(1 << SPIF);

    return SPDR;
#endif
}
    384e:	08 95       	ret

00003850 <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    3850:	ff 92       	push	r15
    3852:	0f 93       	push	r16
    3854:	1f 93       	push	r17
    3856:	cf 93       	push	r28
    3858:	df 93       	push	r29
    385a:	c8 2f       	mov	r28, r24
    385c:	d4 2f       	mov	r29, r20
    385e:	15 2f       	mov	r17, r21
    3860:	06 2f       	mov	r16, r22
    3862:	f7 2e       	mov	r15, r23
    uint8_t response;

    /* wait some clock cycles */
    sd_raw_rec_byte();
    3864:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    3868:	8c 2f       	mov	r24, r28
    386a:	80 64       	ori	r24, 0x40	; 64
    386c:	0e 94 16 1c 	call	0x382c	; 0x382c <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 24) & 0xff);
    3870:	8f 2d       	mov	r24, r15
    3872:	0e 94 16 1c 	call	0x382c	; 0x382c <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 16) & 0xff);
    3876:	80 2f       	mov	r24, r16
    3878:	0e 94 16 1c 	call	0x382c	; 0x382c <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 8) & 0xff);
    387c:	81 2f       	mov	r24, r17
    387e:	0e 94 16 1c 	call	0x382c	; 0x382c <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 0) & 0xff);
    3882:	8d 2f       	mov	r24, r29
    3884:	0e 94 16 1c 	call	0x382c	; 0x382c <sd_raw_send_byte>
    switch(command)
    3888:	cc 23       	and	r28, r28
    388a:	19 f0       	breq	.+6      	; 0x3892 <sd_raw_send_command+0x42>
    388c:	c8 30       	cpi	r28, 0x08	; 8
    388e:	29 f0       	breq	.+10     	; 0x389a <sd_raw_send_command+0x4a>
    3890:	08 c0       	rjmp	.+16     	; 0x38a2 <sd_raw_send_command+0x52>
    {
        case CMD_GO_IDLE_STATE:
           sd_raw_send_byte(0x95);
    3892:	85 e9       	ldi	r24, 0x95	; 149
    3894:	0e 94 16 1c 	call	0x382c	; 0x382c <sd_raw_send_byte>
           break;
    3898:	0f c0       	rjmp	.+30     	; 0x38b8 <sd_raw_send_command+0x68>
        case CMD_SEND_IF_COND:
           sd_raw_send_byte(0x87);
    389a:	87 e8       	ldi	r24, 0x87	; 135
    389c:	0e 94 16 1c 	call	0x382c	; 0x382c <sd_raw_send_byte>
           break;
    38a0:	0b c0       	rjmp	.+22     	; 0x38b8 <sd_raw_send_command+0x68>
        default:
           sd_raw_send_byte(0xff);
    38a2:	8f ef       	ldi	r24, 0xFF	; 255
    38a4:	0e 94 16 1c 	call	0x382c	; 0x382c <sd_raw_send_byte>
           break;
    38a8:	07 c0       	rjmp	.+14     	; 0x38b8 <sd_raw_send_command+0x68>
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
    38aa:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>
        if(response != 0xff)
    38ae:	8f 3f       	cpi	r24, 0xFF	; 255
    38b0:	29 f4       	brne	.+10     	; 0x38bc <sd_raw_send_command+0x6c>
    38b2:	c1 50       	subi	r28, 0x01	; 1
           sd_raw_send_byte(0xff);
           break;
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    38b4:	d1 f7       	brne	.-12     	; 0x38aa <sd_raw_send_command+0x5a>
    38b6:	02 c0       	rjmp	.+4      	; 0x38bc <sd_raw_send_command+0x6c>
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    38b8:	ca e0       	ldi	r28, 0x0A	; 10
    38ba:	f7 cf       	rjmp	.-18     	; 0x38aa <sd_raw_send_command+0x5a>
        if(response != 0xff)
            break;
    }

    return response;
}
    38bc:	df 91       	pop	r29
    38be:	cf 91       	pop	r28
    38c0:	1f 91       	pop	r17
    38c2:	0f 91       	pop	r16
    38c4:	ff 90       	pop	r15
    38c6:	08 95       	ret

000038c8 <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
    38c8:	ef 92       	push	r14
    38ca:	ff 92       	push	r15
    38cc:	0f 93       	push	r16
    38ce:	1f 93       	push	r17
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    38d0:	80 91 38 23 	lds	r24, 0x2338
    38d4:	81 11       	cpse	r24, r1
    38d6:	1e c0       	rjmp	.+60     	; 0x3914 <sd_raw_sync+0x4c>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    38d8:	20 91 39 23 	lds	r18, 0x2339
    38dc:	30 91 3a 23 	lds	r19, 0x233A
    38e0:	40 91 3b 23 	lds	r20, 0x233B
    38e4:	50 91 3c 23 	lds	r21, 0x233C
    38e8:	60 91 3d 23 	lds	r22, 0x233D
    38ec:	70 91 3e 23 	lds	r23, 0x233E
    38f0:	e1 2c       	mov	r14, r1
    38f2:	68 94       	set
    38f4:	ff 24       	eor	r15, r15
    38f6:	f1 f8       	bld	r15, 1
    38f8:	01 e4       	ldi	r16, 0x41	; 65
    38fa:	13 e2       	ldi	r17, 0x23	; 35
    38fc:	80 91 3f 23 	lds	r24, 0x233F
    3900:	90 91 40 23 	lds	r25, 0x2340
    3904:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <sd_raw_write>
    3908:	88 23       	and	r24, r24
    390a:	31 f0       	breq	.+12     	; 0x3918 <sd_raw_sync+0x50>
        return 0;
    raw_block_written = 1;
    390c:	81 e0       	ldi	r24, 0x01	; 1
    390e:	80 93 38 23 	sts	0x2338, r24
#endif
    return 1;
    3912:	03 c0       	rjmp	.+6      	; 0x391a <sd_raw_sync+0x52>
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
        return 1;
    3914:	81 e0       	ldi	r24, 0x01	; 1
    3916:	01 c0       	rjmp	.+2      	; 0x391a <sd_raw_sync+0x52>
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
        return 0;
    3918:	80 e0       	ldi	r24, 0x00	; 0
    raw_block_written = 1;
#endif
    return 1;
}
    391a:	1f 91       	pop	r17
    391c:	0f 91       	pop	r16
    391e:	ff 90       	pop	r15
    3920:	ef 90       	pop	r14
    3922:	08 95       	ret

00003924 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    3924:	2f 92       	push	r2
    3926:	3f 92       	push	r3
    3928:	4f 92       	push	r4
    392a:	5f 92       	push	r5
    392c:	6f 92       	push	r6
    392e:	7f 92       	push	r7
    3930:	8f 92       	push	r8
    3932:	9f 92       	push	r9
    3934:	af 92       	push	r10
    3936:	bf 92       	push	r11
    3938:	cf 92       	push	r12
    393a:	df 92       	push	r13
    393c:	ef 92       	push	r14
    393e:	ff 92       	push	r15
    3940:	0f 93       	push	r16
    3942:	1f 93       	push	r17
    3944:	cf 93       	push	r28
    3946:	df 93       	push	r29
    3948:	cd b7       	in	r28, 0x3d	; 61
    394a:	de b7       	in	r29, 0x3e	; 62
    394c:	68 97       	sbiw	r28, 0x18	; 24
    394e:	cd bf       	out	0x3d, r28	; 61
    3950:	de bf       	out	0x3e, r29	; 62
    3952:	29 83       	std	Y+1, r18	; 0x01
    3954:	3a 83       	std	Y+2, r19	; 0x02
    3956:	4b 83       	std	Y+3, r20	; 0x03
    3958:	5c 83       	std	Y+4, r21	; 0x04
    395a:	6d 83       	std	Y+5, r22	; 0x05
    395c:	7e 83       	std	Y+6, r23	; 0x06
    395e:	8f 83       	std	Y+7, r24	; 0x07
    3960:	98 87       	std	Y+8, r25	; 0x08
    3962:	17 01       	movw	r2, r14
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    3964:	e1 14       	cp	r14, r1
    3966:	f1 04       	cpc	r15, r1
    3968:	09 f4       	brne	.+2      	; 0x396c <sd_raw_read+0x48>
    396a:	fa c0       	rjmp	.+500    	; 0x3b60 <sd_raw_read+0x23c>
    396c:	0f 2e       	mov	r0, r31
    396e:	f1 e4       	ldi	r31, 0x41	; 65
    3970:	8f 2e       	mov	r8, r31
    3972:	f5 e2       	ldi	r31, 0x25	; 37
    3974:	9f 2e       	mov	r9, r31
    3976:	f0 2d       	mov	r31, r0
    3978:	0f 8b       	std	Y+23, r16	; 0x17
    397a:	18 8f       	std	Y+24, r17	; 0x18
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    397c:	69 80       	ldd	r6, Y+1	; 0x01
    397e:	7a 80       	ldd	r7, Y+2	; 0x02
    3980:	21 e0       	ldi	r18, 0x01	; 1
    3982:	72 22       	and	r7, r18
        block_address = offset - block_offset;
    3984:	93 01       	movw	r18, r6
    3986:	40 e0       	ldi	r20, 0x00	; 0
    3988:	50 e0       	ldi	r21, 0x00	; 0
    398a:	60 e0       	ldi	r22, 0x00	; 0
    398c:	70 e0       	ldi	r23, 0x00	; 0
    398e:	cb 01       	movw	r24, r22
    3990:	69 86       	std	Y+9, r6	; 0x09
    3992:	3a 87       	std	Y+10, r19	; 0x0a
    3994:	4b 87       	std	Y+11, r20	; 0x0b
    3996:	5c 87       	std	Y+12, r21	; 0x0c
    3998:	6d 87       	std	Y+13, r22	; 0x0d
    399a:	7e 87       	std	Y+14, r23	; 0x0e
    399c:	8f 87       	std	Y+15, r24	; 0x0f
    399e:	98 8b       	std	Y+16, r25	; 0x10
    39a0:	29 81       	ldd	r18, Y+1	; 0x01
    39a2:	3a 81       	ldd	r19, Y+2	; 0x02
    39a4:	4b 81       	ldd	r20, Y+3	; 0x03
    39a6:	5c 81       	ldd	r21, Y+4	; 0x04
    39a8:	6d 81       	ldd	r22, Y+5	; 0x05
    39aa:	7e 81       	ldd	r23, Y+6	; 0x06
    39ac:	8f 81       	ldd	r24, Y+7	; 0x07
    39ae:	98 85       	ldd	r25, Y+8	; 0x08
    39b0:	a9 84       	ldd	r10, Y+9	; 0x09
    39b2:	ba 84       	ldd	r11, Y+10	; 0x0a
    39b4:	c1 2c       	mov	r12, r1
    39b6:	d1 2c       	mov	r13, r1
    39b8:	e1 2c       	mov	r14, r1
    39ba:	f1 2c       	mov	r15, r1
    39bc:	00 e0       	ldi	r16, 0x00	; 0
    39be:	10 e0       	ldi	r17, 0x00	; 0
    39c0:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <__subdi3>
    39c4:	52 2e       	mov	r5, r18
    39c6:	43 2e       	mov	r4, r19
    39c8:	49 8b       	std	Y+17, r20	; 0x11
    39ca:	5a 8b       	std	Y+18, r21	; 0x12
    39cc:	6b 8b       	std	Y+19, r22	; 0x13
    39ce:	7c 8b       	std	Y+20, r23	; 0x14
    39d0:	8d 8b       	std	Y+21, r24	; 0x15
    39d2:	9e 8b       	std	Y+22, r25	; 0x16
    39d4:	40 e0       	ldi	r20, 0x00	; 0
    39d6:	52 e0       	ldi	r21, 0x02	; 2
    39d8:	46 19       	sub	r20, r6
    39da:	57 09       	sbc	r21, r7
    39dc:	49 87       	std	Y+9, r20	; 0x09
    39de:	5a 87       	std	Y+10, r21	; 0x0a
    39e0:	24 16       	cp	r2, r20
    39e2:	35 06       	cpc	r3, r21
    39e4:	10 f4       	brcc	.+4      	; 0x39ea <sd_raw_read+0xc6>
    39e6:	29 86       	std	Y+9, r2	; 0x09
    39e8:	3a 86       	std	Y+10, r3	; 0x0a
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    39ea:	a0 90 39 23 	lds	r10, 0x2339
    39ee:	b0 90 3a 23 	lds	r11, 0x233A
    39f2:	c0 90 3b 23 	lds	r12, 0x233B
    39f6:	d0 90 3c 23 	lds	r13, 0x233C
    39fa:	e0 90 3d 23 	lds	r14, 0x233D
    39fe:	f0 90 3e 23 	lds	r15, 0x233E
    3a02:	00 91 3f 23 	lds	r16, 0x233F
    3a06:	10 91 40 23 	lds	r17, 0x2340
    3a0a:	25 2d       	mov	r18, r5
    3a0c:	34 2d       	mov	r19, r4
    3a0e:	49 89       	ldd	r20, Y+17	; 0x11
    3a10:	5a 89       	ldd	r21, Y+18	; 0x12
    3a12:	6b 89       	ldd	r22, Y+19	; 0x13
    3a14:	7c 89       	ldd	r23, Y+20	; 0x14
    3a16:	8d 89       	ldd	r24, Y+21	; 0x15
    3a18:	9e 89       	ldd	r25, Y+22	; 0x16
    3a1a:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <__cmpdi2>
    3a1e:	09 f4       	brne	.+2      	; 0x3a22 <sd_raw_read+0xfe>
    3a20:	6a c0       	rjmp	.+212    	; 0x3af6 <sd_raw_read+0x1d2>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    3a22:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <sd_raw_sync>
    3a26:	88 23       	and	r24, r24
    3a28:	09 f4       	brne	.+2      	; 0x3a2c <sd_raw_read+0x108>
    3a2a:	9c c0       	rjmp	.+312    	; 0x3b64 <sd_raw_read+0x240>
                return 0;
#endif

            /* address card */
            select_card();
    3a2c:	50 e1       	ldi	r21, 0x10	; 16
    3a2e:	50 93 86 06 	sts	0x0686, r21

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    3a32:	80 91 37 23 	lds	r24, 0x2337
    3a36:	82 ff       	sbrs	r24, 2
    3a38:	10 c0       	rjmp	.+32     	; 0x3a5a <sd_raw_read+0x136>
    3a3a:	25 2d       	mov	r18, r5
    3a3c:	34 2d       	mov	r19, r4
    3a3e:	49 89       	ldd	r20, Y+17	; 0x11
    3a40:	5a 89       	ldd	r21, Y+18	; 0x12
    3a42:	6b 89       	ldd	r22, Y+19	; 0x13
    3a44:	7c 89       	ldd	r23, Y+20	; 0x14
    3a46:	8d 89       	ldd	r24, Y+21	; 0x15
    3a48:	9e 89       	ldd	r25, Y+22	; 0x16
    3a4a:	09 e0       	ldi	r16, 0x09	; 9
    3a4c:	0e 94 cc 35 	call	0x6b98	; 0x6b98 <__lshrdi3>
    3a50:	64 2f       	mov	r22, r20
    3a52:	75 2f       	mov	r23, r21
    3a54:	42 2f       	mov	r20, r18
    3a56:	53 2f       	mov	r21, r19
    3a58:	04 c0       	rjmp	.+8      	; 0x3a62 <sd_raw_read+0x13e>
    3a5a:	45 2d       	mov	r20, r5
    3a5c:	54 2d       	mov	r21, r4
    3a5e:	69 89       	ldd	r22, Y+17	; 0x11
    3a60:	7a 89       	ldd	r23, Y+18	; 0x12
    3a62:	81 e1       	ldi	r24, 0x11	; 17
    3a64:	0e 94 28 1c 	call	0x3850	; 0x3850 <sd_raw_send_command>
    3a68:	88 23       	and	r24, r24
    3a6a:	31 f0       	breq	.+12     	; 0x3a78 <sd_raw_read+0x154>
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
#endif
            {
                unselect_card();
    3a6c:	80 e1       	ldi	r24, 0x10	; 16
    3a6e:	e0 e8       	ldi	r30, 0x80	; 128
    3a70:	f6 e0       	ldi	r31, 0x06	; 6
    3a72:	85 83       	std	Z+5, r24	; 0x05
                return 0;
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	79 c0       	rjmp	.+242    	; 0x3b6a <sd_raw_read+0x246>
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    3a78:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>
    3a7c:	8e 3f       	cpi	r24, 0xFE	; 254
    3a7e:	e1 f7       	brne	.-8      	; 0x3a78 <sd_raw_read+0x154>
    3a80:	01 e4       	ldi	r16, 0x41	; 65
    3a82:	13 e2       	ldi	r17, 0x23	; 35
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    3a84:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>
    3a88:	f8 01       	movw	r30, r16
    3a8a:	81 93       	st	Z+, r24
    3a8c:	8f 01       	movw	r16, r30
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    3a8e:	e8 15       	cp	r30, r8
    3a90:	f9 05       	cpc	r31, r9
    3a92:	c1 f7       	brne	.-16     	; 0x3a84 <sd_raw_read+0x160>
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;
    3a94:	50 92 39 23 	sts	0x2339, r5
    3a98:	40 92 3a 23 	sts	0x233A, r4
    3a9c:	f9 89       	ldd	r31, Y+17	; 0x11
    3a9e:	f0 93 3b 23 	sts	0x233B, r31
    3aa2:	2a 89       	ldd	r18, Y+18	; 0x12
    3aa4:	20 93 3c 23 	sts	0x233C, r18
    3aa8:	3b 89       	ldd	r19, Y+19	; 0x13
    3aaa:	30 93 3d 23 	sts	0x233D, r19
    3aae:	4c 89       	ldd	r20, Y+20	; 0x14
    3ab0:	40 93 3e 23 	sts	0x233E, r20
    3ab4:	5d 89       	ldd	r21, Y+21	; 0x15
    3ab6:	50 93 3f 23 	sts	0x233F, r21
    3aba:	6e 89       	ldd	r22, Y+22	; 0x16
    3abc:	60 93 40 23 	sts	0x2340, r22

            memcpy(buffer, raw_block + block_offset, read_length);
    3ac0:	b3 01       	movw	r22, r6
    3ac2:	6f 5b       	subi	r22, 0xBF	; 191
    3ac4:	7c 4d       	sbci	r23, 0xDC	; 220
    3ac6:	49 85       	ldd	r20, Y+9	; 0x09
    3ac8:	5a 85       	ldd	r21, Y+10	; 0x0a
    3aca:	8f 89       	ldd	r24, Y+23	; 0x17
    3acc:	98 8d       	ldd	r25, Y+24	; 0x18
    3ace:	0e 94 22 38 	call	0x7044	; 0x7044 <memcpy>
            buffer += read_length;
    3ad2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ad4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ad6:	e9 85       	ldd	r30, Y+9	; 0x09
    3ad8:	fa 85       	ldd	r31, Y+10	; 0x0a
    3ada:	8e 0f       	add	r24, r30
    3adc:	9f 1f       	adc	r25, r31
    3ade:	8f 8b       	std	Y+23, r24	; 0x17
    3ae0:	98 8f       	std	Y+24, r25	; 0x18
#endif
            
            /* read crc16 */
            sd_raw_rec_byte();
    3ae2:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>
            sd_raw_rec_byte();
    3ae6:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>
            
            /* deaddress card */
            unselect_card();
    3aea:	f0 e1       	ldi	r31, 0x10	; 16
    3aec:	f0 93 85 06 	sts	0x0685, r31

            /* let card some time to finish */
            sd_raw_rec_byte();
    3af0:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>
    3af4:	11 c0       	rjmp	.+34     	; 0x3b18 <sd_raw_read+0x1f4>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    3af6:	b3 01       	movw	r22, r6
    3af8:	6f 5b       	subi	r22, 0xBF	; 191
    3afa:	7c 4d       	sbci	r23, 0xDC	; 220
    3afc:	49 85       	ldd	r20, Y+9	; 0x09
    3afe:	5a 85       	ldd	r21, Y+10	; 0x0a
    3b00:	8f 89       	ldd	r24, Y+23	; 0x17
    3b02:	98 8d       	ldd	r25, Y+24	; 0x18
    3b04:	0e 94 22 38 	call	0x7044	; 0x7044 <memcpy>
            buffer += read_length;
    3b08:	2f 89       	ldd	r18, Y+23	; 0x17
    3b0a:	38 8d       	ldd	r19, Y+24	; 0x18
    3b0c:	49 85       	ldd	r20, Y+9	; 0x09
    3b0e:	5a 85       	ldd	r21, Y+10	; 0x0a
    3b10:	24 0f       	add	r18, r20
    3b12:	35 1f       	adc	r19, r21
    3b14:	2f 8b       	std	Y+23, r18	; 0x17
    3b16:	38 8f       	std	Y+24, r19	; 0x18
        }
#endif

        length -= read_length;
    3b18:	69 85       	ldd	r22, Y+9	; 0x09
    3b1a:	7a 85       	ldd	r23, Y+10	; 0x0a
    3b1c:	26 1a       	sub	r2, r22
    3b1e:	37 0a       	sbc	r3, r23
        offset += read_length;
    3b20:	5b 01       	movw	r10, r22
    3b22:	26 2f       	mov	r18, r22
    3b24:	3b 2d       	mov	r19, r11
    3b26:	40 e0       	ldi	r20, 0x00	; 0
    3b28:	50 e0       	ldi	r21, 0x00	; 0
    3b2a:	60 e0       	ldi	r22, 0x00	; 0
    3b2c:	70 e0       	ldi	r23, 0x00	; 0
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	a9 80       	ldd	r10, Y+1	; 0x01
    3b34:	ba 80       	ldd	r11, Y+2	; 0x02
    3b36:	cb 80       	ldd	r12, Y+3	; 0x03
    3b38:	dc 80       	ldd	r13, Y+4	; 0x04
    3b3a:	ed 80       	ldd	r14, Y+5	; 0x05
    3b3c:	fe 80       	ldd	r15, Y+6	; 0x06
    3b3e:	0f 81       	ldd	r16, Y+7	; 0x07
    3b40:	18 85       	ldd	r17, Y+8	; 0x08
    3b42:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <__adddi3>
    3b46:	29 83       	std	Y+1, r18	; 0x01
    3b48:	3a 83       	std	Y+2, r19	; 0x02
    3b4a:	4b 83       	std	Y+3, r20	; 0x03
    3b4c:	5c 83       	std	Y+4, r21	; 0x04
    3b4e:	6d 83       	std	Y+5, r22	; 0x05
    3b50:	7e 83       	std	Y+6, r23	; 0x06
    3b52:	8f 83       	std	Y+7, r24	; 0x07
    3b54:	98 87       	std	Y+8, r25	; 0x08
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    3b56:	21 14       	cp	r2, r1
    3b58:	31 04       	cpc	r3, r1
    3b5a:	09 f0       	breq	.+2      	; 0x3b5e <sd_raw_read+0x23a>
    3b5c:	0f cf       	rjmp	.-482    	; 0x397c <sd_raw_read+0x58>
    3b5e:	04 c0       	rjmp	.+8      	; 0x3b68 <sd_raw_read+0x244>

        length -= read_length;
        offset += read_length;
    }

    return 1;
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	03 c0       	rjmp	.+6      	; 0x3b6a <sd_raw_read+0x246>
        if(block_address != raw_block_address)
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
                return 0;
    3b64:	80 e0       	ldi	r24, 0x00	; 0
    3b66:	01 c0       	rjmp	.+2      	; 0x3b6a <sd_raw_read+0x246>

        length -= read_length;
        offset += read_length;
    }

    return 1;
    3b68:	81 e0       	ldi	r24, 0x01	; 1
}
    3b6a:	68 96       	adiw	r28, 0x18	; 24
    3b6c:	cd bf       	out	0x3d, r28	; 61
    3b6e:	de bf       	out	0x3e, r29	; 62
    3b70:	df 91       	pop	r29
    3b72:	cf 91       	pop	r28
    3b74:	1f 91       	pop	r17
    3b76:	0f 91       	pop	r16
    3b78:	ff 90       	pop	r15
    3b7a:	ef 90       	pop	r14
    3b7c:	df 90       	pop	r13
    3b7e:	cf 90       	pop	r12
    3b80:	bf 90       	pop	r11
    3b82:	af 90       	pop	r10
    3b84:	9f 90       	pop	r9
    3b86:	8f 90       	pop	r8
    3b88:	7f 90       	pop	r7
    3b8a:	6f 90       	pop	r6
    3b8c:	5f 90       	pop	r5
    3b8e:	4f 90       	pop	r4
    3b90:	3f 90       	pop	r3
    3b92:	2f 90       	pop	r2
    3b94:	08 95       	ret

00003b96 <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    3b96:	9f 92       	push	r9
    3b98:	af 92       	push	r10
    3b9a:	bf 92       	push	r11
    3b9c:	cf 92       	push	r12
    3b9e:	df 92       	push	r13
    3ba0:	ef 92       	push	r14
    3ba2:	ff 92       	push	r15
    3ba4:	0f 93       	push	r16
    3ba6:	1f 93       	push	r17
    3ba8:	cf 93       	push	r28
    3baa:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    3bac:	e0 e8       	ldi	r30, 0x80	; 128
    3bae:	f6 e0       	ldi	r31, 0x06	; 6
    3bb0:	80 e2       	ldi	r24, 0x20	; 32
    3bb2:	81 83       	std	Z+1, r24	; 0x01
    configure_pin_sck();
    3bb4:	80 e8       	ldi	r24, 0x80	; 128
    3bb6:	81 83       	std	Z+1, r24	; 0x01
    configure_pin_ss();
    3bb8:	80 e1       	ldi	r24, 0x10	; 16
    3bba:	81 83       	std	Z+1, r24	; 0x01
    configure_pin_miso();
    3bbc:	90 e4       	ldi	r25, 0x40	; 64
    3bbe:	92 83       	std	Z+2, r25	; 0x02

    unselect_card();
    3bc0:	85 83       	std	Z+5, r24	; 0x05

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
#if XMEGA
    SPIE.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV16_gc;
    3bc2:	81 e5       	ldi	r24, 0x51	; 81
    3bc4:	80 93 c0 0a 	sts	0x0AC0, r24
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
#endif
    /* initialization procedure */
    sd_raw_card_type = 0;
    3bc8:	10 92 37 23 	sts	0x2337, r1
    3bcc:	1a e0       	ldi	r17, 0x0A	; 10

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    3bce:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>
    3bd2:	11 50       	subi	r17, 0x01	; 1
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    3bd4:	e1 f7       	brne	.-8      	; 0x3bce <sd_raw_init+0x38>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    3bd6:	80 e1       	ldi	r24, 0x10	; 16
    3bd8:	e0 e8       	ldi	r30, 0x80	; 128
    3bda:	f6 e0       	ldi	r31, 0x06	; 6
    3bdc:	86 83       	std	Z+6, r24	; 0x06
    3bde:	c0 e0       	ldi	r28, 0x00	; 0
    3be0:	d2 e0       	ldi	r29, 0x02	; 2

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    3be2:	40 e0       	ldi	r20, 0x00	; 0
    3be4:	50 e0       	ldi	r21, 0x00	; 0
    3be6:	ba 01       	movw	r22, r20
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	0e 94 28 1c 	call	0x3850	; 0x3850 <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
    3bee:	81 30       	cpi	r24, 0x01	; 1
    3bf0:	49 f0       	breq	.+18     	; 0x3c04 <sd_raw_init+0x6e>
    3bf2:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x1ff)
    3bf4:	20 97       	sbiw	r28, 0x00	; 0
    3bf6:	a9 f7       	brne	.-22     	; 0x3be2 <sd_raw_init+0x4c>
        {
            unselect_card();
    3bf8:	80 e1       	ldi	r24, 0x10	; 16
    3bfa:	e0 e8       	ldi	r30, 0x80	; 128
    3bfc:	f6 e0       	ldi	r31, 0x06	; 6
    3bfe:	85 83       	std	Z+5, r24	; 0x05
            return 0;
    3c00:	01 2f       	mov	r16, r17
    3c02:	c2 c0       	rjmp	.+388    	; 0x3d88 <sd_raw_init+0x1f2>
        }
    }

#if SD_RAW_SDHC
    /* check for version of SD card specification */
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    3c04:	4a ea       	ldi	r20, 0xAA	; 170
    3c06:	51 e0       	ldi	r21, 0x01	; 1
    3c08:	60 e0       	ldi	r22, 0x00	; 0
    3c0a:	70 e0       	ldi	r23, 0x00	; 0
    3c0c:	88 e0       	ldi	r24, 0x08	; 8
    3c0e:	0e 94 28 1c 	call	0x3850	; 0x3850 <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    3c12:	08 2f       	mov	r16, r24
    3c14:	04 70       	andi	r16, 0x04	; 4
    3c16:	82 fd       	sbrc	r24, 2
    3c18:	19 c0       	rjmp	.+50     	; 0x3c4c <sd_raw_init+0xb6>
    {
        sd_raw_rec_byte();
    3c1a:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>
        sd_raw_rec_byte();
    3c1e:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>
        if((sd_raw_rec_byte() & 0x01) == 0)
    3c22:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>
    3c26:	80 ff       	sbrs	r24, 0
    3c28:	af c0       	rjmp	.+350    	; 0x3d88 <sd_raw_init+0x1f2>
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
    3c2a:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>
    3c2e:	8a 3a       	cpi	r24, 0xAA	; 170
    3c30:	09 f0       	breq	.+2      	; 0x3c34 <sd_raw_init+0x9e>
    3c32:	aa c0       	rjmp	.+340    	; 0x3d88 <sd_raw_init+0x1f2>
            return 0; /* wrong test pattern */

        /* card conforms to SD 2 card specification */
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
    3c34:	82 e0       	ldi	r24, 0x02	; 2
    3c36:	80 93 37 23 	sts	0x2337, r24
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    3c3a:	c0 e0       	ldi	r28, 0x00	; 0
    3c3c:	d0 e8       	ldi	r29, 0x80	; 128
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
    3c3e:	91 2c       	mov	r9, r1
    3c40:	a1 2c       	mov	r10, r1
    3c42:	b1 2c       	mov	r11, r1
    3c44:	68 94       	set
    3c46:	cc 24       	eor	r12, r12
    3c48:	c6 f8       	bld	r12, 6
    3c4a:	12 c0       	rjmp	.+36     	; 0x3c70 <sd_raw_init+0xda>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    3c4c:	40 e0       	ldi	r20, 0x00	; 0
    3c4e:	50 e0       	ldi	r21, 0x00	; 0
    3c50:	ba 01       	movw	r22, r20
    3c52:	87 e3       	ldi	r24, 0x37	; 55
    3c54:	0e 94 28 1c 	call	0x3850	; 0x3850 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    3c58:	40 e0       	ldi	r20, 0x00	; 0
    3c5a:	50 e0       	ldi	r21, 0x00	; 0
    3c5c:	ba 01       	movw	r22, r20
    3c5e:	89 e2       	ldi	r24, 0x29	; 41
    3c60:	0e 94 28 1c 	call	0x3850	; 0x3850 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    3c64:	82 fd       	sbrc	r24, 2
    3c66:	e9 cf       	rjmp	.-46     	; 0x3c3a <sd_raw_init+0xa4>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    3c68:	81 e0       	ldi	r24, 0x01	; 1
    3c6a:	80 93 37 23 	sts	0x2337, r24
    3c6e:	e5 cf       	rjmp	.-54     	; 0x3c3a <sd_raw_init+0xa4>
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    3c70:	80 91 37 23 	lds	r24, 0x2337
    3c74:	98 2f       	mov	r25, r24
    3c76:	93 70       	andi	r25, 0x03	; 3
    3c78:	c9 f0       	breq	.+50     	; 0x3cac <sd_raw_init+0x116>
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    3c7a:	81 fd       	sbrc	r24, 1
    3c7c:	05 c0       	rjmp	.+10     	; 0x3c88 <sd_raw_init+0xf2>
    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
    3c7e:	d1 2c       	mov	r13, r1
    3c80:	e1 2c       	mov	r14, r1
    3c82:	f1 2c       	mov	r15, r1
    3c84:	00 e0       	ldi	r16, 0x00	; 0
    3c86:	04 c0       	rjmp	.+8      	; 0x3c90 <sd_raw_init+0xfa>
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
    3c88:	d9 2c       	mov	r13, r9
    3c8a:	ea 2c       	mov	r14, r10
    3c8c:	fb 2c       	mov	r15, r11
    3c8e:	0c 2d       	mov	r16, r12
#endif
            sd_raw_send_command(CMD_APP, 0);
    3c90:	40 e0       	ldi	r20, 0x00	; 0
    3c92:	50 e0       	ldi	r21, 0x00	; 0
    3c94:	ba 01       	movw	r22, r20
    3c96:	87 e3       	ldi	r24, 0x37	; 55
    3c98:	0e 94 28 1c 	call	0x3850	; 0x3850 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    3c9c:	4d 2d       	mov	r20, r13
    3c9e:	5e 2d       	mov	r21, r14
    3ca0:	6f 2d       	mov	r22, r15
    3ca2:	70 2f       	mov	r23, r16
    3ca4:	89 e2       	ldi	r24, 0x29	; 41
    3ca6:	0e 94 28 1c 	call	0x3850	; 0x3850 <sd_raw_send_command>
    3caa:	06 c0       	rjmp	.+12     	; 0x3cb8 <sd_raw_init+0x122>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    3cac:	40 e0       	ldi	r20, 0x00	; 0
    3cae:	50 e0       	ldi	r21, 0x00	; 0
    3cb0:	ba 01       	movw	r22, r20
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	0e 94 28 1c 	call	0x3850	; 0x3850 <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    3cb8:	08 2f       	mov	r16, r24
    3cba:	01 70       	andi	r16, 0x01	; 1
    3cbc:	80 ff       	sbrs	r24, 0
    3cbe:	09 c0       	rjmp	.+18     	; 0x3cd2 <sd_raw_init+0x13c>
    3cc0:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x7fff)
    3cc2:	20 97       	sbiw	r28, 0x00	; 0
    3cc4:	a9 f6       	brne	.-86     	; 0x3c70 <sd_raw_init+0xda>
        {
            unselect_card();
    3cc6:	80 e1       	ldi	r24, 0x10	; 16
    3cc8:	e0 e8       	ldi	r30, 0x80	; 128
    3cca:	f6 e0       	ldi	r31, 0x06	; 6
    3ccc:	85 83       	std	Z+5, r24	; 0x05
            return 0;
    3cce:	01 2f       	mov	r16, r17
    3cd0:	5b c0       	rjmp	.+182    	; 0x3d88 <sd_raw_init+0x1f2>
        }
    }

#if SD_RAW_SDHC
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    3cd2:	c0 91 37 23 	lds	r28, 0x2337
    3cd6:	c1 ff       	sbrs	r28, 1
    3cd8:	1a c0       	rjmp	.+52     	; 0x3d0e <sd_raw_init+0x178>
    {
        if(sd_raw_send_command(CMD_READ_OCR, 0))
    3cda:	40 e0       	ldi	r20, 0x00	; 0
    3cdc:	50 e0       	ldi	r21, 0x00	; 0
    3cde:	ba 01       	movw	r22, r20
    3ce0:	8a e3       	ldi	r24, 0x3A	; 58
    3ce2:	0e 94 28 1c 	call	0x3850	; 0x3850 <sd_raw_send_command>
    3ce6:	88 23       	and	r24, r24
    3ce8:	29 f0       	breq	.+10     	; 0x3cf4 <sd_raw_init+0x15e>
        {
            unselect_card();
    3cea:	80 e1       	ldi	r24, 0x10	; 16
    3cec:	e0 e8       	ldi	r30, 0x80	; 128
    3cee:	f6 e0       	ldi	r31, 0x06	; 6
    3cf0:	85 83       	std	Z+5, r24	; 0x05
            return 0;
    3cf2:	4a c0       	rjmp	.+148    	; 0x3d88 <sd_raw_init+0x1f2>
        }

        if(sd_raw_rec_byte() & 0x40)
    3cf4:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>
    3cf8:	86 ff       	sbrs	r24, 6
    3cfa:	03 c0       	rjmp	.+6      	; 0x3d02 <sd_raw_init+0x16c>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
    3cfc:	c4 60       	ori	r28, 0x04	; 4
    3cfe:	c0 93 37 23 	sts	0x2337, r28

        sd_raw_rec_byte();
    3d02:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>
        sd_raw_rec_byte();
    3d06:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>
        sd_raw_rec_byte();
    3d0a:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    3d0e:	40 e0       	ldi	r20, 0x00	; 0
    3d10:	52 e0       	ldi	r21, 0x02	; 2
    3d12:	60 e0       	ldi	r22, 0x00	; 0
    3d14:	70 e0       	ldi	r23, 0x00	; 0
    3d16:	80 e1       	ldi	r24, 0x10	; 16
    3d18:	0e 94 28 1c 	call	0x3850	; 0x3850 <sd_raw_send_command>
    3d1c:	88 23       	and	r24, r24
    3d1e:	29 f0       	breq	.+10     	; 0x3d2a <sd_raw_init+0x194>
    {
        unselect_card();
    3d20:	80 e1       	ldi	r24, 0x10	; 16
    3d22:	e0 e8       	ldi	r30, 0x80	; 128
    3d24:	f6 e0       	ldi	r31, 0x06	; 6
    3d26:	85 83       	std	Z+5, r24	; 0x05
        return 0;
    3d28:	2f c0       	rjmp	.+94     	; 0x3d88 <sd_raw_init+0x1f2>
    }

    /* deaddress card */
    unselect_card();
    3d2a:	80 e1       	ldi	r24, 0x10	; 16
    3d2c:	e0 e8       	ldi	r30, 0x80	; 128
    3d2e:	f6 e0       	ldi	r31, 0x06	; 6
    3d30:	85 83       	std	Z+5, r24	; 0x05

    /* switch to highest SPI frequency possible */
#if XMEGA
    SPID.CTRL = 0b11010000;
    3d32:	80 ed       	ldi	r24, 0xD0	; 208
    3d34:	80 93 c0 09 	sts	0x09C0, r24
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
#endif

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    3d38:	8f ef       	ldi	r24, 0xFF	; 255
    3d3a:	80 93 39 23 	sts	0x2339, r24
    3d3e:	80 93 3a 23 	sts	0x233A, r24
    3d42:	80 93 3b 23 	sts	0x233B, r24
    3d46:	80 93 3c 23 	sts	0x233C, r24
    3d4a:	80 93 3d 23 	sts	0x233D, r24
    3d4e:	80 93 3e 23 	sts	0x233E, r24
    3d52:	80 93 3f 23 	sts	0x233F, r24
    3d56:	80 93 40 23 	sts	0x2340, r24
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	80 93 38 23 	sts	0x2338, r24
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    3d60:	e1 2c       	mov	r14, r1
    3d62:	68 94       	set
    3d64:	ff 24       	eor	r15, r15
    3d66:	f1 f8       	bld	r15, 1
    3d68:	01 e4       	ldi	r16, 0x41	; 65
    3d6a:	13 e2       	ldi	r17, 0x23	; 35
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	40 e0       	ldi	r20, 0x00	; 0
    3d72:	50 e0       	ldi	r21, 0x00	; 0
    3d74:	60 e0       	ldi	r22, 0x00	; 0
    3d76:	70 e0       	ldi	r23, 0x00	; 0
    3d78:	80 e0       	ldi	r24, 0x00	; 0
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	0e 94 92 1c 	call	0x3924	; 0x3924 <sd_raw_read>
    3d80:	01 e0       	ldi	r16, 0x01	; 1
    3d82:	81 11       	cpse	r24, r1
    3d84:	01 c0       	rjmp	.+2      	; 0x3d88 <sd_raw_init+0x1f2>
    3d86:	00 e0       	ldi	r16, 0x00	; 0
        return 0;
#endif

    return 1;
}
    3d88:	80 2f       	mov	r24, r16
    3d8a:	df 91       	pop	r29
    3d8c:	cf 91       	pop	r28
    3d8e:	1f 91       	pop	r17
    3d90:	0f 91       	pop	r16
    3d92:	ff 90       	pop	r15
    3d94:	ef 90       	pop	r14
    3d96:	df 90       	pop	r13
    3d98:	cf 90       	pop	r12
    3d9a:	bf 90       	pop	r11
    3d9c:	af 90       	pop	r10
    3d9e:	9f 90       	pop	r9
    3da0:	08 95       	ret

00003da2 <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    3da2:	2f 92       	push	r2
    3da4:	3f 92       	push	r3
    3da6:	4f 92       	push	r4
    3da8:	5f 92       	push	r5
    3daa:	6f 92       	push	r6
    3dac:	7f 92       	push	r7
    3dae:	8f 92       	push	r8
    3db0:	9f 92       	push	r9
    3db2:	af 92       	push	r10
    3db4:	bf 92       	push	r11
    3db6:	cf 92       	push	r12
    3db8:	df 92       	push	r13
    3dba:	ef 92       	push	r14
    3dbc:	ff 92       	push	r15
    3dbe:	0f 93       	push	r16
    3dc0:	1f 93       	push	r17
    3dc2:	cf 93       	push	r28
    3dc4:	df 93       	push	r29
    3dc6:	cd b7       	in	r28, 0x3d	; 61
    3dc8:	de b7       	in	r29, 0x3e	; 62
    3dca:	62 97       	sbiw	r28, 0x12	; 18
    3dcc:	cd bf       	out	0x3d, r28	; 61
    3dce:	de bf       	out	0x3e, r29	; 62
    3dd0:	2f 87       	std	Y+15, r18	; 0x0f
    3dd2:	38 8b       	std	Y+16, r19	; 0x10
    3dd4:	49 8b       	std	Y+17, r20	; 0x11
    3dd6:	5a 8b       	std	Y+18, r21	; 0x12
    3dd8:	56 2e       	mov	r5, r22
    3dda:	47 2e       	mov	r4, r23
    3ddc:	38 2e       	mov	r3, r24
    3dde:	29 2e       	mov	r2, r25
    3de0:	09 83       	std	Y+1, r16	; 0x01
    3de2:	1a 83       	std	Y+2, r17	; 0x02
    3de4:	36 01       	movw	r6, r12
    3de6:	ab 86       	std	Y+11, r10	; 0x0b
    3de8:	bc 86       	std	Y+12, r11	; 0x0c
    if(!buffer || interval == 0 || length < interval || !callback)
    3dea:	01 2b       	or	r16, r17
    3dec:	09 f4       	brne	.+2      	; 0x3df0 <sd_raw_read_interval+0x4e>
    3dee:	60 c0       	rjmp	.+192    	; 0x3eb0 <sd_raw_read_interval+0x10e>
    3df0:	e1 14       	cp	r14, r1
    3df2:	f1 04       	cpc	r15, r1
    3df4:	09 f4       	brne	.+2      	; 0x3df8 <sd_raw_read_interval+0x56>
    3df6:	5e c0       	rjmp	.+188    	; 0x3eb4 <sd_raw_read_interval+0x112>
    3df8:	ce 14       	cp	r12, r14
    3dfa:	df 04       	cpc	r13, r15
    3dfc:	08 f4       	brcc	.+2      	; 0x3e00 <sd_raw_read_interval+0x5e>
    3dfe:	5c c0       	rjmp	.+184    	; 0x3eb8 <sd_raw_read_interval+0x116>
    3e00:	ab 28       	or	r10, r11
    3e02:	09 f4       	brne	.+2      	; 0x3e06 <sd_raw_read_interval+0x64>
    3e04:	5b c0       	rjmp	.+182    	; 0x3ebc <sd_raw_read_interval+0x11a>
         */
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
        if(!callback(buffer, offset, p))
            break;
        offset += interval;
    3e06:	97 01       	movw	r18, r14
    3e08:	40 e0       	ldi	r20, 0x00	; 0
    3e0a:	50 e0       	ldi	r21, 0x00	; 0
    3e0c:	60 e0       	ldi	r22, 0x00	; 0
    3e0e:	70 e0       	ldi	r23, 0x00	; 0
    3e10:	cb 01       	movw	r24, r22
    3e12:	eb 82       	std	Y+3, r14	; 0x03
    3e14:	3c 83       	std	Y+4, r19	; 0x04
    3e16:	4d 83       	std	Y+5, r20	; 0x05
    3e18:	5e 83       	std	Y+6, r21	; 0x06
    3e1a:	6f 83       	std	Y+7, r22	; 0x07
    3e1c:	78 87       	std	Y+8, r23	; 0x08
    3e1e:	89 87       	std	Y+9, r24	; 0x09
    3e20:	9a 87       	std	Y+10, r25	; 0x0a
    3e22:	8d 86       	std	Y+13, r8	; 0x0d
    3e24:	9e 86       	std	Y+14, r9	; 0x0e
    3e26:	47 01       	movw	r8, r14
    3e28:	df 84       	ldd	r13, Y+15	; 0x0f
    3e2a:	c8 88       	ldd	r12, Y+16	; 0x10
    3e2c:	b9 88       	ldd	r11, Y+17	; 0x11
    3e2e:	aa 88       	ldd	r10, Y+18	; 0x12
    while(length >= interval)
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    3e30:	74 01       	movw	r14, r8
    3e32:	09 81       	ldd	r16, Y+1	; 0x01
    3e34:	1a 81       	ldd	r17, Y+2	; 0x02
    3e36:	2d 2d       	mov	r18, r13
    3e38:	3c 2d       	mov	r19, r12
    3e3a:	4b 2d       	mov	r20, r11
    3e3c:	5a 2d       	mov	r21, r10
    3e3e:	65 2d       	mov	r22, r5
    3e40:	74 2d       	mov	r23, r4
    3e42:	83 2d       	mov	r24, r3
    3e44:	92 2d       	mov	r25, r2
    3e46:	0e 94 92 1c 	call	0x3924	; 0x3924 <sd_raw_read>
    3e4a:	88 23       	and	r24, r24
    3e4c:	c9 f1       	breq	.+114    	; 0x3ec0 <sd_raw_read_interval+0x11e>
            return 0;
        if(!callback(buffer, offset, p))
    3e4e:	ed 84       	ldd	r14, Y+13	; 0x0d
    3e50:	fe 84       	ldd	r15, Y+14	; 0x0e
    3e52:	0d 2d       	mov	r16, r13
    3e54:	1c 2d       	mov	r17, r12
    3e56:	2b 2d       	mov	r18, r11
    3e58:	3a 2d       	mov	r19, r10
    3e5a:	45 2d       	mov	r20, r5
    3e5c:	54 2d       	mov	r21, r4
    3e5e:	63 2d       	mov	r22, r3
    3e60:	72 2d       	mov	r23, r2
    3e62:	89 81       	ldd	r24, Y+1	; 0x01
    3e64:	9a 81       	ldd	r25, Y+2	; 0x02
    3e66:	eb 85       	ldd	r30, Y+11	; 0x0b
    3e68:	fc 85       	ldd	r31, Y+12	; 0x0c
    3e6a:	09 95       	icall
    3e6c:	88 23       	and	r24, r24
    3e6e:	51 f1       	breq	.+84     	; 0x3ec4 <sd_raw_read_interval+0x122>
            break;
        offset += interval;
    3e70:	2d 2d       	mov	r18, r13
    3e72:	3c 2d       	mov	r19, r12
    3e74:	4b 2d       	mov	r20, r11
    3e76:	5a 2d       	mov	r21, r10
    3e78:	65 2d       	mov	r22, r5
    3e7a:	74 2d       	mov	r23, r4
    3e7c:	83 2d       	mov	r24, r3
    3e7e:	92 2d       	mov	r25, r2
    3e80:	ab 80       	ldd	r10, Y+3	; 0x03
    3e82:	bc 80       	ldd	r11, Y+4	; 0x04
    3e84:	c1 2c       	mov	r12, r1
    3e86:	d1 2c       	mov	r13, r1
    3e88:	e1 2c       	mov	r14, r1
    3e8a:	f1 2c       	mov	r15, r1
    3e8c:	00 e0       	ldi	r16, 0x00	; 0
    3e8e:	10 e0       	ldi	r17, 0x00	; 0
    3e90:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <__adddi3>
    3e94:	d2 2e       	mov	r13, r18
    3e96:	c3 2e       	mov	r12, r19
    3e98:	b4 2e       	mov	r11, r20
    3e9a:	a5 2e       	mov	r10, r21
    3e9c:	56 2e       	mov	r5, r22
    3e9e:	47 2e       	mov	r4, r23
    3ea0:	38 2e       	mov	r3, r24
    3ea2:	29 2e       	mov	r2, r25
        length -= interval;
    3ea4:	68 18       	sub	r6, r8
    3ea6:	79 08       	sbc	r7, r9
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    3ea8:	68 14       	cp	r6, r8
    3eaa:	79 04       	cpc	r7, r9
    3eac:	08 f6       	brcc	.-126    	; 0x3e30 <sd_raw_read_interval+0x8e>
    3eae:	0c c0       	rjmp	.+24     	; 0x3ec8 <sd_raw_read_interval+0x126>
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	0b c0       	rjmp	.+22     	; 0x3eca <sd_raw_read_interval+0x128>
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	09 c0       	rjmp	.+18     	; 0x3eca <sd_raw_read_interval+0x128>
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	07 c0       	rjmp	.+14     	; 0x3eca <sd_raw_read_interval+0x128>
    3ebc:	80 e0       	ldi	r24, 0x00	; 0
    3ebe:	05 c0       	rjmp	.+10     	; 0x3eca <sd_raw_read_interval+0x128>
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	03 c0       	rjmp	.+6      	; 0x3eca <sd_raw_read_interval+0x128>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	01 c0       	rjmp	.+2      	; 0x3eca <sd_raw_read_interval+0x128>
    3ec8:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    3eca:	62 96       	adiw	r28, 0x12	; 18
    3ecc:	cd bf       	out	0x3d, r28	; 61
    3ece:	de bf       	out	0x3e, r29	; 62
    3ed0:	df 91       	pop	r29
    3ed2:	cf 91       	pop	r28
    3ed4:	1f 91       	pop	r17
    3ed6:	0f 91       	pop	r16
    3ed8:	ff 90       	pop	r15
    3eda:	ef 90       	pop	r14
    3edc:	df 90       	pop	r13
    3ede:	cf 90       	pop	r12
    3ee0:	bf 90       	pop	r11
    3ee2:	af 90       	pop	r10
    3ee4:	9f 90       	pop	r9
    3ee6:	8f 90       	pop	r8
    3ee8:	7f 90       	pop	r7
    3eea:	6f 90       	pop	r6
    3eec:	5f 90       	pop	r5
    3eee:	4f 90       	pop	r4
    3ef0:	3f 90       	pop	r3
    3ef2:	2f 90       	pop	r2
    3ef4:	08 95       	ret

00003ef6 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    3ef6:	2f 92       	push	r2
    3ef8:	3f 92       	push	r3
    3efa:	4f 92       	push	r4
    3efc:	5f 92       	push	r5
    3efe:	6f 92       	push	r6
    3f00:	7f 92       	push	r7
    3f02:	8f 92       	push	r8
    3f04:	9f 92       	push	r9
    3f06:	af 92       	push	r10
    3f08:	bf 92       	push	r11
    3f0a:	cf 92       	push	r12
    3f0c:	df 92       	push	r13
    3f0e:	ef 92       	push	r14
    3f10:	ff 92       	push	r15
    3f12:	0f 93       	push	r16
    3f14:	1f 93       	push	r17
    3f16:	cf 93       	push	r28
    3f18:	df 93       	push	r29
    3f1a:	cd b7       	in	r28, 0x3d	; 61
    3f1c:	de b7       	in	r29, 0x3e	; 62
    3f1e:	69 97       	sbiw	r28, 0x19	; 25
    3f20:	cd bf       	out	0x3d, r28	; 61
    3f22:	de bf       	out	0x3e, r29	; 62
    3f24:	29 83       	std	Y+1, r18	; 0x01
    3f26:	3a 83       	std	Y+2, r19	; 0x02
    3f28:	4b 83       	std	Y+3, r20	; 0x03
    3f2a:	5c 83       	std	Y+4, r21	; 0x04
    3f2c:	6d 83       	std	Y+5, r22	; 0x05
    3f2e:	7e 83       	std	Y+6, r23	; 0x06
    3f30:	8f 83       	std	Y+7, r24	; 0x07
    3f32:	98 87       	std	Y+8, r25	; 0x08
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    3f34:	e1 14       	cp	r14, r1
    3f36:	f1 04       	cpc	r15, r1
    3f38:	09 f4       	brne	.+2      	; 0x3f3c <sd_raw_write+0x46>
    3f3a:	0f c1       	rjmp	.+542    	; 0x415a <sd_raw_write+0x264>
    3f3c:	0f 2e       	mov	r0, r31
    3f3e:	f1 e4       	ldi	r31, 0x41	; 65
    3f40:	8f 2e       	mov	r8, r31
    3f42:	f5 e2       	ldi	r31, 0x25	; 37
    3f44:	9f 2e       	mov	r9, r31
    3f46:	f0 2d       	mov	r31, r0
        buffer += write_length;
        offset += write_length;
        length -= write_length;

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    3f48:	17 01       	movw	r2, r14
    3f4a:	28 01       	movw	r4, r16
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    3f4c:	29 81       	ldd	r18, Y+1	; 0x01
    3f4e:	3a 81       	ldd	r19, Y+2	; 0x02
    3f50:	31 70       	andi	r19, 0x01	; 1
    3f52:	28 8f       	std	Y+24, r18	; 0x18
    3f54:	39 8f       	std	Y+25, r19	; 0x19
        block_address = offset - block_offset;
    3f56:	40 e0       	ldi	r20, 0x00	; 0
    3f58:	50 e0       	ldi	r21, 0x00	; 0
    3f5a:	60 e0       	ldi	r22, 0x00	; 0
    3f5c:	70 e0       	ldi	r23, 0x00	; 0
    3f5e:	cb 01       	movw	r24, r22
    3f60:	29 87       	std	Y+9, r18	; 0x09
    3f62:	3a 87       	std	Y+10, r19	; 0x0a
    3f64:	4b 87       	std	Y+11, r20	; 0x0b
    3f66:	5c 87       	std	Y+12, r21	; 0x0c
    3f68:	6d 87       	std	Y+13, r22	; 0x0d
    3f6a:	7e 87       	std	Y+14, r23	; 0x0e
    3f6c:	8f 87       	std	Y+15, r24	; 0x0f
    3f6e:	98 8b       	std	Y+16, r25	; 0x10
    3f70:	29 81       	ldd	r18, Y+1	; 0x01
    3f72:	3a 81       	ldd	r19, Y+2	; 0x02
    3f74:	4b 81       	ldd	r20, Y+3	; 0x03
    3f76:	5c 81       	ldd	r21, Y+4	; 0x04
    3f78:	6d 81       	ldd	r22, Y+5	; 0x05
    3f7a:	7e 81       	ldd	r23, Y+6	; 0x06
    3f7c:	8f 81       	ldd	r24, Y+7	; 0x07
    3f7e:	98 85       	ldd	r25, Y+8	; 0x08
    3f80:	a9 84       	ldd	r10, Y+9	; 0x09
    3f82:	ba 84       	ldd	r11, Y+10	; 0x0a
    3f84:	c1 2c       	mov	r12, r1
    3f86:	d1 2c       	mov	r13, r1
    3f88:	e1 2c       	mov	r14, r1
    3f8a:	f1 2c       	mov	r15, r1
    3f8c:	00 e0       	ldi	r16, 0x00	; 0
    3f8e:	10 e0       	ldi	r17, 0x00	; 0
    3f90:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <__subdi3>
    3f94:	29 87       	std	Y+9, r18	; 0x09
    3f96:	39 8b       	std	Y+17, r19	; 0x11
    3f98:	4a 8b       	std	Y+18, r20	; 0x12
    3f9a:	5b 8b       	std	Y+19, r21	; 0x13
    3f9c:	6c 8b       	std	Y+20, r22	; 0x14
    3f9e:	7d 8b       	std	Y+21, r23	; 0x15
    3fa0:	8e 8b       	std	Y+22, r24	; 0x16
    3fa2:	9f 8b       	std	Y+23, r25	; 0x17
    3fa4:	61 2c       	mov	r6, r1
    3fa6:	68 94       	set
    3fa8:	77 24       	eor	r7, r7
    3faa:	71 f8       	bld	r7, 1
    3fac:	68 8d       	ldd	r22, Y+24	; 0x18
    3fae:	79 8d       	ldd	r23, Y+25	; 0x19
    3fb0:	66 1a       	sub	r6, r22
    3fb2:	77 0a       	sbc	r7, r23
    3fb4:	26 14       	cp	r2, r6
    3fb6:	37 04       	cpc	r3, r7
    3fb8:	08 f4       	brcc	.+2      	; 0x3fbc <sd_raw_write+0xc6>
    3fba:	31 01       	movw	r6, r2
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    3fbc:	a0 90 39 23 	lds	r10, 0x2339
    3fc0:	b0 90 3a 23 	lds	r11, 0x233A
    3fc4:	c0 90 3b 23 	lds	r12, 0x233B
    3fc8:	d0 90 3c 23 	lds	r13, 0x233C
    3fcc:	e0 90 3d 23 	lds	r14, 0x233D
    3fd0:	f0 90 3e 23 	lds	r15, 0x233E
    3fd4:	00 91 3f 23 	lds	r16, 0x233F
    3fd8:	10 91 40 23 	lds	r17, 0x2340
    3fdc:	29 85       	ldd	r18, Y+9	; 0x09
    3fde:	39 89       	ldd	r19, Y+17	; 0x11
    3fe0:	4a 89       	ldd	r20, Y+18	; 0x12
    3fe2:	5b 89       	ldd	r21, Y+19	; 0x13
    3fe4:	6c 89       	ldd	r22, Y+20	; 0x14
    3fe6:	7d 89       	ldd	r23, Y+21	; 0x15
    3fe8:	8e 89       	ldd	r24, Y+22	; 0x16
    3fea:	9f 89       	ldd	r25, Y+23	; 0x17
    3fec:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <__cmpdi2>
    3ff0:	c1 f1       	breq	.+112    	; 0x4062 <sd_raw_write+0x16c>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    3ff2:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <sd_raw_sync>
    3ff6:	88 23       	and	r24, r24
    3ff8:	09 f4       	brne	.+2      	; 0x3ffc <sd_raw_write+0x106>
    3ffa:	b1 c0       	rjmp	.+354    	; 0x415e <sd_raw_write+0x268>
                return 0;
#endif

            if(block_offset || write_length < 512)
    3ffc:	88 8d       	ldd	r24, Y+24	; 0x18
    3ffe:	99 8d       	ldd	r25, Y+25	; 0x19
    4000:	89 2b       	or	r24, r25
    4002:	21 f4       	brne	.+8      	; 0x400c <sd_raw_write+0x116>
    4004:	61 14       	cp	r6, r1
    4006:	92 e0       	ldi	r25, 0x02	; 2
    4008:	79 06       	cpc	r7, r25
    400a:	98 f4       	brcc	.+38     	; 0x4032 <sd_raw_write+0x13c>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    400c:	e1 2c       	mov	r14, r1
    400e:	68 94       	set
    4010:	ff 24       	eor	r15, r15
    4012:	f1 f8       	bld	r15, 1
    4014:	01 e4       	ldi	r16, 0x41	; 65
    4016:	13 e2       	ldi	r17, 0x23	; 35
    4018:	29 85       	ldd	r18, Y+9	; 0x09
    401a:	39 89       	ldd	r19, Y+17	; 0x11
    401c:	4a 89       	ldd	r20, Y+18	; 0x12
    401e:	5b 89       	ldd	r21, Y+19	; 0x13
    4020:	6c 89       	ldd	r22, Y+20	; 0x14
    4022:	7d 89       	ldd	r23, Y+21	; 0x15
    4024:	8e 89       	ldd	r24, Y+22	; 0x16
    4026:	9f 89       	ldd	r25, Y+23	; 0x17
    4028:	0e 94 92 1c 	call	0x3924	; 0x3924 <sd_raw_read>
    402c:	88 23       	and	r24, r24
    402e:	09 f4       	brne	.+2      	; 0x4032 <sd_raw_write+0x13c>
    4030:	98 c0       	rjmp	.+304    	; 0x4162 <sd_raw_write+0x26c>
                    return 0;
            }
            raw_block_address = block_address;
    4032:	e9 85       	ldd	r30, Y+9	; 0x09
    4034:	e0 93 39 23 	sts	0x2339, r30
    4038:	f9 89       	ldd	r31, Y+17	; 0x11
    403a:	f0 93 3a 23 	sts	0x233A, r31
    403e:	2a 89       	ldd	r18, Y+18	; 0x12
    4040:	20 93 3b 23 	sts	0x233B, r18
    4044:	3b 89       	ldd	r19, Y+19	; 0x13
    4046:	30 93 3c 23 	sts	0x233C, r19
    404a:	4c 89       	ldd	r20, Y+20	; 0x14
    404c:	40 93 3d 23 	sts	0x233D, r20
    4050:	5d 89       	ldd	r21, Y+21	; 0x15
    4052:	50 93 3e 23 	sts	0x233E, r21
    4056:	6e 89       	ldd	r22, Y+22	; 0x16
    4058:	60 93 3f 23 	sts	0x233F, r22
    405c:	7f 89       	ldd	r23, Y+23	; 0x17
    405e:	70 93 40 23 	sts	0x2340, r23
        }

        if(buffer != raw_block)
    4062:	81 e4       	ldi	r24, 0x41	; 65
    4064:	48 16       	cp	r4, r24
    4066:	83 e2       	ldi	r24, 0x23	; 35
    4068:	58 06       	cpc	r5, r24
    406a:	71 f0       	breq	.+28     	; 0x4088 <sd_raw_write+0x192>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    406c:	a3 01       	movw	r20, r6
    406e:	b2 01       	movw	r22, r4
    4070:	88 8d       	ldd	r24, Y+24	; 0x18
    4072:	99 8d       	ldd	r25, Y+25	; 0x19
    4074:	8f 5b       	subi	r24, 0xBF	; 191
    4076:	9c 4d       	sbci	r25, 0xDC	; 220
    4078:	0e 94 22 38 	call	0x7044	; 0x7044 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    407c:	10 92 38 23 	sts	0x2338, r1

            if(length == write_length)
    4080:	26 14       	cp	r2, r6
    4082:	37 04       	cpc	r3, r7
    4084:	09 f4       	brne	.+2      	; 0x4088 <sd_raw_write+0x192>
    4086:	6f c0       	rjmp	.+222    	; 0x4166 <sd_raw_write+0x270>
                return 1;
#endif
        }

        /* address card */
        select_card();
    4088:	90 e1       	ldi	r25, 0x10	; 16
    408a:	90 93 86 06 	sts	0x0686, r25

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    408e:	80 91 37 23 	lds	r24, 0x2337
    4092:	82 ff       	sbrs	r24, 2
    4094:	10 c0       	rjmp	.+32     	; 0x40b6 <sd_raw_write+0x1c0>
    4096:	29 85       	ldd	r18, Y+9	; 0x09
    4098:	39 89       	ldd	r19, Y+17	; 0x11
    409a:	4a 89       	ldd	r20, Y+18	; 0x12
    409c:	5b 89       	ldd	r21, Y+19	; 0x13
    409e:	6c 89       	ldd	r22, Y+20	; 0x14
    40a0:	7d 89       	ldd	r23, Y+21	; 0x15
    40a2:	8e 89       	ldd	r24, Y+22	; 0x16
    40a4:	9f 89       	ldd	r25, Y+23	; 0x17
    40a6:	09 e0       	ldi	r16, 0x09	; 9
    40a8:	0e 94 cc 35 	call	0x6b98	; 0x6b98 <__lshrdi3>
    40ac:	64 2f       	mov	r22, r20
    40ae:	75 2f       	mov	r23, r21
    40b0:	42 2f       	mov	r20, r18
    40b2:	53 2f       	mov	r21, r19
    40b4:	04 c0       	rjmp	.+8      	; 0x40be <sd_raw_write+0x1c8>
    40b6:	49 85       	ldd	r20, Y+9	; 0x09
    40b8:	59 89       	ldd	r21, Y+17	; 0x11
    40ba:	6a 89       	ldd	r22, Y+18	; 0x12
    40bc:	7b 89       	ldd	r23, Y+19	; 0x13
    40be:	88 e1       	ldi	r24, 0x18	; 24
    40c0:	0e 94 28 1c 	call	0x3850	; 0x3850 <sd_raw_send_command>
    40c4:	88 23       	and	r24, r24
    40c6:	31 f0       	breq	.+12     	; 0x40d4 <sd_raw_write+0x1de>
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
#endif
        {
            unselect_card();
    40c8:	80 e1       	ldi	r24, 0x10	; 16
    40ca:	e0 e8       	ldi	r30, 0x80	; 128
    40cc:	f6 e0       	ldi	r31, 0x06	; 6
    40ce:	85 83       	std	Z+5, r24	; 0x05
            return 0;
    40d0:	80 e0       	ldi	r24, 0x00	; 0
    40d2:	4c c0       	rjmp	.+152    	; 0x416c <sd_raw_write+0x276>
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
    40d4:	8e ef       	ldi	r24, 0xFE	; 254
    40d6:	0e 94 16 1c 	call	0x382c	; 0x382c <sd_raw_send_byte>
    40da:	01 e4       	ldi	r16, 0x41	; 65
    40dc:	13 e2       	ldi	r17, 0x23	; 35

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    40de:	f8 01       	movw	r30, r16
    40e0:	81 91       	ld	r24, Z+
    40e2:	8f 01       	movw	r16, r30
    40e4:	0e 94 16 1c 	call	0x382c	; 0x382c <sd_raw_send_byte>
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    40e8:	08 15       	cp	r16, r8
    40ea:	19 05       	cpc	r17, r9
    40ec:	c1 f7       	brne	.-16     	; 0x40de <sd_raw_write+0x1e8>
            sd_raw_send_byte(*cache++);

        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
    40ee:	8f ef       	ldi	r24, 0xFF	; 255
    40f0:	0e 94 16 1c 	call	0x382c	; 0x382c <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
    40f4:	8f ef       	ldi	r24, 0xFF	; 255
    40f6:	0e 94 16 1c 	call	0x382c	; 0x382c <sd_raw_send_byte>

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    40fa:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>
    40fe:	8f 3f       	cpi	r24, 0xFF	; 255
    4100:	e1 f7       	brne	.-8      	; 0x40fa <sd_raw_write+0x204>
        sd_raw_rec_byte();
    4102:	0e 94 1d 1c 	call	0x383a	; 0x383a <sd_raw_rec_byte>

        /* deaddress card */
        unselect_card();
    4106:	f0 e1       	ldi	r31, 0x10	; 16
    4108:	f0 93 85 06 	sts	0x0685, r31

        buffer += write_length;
    410c:	46 0c       	add	r4, r6
    410e:	57 1c       	adc	r5, r7
        offset += write_length;
    4110:	53 01       	movw	r10, r6
    4112:	26 2d       	mov	r18, r6
    4114:	3b 2d       	mov	r19, r11
    4116:	40 e0       	ldi	r20, 0x00	; 0
    4118:	50 e0       	ldi	r21, 0x00	; 0
    411a:	60 e0       	ldi	r22, 0x00	; 0
    411c:	70 e0       	ldi	r23, 0x00	; 0
    411e:	80 e0       	ldi	r24, 0x00	; 0
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	a9 80       	ldd	r10, Y+1	; 0x01
    4124:	ba 80       	ldd	r11, Y+2	; 0x02
    4126:	cb 80       	ldd	r12, Y+3	; 0x03
    4128:	dc 80       	ldd	r13, Y+4	; 0x04
    412a:	ed 80       	ldd	r14, Y+5	; 0x05
    412c:	fe 80       	ldd	r15, Y+6	; 0x06
    412e:	0f 81       	ldd	r16, Y+7	; 0x07
    4130:	18 85       	ldd	r17, Y+8	; 0x08
    4132:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <__adddi3>
    4136:	29 83       	std	Y+1, r18	; 0x01
    4138:	3a 83       	std	Y+2, r19	; 0x02
    413a:	4b 83       	std	Y+3, r20	; 0x03
    413c:	5c 83       	std	Y+4, r21	; 0x04
    413e:	6d 83       	std	Y+5, r22	; 0x05
    4140:	7e 83       	std	Y+6, r23	; 0x06
    4142:	8f 83       	std	Y+7, r24	; 0x07
    4144:	98 87       	std	Y+8, r25	; 0x08
        length -= write_length;
    4146:	26 18       	sub	r2, r6
    4148:	37 08       	sbc	r3, r7

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    414a:	21 e0       	ldi	r18, 0x01	; 1
    414c:	20 93 38 23 	sts	0x2338, r18
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    4150:	21 14       	cp	r2, r1
    4152:	31 04       	cpc	r3, r1
    4154:	09 f0       	breq	.+2      	; 0x4158 <sd_raw_write+0x262>
    4156:	fa ce       	rjmp	.-524    	; 0x3f4c <sd_raw_write+0x56>
    4158:	08 c0       	rjmp	.+16     	; 0x416a <sd_raw_write+0x274>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
    415a:	81 e0       	ldi	r24, 0x01	; 1
    415c:	07 c0       	rjmp	.+14     	; 0x416c <sd_raw_write+0x276>
         */
        if(block_address != raw_block_address)
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
                return 0;
    415e:	80 e0       	ldi	r24, 0x00	; 0
    4160:	05 c0       	rjmp	.+10     	; 0x416c <sd_raw_write+0x276>
#endif

            if(block_offset || write_length < 512)
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
                    return 0;
    4162:	80 e0       	ldi	r24, 0x00	; 0
    4164:	03 c0       	rjmp	.+6      	; 0x416c <sd_raw_write+0x276>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;

            if(length == write_length)
                return 1;
    4166:	81 e0       	ldi	r24, 0x01	; 1
    4168:	01 c0       	rjmp	.+2      	; 0x416c <sd_raw_write+0x276>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
    416a:	81 e0       	ldi	r24, 0x01	; 1
}
    416c:	69 96       	adiw	r28, 0x19	; 25
    416e:	cd bf       	out	0x3d, r28	; 61
    4170:	de bf       	out	0x3e, r29	; 62
    4172:	df 91       	pop	r29
    4174:	cf 91       	pop	r28
    4176:	1f 91       	pop	r17
    4178:	0f 91       	pop	r16
    417a:	ff 90       	pop	r15
    417c:	ef 90       	pop	r14
    417e:	df 90       	pop	r13
    4180:	cf 90       	pop	r12
    4182:	bf 90       	pop	r11
    4184:	af 90       	pop	r10
    4186:	9f 90       	pop	r9
    4188:	8f 90       	pop	r8
    418a:	7f 90       	pop	r7
    418c:	6f 90       	pop	r6
    418e:	5f 90       	pop	r5
    4190:	4f 90       	pop	r4
    4192:	3f 90       	pop	r3
    4194:	2f 90       	pop	r2
    4196:	08 95       	ret

00004198 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    4198:	2f 92       	push	r2
    419a:	3f 92       	push	r3
    419c:	4f 92       	push	r4
    419e:	5f 92       	push	r5
    41a0:	6f 92       	push	r6
    41a2:	7f 92       	push	r7
    41a4:	8f 92       	push	r8
    41a6:	9f 92       	push	r9
    41a8:	af 92       	push	r10
    41aa:	bf 92       	push	r11
    41ac:	cf 92       	push	r12
    41ae:	df 92       	push	r13
    41b0:	ef 92       	push	r14
    41b2:	ff 92       	push	r15
    41b4:	0f 93       	push	r16
    41b6:	1f 93       	push	r17
    41b8:	cf 93       	push	r28
    41ba:	df 93       	push	r29
    41bc:	cd b7       	in	r28, 0x3d	; 61
    41be:	de b7       	in	r29, 0x3e	; 62
    41c0:	29 97       	sbiw	r28, 0x09	; 9
    41c2:	cd bf       	out	0x3d, r28	; 61
    41c4:	de bf       	out	0x3e, r29	; 62
    41c6:	28 87       	std	Y+8, r18	; 0x08
    41c8:	3d 83       	std	Y+5, r19	; 0x05
    41ca:	56 2e       	mov	r5, r22
    41cc:	47 2e       	mov	r4, r23
    41ce:	09 83       	std	Y+1, r16	; 0x01
    41d0:	1a 83       	std	Y+2, r17	; 0x02
    41d2:	cb 82       	std	Y+3, r12	; 0x03
    41d4:	dc 82       	std	Y+4, r13	; 0x04
    41d6:	ae 82       	std	Y+6, r10	; 0x06
    41d8:	bf 82       	std	Y+7, r11	; 0x07
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    41da:	01 2b       	or	r16, r17
    41dc:	09 f4       	brne	.+2      	; 0x41e0 <sd_raw_write_interval+0x48>
    41de:	46 c0       	rjmp	.+140    	; 0x426c <sd_raw_write_interval+0xd4>
    41e0:	cd 28       	or	r12, r13
    41e2:	09 f4       	brne	.+2      	; 0x41e6 <sd_raw_write_interval+0x4e>
    41e4:	45 c0       	rjmp	.+138    	; 0x4270 <sd_raw_write_interval+0xd8>
    41e6:	47 01       	movw	r8, r14
    41e8:	a2 2e       	mov	r10, r18
    41ea:	b3 2e       	mov	r11, r19
    41ec:	c4 2e       	mov	r12, r20
    41ee:	d5 2e       	mov	r13, r21
    41f0:	78 2e       	mov	r7, r24
    41f2:	69 2e       	mov	r6, r25
    41f4:	17 01       	movw	r2, r14
    41f6:	32 c0       	rjmp	.+100    	; 0x425c <sd_raw_write_interval+0xc4>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
    41f8:	28 85       	ldd	r18, Y+8	; 0x08
    41fa:	39 85       	ldd	r19, Y+9	; 0x09
    41fc:	82 16       	cp	r8, r18
    41fe:	93 06       	cpc	r9, r19
    4200:	c8 f1       	brcs	.+114    	; 0x4274 <sd_raw_write_interval+0xdc>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    4202:	e8 84       	ldd	r14, Y+8	; 0x08
    4204:	f9 84       	ldd	r15, Y+9	; 0x09
    4206:	09 81       	ldd	r16, Y+1	; 0x01
    4208:	1a 81       	ldd	r17, Y+2	; 0x02
    420a:	2a 2d       	mov	r18, r10
    420c:	3b 2d       	mov	r19, r11
    420e:	4c 2d       	mov	r20, r12
    4210:	5d 2d       	mov	r21, r13
    4212:	65 2d       	mov	r22, r5
    4214:	74 2d       	mov	r23, r4
    4216:	87 2d       	mov	r24, r7
    4218:	96 2d       	mov	r25, r6
    421a:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <sd_raw_write>
    421e:	88 23       	and	r24, r24
    4220:	59 f1       	breq	.+86     	; 0x4278 <sd_raw_write_interval+0xe0>
            return 0;

        offset += bytes_to_write;
    4222:	e8 84       	ldd	r14, Y+8	; 0x08
    4224:	f9 84       	ldd	r15, Y+9	; 0x09
    4226:	a7 01       	movw	r20, r14
    4228:	2e 2d       	mov	r18, r14
    422a:	35 2f       	mov	r19, r21
    422c:	40 e0       	ldi	r20, 0x00	; 0
    422e:	50 e0       	ldi	r21, 0x00	; 0
    4230:	60 e0       	ldi	r22, 0x00	; 0
    4232:	70 e0       	ldi	r23, 0x00	; 0
    4234:	80 e0       	ldi	r24, 0x00	; 0
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	e5 2c       	mov	r14, r5
    423a:	f4 2c       	mov	r15, r4
    423c:	07 2d       	mov	r16, r7
    423e:	16 2d       	mov	r17, r6
    4240:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <__adddi3>
    4244:	a2 2e       	mov	r10, r18
    4246:	b3 2e       	mov	r11, r19
    4248:	c4 2e       	mov	r12, r20
    424a:	d5 2e       	mov	r13, r21
    424c:	56 2e       	mov	r5, r22
    424e:	47 2e       	mov	r4, r23
    4250:	78 2e       	mov	r7, r24
    4252:	69 2e       	mov	r6, r25
        length -= bytes_to_write;
    4254:	88 85       	ldd	r24, Y+8	; 0x08
    4256:	99 85       	ldd	r25, Y+9	; 0x09
    4258:	88 1a       	sub	r8, r24
    425a:	99 0a       	sbc	r9, r25

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    425c:	21 14       	cp	r2, r1
    425e:	31 04       	cpc	r3, r1
    4260:	31 f1       	breq	.+76     	; 0x42ae <sd_raw_write_interval+0x116>
    4262:	81 14       	cp	r8, r1
    4264:	91 04       	cpc	r9, r1
    4266:	71 f4       	brne	.+28     	; 0x4284 <sd_raw_write_interval+0xec>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    4268:	81 e0       	ldi	r24, 0x01	; 1
    426a:	36 c0       	rjmp	.+108    	; 0x42d8 <sd_raw_write_interval+0x140>
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
        return 0;
    426c:	80 e0       	ldi	r24, 0x00	; 0
    426e:	34 c0       	rjmp	.+104    	; 0x42d8 <sd_raw_write_interval+0x140>
    4270:	80 e0       	ldi	r24, 0x00	; 0
    4272:	32 c0       	rjmp	.+100    	; 0x42d8 <sd_raw_write_interval+0x140>
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
            return 0;
    4274:	80 e0       	ldi	r24, 0x00	; 0
    4276:	30 c0       	rjmp	.+96     	; 0x42d8 <sd_raw_write_interval+0x140>

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
            return 0;
    4278:	80 e0       	ldi	r24, 0x00	; 0
    427a:	2e c0       	rjmp	.+92     	; 0x42d8 <sd_raw_write_interval+0x140>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    427c:	81 e0       	ldi	r24, 0x01	; 1
    427e:	2c c0       	rjmp	.+88     	; 0x42d8 <sd_raw_write_interval+0x140>
    4280:	81 e0       	ldi	r24, 0x01	; 1
    4282:	2a c0       	rjmp	.+84     	; 0x42d8 <sd_raw_write_interval+0x140>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    4284:	ee 80       	ldd	r14, Y+6	; 0x06
    4286:	ff 80       	ldd	r15, Y+7	; 0x07
    4288:	0a 2d       	mov	r16, r10
    428a:	1b 2d       	mov	r17, r11
    428c:	2c 2d       	mov	r18, r12
    428e:	3d 2d       	mov	r19, r13
    4290:	45 2d       	mov	r20, r5
    4292:	54 2d       	mov	r21, r4
    4294:	67 2d       	mov	r22, r7
    4296:	76 2d       	mov	r23, r6
    4298:	89 81       	ldd	r24, Y+1	; 0x01
    429a:	9a 81       	ldd	r25, Y+2	; 0x02
    429c:	eb 81       	ldd	r30, Y+3	; 0x03
    429e:	fc 81       	ldd	r31, Y+4	; 0x04
    42a0:	09 95       	icall
    42a2:	88 87       	std	Y+8, r24	; 0x08
    42a4:	99 87       	std	Y+9, r25	; 0x09
        if(!bytes_to_write)
    42a6:	89 2b       	or	r24, r25
    42a8:	09 f0       	breq	.+2      	; 0x42ac <sd_raw_write_interval+0x114>
    42aa:	a6 cf       	rjmp	.-180    	; 0x41f8 <sd_raw_write_interval+0x60>
    42ac:	e7 cf       	rjmp	.-50     	; 0x427c <sd_raw_write_interval+0xe4>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    42ae:	ee 80       	ldd	r14, Y+6	; 0x06
    42b0:	ff 80       	ldd	r15, Y+7	; 0x07
    42b2:	0a 2d       	mov	r16, r10
    42b4:	1b 2d       	mov	r17, r11
    42b6:	2c 2d       	mov	r18, r12
    42b8:	3d 2d       	mov	r19, r13
    42ba:	45 2d       	mov	r20, r5
    42bc:	54 2d       	mov	r21, r4
    42be:	67 2d       	mov	r22, r7
    42c0:	76 2d       	mov	r23, r6
    42c2:	89 81       	ldd	r24, Y+1	; 0x01
    42c4:	9a 81       	ldd	r25, Y+2	; 0x02
    42c6:	eb 81       	ldd	r30, Y+3	; 0x03
    42c8:	fc 81       	ldd	r31, Y+4	; 0x04
    42ca:	09 95       	icall
    42cc:	88 87       	std	Y+8, r24	; 0x08
    42ce:	99 87       	std	Y+9, r25	; 0x09
        if(!bytes_to_write)
    42d0:	89 2b       	or	r24, r25
    42d2:	09 f0       	breq	.+2      	; 0x42d6 <sd_raw_write_interval+0x13e>
    42d4:	96 cf       	rjmp	.-212    	; 0x4202 <sd_raw_write_interval+0x6a>
    42d6:	d4 cf       	rjmp	.-88     	; 0x4280 <sd_raw_write_interval+0xe8>
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    42d8:	29 96       	adiw	r28, 0x09	; 9
    42da:	cd bf       	out	0x3d, r28	; 61
    42dc:	de bf       	out	0x3e, r29	; 62
    42de:	df 91       	pop	r29
    42e0:	cf 91       	pop	r28
    42e2:	1f 91       	pop	r17
    42e4:	0f 91       	pop	r16
    42e6:	ff 90       	pop	r15
    42e8:	ef 90       	pop	r14
    42ea:	df 90       	pop	r13
    42ec:	cf 90       	pop	r12
    42ee:	bf 90       	pop	r11
    42f0:	af 90       	pop	r10
    42f2:	9f 90       	pop	r9
    42f4:	8f 90       	pop	r8
    42f6:	7f 90       	pop	r7
    42f8:	6f 90       	pop	r6
    42fa:	5f 90       	pop	r5
    42fc:	4f 90       	pop	r4
    42fe:	3f 90       	pop	r3
    4300:	2f 90       	pop	r2
    4302:	08 95       	ret

00004304 <sd_card_open>:
	
	
}	
//########################################################################################## 
void sd_card_open(void) //Logging File auf SD-Karte oeffnen und auf das Ende positionieren. 
{
    4304:	0f 93       	push	r16
	if (card_open == 1) return;
    4306:	80 91 41 25 	lds	r24, 0x2541
    430a:	81 30       	cpi	r24, 0x01	; 1
    430c:	09 f4       	brne	.+2      	; 0x4310 <sd_card_open+0xc>
    430e:	54 c0       	rjmp	.+168    	; 0x43b8 <sd_card_open+0xb4>
	
    //############# setup sd card slot 
	if(!sd_raw_init())	
    4310:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <sd_raw_init>
    4314:	81 11       	cpse	r24, r1
    4316:	09 c0       	rjmp	.+18     	; 0x432a <sd_card_open+0x26>
	{
		printf("#MMC/SD initialization failed\r");
    4318:	8a e2       	ldi	r24, 0x2A	; 42
    431a:	92 e2       	ldi	r25, 0x22	; 34
    431c:	9f 93       	push	r25
    431e:	8f 93       	push	r24
    4320:	0e 94 81 38 	call	0x7102	; 0x7102 <printf>
    4324:	0f 90       	pop	r0
    4326:	0f 90       	pop	r0
    4328:	47 c0       	rjmp	.+142    	; 0x43b8 <sd_card_open+0xb4>
	}
	else
	{   
	card_open=1;
    432a:	81 e0       	ldi	r24, 0x01	; 1
    432c:	80 93 41 25 	sts	0x2541, r24
//############# open first partition 
	partition = partition_open(	sd_raw_read,sd_raw_read_interval,sd_raw_write,sd_raw_write_interval,0);
    4330:	00 e0       	ldi	r16, 0x00	; 0
    4332:	2c ec       	ldi	r18, 0xCC	; 204
    4334:	30 e2       	ldi	r19, 0x20	; 32
    4336:	4b e7       	ldi	r20, 0x7B	; 123
    4338:	5f e1       	ldi	r21, 0x1F	; 31
    433a:	61 ed       	ldi	r22, 0xD1	; 209
    433c:	7e e1       	ldi	r23, 0x1E	; 30
    433e:	82 e9       	ldi	r24, 0x92	; 146
    4340:	9c e1       	ldi	r25, 0x1C	; 28
    4342:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <partition_open>
    4346:	80 93 14 27 	sts	0x2714, r24
    434a:	90 93 15 27 	sts	0x2715, r25
	
	// If the partition did not open, assume the storage device is a "superfloppy", i.e. has no MBR.
	if(!partition)
    434e:	89 2b       	or	r24, r25
    4350:	79 f4       	brne	.+30     	; 0x4370 <sd_card_open+0x6c>
		{   
		partition = partition_open(sd_raw_read,sd_raw_read_interval,sd_raw_write,sd_raw_write_interval,-1);
    4352:	0f ef       	ldi	r16, 0xFF	; 255
    4354:	2c ec       	ldi	r18, 0xCC	; 204
    4356:	30 e2       	ldi	r19, 0x20	; 32
    4358:	4b e7       	ldi	r20, 0x7B	; 123
    435a:	5f e1       	ldi	r21, 0x1F	; 31
    435c:	61 ed       	ldi	r22, 0xD1	; 209
    435e:	7e e1       	ldi	r23, 0x1E	; 30
    4360:	82 e9       	ldi	r24, 0x92	; 146
    4362:	9c e1       	ldi	r25, 0x1C	; 28
    4364:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <partition_open>
    4368:	80 93 14 27 	sts	0x2714, r24
    436c:	90 93 15 27 	sts	0x2715, r25
#endif			
			}
		}

	//############# open file system 
	fs = fat_open(partition);
    4370:	80 91 14 27 	lds	r24, 0x2714
    4374:	90 91 15 27 	lds	r25, 0x2715
    4378:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <fat_open>
    437c:	80 93 ae 26 	sts	0x26AE, r24
    4380:	90 93 af 26 	sts	0x26AF, r25
		usart_puts(&USARTD0_data,"#opening filesystem failed\r");
#endif		
		}

	//############# open root directory
	fat_get_dir_entry_of_path(fs, "/", &directory);
    4384:	41 ee       	ldi	r20, 0xE1	; 225
    4386:	56 e2       	ldi	r21, 0x26	; 38
    4388:	69 e4       	ldi	r22, 0x49	; 73
    438a:	72 e2       	ldi	r23, 0x22	; 34
    438c:	0e 94 c8 1a 	call	0x3590	; 0x3590 <fat_get_dir_entry_of_path>

	dd = fat_open_dir(fs, &directory);
    4390:	61 ee       	ldi	r22, 0xE1	; 225
    4392:	76 e2       	ldi	r23, 0x26	; 38
    4394:	80 91 ae 26 	lds	r24, 0x26AE
    4398:	90 91 af 26 	lds	r25, 0x26AF
    439c:	0e 94 3d 19 	call	0x327a	; 0x327a <fat_open_dir>
    43a0:	80 93 16 27 	sts	0x2716, r24
    43a4:	90 93 17 27 	sts	0x2717, r25
	print_disk_info(fs);	//print some card information as a boot message 
	sd_get_Directory();		//print directory entry
#endif	
	
//############
	printf("#Card open\r"); 		
    43a8:	8b e4       	ldi	r24, 0x4B	; 75
    43aa:	92 e2       	ldi	r25, 0x22	; 34
    43ac:	9f 93       	push	r25
    43ae:	8f 93       	push	r24
    43b0:	0e 94 81 38 	call	0x7102	; 0x7102 <printf>
    43b4:	0f 90       	pop	r0
    43b6:	0f 90       	pop	r0
	}
}
    43b8:	0f 91       	pop	r16
    43ba:	08 95       	ret

000043bc <u8g_draw_circle_section>:
/*=========================================================================*/

static void u8g_draw_circle_section(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t x0, u8g_uint_t y0, uint8_t option) U8G_NOINLINE;

static void u8g_draw_circle_section(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t x0, u8g_uint_t y0, uint8_t option)
{
    43bc:	df 92       	push	r13
    43be:	ef 92       	push	r14
    43c0:	ff 92       	push	r15
    43c2:	0f 93       	push	r16
    43c4:	1f 93       	push	r17
    43c6:	cf 93       	push	r28
    43c8:	df 93       	push	r29
    43ca:	ec 01       	movw	r28, r24
    43cc:	d6 2e       	mov	r13, r22
    43ce:	14 2f       	mov	r17, r20
    43d0:	f2 2e       	mov	r15, r18
    /* upper right */
    if ( option & U8G_DRAW_UPPER_RIGHT )
    43d2:	e0 fe       	sbrs	r14, 0
    43d4:	0d c0       	rjmp	.+26     	; 0x43f0 <u8g_draw_circle_section+0x34>
    {
      u8g_DrawPixel(u8g, x0 + x, y0 - y);
    43d6:	40 2f       	mov	r20, r16
    43d8:	41 1b       	sub	r20, r17
    43da:	62 2f       	mov	r22, r18
    43dc:	6d 0d       	add	r22, r13
    43de:	0e 94 83 29 	call	0x5306	; 0x5306 <u8g_DrawPixel>
      u8g_DrawPixel(u8g, x0 + y, y0 - x);
    43e2:	40 2f       	mov	r20, r16
    43e4:	4d 19       	sub	r20, r13
    43e6:	61 2f       	mov	r22, r17
    43e8:	6f 0d       	add	r22, r15
    43ea:	ce 01       	movw	r24, r28
    43ec:	0e 94 83 29 	call	0x5306	; 0x5306 <u8g_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G_DRAW_UPPER_LEFT )
    43f0:	e1 fe       	sbrs	r14, 1
    43f2:	0e c0       	rjmp	.+28     	; 0x4410 <u8g_draw_circle_section+0x54>
    {
      u8g_DrawPixel(u8g, x0 - x, y0 - y);
    43f4:	40 2f       	mov	r20, r16
    43f6:	41 1b       	sub	r20, r17
    43f8:	6f 2d       	mov	r22, r15
    43fa:	6d 19       	sub	r22, r13
    43fc:	ce 01       	movw	r24, r28
    43fe:	0e 94 83 29 	call	0x5306	; 0x5306 <u8g_DrawPixel>
      u8g_DrawPixel(u8g, x0 - y, y0 - x);
    4402:	40 2f       	mov	r20, r16
    4404:	4d 19       	sub	r20, r13
    4406:	6f 2d       	mov	r22, r15
    4408:	61 1b       	sub	r22, r17
    440a:	ce 01       	movw	r24, r28
    440c:	0e 94 83 29 	call	0x5306	; 0x5306 <u8g_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G_DRAW_LOWER_RIGHT )
    4410:	e3 fe       	sbrs	r14, 3
    4412:	0e c0       	rjmp	.+28     	; 0x4430 <u8g_draw_circle_section+0x74>
    {
      u8g_DrawPixel(u8g, x0 + x, y0 + y);
    4414:	40 2f       	mov	r20, r16
    4416:	41 0f       	add	r20, r17
    4418:	6f 2d       	mov	r22, r15
    441a:	6d 0d       	add	r22, r13
    441c:	ce 01       	movw	r24, r28
    441e:	0e 94 83 29 	call	0x5306	; 0x5306 <u8g_DrawPixel>
      u8g_DrawPixel(u8g, x0 + y, y0 + x);
    4422:	40 2f       	mov	r20, r16
    4424:	4d 0d       	add	r20, r13
    4426:	61 2f       	mov	r22, r17
    4428:	6f 0d       	add	r22, r15
    442a:	ce 01       	movw	r24, r28
    442c:	0e 94 83 29 	call	0x5306	; 0x5306 <u8g_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G_DRAW_LOWER_LEFT )
    4430:	e2 fe       	sbrs	r14, 2
    4432:	0e c0       	rjmp	.+28     	; 0x4450 <u8g_draw_circle_section+0x94>
    {
      u8g_DrawPixel(u8g, x0 - x, y0 + y);
    4434:	40 2f       	mov	r20, r16
    4436:	41 0f       	add	r20, r17
    4438:	6f 2d       	mov	r22, r15
    443a:	6d 19       	sub	r22, r13
    443c:	ce 01       	movw	r24, r28
    443e:	0e 94 83 29 	call	0x5306	; 0x5306 <u8g_DrawPixel>
      u8g_DrawPixel(u8g, x0 - y, y0 + x);
    4442:	40 2f       	mov	r20, r16
    4444:	4d 0d       	add	r20, r13
    4446:	6f 2d       	mov	r22, r15
    4448:	61 1b       	sub	r22, r17
    444a:	ce 01       	movw	r24, r28
    444c:	0e 94 83 29 	call	0x5306	; 0x5306 <u8g_DrawPixel>
    }
}
    4450:	df 91       	pop	r29
    4452:	cf 91       	pop	r28
    4454:	1f 91       	pop	r17
    4456:	0f 91       	pop	r16
    4458:	ff 90       	pop	r15
    445a:	ef 90       	pop	r14
    445c:	df 90       	pop	r13
    445e:	08 95       	ret

00004460 <u8g_draw_circle>:

void u8g_draw_circle(u8g_t *u8g, u8g_uint_t x0, u8g_uint_t y0, u8g_uint_t rad, uint8_t option)
{
    4460:	8f 92       	push	r8
    4462:	9f 92       	push	r9
    4464:	af 92       	push	r10
    4466:	bf 92       	push	r11
    4468:	cf 92       	push	r12
    446a:	df 92       	push	r13
    446c:	ef 92       	push	r14
    446e:	ff 92       	push	r15
    4470:	0f 93       	push	r16
    4472:	1f 93       	push	r17
    4474:	cf 93       	push	r28
    4476:	df 93       	push	r29
    4478:	ec 01       	movw	r28, r24
    447a:	a6 2e       	mov	r10, r22
    447c:	94 2e       	mov	r9, r20
    447e:	d2 2e       	mov	r13, r18
    4480:	80 2e       	mov	r8, r16
    u8g_int_t ddF_y;
    u8g_uint_t x;
    u8g_uint_t y;

    f = 1;
    f -= rad;
    4482:	11 e0       	ldi	r17, 0x01	; 1
    4484:	12 1b       	sub	r17, r18
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
    4486:	b2 2e       	mov	r11, r18
    4488:	b1 94       	neg	r11
    ddF_y *= 2;
    448a:	bb 0c       	add	r11, r11
    x = 0;
    y = rad;

    u8g_draw_circle_section(u8g, x, y, x0, y0, option);
    448c:	e0 2e       	mov	r14, r16
    448e:	04 2f       	mov	r16, r20
    4490:	26 2f       	mov	r18, r22
    4492:	4d 2d       	mov	r20, r13
    4494:	60 e0       	ldi	r22, 0x00	; 0
    4496:	0e 94 de 21 	call	0x43bc	; 0x43bc <u8g_draw_circle_section>
    
    while ( x < y )
    449a:	dd 20       	and	r13, r13
    449c:	c9 f0       	breq	.+50     	; 0x44d0 <u8g_draw_circle+0x70>
    449e:	0f 2e       	mov	r0, r31
    44a0:	f3 e0       	ldi	r31, 0x03	; 3
    44a2:	cf 2e       	mov	r12, r31
    44a4:	f0 2d       	mov	r31, r0
    f -= rad;
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
    ddF_y *= 2;
    x = 0;
    44a6:	f1 2c       	mov	r15, r1

    u8g_draw_circle_section(u8g, x, y, x0, y0, option);
    
    while ( x < y )
    {
      if (f >= 0) 
    44a8:	11 23       	and	r17, r17
    44aa:	24 f0       	brlt	.+8      	; 0x44b4 <u8g_draw_circle+0x54>
      {
        y--;
    44ac:	da 94       	dec	r13
        ddF_y += 2;
    44ae:	b3 94       	inc	r11
    44b0:	b3 94       	inc	r11
        f += ddF_y;
    44b2:	1b 0d       	add	r17, r11
      }
      x++;
    44b4:	f3 94       	inc	r15
      ddF_x += 2;
      f += ddF_x;
    44b6:	1c 0d       	add	r17, r12

      u8g_draw_circle_section(u8g, x, y, x0, y0, option);    
    44b8:	e8 2c       	mov	r14, r8
    44ba:	09 2d       	mov	r16, r9
    44bc:	2a 2d       	mov	r18, r10
    44be:	4d 2d       	mov	r20, r13
    44c0:	6f 2d       	mov	r22, r15
    44c2:	ce 01       	movw	r24, r28
    44c4:	0e 94 de 21 	call	0x43bc	; 0x43bc <u8g_draw_circle_section>
    44c8:	c3 94       	inc	r12
    44ca:	c3 94       	inc	r12
    x = 0;
    y = rad;

    u8g_draw_circle_section(u8g, x, y, x0, y0, option);
    
    while ( x < y )
    44cc:	fd 14       	cp	r15, r13
    44ce:	60 f3       	brcs	.-40     	; 0x44a8 <u8g_draw_circle+0x48>
      ddF_x += 2;
      f += ddF_x;

      u8g_draw_circle_section(u8g, x, y, x0, y0, option);    
    }
}
    44d0:	df 91       	pop	r29
    44d2:	cf 91       	pop	r28
    44d4:	1f 91       	pop	r17
    44d6:	0f 91       	pop	r16
    44d8:	ff 90       	pop	r15
    44da:	ef 90       	pop	r14
    44dc:	df 90       	pop	r13
    44de:	cf 90       	pop	r12
    44e0:	bf 90       	pop	r11
    44e2:	af 90       	pop	r10
    44e4:	9f 90       	pop	r9
    44e6:	8f 90       	pop	r8
    44e8:	08 95       	ret

000044ea <u8g_DrawCircle>:

void u8g_DrawCircle(u8g_t *u8g, u8g_uint_t x0, u8g_uint_t y0, u8g_uint_t rad, uint8_t option)
{
    44ea:	df 92       	push	r13
    44ec:	ef 92       	push	r14
    44ee:	ff 92       	push	r15
    44f0:	0f 93       	push	r16
    44f2:	1f 93       	push	r17
    44f4:	cf 93       	push	r28
    44f6:	df 93       	push	r29
    44f8:	ec 01       	movw	r28, r24
    44fa:	16 2f       	mov	r17, r22
    44fc:	f4 2e       	mov	r15, r20
    44fe:	e2 2e       	mov	r14, r18
    4500:	d0 2e       	mov	r13, r16
  /* check for bounding box */
  {
    u8g_uint_t radp, radp2;
    
    radp = rad;
    radp++;
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	82 0f       	add	r24, r18
    radp2 = radp;
    radp2 *= 2;
    4506:	28 2f       	mov	r18, r24
    4508:	22 0f       	add	r18, r18
    
    if ( u8g_IsBBXIntersection(u8g, x0-radp, y0-radp, radp2, radp2) == 0)
    450a:	48 1b       	sub	r20, r24
    450c:	68 1b       	sub	r22, r24
    450e:	02 2f       	mov	r16, r18
    4510:	ce 01       	movw	r24, r28
    4512:	0e 94 9c 22 	call	0x4538	; 0x4538 <u8g_IsBBXIntersection>
    4516:	88 23       	and	r24, r24
    4518:	39 f0       	breq	.+14     	; 0x4528 <u8g_DrawCircle+0x3e>
      return;    
  }
  
  /* draw circle */
  u8g_draw_circle(u8g, x0, y0, rad, option);
    451a:	0d 2d       	mov	r16, r13
    451c:	2e 2d       	mov	r18, r14
    451e:	4f 2d       	mov	r20, r15
    4520:	61 2f       	mov	r22, r17
    4522:	ce 01       	movw	r24, r28
    4524:	0e 94 30 22 	call	0x4460	; 0x4460 <u8g_draw_circle>
}
    4528:	df 91       	pop	r29
    452a:	cf 91       	pop	r28
    452c:	1f 91       	pop	r17
    452e:	0f 91       	pop	r16
    4530:	ff 90       	pop	r15
    4532:	ef 90       	pop	r14
    4534:	df 90       	pop	r13
    4536:	08 95       	ret

00004538 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    4538:	0f 93       	push	r16
    453a:	fc 01       	movw	r30, r24
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
    453c:	01 50       	subi	r16, 0x01	; 1
  tmp--;
    453e:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    4540:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    4542:	96 a9       	ldd	r25, Z+54	; 0x36
    4544:	94 17       	cp	r25, r20
    4546:	38 f0       	brcs	.+14     	; 0x4556 <u8g_IsBBXIntersection+0x1e>
  {
    if ( v1 >= a0 )
    4548:	08 17       	cp	r16, r24
    454a:	68 f4       	brcc	.+26     	; 0x4566 <u8g_IsBBXIntersection+0x2e>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	04 17       	cp	r16, r20
    4550:	40 f0       	brcs	.+16     	; 0x4562 <u8g_IsBBXIntersection+0x2a>
    4552:	80 e0       	ldi	r24, 0x00	; 0
    4554:	06 c0       	rjmp	.+12     	; 0x4562 <u8g_IsBBXIntersection+0x2a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    4556:	08 17       	cp	r16, r24
    4558:	d0 f0       	brcs	.+52     	; 0x458e <u8g_IsBBXIntersection+0x56>
    {
      if ( v0 > v1 )
    455a:	81 e0       	ldi	r24, 0x01	; 1
    455c:	04 17       	cp	r16, r20
    455e:	08 f0       	brcs	.+2      	; 0x4562 <u8g_IsBBXIntersection+0x2a>
    4560:	80 e0       	ldi	r24, 0x00	; 0
{
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    4562:	88 23       	and	r24, r24
    4564:	c9 f0       	breq	.+50     	; 0x4598 <u8g_IsBBXIntersection+0x60>
    return 0; 
  
  tmp = x;
  tmp += w;
    4566:	21 50       	subi	r18, 0x01	; 1
  tmp--;
    4568:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    456a:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    456c:	95 a9       	ldd	r25, Z+53	; 0x35
    456e:	96 17       	cp	r25, r22
    4570:	38 f0       	brcs	.+14     	; 0x4580 <u8g_IsBBXIntersection+0x48>
  {
    if ( v1 >= a0 )
    4572:	28 17       	cp	r18, r24
    4574:	70 f4       	brcc	.+28     	; 0x4592 <u8g_IsBBXIntersection+0x5a>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    4576:	81 e0       	ldi	r24, 0x01	; 1
    4578:	26 17       	cp	r18, r22
    457a:	70 f0       	brcs	.+28     	; 0x4598 <u8g_IsBBXIntersection+0x60>
    457c:	80 e0       	ldi	r24, 0x00	; 0
    457e:	0c c0       	rjmp	.+24     	; 0x4598 <u8g_IsBBXIntersection+0x60>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    4580:	28 17       	cp	r18, r24
    4582:	48 f0       	brcs	.+18     	; 0x4596 <u8g_IsBBXIntersection+0x5e>
    {
      if ( v0 > v1 )
    4584:	81 e0       	ldi	r24, 0x01	; 1
    4586:	26 17       	cp	r18, r22
    4588:	38 f0       	brcs	.+14     	; 0x4598 <u8g_IsBBXIntersection+0x60>
    458a:	80 e0       	ldi	r24, 0x00	; 0
    458c:	05 c0       	rjmp	.+10     	; 0x4598 <u8g_IsBBXIntersection+0x60>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    458e:	80 e0       	ldi	r24, 0x00	; 0
    4590:	03 c0       	rjmp	.+6      	; 0x4598 <u8g_IsBBXIntersection+0x60>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    4592:	81 e0       	ldi	r24, 0x01	; 1
    4594:	01 c0       	rjmp	.+2      	; 0x4598 <u8g_IsBBXIntersection+0x60>
	return 0;
      }
    }
    else
    {
      return 0;
    4596:	80 e0       	ldi	r24, 0x00	; 0
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    4598:	0f 91       	pop	r16
    459a:	08 95       	ret

0000459c <u8g_InitCom>:

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
    459c:	db 01       	movw	r26, r22
    459e:	14 96       	adiw	r26, 0x04	; 4
    45a0:	ed 91       	ld	r30, X+
    45a2:	fc 91       	ld	r31, X
    45a4:	15 97       	sbiw	r26, 0x05	; 5
    45a6:	20 e0       	ldi	r18, 0x00	; 0
    45a8:	30 e0       	ldi	r19, 0x00	; 0
    45aa:	61 e0       	ldi	r22, 0x01	; 1
    45ac:	09 95       	icall
}
    45ae:	08 95       	ret

000045b0 <u8g_SetChipSelect>:
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
    45b0:	db 01       	movw	r26, r22
    45b2:	14 96       	adiw	r26, 0x04	; 4
    45b4:	ed 91       	ld	r30, X+
    45b6:	fc 91       	ld	r31, X
    45b8:	15 97       	sbiw	r26, 0x05	; 5
    45ba:	20 e0       	ldi	r18, 0x00	; 0
    45bc:	30 e0       	ldi	r19, 0x00	; 0
    45be:	63 e0       	ldi	r22, 0x03	; 3
    45c0:	09 95       	icall
    45c2:	08 95       	ret

000045c4 <u8g_SetResetLow>:
}

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
    45c4:	db 01       	movw	r26, r22
    45c6:	14 96       	adiw	r26, 0x04	; 4
    45c8:	ed 91       	ld	r30, X+
    45ca:	fc 91       	ld	r31, X
    45cc:	15 97       	sbiw	r26, 0x05	; 5
    45ce:	20 e0       	ldi	r18, 0x00	; 0
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	40 e0       	ldi	r20, 0x00	; 0
    45d4:	64 e0       	ldi	r22, 0x04	; 4
    45d6:	09 95       	icall
    45d8:	08 95       	ret

000045da <u8g_SetResetHigh>:
}

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
    45da:	db 01       	movw	r26, r22
    45dc:	14 96       	adiw	r26, 0x04	; 4
    45de:	ed 91       	ld	r30, X+
    45e0:	fc 91       	ld	r31, X
    45e2:	15 97       	sbiw	r26, 0x05	; 5
    45e4:	20 e0       	ldi	r18, 0x00	; 0
    45e6:	30 e0       	ldi	r19, 0x00	; 0
    45e8:	41 e0       	ldi	r20, 0x01	; 1
    45ea:	64 e0       	ldi	r22, 0x04	; 4
    45ec:	09 95       	icall
    45ee:	08 95       	ret

000045f0 <u8g_SetAddress>:
}


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
    45f0:	db 01       	movw	r26, r22
    45f2:	14 96       	adiw	r26, 0x04	; 4
    45f4:	ed 91       	ld	r30, X+
    45f6:	fc 91       	ld	r31, X
    45f8:	15 97       	sbiw	r26, 0x05	; 5
    45fa:	20 e0       	ldi	r18, 0x00	; 0
    45fc:	30 e0       	ldi	r19, 0x00	; 0
    45fe:	62 e0       	ldi	r22, 0x02	; 2
    4600:	09 95       	icall
    4602:	08 95       	ret

00004604 <u8g_WriteByte>:
}

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
    4604:	db 01       	movw	r26, r22
    4606:	14 96       	adiw	r26, 0x04	; 4
    4608:	ed 91       	ld	r30, X+
    460a:	fc 91       	ld	r31, X
    460c:	15 97       	sbiw	r26, 0x05	; 5
    460e:	20 e0       	ldi	r18, 0x00	; 0
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	65 e0       	ldi	r22, 0x05	; 5
    4614:	09 95       	icall
}
    4616:	08 95       	ret

00004618 <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
    4618:	db 01       	movw	r26, r22
    461a:	14 96       	adiw	r26, 0x04	; 4
    461c:	ed 91       	ld	r30, X+
    461e:	fc 91       	ld	r31, X
    4620:	15 97       	sbiw	r26, 0x05	; 5
    4622:	66 e0       	ldi	r22, 0x06	; 6
    4624:	09 95       	icall
}
    4626:	08 95       	ret

00004628 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    4628:	af 92       	push	r10
    462a:	bf 92       	push	r11
    462c:	cf 92       	push	r12
    462e:	df 92       	push	r13
    4630:	ef 92       	push	r14
    4632:	ff 92       	push	r15
    4634:	1f 93       	push	r17
    4636:	cf 93       	push	r28
    4638:	df 93       	push	r29
    463a:	7c 01       	movw	r14, r24
    463c:	5b 01       	movw	r10, r22
    463e:	ea 01       	movw	r28, r20
  uint8_t is_escape = 0;
    4640:	d1 2c       	mov	r13, r1
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    4642:	fe 01       	movw	r30, r28
    4644:	14 91       	lpm	r17, Z
    if ( is_escape == 0 )
    4646:	d1 10       	cpse	r13, r1
    4648:	0b c0       	rjmp	.+22     	; 0x4660 <u8g_WriteEscSeqP+0x38>
    {
      if ( value != 255 )
    464a:	1f 3f       	cpi	r17, 0xFF	; 255
    464c:	09 f4       	brne	.+2      	; 0x4650 <u8g_WriteEscSeqP+0x28>
    464e:	4f c0       	rjmp	.+158    	; 0x46ee <u8g_WriteEscSeqP+0xc6>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    4650:	41 2f       	mov	r20, r17
    4652:	b5 01       	movw	r22, r10
    4654:	c7 01       	movw	r24, r14
    4656:	0e 94 02 23 	call	0x4604	; 0x4604 <u8g_WriteByte>
    465a:	81 11       	cpse	r24, r1
    465c:	4e c0       	rjmp	.+156    	; 0x46fa <u8g_WriteEscSeqP+0xd2>
    465e:	4f c0       	rjmp	.+158    	; 0x46fe <u8g_WriteEscSeqP+0xd6>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    4660:	1f 3f       	cpi	r17, 0xFF	; 255
    4662:	51 f4       	brne	.+20     	; 0x4678 <u8g_WriteEscSeqP+0x50>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    4664:	4f ef       	ldi	r20, 0xFF	; 255
    4666:	b5 01       	movw	r22, r10
    4668:	c7 01       	movw	r24, r14
    466a:	0e 94 02 23 	call	0x4604	; 0x4604 <u8g_WriteByte>
    466e:	88 23       	and	r24, r24
    4670:	09 f4       	brne	.+2      	; 0x4674 <u8g_WriteEscSeqP+0x4c>
    4672:	47 c0       	rjmp	.+142    	; 0x4702 <u8g_WriteEscSeqP+0xda>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    4674:	d1 2c       	mov	r13, r1
    4676:	41 c0       	rjmp	.+130    	; 0x46fa <u8g_WriteEscSeqP+0xd2>
      if ( value == 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
    4678:	1e 3f       	cpi	r17, 0xFE	; 254
    467a:	09 f4       	brne	.+2      	; 0x467e <u8g_WriteEscSeqP+0x56>
    467c:	44 c0       	rjmp	.+136    	; 0x4706 <u8g_WriteEscSeqP+0xde>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    467e:	10 3f       	cpi	r17, 0xF0	; 240
    4680:	c8 f5       	brcc	.+114    	; 0x46f4 <u8g_WriteEscSeqP+0xcc>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    4682:	10 3e       	cpi	r17, 0xE0	; 224
    4684:	40 f0       	brcs	.+16     	; 0x4696 <u8g_WriteEscSeqP+0x6e>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    4686:	41 2f       	mov	r20, r17
    4688:	4f 70       	andi	r20, 0x0F	; 15
    468a:	b5 01       	movw	r22, r10
    468c:	c7 01       	movw	r24, r14
    468e:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <u8g_SetAddress>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    4692:	d1 2c       	mov	r13, r1
    4694:	32 c0       	rjmp	.+100    	; 0x46fa <u8g_WriteEscSeqP+0xd2>
      }
      else if ( value >= 0xe0  )
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xd0 )
    4696:	10 3d       	cpi	r17, 0xD0	; 208
    4698:	40 f0       	brcs	.+16     	; 0x46aa <u8g_WriteEscSeqP+0x82>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    469a:	41 2f       	mov	r20, r17
    469c:	4f 70       	andi	r20, 0x0F	; 15
    469e:	b5 01       	movw	r22, r10
    46a0:	c7 01       	movw	r24, r14
    46a2:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <u8g_SetChipSelect>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    46a6:	d1 2c       	mov	r13, r1
    46a8:	28 c0       	rjmp	.+80     	; 0x46fa <u8g_WriteEscSeqP+0xd2>
      }
      else if ( value >= 0xd0 )
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xc0 )
    46aa:	10 3c       	cpi	r17, 0xC0	; 192
    46ac:	c0 f0       	brcs	.+48     	; 0x46de <u8g_WriteEscSeqP+0xb6>
      {
        u8g_SetResetLow(u8g, dev);
    46ae:	b5 01       	movw	r22, r10
    46b0:	c7 01       	movw	r24, r14
    46b2:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <u8g_SetResetLow>
        value &= 0x0f;
        value <<= 4;
    46b6:	c1 2e       	mov	r12, r17
    46b8:	cc 0c       	add	r12, r12
    46ba:	cc 0c       	add	r12, r12
    46bc:	cc 0c       	add	r12, r12
    46be:	cc 0c       	add	r12, r12
        value+=2;
    46c0:	c3 94       	inc	r12
    46c2:	c3 94       	inc	r12
        u8g_Delay(value);
    46c4:	d1 2c       	mov	r13, r1
    46c6:	c6 01       	movw	r24, r12
    46c8:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
    46cc:	b5 01       	movw	r22, r10
    46ce:	c7 01       	movw	r24, r14
    46d0:	0e 94 ed 22 	call	0x45da	; 0x45da <u8g_SetResetHigh>
        u8g_Delay(value);
    46d4:	c6 01       	movw	r24, r12
    46d6:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    46da:	d1 2c       	mov	r13, r1
    46dc:	0e c0       	rjmp	.+28     	; 0x46fa <u8g_WriteEscSeqP+0xd2>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    46de:	11 23       	and	r17, r17
    46e0:	5c f0       	brlt	.+22     	; 0x46f8 <u8g_WriteEscSeqP+0xd0>
      {
        u8g_Delay(value);
    46e2:	81 2f       	mov	r24, r17
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <u8g_Delay>
      }
      is_escape = 0;
    46ea:	d1 2c       	mov	r13, r1
    46ec:	06 c0       	rjmp	.+12     	; 0x46fa <u8g_WriteEscSeqP+0xd2>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    46ee:	dd 24       	eor	r13, r13
    46f0:	d3 94       	inc	r13
    46f2:	03 c0       	rjmp	.+6      	; 0x46fa <u8g_WriteEscSeqP+0xd2>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    46f4:	d1 2c       	mov	r13, r1
    46f6:	01 c0       	rjmp	.+2      	; 0x46fa <u8g_WriteEscSeqP+0xd2>
    46f8:	d1 2c       	mov	r13, r1
    }
    esc_seq++;
    46fa:	21 96       	adiw	r28, 0x01	; 1
  }
    46fc:	a2 cf       	rjmp	.-188    	; 0x4642 <u8g_WriteEscSeqP+0x1a>
    if ( is_escape == 0 )
    {
      if ( value != 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
    46fe:	80 e0       	ldi	r24, 0x00	; 0
    4700:	03 c0       	rjmp	.+6      	; 0x4708 <u8g_WriteEscSeqP+0xe0>
    else
    {
      if ( value == 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
    4702:	80 e0       	ldi	r24, 0x00	; 0
    4704:	01 c0       	rjmp	.+2      	; 0x4708 <u8g_WriteEscSeqP+0xe0>
      }
      is_escape = 0;
    }
    esc_seq++;
  }
  return 1;
    4706:	81 e0       	ldi	r24, 0x01	; 1
}
    4708:	df 91       	pop	r29
    470a:	cf 91       	pop	r28
    470c:	1f 91       	pop	r17
    470e:	ff 90       	pop	r15
    4710:	ef 90       	pop	r14
    4712:	df 90       	pop	r13
    4714:	cf 90       	pop	r12
    4716:	bf 90       	pop	r11
    4718:	af 90       	pop	r10
    471a:	08 95       	ret

0000471c <u8g_com_atmega_parallel_write>:

#if defined(__AVR__)

static void u8g_com_atmega_parallel_write(u8g_t *u8g, uint8_t val) U8G_NOINLINE;
static void u8g_com_atmega_parallel_write(u8g_t *u8g, uint8_t val)
{
    471c:	1f 93       	push	r17
    471e:	cf 93       	push	r28
    4720:	df 93       	push	r29
    4722:	ec 01       	movw	r28, r24
    4724:	16 2f       	mov	r17, r22

  u8g_SetPILevel(u8g, U8G_PI_D0, val&1);
    4726:	46 2f       	mov	r20, r22
    4728:	41 70       	andi	r20, 0x01	; 1
    472a:	65 e0       	ldi	r22, 0x05	; 5
    472c:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
  val >>= 1;
    4730:	16 95       	lsr	r17
  u8g_SetPILevel(u8g, U8G_PI_D1, val&1);
    4732:	41 2f       	mov	r20, r17
    4734:	41 70       	andi	r20, 0x01	; 1
    4736:	66 e0       	ldi	r22, 0x06	; 6
    4738:	ce 01       	movw	r24, r28
    473a:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
  val >>= 1;
    473e:	16 95       	lsr	r17
  u8g_SetPILevel(u8g, U8G_PI_D2, val&1);
    4740:	41 2f       	mov	r20, r17
    4742:	41 70       	andi	r20, 0x01	; 1
    4744:	67 e0       	ldi	r22, 0x07	; 7
    4746:	ce 01       	movw	r24, r28
    4748:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
  val >>= 1;
    474c:	16 95       	lsr	r17
  u8g_SetPILevel(u8g, U8G_PI_D3, val&1);
    474e:	41 2f       	mov	r20, r17
    4750:	41 70       	andi	r20, 0x01	; 1
    4752:	68 e0       	ldi	r22, 0x08	; 8
    4754:	ce 01       	movw	r24, r28
    4756:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
  val >>= 1;
    475a:	16 95       	lsr	r17
  u8g_SetPILevel(u8g, U8G_PI_D4, val&1);
    475c:	41 2f       	mov	r20, r17
    475e:	41 70       	andi	r20, 0x01	; 1
    4760:	69 e0       	ldi	r22, 0x09	; 9
    4762:	ce 01       	movw	r24, r28
    4764:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
  val >>= 1;
    4768:	16 95       	lsr	r17
  u8g_SetPILevel(u8g, U8G_PI_D5, val&1);
    476a:	41 2f       	mov	r20, r17
    476c:	41 70       	andi	r20, 0x01	; 1
    476e:	6a e0       	ldi	r22, 0x0A	; 10
    4770:	ce 01       	movw	r24, r28
    4772:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
  val >>= 1;
    4776:	16 95       	lsr	r17
  u8g_SetPILevel(u8g, U8G_PI_D6, val&1);
    4778:	41 2f       	mov	r20, r17
    477a:	41 70       	andi	r20, 0x01	; 1
    477c:	6b e0       	ldi	r22, 0x0B	; 11
    477e:	ce 01       	movw	r24, r28
    4780:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
  val >>= 1;
  u8g_SetPILevel(u8g, U8G_PI_D7, val&1);
    4784:	41 2f       	mov	r20, r17
    4786:	46 95       	lsr	r20
    4788:	6c e0       	ldi	r22, 0x0C	; 12
    478a:	ce 01       	movw	r24, r28
    478c:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
  
  /* EN cycle time must be 1 micro second  */
  u8g_SetPILevel(u8g, U8G_PI_EN, 1);
    4790:	41 e0       	ldi	r20, 0x01	; 1
    4792:	64 e0       	ldi	r22, 0x04	; 4
    4794:	ce 01       	movw	r24, r28
    4796:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
  //u8g_MicroDelay(); /* delay by 1000ns, reference: ST7920: 140ns, SBN1661: 100ns */

  u8g_SetPILevel(u8g, U8G_PI_EN, 0);
    479a:	40 e0       	ldi	r20, 0x00	; 0
    479c:	64 e0       	ldi	r22, 0x04	; 4
    479e:	ce 01       	movw	r24, r28
    47a0:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
//   u8g_10MicroDelay(); /* ST7920 commands: 72us */
//   u8g_10MicroDelay(); /* ST7920 commands: 72us */

}
    47a4:	df 91       	pop	r29
    47a6:	cf 91       	pop	r28
    47a8:	1f 91       	pop	r17
    47aa:	08 95       	ret

000047ac <u8g_com_atmega_parallel_fn>:


uint8_t u8g_com_atmega_parallel_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    47ac:	df 92       	push	r13
    47ae:	ef 92       	push	r14
    47b0:	ff 92       	push	r15
    47b2:	0f 93       	push	r16
    47b4:	1f 93       	push	r17
    47b6:	cf 93       	push	r28
    47b8:	df 93       	push	r29
    47ba:	ec 01       	movw	r28, r24
    47bc:	d4 2e       	mov	r13, r20
    47be:	79 01       	movw	r14, r18
  switch(msg)
    47c0:	06 2f       	mov	r16, r22
    47c2:	10 e0       	ldi	r17, 0x00	; 0
    47c4:	f8 01       	movw	r30, r16
    47c6:	31 97       	sbiw	r30, 0x01	; 1
    47c8:	e7 30       	cpi	r30, 0x07	; 7
    47ca:	f1 05       	cpc	r31, r1
    47cc:	08 f0       	brcs	.+2      	; 0x47d0 <u8g_com_atmega_parallel_fn+0x24>
    47ce:	9f c0       	rjmp	.+318    	; 0x490e <u8g_com_atmega_parallel_fn+0x162>
    47d0:	e6 50       	subi	r30, 0x06	; 6
    47d2:	ff 4f       	sbci	r31, 0xFF	; 255
    47d4:	0c 94 38 35 	jmp	0x6a70	; 0x6a70 <__tablejump2__>
      u8g_com_atmega_parallel_write(u8g, arg_val);
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    47d8:	41 11       	cpse	r20, r1
    47da:	7e c0       	rjmp	.+252    	; 0x48d8 <u8g_com_atmega_parallel_fn+0x12c>
    47dc:	98 c0       	rjmp	.+304    	; 0x490e <u8g_com_atmega_parallel_fn+0x162>
      }
      break;
    case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    47de:	41 11       	cpse	r20, r1
    47e0:	84 c0       	rjmp	.+264    	; 0x48ea <u8g_com_atmega_parallel_fn+0x13e>
    47e2:	95 c0       	rjmp	.+298    	; 0x490e <u8g_com_atmega_parallel_fn+0x162>
{
  switch(msg)
  {
    case U8G_COM_MSG_INIT:
      /* setup the RW pin as output and force it to low */
      u8g_SetPIOutput(u8g, U8G_PI_RW);
    47e4:	6d e0       	ldi	r22, 0x0D	; 13
    47e6:	0e 94 f7 24 	call	0x49ee	; 0x49ee <u8g_SetPIOutput>
      u8g_SetPILevel(u8g, U8G_PI_RW, 0);
    47ea:	40 e0       	ldi	r20, 0x00	; 0
    47ec:	6d e0       	ldi	r22, 0x0D	; 13
    47ee:	ce 01       	movw	r24, r28
    47f0:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>

      u8g_SetPIOutput(u8g, U8G_PI_D0);
    47f4:	65 e0       	ldi	r22, 0x05	; 5
    47f6:	ce 01       	movw	r24, r28
    47f8:	0e 94 f7 24 	call	0x49ee	; 0x49ee <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D1);
    47fc:	66 e0       	ldi	r22, 0x06	; 6
    47fe:	ce 01       	movw	r24, r28
    4800:	0e 94 f7 24 	call	0x49ee	; 0x49ee <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D2);
    4804:	67 e0       	ldi	r22, 0x07	; 7
    4806:	ce 01       	movw	r24, r28
    4808:	0e 94 f7 24 	call	0x49ee	; 0x49ee <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D3);
    480c:	68 e0       	ldi	r22, 0x08	; 8
    480e:	ce 01       	movw	r24, r28
    4810:	0e 94 f7 24 	call	0x49ee	; 0x49ee <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D4);
    4814:	69 e0       	ldi	r22, 0x09	; 9
    4816:	ce 01       	movw	r24, r28
    4818:	0e 94 f7 24 	call	0x49ee	; 0x49ee <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D5);
    481c:	6a e0       	ldi	r22, 0x0A	; 10
    481e:	ce 01       	movw	r24, r28
    4820:	0e 94 f7 24 	call	0x49ee	; 0x49ee <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D6);
    4824:	6b e0       	ldi	r22, 0x0B	; 11
    4826:	ce 01       	movw	r24, r28
    4828:	0e 94 f7 24 	call	0x49ee	; 0x49ee <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_D7);
    482c:	6c e0       	ldi	r22, 0x0C	; 12
    482e:	ce 01       	movw	r24, r28
    4830:	0e 94 f7 24 	call	0x49ee	; 0x49ee <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_EN);
    4834:	64 e0       	ldi	r22, 0x04	; 4
    4836:	ce 01       	movw	r24, r28
    4838:	0e 94 f7 24 	call	0x49ee	; 0x49ee <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_CS1);
    483c:	62 e0       	ldi	r22, 0x02	; 2
    483e:	ce 01       	movw	r24, r28
    4840:	0e 94 f7 24 	call	0x49ee	; 0x49ee <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_CS2);
    4844:	63 e0       	ldi	r22, 0x03	; 3
    4846:	ce 01       	movw	r24, r28
    4848:	0e 94 f7 24 	call	0x49ee	; 0x49ee <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_DI);
    484c:	61 e0       	ldi	r22, 0x01	; 1
    484e:	ce 01       	movw	r24, r28
    4850:	0e 94 f7 24 	call	0x49ee	; 0x49ee <u8g_SetPIOutput>
      u8g_SetPILevel(u8g, U8G_PI_CS1, 1);
    4854:	41 e0       	ldi	r20, 0x01	; 1
    4856:	62 e0       	ldi	r22, 0x02	; 2
    4858:	ce 01       	movw	r24, r28
    485a:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
      u8g_SetPILevel(u8g, U8G_PI_CS2, 1);
    485e:	41 e0       	ldi	r20, 0x01	; 1
    4860:	63 e0       	ldi	r22, 0x03	; 3
    4862:	ce 01       	movw	r24, r28
    4864:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>

      break;
    4868:	52 c0       	rjmp	.+164    	; 0x490e <u8g_com_atmega_parallel_fn+0x162>
    case U8G_COM_MSG_STOP:
      break;
    case U8G_COM_MSG_CHIP_SELECT:
      if ( arg_val == 0 )
    486a:	41 11       	cpse	r20, r1
    486c:	0a c0       	rjmp	.+20     	; 0x4882 <u8g_com_atmega_parallel_fn+0xd6>
      {
        /* disable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 1);
    486e:	41 e0       	ldi	r20, 0x01	; 1
    4870:	62 e0       	ldi	r22, 0x02	; 2
    4872:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
        u8g_SetPILevel(u8g, U8G_PI_CS2, 1);
    4876:	41 e0       	ldi	r20, 0x01	; 1
    4878:	63 e0       	ldi	r22, 0x03	; 3
    487a:	ce 01       	movw	r24, r28
    487c:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
    4880:	46 c0       	rjmp	.+140    	; 0x490e <u8g_com_atmega_parallel_fn+0x162>
      }
      else if ( arg_val == 1 )
    4882:	81 e0       	ldi	r24, 0x01	; 1
    4884:	48 13       	cpse	r20, r24
    4886:	0b c0       	rjmp	.+22     	; 0x489e <u8g_com_atmega_parallel_fn+0xf2>
      {
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 0);
    4888:	40 e0       	ldi	r20, 0x00	; 0
    488a:	62 e0       	ldi	r22, 0x02	; 2
    488c:	ce 01       	movw	r24, r28
    488e:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
        u8g_SetPILevel(u8g, U8G_PI_CS2, 1);
    4892:	41 e0       	ldi	r20, 0x01	; 1
    4894:	63 e0       	ldi	r22, 0x03	; 3
    4896:	ce 01       	movw	r24, r28
    4898:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
    489c:	38 c0       	rjmp	.+112    	; 0x490e <u8g_com_atmega_parallel_fn+0x162>
      }
      else if ( arg_val == 2 )
    489e:	e2 e0       	ldi	r30, 0x02	; 2
    48a0:	4e 13       	cpse	r20, r30
    48a2:	0b c0       	rjmp	.+22     	; 0x48ba <u8g_com_atmega_parallel_fn+0x10e>
      {
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 1);
    48a4:	41 e0       	ldi	r20, 0x01	; 1
    48a6:	62 e0       	ldi	r22, 0x02	; 2
    48a8:	ce 01       	movw	r24, r28
    48aa:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
        u8g_SetPILevel(u8g, U8G_PI_CS2, 0);
    48ae:	40 e0       	ldi	r20, 0x00	; 0
    48b0:	63 e0       	ldi	r22, 0x03	; 3
    48b2:	ce 01       	movw	r24, r28
    48b4:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
    48b8:	2a c0       	rjmp	.+84     	; 0x490e <u8g_com_atmega_parallel_fn+0x162>
      }
      else
      {
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 0);
    48ba:	40 e0       	ldi	r20, 0x00	; 0
    48bc:	62 e0       	ldi	r22, 0x02	; 2
    48be:	ce 01       	movw	r24, r28
    48c0:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
        u8g_SetPILevel(u8g, U8G_PI_CS2, 0);
    48c4:	40 e0       	ldi	r20, 0x00	; 0
    48c6:	63 e0       	ldi	r22, 0x03	; 3
    48c8:	ce 01       	movw	r24, r28
    48ca:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
    48ce:	1f c0       	rjmp	.+62     	; 0x490e <u8g_com_atmega_parallel_fn+0x162>
      }
      break;
    case U8G_COM_MSG_WRITE_BYTE:
      u8g_com_atmega_parallel_write(u8g, arg_val);
    48d0:	64 2f       	mov	r22, r20
    48d2:	0e 94 8e 23 	call	0x471c	; 0x471c <u8g_com_atmega_parallel_write>
      break;
    48d6:	1b c0       	rjmp	.+54     	; 0x490e <u8g_com_atmega_parallel_fn+0x162>
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
          u8g_com_atmega_parallel_write(u8g, *ptr++);
    48d8:	f7 01       	movw	r30, r14
    48da:	61 91       	ld	r22, Z+
    48dc:	7f 01       	movw	r14, r30
    48de:	ce 01       	movw	r24, r28
    48e0:	0e 94 8e 23 	call	0x471c	; 0x471c <u8g_com_atmega_parallel_write>
          arg_val--;
    48e4:	da 94       	dec	r13
      u8g_com_atmega_parallel_write(u8g, arg_val);
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    48e6:	c1 f7       	brne	.-16     	; 0x48d8 <u8g_com_atmega_parallel_fn+0x12c>
    48e8:	12 c0       	rjmp	.+36     	; 0x490e <u8g_com_atmega_parallel_fn+0x162>
    case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
          u8g_com_atmega_parallel_write(u8g, u8g_pgm_read(ptr));
    48ea:	f7 01       	movw	r30, r14
    48ec:	64 91       	lpm	r22, Z
    48ee:	ce 01       	movw	r24, r28
    48f0:	0e 94 8e 23 	call	0x471c	; 0x471c <u8g_com_atmega_parallel_write>
          ptr++;
    48f4:	ff ef       	ldi	r31, 0xFF	; 255
    48f6:	ef 1a       	sub	r14, r31
    48f8:	ff 0a       	sbc	r15, r31
          arg_val--;
    48fa:	da 94       	dec	r13
      }
      break;
    case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    48fc:	b1 f7       	brne	.-20     	; 0x48ea <u8g_com_atmega_parallel_fn+0x13e>
    48fe:	07 c0       	rjmp	.+14     	; 0x490e <u8g_com_atmega_parallel_fn+0x162>
          arg_val--;
        }
      }
      break;
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g_SetPILevel(u8g, U8G_PI_DI, arg_val);
    4900:	61 e0       	ldi	r22, 0x01	; 1
    4902:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
      break;
    4906:	03 c0       	rjmp	.+6      	; 0x490e <u8g_com_atmega_parallel_fn+0x162>
    case U8G_COM_MSG_RESET:
      u8g_SetPILevel(u8g, U8G_PI_RESET, arg_val);
    4908:	60 e0       	ldi	r22, 0x00	; 0
    490a:	0e 94 00 25 	call	0x4a00	; 0x4a00 <u8g_SetPILevel>
      break;
  }
  return 1;
}
    490e:	81 e0       	ldi	r24, 0x01	; 1
    4910:	df 91       	pop	r29
    4912:	cf 91       	pop	r28
    4914:	1f 91       	pop	r17
    4916:	0f 91       	pop	r16
    4918:	ff 90       	pop	r15
    491a:	ef 90       	pop	r14
    491c:	df 90       	pop	r13
    491e:	08 95       	ret

00004920 <u8g_get_avr_io_ptr>:
	#endif
};
#endif

static volatile uint8_t *u8g_get_avr_io_ptr(const IO_PTR *base, uint8_t offset)
{
    4920:	cf 93       	push	r28
    4922:	df 93       	push	r29
    4924:	00 d0       	rcall	.+0      	; 0x4926 <u8g_get_avr_io_ptr+0x6>
    4926:	cd b7       	in	r28, 0x3d	; 61
    4928:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t * tmp;
  base += offset;
    492a:	70 e0       	ldi	r23, 0x00	; 0
    492c:	66 0f       	add	r22, r22
    492e:	77 1f       	adc	r23, r23
    4930:	68 0f       	add	r22, r24
    4932:	79 1f       	adc	r23, r25
  memcpy_P(&tmp, base, sizeof(volatile uint8_t * PROGMEM));
    4934:	42 e0       	ldi	r20, 0x02	; 2
    4936:	50 e0       	ldi	r21, 0x00	; 0
    4938:	ce 01       	movw	r24, r28
    493a:	01 96       	adiw	r24, 0x01	; 1
    493c:	0e 94 0e 38 	call	0x701c	; 0x701c <memcpy_P>
  return tmp; 
}
    4940:	89 81       	ldd	r24, Y+1	; 0x01
    4942:	9a 81       	ldd	r25, Y+2	; 0x02
    4944:	0f 90       	pop	r0
    4946:	0f 90       	pop	r0
    4948:	df 91       	pop	r29
    494a:	cf 91       	pop	r28
    494c:	08 95       	ret

0000494e <u8g_Pin>:
typedef volatile uint8_t * IO_PTR;

/* create internal pin number */
uint8_t u8g_Pin(uint8_t port, uint8_t bitpos)
{
  port <<= 3;
    494e:	88 0f       	add	r24, r24
    4950:	88 0f       	add	r24, r24
    4952:	88 0f       	add	r24, r24
  port += bitpos;
  return port;
}
    4954:	86 0f       	add	r24, r22
    4956:	08 95       	ret

00004958 <u8g_SetPinOutput>:
  return tmp; 
}

/* set direction to output of the specified pin (internal pin number) */
void u8g_SetPinOutput(uint8_t internal_pin_number)
{
    4958:	cf 93       	push	r28
    495a:	c8 2f       	mov	r28, r24
  *u8g_get_avr_io_ptr(u8g_avr_ddr_P, internal_pin_number>>3) |= _BV(internal_pin_number&7);
    495c:	68 2f       	mov	r22, r24
    495e:	66 95       	lsr	r22
    4960:	66 95       	lsr	r22
    4962:	66 95       	lsr	r22
    4964:	82 e9       	ldi	r24, 0x92	; 146
    4966:	92 e0       	ldi	r25, 0x02	; 2
    4968:	0e 94 90 24 	call	0x4920	; 0x4920 <u8g_get_avr_io_ptr>
    496c:	fc 01       	movw	r30, r24
    496e:	40 81       	ld	r20, Z
    4970:	c7 70       	andi	r28, 0x07	; 7
    4972:	21 e0       	ldi	r18, 0x01	; 1
    4974:	30 e0       	ldi	r19, 0x00	; 0
    4976:	c9 01       	movw	r24, r18
    4978:	02 c0       	rjmp	.+4      	; 0x497e <u8g_SetPinOutput+0x26>
    497a:	88 0f       	add	r24, r24
    497c:	99 1f       	adc	r25, r25
    497e:	ca 95       	dec	r28
    4980:	e2 f7       	brpl	.-8      	; 0x497a <u8g_SetPinOutput+0x22>
    4982:	84 2b       	or	r24, r20
    4984:	80 83       	st	Z, r24
}
    4986:	cf 91       	pop	r28
    4988:	08 95       	ret

0000498a <u8g_SetPinLevel>:
{
  *u8g_get_avr_io_ptr(u8g_avr_ddr_P, internal_pin_number>>3) &= ~_BV(internal_pin_number&7);
}

void u8g_SetPinLevel(uint8_t internal_pin_number, uint8_t level)
{
    498a:	cf 93       	push	r28
    498c:	df 93       	push	r29
    498e:	c8 2f       	mov	r28, r24
    4990:	d6 2f       	mov	r29, r22
  volatile uint8_t * tmp = u8g_get_avr_io_ptr(u8g_avr_port_P, internal_pin_number>>3);
    4992:	68 2f       	mov	r22, r24
    4994:	66 95       	lsr	r22
    4996:	66 95       	lsr	r22
    4998:	66 95       	lsr	r22
    499a:	88 e8       	ldi	r24, 0x88	; 136
    499c:	92 e0       	ldi	r25, 0x02	; 2
    499e:	0e 94 90 24 	call	0x4920	; 0x4920 <u8g_get_avr_io_ptr>
    49a2:	fc 01       	movw	r30, r24
  
  if ( level == 0 )
    49a4:	d1 11       	cpse	r29, r1
    49a6:	11 c0       	rjmp	.+34     	; 0x49ca <u8g_SetPinLevel+0x40>
  {
    U8G_ATOMIC_AND(tmp, ~_BV(internal_pin_number&7));
    49a8:	4f b7       	in	r20, 0x3f	; 63
    49aa:	f8 94       	cli
    49ac:	50 81       	ld	r21, Z
    49ae:	c7 70       	andi	r28, 0x07	; 7
    49b0:	21 e0       	ldi	r18, 0x01	; 1
    49b2:	30 e0       	ldi	r19, 0x00	; 0
    49b4:	c9 01       	movw	r24, r18
    49b6:	02 c0       	rjmp	.+4      	; 0x49bc <u8g_SetPinLevel+0x32>
    49b8:	88 0f       	add	r24, r24
    49ba:	99 1f       	adc	r25, r25
    49bc:	ca 95       	dec	r28
    49be:	e2 f7       	brpl	.-8      	; 0x49b8 <u8g_SetPinLevel+0x2e>
    49c0:	80 95       	com	r24
    49c2:	85 23       	and	r24, r21
    49c4:	80 83       	st	Z, r24
    49c6:	4f bf       	out	0x3f, r20	; 63
    49c8:	0f c0       	rjmp	.+30     	; 0x49e8 <u8g_SetPinLevel+0x5e>
   // *tmp &= ~_BV(internal_pin_number&7);
  }
  else
  {
    U8G_ATOMIC_OR(tmp, _BV(internal_pin_number&7));
    49ca:	4f b7       	in	r20, 0x3f	; 63
    49cc:	f8 94       	cli
    49ce:	50 81       	ld	r21, Z
    49d0:	c7 70       	andi	r28, 0x07	; 7
    49d2:	21 e0       	ldi	r18, 0x01	; 1
    49d4:	30 e0       	ldi	r19, 0x00	; 0
    49d6:	c9 01       	movw	r24, r18
    49d8:	02 c0       	rjmp	.+4      	; 0x49de <u8g_SetPinLevel+0x54>
    49da:	88 0f       	add	r24, r24
    49dc:	99 1f       	adc	r25, r25
    49de:	ca 95       	dec	r28
    49e0:	e2 f7       	brpl	.-8      	; 0x49da <u8g_SetPinLevel+0x50>
    49e2:	85 2b       	or	r24, r21
    49e4:	80 83       	st	Z, r24
    49e6:	4f bf       	out	0x3f, r20	; 63
    //*tmp |= _BV(internal_pin_number&7);
  }
  
}
    49e8:	df 91       	pop	r29
    49ea:	cf 91       	pop	r28
    49ec:	08 95       	ret

000049ee <u8g_SetPIOutput>:
#if defined(U8G_WITH_PINLIST)

void u8g_SetPIOutput(u8g_t *u8g, uint8_t pi)
{
  uint8_t pin;
  pin = u8g->pin_list[pi];
    49ee:	86 0f       	add	r24, r22
    49f0:	91 1d       	adc	r25, r1
    49f2:	fc 01       	movw	r30, r24
    49f4:	83 a1       	ldd	r24, Z+35	; 0x23
  if ( pin != U8G_PIN_NONE )
    49f6:	8f 3f       	cpi	r24, 0xFF	; 255
    49f8:	11 f0       	breq	.+4      	; 0x49fe <u8g_SetPIOutput+0x10>
    u8g_SetPinOutput(pin);
    49fa:	0e 94 ac 24 	call	0x4958	; 0x4958 <u8g_SetPinOutput>
    49fe:	08 95       	ret

00004a00 <u8g_SetPILevel>:
}

void u8g_SetPILevel(u8g_t *u8g, uint8_t pi, uint8_t level)
{
  uint8_t pin;
  pin = u8g->pin_list[pi];
    4a00:	86 0f       	add	r24, r22
    4a02:	91 1d       	adc	r25, r1
    4a04:	fc 01       	movw	r30, r24
    4a06:	83 a1       	ldd	r24, Z+35	; 0x23
  if ( pin != U8G_PIN_NONE )
    4a08:	8f 3f       	cpi	r24, 0xFF	; 255
    4a0a:	19 f0       	breq	.+6      	; 0x4a12 <u8g_SetPILevel+0x12>
    u8g_SetPinLevel(pin, level);
    4a0c:	64 2f       	mov	r22, r20
    4a0e:	0e 94 c5 24 	call	0x498a	; 0x498a <u8g_SetPinLevel>
    4a12:	08 95       	ret

00004a14 <u8g_Delay>:
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    4a14:	00 97       	sbiw	r24, 0x00	; 0
    4a16:	41 f0       	breq	.+16     	; 0x4a28 <u8g_Delay+0x14>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4a18:	2e e3       	ldi	r18, 0x3E	; 62
    4a1a:	3f e1       	ldi	r19, 0x1F	; 31
    4a1c:	f9 01       	movw	r30, r18
    4a1e:	31 97       	sbiw	r30, 0x01	; 1
    4a20:	f1 f7       	brne	.-4      	; 0x4a1e <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    4a22:	01 97       	sbiw	r24, 0x01	; 1
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    4a24:	00 97       	sbiw	r24, 0x00	; 0
    4a26:	d1 f7       	brne	.-12     	; 0x4a1c <u8g_Delay+0x8>
    4a28:	08 95       	ret

00004a2a <u8g_dev_ks0108_128x64_fn>:
  U8G_ESC_END                /* end of sequence */
};


uint8_t u8g_dev_ks0108_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    4a2a:	bf 92       	push	r11
    4a2c:	cf 92       	push	r12
    4a2e:	df 92       	push	r13
    4a30:	ef 92       	push	r14
    4a32:	ff 92       	push	r15
    4a34:	0f 93       	push	r16
    4a36:	1f 93       	push	r17
    4a38:	cf 93       	push	r28
    4a3a:	df 93       	push	r29
    4a3c:	8c 01       	movw	r16, r24
    4a3e:	eb 01       	movw	r28, r22
    4a40:	b4 2e       	mov	r11, r20
    4a42:	79 01       	movw	r14, r18
  
  switch(msg)
    4a44:	8a e0       	ldi	r24, 0x0A	; 10
    4a46:	48 17       	cp	r20, r24
    4a48:	21 f0       	breq	.+8      	; 0x4a52 <u8g_dev_ks0108_128x64_fn+0x28>
    4a4a:	95 e1       	ldi	r25, 0x15	; 21
    4a4c:	49 17       	cp	r20, r25
    4a4e:	c1 f0       	breq	.+48     	; 0x4a80 <u8g_dev_ks0108_128x64_fn+0x56>
    4a50:	6a c0       	rjmp	.+212    	; 0x4b26 <u8g_dev_ks0108_128x64_fn+0xfc>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);
    4a52:	4f ef       	ldi	r20, 0xFF	; 255
    4a54:	c8 01       	movw	r24, r16
    4a56:	0e 94 ce 22 	call	0x459c	; 0x459c <u8g_InitCom>
    4a5a:	ef e1       	ldi	r30, 0x1F	; 31
    4a5c:	f3 e0       	ldi	r31, 0x03	; 3
    4a5e:	31 97       	sbiw	r30, 0x01	; 1
    4a60:	f1 f7       	brne	.-4      	; 0x4a5e <u8g_dev_ks0108_128x64_fn+0x34>
    4a62:	00 c0       	rjmp	.+0      	; 0x4a64 <u8g_dev_ks0108_128x64_fn+0x3a>
    4a64:	00 00       	nop
	  _delay_us(100);
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ks0108_128x64_init_seq);
    4a66:	4c e9       	ldi	r20, 0x9C	; 156
    4a68:	52 e0       	ldi	r21, 0x02	; 2
    4a6a:	be 01       	movw	r22, r28
    4a6c:	c8 01       	movw	r24, r16
    4a6e:	0e 94 14 23 	call	0x4628	; 0x4628 <u8g_WriteEscSeqP>
    4a72:	8f e1       	ldi	r24, 0x1F	; 31
    4a74:	93 e0       	ldi	r25, 0x03	; 3
    4a76:	01 97       	sbiw	r24, 0x01	; 1
    4a78:	f1 f7       	brne	.-4      	; 0x4a76 <u8g_dev_ks0108_128x64_fn+0x4c>
    4a7a:	00 c0       	rjmp	.+0      	; 0x4a7c <u8g_dev_ks0108_128x64_fn+0x52>
    4a7c:	00 00       	nop
    4a7e:	53 c0       	rjmp	.+166    	; 0x4b26 <u8g_dev_ks0108_128x64_fn+0xfc>
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    4a80:	ca 80       	ldd	r12, Y+2	; 0x02
    4a82:	db 80       	ldd	r13, Y+3	; 0x03
        
        u8g_SetAddress(u8g, dev, 0);           /* command mode */
    4a84:	40 e0       	ldi	r20, 0x00	; 0
    4a86:	c8 01       	movw	r24, r16
    4a88:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <u8g_SetAddress>
        u8g_SetChipSelect(u8g, dev, 2);
    4a8c:	42 e0       	ldi	r20, 0x02	; 2
    4a8e:	be 01       	movw	r22, r28
    4a90:	c8 01       	movw	r24, r16
    4a92:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <u8g_SetChipSelect>
//        _delay_us(100);
		u8g_WriteByte(u8g, dev, 0x0b8 | pb->p.page); /* select current page (KS0108b) */
    4a96:	f6 01       	movw	r30, r12
    4a98:	44 81       	ldd	r20, Z+4	; 0x04
    4a9a:	48 6b       	ori	r20, 0xB8	; 184
    4a9c:	be 01       	movw	r22, r28
    4a9e:	c8 01       	movw	r24, r16
    4aa0:	0e 94 02 23 	call	0x4604	; 0x4604 <u8g_WriteByte>
//        _delay_us(100);
		u8g_WriteByte(u8g, dev, 0x040 );		/* set address 0 */
    4aa4:	40 e4       	ldi	r20, 0x40	; 64
    4aa6:	be 01       	movw	r22, r28
    4aa8:	c8 01       	movw	r24, r16
    4aaa:	0e 94 02 23 	call	0x4604	; 0x4604 <u8g_WriteByte>
//        _delay_us(100);
		u8g_SetAddress(u8g, dev, 1);           /* data mode */
    4aae:	41 e0       	ldi	r20, 0x01	; 1
    4ab0:	be 01       	movw	r22, r28
    4ab2:	c8 01       	movw	r24, r16
    4ab4:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <u8g_SetAddress>
//        _delay_us(100);
		u8g_WriteSequence(u8g, dev, 64, pb->buf);
    4ab8:	f6 01       	movw	r30, r12
    4aba:	26 81       	ldd	r18, Z+6	; 0x06
    4abc:	37 81       	ldd	r19, Z+7	; 0x07
    4abe:	40 e4       	ldi	r20, 0x40	; 64
    4ac0:	be 01       	movw	r22, r28
    4ac2:	c8 01       	movw	r24, r16
    4ac4:	0e 94 0c 23 	call	0x4618	; 0x4618 <u8g_WriteSequence>
//        _delay_us(100);
		u8g_SetChipSelect(u8g, dev, 0); 
    4ac8:	40 e0       	ldi	r20, 0x00	; 0
    4aca:	be 01       	movw	r22, r28
    4acc:	c8 01       	movw	r24, r16
    4ace:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <u8g_SetChipSelect>
		u8g_SetAddress(u8g, dev, 0);           /* command mode */
    4ad2:	40 e0       	ldi	r20, 0x00	; 0
    4ad4:	be 01       	movw	r22, r28
    4ad6:	c8 01       	movw	r24, r16
    4ad8:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <u8g_SetAddress>
//        _delay_us(100);
		u8g_SetChipSelect(u8g, dev, 1);
    4adc:	41 e0       	ldi	r20, 0x01	; 1
    4ade:	be 01       	movw	r22, r28
    4ae0:	c8 01       	movw	r24, r16
    4ae2:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <u8g_SetChipSelect>
//        _delay_us(100);
		u8g_WriteByte(u8g, dev, 0x0b8 | pb->p.page); /* select current page (KS0108b) */
    4ae6:	f6 01       	movw	r30, r12
    4ae8:	44 81       	ldd	r20, Z+4	; 0x04
    4aea:	48 6b       	ori	r20, 0xB8	; 184
    4aec:	be 01       	movw	r22, r28
    4aee:	c8 01       	movw	r24, r16
    4af0:	0e 94 02 23 	call	0x4604	; 0x4604 <u8g_WriteByte>
//        _delay_us(100);
		 u8g_WriteByte(u8g, dev, 0x040 );		/* set address 0 */
    4af4:	40 e4       	ldi	r20, 0x40	; 64
    4af6:	be 01       	movw	r22, r28
    4af8:	c8 01       	movw	r24, r16
    4afa:	0e 94 02 23 	call	0x4604	; 0x4604 <u8g_WriteByte>
//        _delay_us(100);
		u8g_SetAddress(u8g, dev, 1);           /* data mode */
    4afe:	41 e0       	ldi	r20, 0x01	; 1
    4b00:	be 01       	movw	r22, r28
    4b02:	c8 01       	movw	r24, r16
    4b04:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <u8g_SetAddress>
//        _delay_us(100);
		u8g_WriteSequence(u8g, dev, 64, 64+(uint8_t *)pb->buf);
    4b08:	f6 01       	movw	r30, r12
    4b0a:	26 81       	ldd	r18, Z+6	; 0x06
    4b0c:	37 81       	ldd	r19, Z+7	; 0x07
    4b0e:	20 5c       	subi	r18, 0xC0	; 192
    4b10:	3f 4f       	sbci	r19, 0xFF	; 255
    4b12:	40 e4       	ldi	r20, 0x40	; 64
    4b14:	be 01       	movw	r22, r28
    4b16:	c8 01       	movw	r24, r16
    4b18:	0e 94 0c 23 	call	0x4618	; 0x4618 <u8g_WriteSequence>
//        _delay_us(100);
		u8g_SetChipSelect(u8g, dev, 0);
    4b1c:	40 e0       	ldi	r20, 0x00	; 0
    4b1e:	be 01       	movw	r22, r28
    4b20:	c8 01       	movw	r24, r16
    4b22:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <u8g_SetChipSelect>
//		_delay_us(100);        
      }
      break;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    4b26:	97 01       	movw	r18, r14
    4b28:	4b 2d       	mov	r20, r11
    4b2a:	be 01       	movw	r22, r28
    4b2c:	c8 01       	movw	r24, r16
    4b2e:	0e 94 90 2a 	call	0x5520	; 0x5520 <u8g_dev_pb8v1_base_fn>
}
    4b32:	df 91       	pop	r29
    4b34:	cf 91       	pop	r28
    4b36:	1f 91       	pop	r17
    4b38:	0f 91       	pop	r16
    4b3a:	ff 90       	pop	r15
    4b3c:	ef 90       	pop	r14
    4b3e:	df 90       	pop	r13
    4b40:	cf 90       	pop	r12
    4b42:	bf 90       	pop	r11
    4b44:	08 95       	ret

00004b46 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
    4b46:	fc 01       	movw	r30, r24
    4b48:	e6 0f       	add	r30, r22
    4b4a:	f1 1d       	adc	r31, r1
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
    4b4c:	84 91       	lpm	r24, Z
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    font++;
    pos <<= 8;
    4b50:	98 2f       	mov	r25, r24
    4b52:	88 27       	eor	r24, r24
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
    font++;
    4b54:	31 96       	adiw	r30, 0x01	; 1
    pos <<= 8;
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
    4b56:	e4 91       	lpm	r30, Z
    return pos;
}
    4b58:	8e 0f       	add	r24, r30
    4b5a:	91 1d       	adc	r25, r1
    4b5c:	08 95       	ret

00004b5e <u8g_font_GetFormat>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    4b5e:	fc 01       	movw	r30, r24
    4b60:	84 91       	lpm	r24, Z

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
  return u8g_font_get_byte(font, 0);
}
    4b62:	08 95       	ret

00004b64 <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
  switch(u8g_font_GetFormat(font))
    4b64:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <u8g_font_GetFormat>
    4b68:	88 23       	and	r24, r24
    4b6a:	11 f0       	breq	.+4      	; 0x4b70 <u8g_font_GetFontGlyphStructureSize+0xc>
    4b6c:	82 30       	cpi	r24, 0x02	; 2
    4b6e:	11 f4       	brne	.+4      	; 0x4b74 <u8g_font_GetFontGlyphStructureSize+0x10>
  {
    case 0: return 6;
    4b70:	86 e0       	ldi	r24, 0x06	; 6
    4b72:	08 95       	ret
    case 1: return 3;
    4b74:	83 e0       	ldi	r24, 0x03	; 3
    case 2: return 6;
  }
  return 3;
}
    4b76:	08 95       	ret

00004b78 <u8g_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
  return 0;
}
    4b78:	80 e0       	ldi	r24, 0x00	; 0
    4b7a:	08 95       	ret

00004b7c <u8g_font_calc_vref_top>:

  /*
  y += (u8g_uint_t)(u8g_int_t)(u8g->font_ref_ascent);
  y++;
  */
  tmp = (u8g_uint_t)(u8g_int_t)(u8g->font_ref_ascent);
    4b7c:	fc 01       	movw	r30, r24
    4b7e:	80 8d       	ldd	r24, Z+24	; 0x18
  tmp++;
  return tmp;
}
    4b80:	8f 5f       	subi	r24, 0xFF	; 255
    4b82:	08 95       	ret

00004b84 <u8g_font_GetEncoding65Pos>:
}

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
    return u8g_font_get_word(font, 6);
    4b84:	66 e0       	ldi	r22, 0x06	; 6
    4b86:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <u8g_font_get_word>
}
    4b8a:	08 95       	ret

00004b8c <u8g_font_GetEncoding97Pos>:

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
    return u8g_font_get_word(font, 8);
    4b8c:	68 e0       	ldi	r22, 0x08	; 8
    4b8e:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <u8g_font_get_word>
}
    4b92:	08 95       	ret

00004b94 <u8g_font_GetFontStartEncoding>:

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    4b94:	0a 96       	adiw	r24, 0x0a	; 10
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    4b96:	fc 01       	movw	r30, r24
    4b98:	84 91       	lpm	r24, Z
}

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
  return u8g_font_get_byte(font, 10);
}
    4b9a:	08 95       	ret

00004b9c <u8g_font_GetFontEndEncoding>:

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    4b9c:	0b 96       	adiw	r24, 0x0b	; 11
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    4b9e:	fc 01       	movw	r30, r24
    4ba0:	84 91       	lpm	r24, Z
}

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
  return u8g_font_get_byte(font, 11);
}
    4ba2:	08 95       	ret

00004ba4 <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
    4ba4:	af 92       	push	r10
    4ba6:	bf 92       	push	r11
    4ba8:	cf 92       	push	r12
    4baa:	df 92       	push	r13
    4bac:	ef 92       	push	r14
    4bae:	ff 92       	push	r15
    4bb0:	0f 93       	push	r16
    4bb2:	1f 93       	push	r17
    4bb4:	cf 93       	push	r28
    4bb6:	df 93       	push	r29
    4bb8:	7c 01       	movw	r14, r24
    4bba:	b6 2e       	mov	r11, r22
  uint8_t *p = (uint8_t *)(u8g->font);
    4bbc:	dc 01       	movw	r26, r24
    4bbe:	14 96       	adiw	r26, 0x04	; 4
    4bc0:	cd 91       	ld	r28, X+
    4bc2:	dc 91       	ld	r29, X
    4bc4:	15 97       	sbiw	r26, 0x05	; 5
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
    4bc6:	ce 01       	movw	r24, r28
    4bc8:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <u8g_font_GetFormat>
    4bcc:	18 2f       	mov	r17, r24
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
    4bce:	f7 01       	movw	r30, r14
    4bd0:	84 81       	ldd	r24, Z+4	; 0x04
    4bd2:	95 81       	ldd	r25, Z+5	; 0x05
    4bd4:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <u8g_font_GetFontGlyphStructureSize>
    4bd8:	08 2f       	mov	r16, r24
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;

  if ( font_format == 1 )
    4bda:	11 30       	cpi	r17, 0x01	; 1
    4bdc:	19 f0       	breq	.+6      	; 0x4be4 <u8g_GetGlyph+0x40>
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
    4bde:	aa 24       	eor	r10, r10
    4be0:	aa 94       	dec	r10
    4be2:	04 c0       	rjmp	.+8      	; 0x4bec <u8g_GetGlyph+0x48>

  if ( font_format == 1 )
    mask = 15;
    4be4:	0f 2e       	mov	r0, r31
    4be6:	ff e0       	ldi	r31, 0x0F	; 15
    4be8:	af 2e       	mov	r10, r31
    4bea:	f0 2d       	mov	r31, r0
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
    4bec:	d7 01       	movw	r26, r14
    4bee:	14 96       	adiw	r26, 0x04	; 4
    4bf0:	8d 91       	ld	r24, X+
    4bf2:	9c 91       	ld	r25, X
    4bf4:	15 97       	sbiw	r26, 0x05	; 5
    4bf6:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <u8g_font_GetFontStartEncoding>
    4bfa:	d8 2e       	mov	r13, r24
  end = u8g_font_GetFontEndEncoding(u8g->font);
    4bfc:	f7 01       	movw	r30, r14
    4bfe:	84 81       	ldd	r24, Z+4	; 0x04
    4c00:	95 81       	ldd	r25, Z+5	; 0x05
    4c02:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <u8g_font_GetFontEndEncoding>
    4c06:	c8 2e       	mov	r12, r24

  pos = u8g_font_GetEncoding97Pos(u8g->font);
    4c08:	d7 01       	movw	r26, r14
    4c0a:	14 96       	adiw	r26, 0x04	; 4
    4c0c:	8d 91       	ld	r24, X+
    4c0e:	9c 91       	ld	r25, X
    4c10:	15 97       	sbiw	r26, 0x05	; 5
    4c12:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <u8g_font_GetEncoding97Pos>
  if ( requested_encoding >= 97 && pos > 0 )
    4c16:	b0 e6       	ldi	r27, 0x60	; 96
    4c18:	bb 15       	cp	r27, r11
    4c1a:	48 f4       	brcc	.+18     	; 0x4c2e <u8g_GetGlyph+0x8a>
    4c1c:	00 97       	sbiw	r24, 0x00	; 0
    4c1e:	39 f0       	breq	.+14     	; 0x4c2e <u8g_GetGlyph+0x8a>
  {
    p+= pos;
    4c20:	c8 0f       	add	r28, r24
    4c22:	d9 1f       	adc	r29, r25
    start = 97;
    4c24:	0f 2e       	mov	r0, r31
    4c26:	f1 e6       	ldi	r31, 0x61	; 97
    4c28:	df 2e       	mov	r13, r31
    4c2a:	f0 2d       	mov	r31, r0
    4c2c:	12 c0       	rjmp	.+36     	; 0x4c52 <u8g_GetGlyph+0xae>
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
    4c2e:	f7 01       	movw	r30, r14
    4c30:	84 81       	ldd	r24, Z+4	; 0x04
    4c32:	95 81       	ldd	r25, Z+5	; 0x05
    4c34:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <u8g_font_GetEncoding65Pos>
    if ( requested_encoding >= 65 && pos > 0 )
    4c38:	f0 e4       	ldi	r31, 0x40	; 64
    4c3a:	fb 15       	cp	r31, r11
    4c3c:	48 f4       	brcc	.+18     	; 0x4c50 <u8g_GetGlyph+0xac>
    4c3e:	00 97       	sbiw	r24, 0x00	; 0
    4c40:	39 f0       	breq	.+14     	; 0x4c50 <u8g_GetGlyph+0xac>
    {
      p+= pos;
    4c42:	c8 0f       	add	r28, r24
    4c44:	d9 1f       	adc	r29, r25
      start = 65;
    4c46:	0f 2e       	mov	r0, r31
    4c48:	f1 e4       	ldi	r31, 0x41	; 65
    4c4a:	df 2e       	mov	r13, r31
    4c4c:	f0 2d       	mov	r31, r0
    4c4e:	01 c0       	rjmp	.+2      	; 0x4c52 <u8g_GetGlyph+0xae>
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
    4c50:	61 96       	adiw	r28, 0x11	; 17
  }
  
  if ( requested_encoding > end )
    4c52:	cb 14       	cp	r12, r11
    4c54:	90 f4       	brcc	.+36     	; 0x4c7a <u8g_GetGlyph+0xd6>
}

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
  u8g->glyph_dx = 0;
    4c56:	d7 01       	movw	r26, r14
    4c58:	50 96       	adiw	r26, 0x10	; 16
    4c5a:	1c 92       	st	X, r1
    4c5c:	50 97       	sbiw	r26, 0x10	; 16
  u8g->glyph_width = 0;
    4c5e:	53 96       	adiw	r26, 0x13	; 19
    4c60:	1c 92       	st	X, r1
    4c62:	53 97       	sbiw	r26, 0x13	; 19
  u8g->glyph_height = 0;
    4c64:	54 96       	adiw	r26, 0x14	; 20
    4c66:	1c 92       	st	X, r1
    4c68:	54 97       	sbiw	r26, 0x14	; 20
  u8g->glyph_x = 0;
    4c6a:	51 96       	adiw	r26, 0x11	; 17
    4c6c:	1c 92       	st	X, r1
    4c6e:	51 97       	sbiw	r26, 0x11	; 17
  u8g->glyph_y = 0;
    4c70:	52 96       	adiw	r26, 0x12	; 18
    4c72:	1c 92       	st	X, r1
  }
  
  if ( requested_encoding > end )
  {
    u8g_FillEmptyGlyphCache(u8g);
    return NULL;                      /* not found */
    4c74:	80 e0       	ldi	r24, 0x00	; 0
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	73 c0       	rjmp	.+230    	; 0x4d60 <u8g_GetGlyph+0x1bc>
  }
  
  i = start;
  if ( i <= end )
    4c7a:	cd 14       	cp	r12, r13
    4c7c:	08 f4       	brcc	.+2      	; 0x4c80 <u8g_GetGlyph+0xdc>
    4c7e:	68 c0       	rjmp	.+208    	; 0x4d50 <u8g_GetGlyph+0x1ac>
        {
          u8g_CopyGlyphDataToCache(u8g, p);
          return p;
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
        p += data_structure_size;
    4c80:	20 2f       	mov	r18, r16
    4c82:	30 e0       	ldi	r19, 0x00	; 0
  i = start;
  if ( i <= end )
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
    4c84:	8e 01       	movw	r16, r28
    4c86:	fe 01       	movw	r30, r28
    4c88:	84 91       	lpm	r24, Z
    4c8a:	8f 3f       	cpi	r24, 0xFF	; 255
    4c8c:	11 f4       	brne	.+4      	; 0x4c92 <u8g_GetGlyph+0xee>
      {
        p += 1;
    4c8e:	21 96       	adiw	r28, 0x01	; 1
    4c90:	5b c0       	rjmp	.+182    	; 0x4d48 <u8g_GetGlyph+0x1a4>
      }
      else
      {
        if ( i == requested_encoding )
    4c92:	db 10       	cpse	r13, r11
    4c94:	51 c0       	rjmp	.+162    	; 0x4d38 <u8g_GetGlyph+0x194>
    4c96:	6e 01       	movw	r12, r28
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
    4c98:	d7 01       	movw	r26, r14
    4c9a:	14 96       	adiw	r26, 0x04	; 4
    4c9c:	8d 91       	ld	r24, X+
    4c9e:	9c 91       	ld	r25, X
    4ca0:	15 97       	sbiw	r26, 0x05	; 5
    4ca2:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <u8g_font_GetFormat>
    4ca6:	88 23       	and	r24, r24
    4ca8:	11 f0       	breq	.+4      	; 0x4cae <u8g_GetGlyph+0x10a>
    4caa:	82 30       	cpi	r24, 0x02	; 2
    4cac:	01 f5       	brne	.+64     	; 0x4cee <u8g_GetGlyph+0x14a>
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
    4cae:	f8 01       	movw	r30, r16
    4cb0:	04 91       	lpm	r16, Z
    4cb2:	d7 01       	movw	r26, r14
    4cb4:	53 96       	adiw	r26, 0x13	; 19
    4cb6:	0c 93       	st	X, r16
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
    4cb8:	f6 01       	movw	r30, r12
    4cba:	31 96       	adiw	r30, 0x01	; 1
    4cbc:	e4 91       	lpm	r30, Z
    4cbe:	d7 01       	movw	r26, r14
    4cc0:	54 96       	adiw	r26, 0x14	; 20
    4cc2:	ec 93       	st	X, r30
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
    4cc4:	f6 01       	movw	r30, r12
    4cc6:	33 96       	adiw	r30, 0x03	; 3
    4cc8:	e4 91       	lpm	r30, Z
    4cca:	d7 01       	movw	r26, r14
    4ccc:	50 96       	adiw	r26, 0x10	; 16
    4cce:	ec 93       	st	X, r30
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
    4cd0:	f6 01       	movw	r30, r12
    4cd2:	34 96       	adiw	r30, 0x04	; 4
    4cd4:	e4 91       	lpm	r30, Z
    4cd6:	d7 01       	movw	r26, r14
    4cd8:	51 96       	adiw	r26, 0x11	; 17
    4cda:	ec 93       	st	X, r30
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
    4cdc:	f6 01       	movw	r30, r12
    4cde:	35 96       	adiw	r30, 0x05	; 5
    4ce0:	e4 91       	lpm	r30, Z
    4ce2:	d7 01       	movw	r26, r14
    4ce4:	52 96       	adiw	r26, 0x12	; 18
    4ce6:	ec 93       	st	X, r30
    4ce8:	8c 2f       	mov	r24, r28
    4cea:	9d 2f       	mov	r25, r29
    4cec:	39 c0       	rjmp	.+114    	; 0x4d60 <u8g_GetGlyph+0x1bc>
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
    4cee:	fe 01       	movw	r30, r28
    4cf0:	04 91       	lpm	r16, Z
      u8g->glyph_y =  tmp & 15;
    4cf2:	80 2f       	mov	r24, r16
    4cf4:	8f 70       	andi	r24, 0x0F	; 15
      u8g->glyph_y-=2;
    4cf6:	82 50       	subi	r24, 0x02	; 2
    4cf8:	d7 01       	movw	r26, r14
    4cfa:	52 96       	adiw	r26, 0x12	; 18
    4cfc:	8c 93       	st	X, r24
    4cfe:	52 97       	sbiw	r26, 0x12	; 18
      tmp >>= 4;
    4d00:	02 95       	swap	r16
    4d02:	0f 70       	andi	r16, 0x0F	; 15
      u8g->glyph_x =  tmp;
    4d04:	51 96       	adiw	r26, 0x11	; 17
    4d06:	0c 93       	st	X, r16
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
    4d08:	fe 01       	movw	r30, r28
    4d0a:	31 96       	adiw	r30, 0x01	; 1
    4d0c:	e4 91       	lpm	r30, Z
      u8g->glyph_height =  tmp & 15;
    4d0e:	8e 2f       	mov	r24, r30
    4d10:	8f 70       	andi	r24, 0x0F	; 15
    4d12:	d7 01       	movw	r26, r14
    4d14:	54 96       	adiw	r26, 0x14	; 20
    4d16:	8c 93       	st	X, r24
    4d18:	54 97       	sbiw	r26, 0x14	; 20
      tmp >>= 4;
    4d1a:	e2 95       	swap	r30
    4d1c:	ef 70       	andi	r30, 0x0F	; 15
      u8g->glyph_width =  tmp;
    4d1e:	53 96       	adiw	r26, 0x13	; 19
    4d20:	ec 93       	st	X, r30
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
    4d22:	fe 01       	movw	r30, r28
    4d24:	32 96       	adiw	r30, 0x02	; 2
    4d26:	e4 91       	lpm	r30, Z
      tmp >>= 4;
    4d28:	e2 95       	swap	r30
    4d2a:	ef 70       	andi	r30, 0x0F	; 15
      u8g->glyph_dx = tmp;
    4d2c:	d7 01       	movw	r26, r14
    4d2e:	50 96       	adiw	r26, 0x10	; 16
    4d30:	ec 93       	st	X, r30
    4d32:	8c 2f       	mov	r24, r28
    4d34:	9d 2f       	mov	r25, r29
    4d36:	14 c0       	rjmp	.+40     	; 0x4d60 <u8g_GetGlyph+0x1bc>
        if ( i == requested_encoding )
        {
          u8g_CopyGlyphDataToCache(u8g, p);
          return p;
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
    4d38:	fe 01       	movw	r30, r28
    4d3a:	32 96       	adiw	r30, 0x02	; 2
    4d3c:	e4 91       	lpm	r30, Z
    4d3e:	ea 21       	and	r30, r10
    4d40:	ce 0f       	add	r28, r30
    4d42:	d1 1d       	adc	r29, r1
        p += data_structure_size;
    4d44:	c2 0f       	add	r28, r18
    4d46:	d3 1f       	adc	r29, r19
      }
      if ( i == end )
    4d48:	dc 14       	cp	r13, r12
    4d4a:	11 f0       	breq	.+4      	; 0x4d50 <u8g_GetGlyph+0x1ac>
        break;
      i++;
    4d4c:	d3 94       	inc	r13
    }
    4d4e:	9a cf       	rjmp	.-204    	; 0x4c84 <u8g_GetGlyph+0xe0>
}

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
  u8g->glyph_dx = 0;
    4d50:	f7 01       	movw	r30, r14
    4d52:	10 8a       	std	Z+16, r1	; 0x10
  u8g->glyph_width = 0;
    4d54:	13 8a       	std	Z+19, r1	; 0x13
  u8g->glyph_height = 0;
    4d56:	14 8a       	std	Z+20, r1	; 0x14
  u8g->glyph_x = 0;
    4d58:	11 8a       	std	Z+17, r1	; 0x11
  u8g->glyph_y = 0;
    4d5a:	12 8a       	std	Z+18, r1	; 0x12
    }
  }
  
  u8g_FillEmptyGlyphCache(u8g);
    
  return NULL;
    4d5c:	80 e0       	ldi	r24, 0x00	; 0
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
}
    4d60:	df 91       	pop	r29
    4d62:	cf 91       	pop	r28
    4d64:	1f 91       	pop	r17
    4d66:	0f 91       	pop	r16
    4d68:	ff 90       	pop	r15
    4d6a:	ef 90       	pop	r14
    4d6c:	df 90       	pop	r13
    4d6e:	cf 90       	pop	r12
    4d70:	bf 90       	pop	r11
    4d72:	af 90       	pop	r10
    4d74:	08 95       	ret

00004d76 <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
    4d76:	6f 92       	push	r6
    4d78:	7f 92       	push	r7
    4d7a:	8f 92       	push	r8
    4d7c:	9f 92       	push	r9
    4d7e:	af 92       	push	r10
    4d80:	bf 92       	push	r11
    4d82:	cf 92       	push	r12
    4d84:	df 92       	push	r13
    4d86:	ef 92       	push	r14
    4d88:	ff 92       	push	r15
    4d8a:	0f 93       	push	r16
    4d8c:	1f 93       	push	r17
    4d8e:	cf 93       	push	r28
    4d90:	df 93       	push	r29
    4d92:	6c 01       	movw	r12, r24
    4d94:	16 2f       	mov	r17, r22
    4d96:	74 2e       	mov	r7, r20
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
    4d98:	62 2f       	mov	r22, r18
    4d9a:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <u8g_GetGlyph>
    4d9e:	7c 01       	movw	r14, r24
    if ( g == NULL  )
    4da0:	00 97       	sbiw	r24, 0x00	; 0
    4da2:	09 f4       	brne	.+2      	; 0x4da6 <u8g_draw_glyph+0x30>
    4da4:	47 c0       	rjmp	.+142    	; 0x4e34 <u8g_draw_glyph+0xbe>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
    4da6:	f6 01       	movw	r30, r12
    4da8:	84 81       	ldd	r24, Z+4	; 0x04
    4daa:	95 81       	ldd	r25, Z+5	; 0x05
    4dac:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <u8g_font_GetFontGlyphStructureSize>
    4db0:	b8 2e       	mov	r11, r24
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
    4db2:	f6 01       	movw	r30, r12
    4db4:	d3 89       	ldd	r29, Z+19	; 0x13
  h = u8g->glyph_height;
    4db6:	c4 89       	ldd	r28, Z+20	; 0x14
  
  x += u8g->glyph_x;
    4db8:	61 88       	ldd	r6, Z+17	; 0x11
    4dba:	61 0e       	add	r6, r17
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
    4dbc:	92 89       	ldd	r25, Z+18	; 0x12
    4dbe:	79 1a       	sub	r7, r25
    4dc0:	97 2c       	mov	r9, r7
    4dc2:	9c 1a       	sub	r9, r28
    4dc4:	0c 2f       	mov	r16, r28
    4dc6:	2d 2f       	mov	r18, r29
    4dc8:	49 2d       	mov	r20, r9
    4dca:	66 2d       	mov	r22, r6
    4dcc:	c6 01       	movw	r24, r12
    4dce:	0e 94 9c 22 	call	0x4538	; 0x4538 <u8g_IsBBXIntersection>
    4dd2:	81 11       	cpse	r24, r1
    4dd4:	03 c0       	rjmp	.+6      	; 0x4ddc <u8g_draw_glyph+0x66>
    return u8g->glyph_dx;
    4dd6:	f6 01       	movw	r30, r12
    4dd8:	80 89       	ldd	r24, Z+16	; 0x10
    4dda:	2d c0       	rjmp	.+90     	; 0x4e36 <u8g_draw_glyph+0xc0>

  /* now, w is reused as bytes per line */
  w += 7;
    4ddc:	d9 5f       	subi	r29, 0xF9	; 249
  w /= 8;
    4dde:	8d 2e       	mov	r8, r29
    4de0:	86 94       	lsr	r8
    4de2:	86 94       	lsr	r8
    4de4:	86 94       	lsr	r8
  
  iy = y;
  iy -= h;
  iy++;

  for( j = 0; j < h; j++ )
    4de6:	cc 23       	and	r28, r28
    4de8:	11 f1       	breq	.+68     	; 0x4e2e <u8g_draw_glyph+0xb8>


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
    4dea:	eb 0c       	add	r14, r11
    4dec:	f1 1c       	adc	r15, r1
    4dee:	aa 24       	eor	r10, r10
    4df0:	aa 94       	dec	r10
    4df2:	a8 0c       	add	r10, r8
    4df4:	b1 2c       	mov	r11, r1
    4df6:	ff ef       	ldi	r31, 0xFF	; 255
    4df8:	af 1a       	sub	r10, r31
    4dfa:	bf 0a       	sbc	r11, r31
    4dfc:	13 c0       	rjmp	.+38     	; 0x4e24 <u8g_draw_glyph+0xae>
  for( j = 0; j < h; j++ )
  {
    ix = x;
    for( i = 0; i < w; i++ )
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
    4dfe:	fe 01       	movw	r30, r28
    4e00:	04 91       	lpm	r16, Z
    4e02:	20 e0       	ldi	r18, 0x00	; 0
    4e04:	49 2d       	mov	r20, r9
    4e06:	61 2f       	mov	r22, r17
    4e08:	c6 01       	movw	r24, r12
    4e0a:	0e 94 8c 29 	call	0x5318	; 0x5318 <u8g_Draw8Pixel>
      data++;
    4e0e:	21 96       	adiw	r28, 0x01	; 1
      ix+=8;
    4e10:	18 5f       	subi	r17, 0xF8	; 248
    4e12:	8c 2f       	mov	r24, r28
    4e14:	8e 19       	sub	r24, r14
  iy++;

  for( j = 0; j < h; j++ )
  {
    ix = x;
    for( i = 0; i < w; i++ )
    4e16:	88 15       	cp	r24, r8
    4e18:	90 f3       	brcs	.-28     	; 0x4dfe <u8g_draw_glyph+0x88>
    4e1a:	ea 0c       	add	r14, r10
    4e1c:	fb 1c       	adc	r15, r11
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
      data++;
      ix+=8;
    }
    iy++;
    4e1e:	93 94       	inc	r9
  
  iy = y;
  iy -= h;
  iy++;

  for( j = 0; j < h; j++ )
    4e20:	97 14       	cp	r9, r7
    4e22:	29 f0       	breq	.+10     	; 0x4e2e <u8g_draw_glyph+0xb8>
  {
    ix = x;
    for( i = 0; i < w; i++ )
    4e24:	88 20       	and	r8, r8
    4e26:	d9 f3       	breq	.-10     	; 0x4e1e <u8g_draw_glyph+0xa8>
    4e28:	16 2d       	mov	r17, r6
    4e2a:	e7 01       	movw	r28, r14
    4e2c:	e8 cf       	rjmp	.-48     	; 0x4dfe <u8g_draw_glyph+0x88>
      data++;
      ix+=8;
    }
    iy++;
  }
  return u8g->glyph_dx;
    4e2e:	f6 01       	movw	r30, r12
    4e30:	80 89       	ldd	r24, Z+16	; 0x10
    4e32:	01 c0       	rjmp	.+2      	; 0x4e36 <u8g_draw_glyph+0xc0>
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
    if ( g == NULL  )
      return 0;
    4e34:	80 e0       	ldi	r24, 0x00	; 0
      ix+=8;
    }
    iy++;
  }
  return u8g->glyph_dx;
}
    4e36:	df 91       	pop	r29
    4e38:	cf 91       	pop	r28
    4e3a:	1f 91       	pop	r17
    4e3c:	0f 91       	pop	r16
    4e3e:	ff 90       	pop	r15
    4e40:	ef 90       	pop	r14
    4e42:	df 90       	pop	r13
    4e44:	cf 90       	pop	r12
    4e46:	bf 90       	pop	r11
    4e48:	af 90       	pop	r10
    4e4a:	9f 90       	pop	r9
    4e4c:	8f 90       	pop	r8
    4e4e:	7f 90       	pop	r7
    4e50:	6f 90       	pop	r6
    4e52:	08 95       	ret

00004e54 <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
    4e54:	df 92       	push	r13
    4e56:	ef 92       	push	r14
    4e58:	ff 92       	push	r15
    4e5a:	0f 93       	push	r16
    4e5c:	1f 93       	push	r17
    4e5e:	cf 93       	push	r28
    4e60:	df 93       	push	r29
    4e62:	8c 01       	movw	r16, r24
    4e64:	f6 2e       	mov	r15, r22
    4e66:	d4 2e       	mov	r13, r20
    4e68:	e9 01       	movw	r28, r18
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
    4e6a:	dc 01       	movw	r26, r24
    4e6c:	55 96       	adiw	r26, 0x15	; 21
    4e6e:	ed 91       	ld	r30, X+
    4e70:	fc 91       	ld	r31, X
    4e72:	56 97       	sbiw	r26, 0x16	; 22
    4e74:	09 95       	icall
    4e76:	d8 0e       	add	r13, r24
  
  while( *s != '\0' )
    4e78:	28 81       	ld	r18, Y
    4e7a:	22 23       	and	r18, r18
    4e7c:	69 f0       	breq	.+26     	; 0x4e98 <u8g_DrawStr+0x44>
    4e7e:	21 96       	adiw	r28, 0x01	; 1
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
    4e80:	e1 2c       	mov	r14, r1
  
  y += u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
    4e82:	4d 2d       	mov	r20, r13
    4e84:	6f 2d       	mov	r22, r15
    4e86:	c8 01       	movw	r24, r16
    4e88:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <u8g_draw_glyph>
    x += d;
    4e8c:	f8 0e       	add	r15, r24
    t += d;
    4e8e:	e8 0e       	add	r14, r24
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
    4e90:	29 91       	ld	r18, Y+
    4e92:	21 11       	cpse	r18, r1
    4e94:	f6 cf       	rjmp	.-20     	; 0x4e82 <u8g_DrawStr+0x2e>
    4e96:	01 c0       	rjmp	.+2      	; 0x4e9a <u8g_DrawStr+0x46>
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
    4e98:	e1 2c       	mov	r14, r1
    x += d;
    t += d;
    s++;
  }
  return t;
}
    4e9a:	8e 2d       	mov	r24, r14
    4e9c:	df 91       	pop	r29
    4e9e:	cf 91       	pop	r28
    4ea0:	1f 91       	pop	r17
    4ea2:	0f 91       	pop	r16
    4ea4:	ff 90       	pop	r15
    4ea6:	ef 90       	pop	r14
    4ea8:	df 90       	pop	r13
    4eaa:	08 95       	ret

00004eac <u8g_UpdateRefHeight>:

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
    4eac:	dc 01       	movw	r26, r24
  uint16_t ls;
  if ( u8g->font == NULL )
    4eae:	14 96       	adiw	r26, 0x04	; 4
    4eb0:	8d 91       	ld	r24, X+
    4eb2:	9c 91       	ld	r25, X
    4eb4:	15 97       	sbiw	r26, 0x05	; 5
    4eb6:	00 97       	sbiw	r24, 0x00	; 0
    4eb8:	09 f4       	brne	.+2      	; 0x4ebc <u8g_UpdateRefHeight+0x10>
    4eba:	4d c0       	rjmp	.+154    	; 0x4f56 <u8g_UpdateRefHeight+0xaa>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
    4ebc:	57 96       	adiw	r26, 0x17	; 23
    4ebe:	2c 91       	ld	r18, X
    4ec0:	57 97       	sbiw	r26, 0x17	; 23
    4ec2:	21 11       	cpse	r18, r1
    4ec4:	0d c0       	rjmp	.+26     	; 0x4ee0 <u8g_UpdateRefHeight+0x34>

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    4ec6:	fc 01       	movw	r30, r24
    4ec8:	35 96       	adiw	r30, 0x05	; 5
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    4eca:	e4 91       	lpm	r30, Z
  uint16_t ls;
  if ( u8g->font == NULL )
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
    4ecc:	58 96       	adiw	r26, 0x18	; 24
    4ece:	ec 93       	st	X, r30
    4ed0:	58 97       	sbiw	r26, 0x18	; 24

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    4ed2:	fc 01       	movw	r30, r24
    4ed4:	3c 96       	adiw	r30, 0x0c	; 12
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    4ed6:	84 91       	lpm	r24, Z
  if ( u8g->font == NULL )
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
    4ed8:	59 96       	adiw	r26, 0x19	; 25
    4eda:	8c 93       	st	X, r24
    4edc:	59 97       	sbiw	r26, 0x19	; 25
    4ede:	1b c0       	rjmp	.+54     	; 0x4f16 <u8g_UpdateRefHeight+0x6a>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
    4ee0:	21 30       	cpi	r18, 0x01	; 1
    4ee2:	69 f4       	brne	.+26     	; 0x4efe <u8g_UpdateRefHeight+0x52>

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    4ee4:	fc 01       	movw	r30, r24
    4ee6:	3f 96       	adiw	r30, 0x0f	; 15
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    4ee8:	e4 91       	lpm	r30, Z
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
    4eea:	58 96       	adiw	r26, 0x18	; 24
    4eec:	ec 93       	st	X, r30
    4eee:	58 97       	sbiw	r26, 0x18	; 24

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    4ef0:	fc 01       	movw	r30, r24
    4ef2:	70 96       	adiw	r30, 0x10	; 16
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    4ef4:	84 91       	lpm	r24, Z
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
    4ef6:	59 96       	adiw	r26, 0x19	; 25
    4ef8:	8c 93       	st	X, r24
    4efa:	59 97       	sbiw	r26, 0x19	; 25
    4efc:	0c c0       	rjmp	.+24     	; 0x4f16 <u8g_UpdateRefHeight+0x6a>

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    4efe:	fc 01       	movw	r30, r24
    4f00:	3d 96       	adiw	r30, 0x0d	; 13
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    4f02:	e4 91       	lpm	r30, Z
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
    4f04:	58 96       	adiw	r26, 0x18	; 24
    4f06:	ec 93       	st	X, r30
    4f08:	58 97       	sbiw	r26, 0x18	; 24

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    4f0a:	fc 01       	movw	r30, r24
    4f0c:	3e 96       	adiw	r30, 0x0e	; 14
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    4f0e:	84 91       	lpm	r24, Z
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
    4f10:	59 96       	adiw	r26, 0x19	; 25
    4f12:	8c 93       	st	X, r24
    4f14:	59 97       	sbiw	r26, 0x19	; 25
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
    4f16:	58 96       	adiw	r26, 0x18	; 24
    4f18:	8c 91       	ld	r24, X
    4f1a:	58 97       	sbiw	r26, 0x18	; 24
    4f1c:	99 27       	eor	r25, r25
    4f1e:	87 fd       	sbrc	r24, 7
    4f20:	90 95       	com	r25
    4f22:	59 96       	adiw	r26, 0x19	; 25
    4f24:	2c 91       	ld	r18, X
    4f26:	59 97       	sbiw	r26, 0x19	; 25
    4f28:	82 1b       	sub	r24, r18
    4f2a:	91 09       	sbc	r25, r1
    4f2c:	27 fd       	sbrc	r18, 7
    4f2e:	93 95       	inc	r25
  if ( u8g->font_line_spacing_factor != 64 )
    4f30:	5a 96       	adiw	r26, 0x1a	; 26
    4f32:	2c 91       	ld	r18, X
    4f34:	5a 97       	sbiw	r26, 0x1a	; 26
    4f36:	20 34       	cpi	r18, 0x40	; 64
    4f38:	61 f0       	breq	.+24     	; 0x4f52 <u8g_UpdateRefHeight+0xa6>
  {
    ls &= 255;
    ls *= u8g->font_line_spacing_factor;
    4f3a:	82 9f       	mul	r24, r18
    4f3c:	c0 01       	movw	r24, r0
    4f3e:	11 24       	eor	r1, r1
    ls >>= 6;
    4f40:	00 24       	eor	r0, r0
    4f42:	88 0f       	add	r24, r24
    4f44:	99 1f       	adc	r25, r25
    4f46:	00 1c       	adc	r0, r0
    4f48:	88 0f       	add	r24, r24
    4f4a:	99 1f       	adc	r25, r25
    4f4c:	00 1c       	adc	r0, r0
    4f4e:	89 2f       	mov	r24, r25
    4f50:	90 2d       	mov	r25, r0
  }
  u8g->line_spacing = ls;
    4f52:	5b 96       	adiw	r26, 0x1b	; 27
    4f54:	8c 93       	st	X, r24
    4f56:	08 95       	ret

00004f58 <u8g_SetFontRefHeightText>:
}

void u8g_SetFontRefHeightText(u8g_t *u8g)
{
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_TEXT;
    4f58:	fc 01       	movw	r30, r24
    4f5a:	17 8a       	std	Z+23, r1	; 0x17
  u8g_UpdateRefHeight(u8g);
    4f5c:	0e 94 56 27 	call	0x4eac	; 0x4eac <u8g_UpdateRefHeight>
    4f60:	08 95       	ret

00004f62 <u8g_SetFontPosBaseline>:
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    4f62:	2c eb       	ldi	r18, 0xBC	; 188
    4f64:	35 e2       	ldi	r19, 0x25	; 37
    4f66:	fc 01       	movw	r30, r24
    4f68:	25 8b       	std	Z+21, r18	; 0x15
    4f6a:	36 8b       	std	Z+22, r19	; 0x16
    4f6c:	08 95       	ret

00004f6e <u8g_SetFontPosTop>:
  return tmp;
}

void u8g_SetFontPosTop(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_top;
    4f6e:	2e eb       	ldi	r18, 0xBE	; 190
    4f70:	35 e2       	ldi	r19, 0x25	; 37
    4f72:	fc 01       	movw	r30, r24
    4f74:	25 8b       	std	Z+21, r18	; 0x15
    4f76:	36 8b       	std	Z+22, r19	; 0x16
    4f78:	08 95       	ret

00004f7a <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    4f7a:	cf 93       	push	r28
    4f7c:	df 93       	push	r29
    4f7e:	ec 01       	movw	r28, r24
  if ( u8g->font != font )
    4f80:	8c 81       	ldd	r24, Y+4	; 0x04
    4f82:	9d 81       	ldd	r25, Y+5	; 0x05
    4f84:	86 17       	cp	r24, r22
    4f86:	97 07       	cpc	r25, r23
    4f88:	49 f0       	breq	.+18     	; 0x4f9c <u8g_SetFont+0x22>
  {
    u8g->font = font;
    4f8a:	6c 83       	std	Y+4, r22	; 0x04
    4f8c:	7d 83       	std	Y+5, r23	; 0x05
    u8g_UpdateRefHeight(u8g);
    4f8e:	ce 01       	movw	r24, r28
    4f90:	0e 94 56 27 	call	0x4eac	; 0x4eac <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    4f94:	8c eb       	ldi	r24, 0xBC	; 188
    4f96:	95 e2       	ldi	r25, 0x25	; 37
    4f98:	8d 8b       	std	Y+21, r24	; 0x15
    4f9a:	9e 8b       	std	Y+22, r25	; 0x16
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    4f9c:	df 91       	pop	r29
    4f9e:	cf 91       	pop	r28
    4fa0:	08 95       	ret

00004fa2 <u8g_DrawLine>:
*/

#include "u8g.h"

void u8g_DrawLine(u8g_t *u8g, u8g_uint_t x1, u8g_uint_t y1, u8g_uint_t x2, u8g_uint_t y2)
{
    4fa2:	af 92       	push	r10
    4fa4:	bf 92       	push	r11
    4fa6:	cf 92       	push	r12
    4fa8:	df 92       	push	r13
    4faa:	ef 92       	push	r14
    4fac:	ff 92       	push	r15
    4fae:	0f 93       	push	r16
    4fb0:	1f 93       	push	r17
    4fb2:	cf 93       	push	r28
    4fb4:	df 93       	push	r29
    4fb6:	ec 01       	movw	r28, r24
    4fb8:	16 2f       	mov	r17, r22
    4fba:	e4 2e       	mov	r14, r20
    4fbc:	d2 2e       	mov	r13, r18

  uint8_t swapxy = 0;
  
  /* no BBX intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
    4fbe:	26 17       	cp	r18, r22
    4fc0:	18 f4       	brcc	.+6      	; 0x4fc8 <u8g_DrawLine+0x26>
    4fc2:	c6 2e       	mov	r12, r22
    4fc4:	c2 1a       	sub	r12, r18
    4fc6:	02 c0       	rjmp	.+4      	; 0x4fcc <u8g_DrawLine+0x2a>
    4fc8:	c2 2e       	mov	r12, r18
    4fca:	c6 1a       	sub	r12, r22
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    4fcc:	0e 15       	cp	r16, r14
    4fce:	18 f4       	brcc	.+6      	; 0x4fd6 <u8g_DrawLine+0x34>
    4fd0:	ae 2c       	mov	r10, r14
    4fd2:	a0 1a       	sub	r10, r16
    4fd4:	02 c0       	rjmp	.+4      	; 0x4fda <u8g_DrawLine+0x38>
    4fd6:	a0 2e       	mov	r10, r16
    4fd8:	ae 18       	sub	r10, r14

  if ( dy > dx ) 
    4fda:	ca 14       	cp	r12, r10
    4fdc:	28 f0       	brcs	.+10     	; 0x4fe8 <u8g_DrawLine+0x46>
    4fde:	8a 2d       	mov	r24, r10
    4fe0:	ac 2c       	mov	r10, r12
    4fe2:	c8 2e       	mov	r12, r24
  u8g_uint_t x,y;
  u8g_uint_t dx, dy;
  u8g_int_t err;
  u8g_int_t ystep;

  uint8_t swapxy = 0;
    4fe4:	b1 2c       	mov	r11, r1
    4fe6:	08 c0       	rjmp	.+16     	; 0x4ff8 <u8g_DrawLine+0x56>
    4fe8:	8d 2d       	mov	r24, r13
  if ( dy > dx ) 
  {
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
    4fea:	d0 2e       	mov	r13, r16
    4fec:	08 2f       	mov	r16, r24
    4fee:	81 2f       	mov	r24, r17

  if ( dy > dx ) 
  {
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    4ff0:	1e 2d       	mov	r17, r14
    4ff2:	e8 2e       	mov	r14, r24
  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;

  if ( dy > dx ) 
  {
    swapxy = 1;
    4ff4:	bb 24       	eor	r11, r11
    4ff6:	b3 94       	inc	r11
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    4ff8:	d1 16       	cp	r13, r17
    4ffa:	30 f4       	brcc	.+12     	; 0x5008 <u8g_DrawLine+0x66>
    4ffc:	8e 2d       	mov	r24, r14
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
    4ffe:	e0 2e       	mov	r14, r16
    5000:	08 2f       	mov	r16, r24
    5002:	81 2f       	mov	r24, r17
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    5004:	1d 2d       	mov	r17, r13
    5006:	d8 2e       	mov	r13, r24
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    5008:	fa 2c       	mov	r15, r10
    500a:	f6 94       	lsr	r15
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    500c:	e0 16       	cp	r14, r16
    500e:	10 f4       	brcc	.+4      	; 0x5014 <u8g_DrawLine+0x72>
    5010:	01 e0       	ldi	r16, 0x01	; 1
    5012:	01 c0       	rjmp	.+2      	; 0x5016 <u8g_DrawLine+0x74>
    5014:	0f ef       	ldi	r16, 0xFF	; 255
  y = y1;
  for( x = x1; x <= x2; x++ )
    5016:	d1 16       	cp	r13, r17
    5018:	a0 f0       	brcs	.+40     	; 0x5042 <u8g_DrawLine+0xa0>
  {
    if ( swapxy == 0 ) 
    501a:	b1 10       	cpse	r11, r1
    501c:	06 c0       	rjmp	.+12     	; 0x502a <u8g_DrawLine+0x88>
      u8g_DrawPixel(u8g, x, y); 
    501e:	4e 2d       	mov	r20, r14
    5020:	61 2f       	mov	r22, r17
    5022:	ce 01       	movw	r24, r28
    5024:	0e 94 83 29 	call	0x5306	; 0x5306 <u8g_DrawPixel>
    5028:	05 c0       	rjmp	.+10     	; 0x5034 <u8g_DrawLine+0x92>
    else 
      u8g_DrawPixel(u8g, y, x); 
    502a:	41 2f       	mov	r20, r17
    502c:	6e 2d       	mov	r22, r14
    502e:	ce 01       	movw	r24, r28
    5030:	0e 94 83 29 	call	0x5306	; 0x5306 <u8g_DrawPixel>
    err -= (uint8_t)dy;
    5034:	fc 18       	sub	r15, r12
    if ( err < 0 ) 
    5036:	12 f4       	brpl	.+4      	; 0x503c <u8g_DrawLine+0x9a>
    {
      y += (u8g_uint_t)ystep;
    5038:	e0 0e       	add	r14, r16
      err += (u8g_uint_t)dx;
    503a:	fa 0c       	add	r15, r10
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
  y = y1;
  for( x = x1; x <= x2; x++ )
    503c:	1f 5f       	subi	r17, 0xFF	; 255
    503e:	d1 16       	cp	r13, r17
    5040:	60 f7       	brcc	.-40     	; 0x501a <u8g_DrawLine+0x78>
    {
      y += (u8g_uint_t)ystep;
      err += (u8g_uint_t)dx;
    }
  }
}
    5042:	df 91       	pop	r29
    5044:	cf 91       	pop	r28
    5046:	1f 91       	pop	r17
    5048:	0f 91       	pop	r16
    504a:	ff 90       	pop	r15
    504c:	ef 90       	pop	r14
    504e:	df 90       	pop	r13
    5050:	cf 90       	pop	r12
    5052:	bf 90       	pop	r11
    5054:	af 90       	pop	r10
    5056:	08 95       	ret

00005058 <u8g_init_data>:
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
}

static void u8g_init_data(u8g_t *u8g)
{
    5058:	1f 93       	push	r17
    505a:	cf 93       	push	r28
    505c:	df 93       	push	r29
    505e:	ec 01       	movw	r28, r24
  u8g->font = NULL;
    5060:	1c 82       	std	Y+4, r1	; 0x04
    5062:	1d 82       	std	Y+5, r1	; 0x05
  u8g->cursor_font = NULL;
    5064:	1e 82       	std	Y+6, r1	; 0x06
    5066:	1f 82       	std	Y+7, r1	; 0x07
  u8g->cursor_bg_color = 0;
    5068:	19 86       	std	Y+9, r1	; 0x09
  u8g->cursor_fg_color = 1;
    506a:	81 e0       	ldi	r24, 0x01	; 1
    506c:	88 87       	std	Y+8, r24	; 0x08
  u8g->cursor_encoding = 34;
    506e:	82 e2       	ldi	r24, 0x22	; 34
    5070:	8a 87       	std	Y+10, r24	; 0x0a
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
    5072:	1e 86       	std	Y+14, r1	; 0x0e
    5074:	1f 86       	std	Y+15, r1	; 0x0f
    5076:	fe 01       	movw	r30, r28
    5078:	b3 96       	adiw	r30, 0x23	; 35

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
    507a:	80 e0       	ldi	r24, 0x00	; 0
      u8g->pin_list[i] = U8G_PIN_NONE;
    507c:	9f ef       	ldi	r25, 0xFF	; 255
    507e:	91 93       	st	Z+, r25
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
    5080:	8f 5f       	subi	r24, 0xFF	; 255
    5082:	8e 30       	cpi	r24, 0x0E	; 14
    5084:	e1 f7       	brne	.-8      	; 0x507e <u8g_init_data+0x26>
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    5086:	11 e0       	ldi	r17, 0x01	; 1
    5088:	18 a3       	std	Y+32, r17	; 0x20
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);

  u8g_SetFontPosBaseline(u8g);
    508a:	ce 01       	movw	r24, r28
    508c:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <u8g_SetFontPosBaseline>
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
    5090:	1f 8b       	std	Y+23, r17	; 0x17
  u8g->font_ref_ascent = 0;
    5092:	18 8e       	std	Y+24, r1	; 0x18
  u8g->font_ref_descent = 0;
    5094:	19 8e       	std	Y+25, r1	; 0x19
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
    5096:	80 e4       	ldi	r24, 0x40	; 64
    5098:	8a 8f       	std	Y+26, r24	; 0x1a
  u8g->line_spacing = 0;
    509a:	1b 8e       	std	Y+27, r1	; 0x1b
  
  u8g->state_cb = u8g_state_dummy_cb;
    509c:	8b e4       	ldi	r24, 0x4B	; 75
    509e:	9c e2       	ldi	r25, 0x2C	; 44
    50a0:	89 ab       	std	Y+49, r24	; 0x31
    50a2:	9a ab       	std	Y+50, r25	; 0x32

}
    50a4:	df 91       	pop	r29
    50a6:	cf 91       	pop	r28
    50a8:	1f 91       	pop	r17
    50aa:	08 95       	ret

000050ac <u8g_call_dev_fn>:
#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  return dev->dev_fn(u8g, dev, msg, arg); 
    50ac:	db 01       	movw	r26, r22
    50ae:	ed 91       	ld	r30, X+
    50b0:	fc 91       	ld	r31, X
    50b2:	09 95       	icall
}
    50b4:	08 95       	ret

000050b6 <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
    50b6:	0f 93       	push	r16
    50b8:	1f 93       	push	r17
    50ba:	cf 93       	push	r28
    50bc:	df 93       	push	r29
    50be:	ec 01       	movw	r28, r24
    50c0:	8b 01       	movw	r16, r22
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    50c2:	e9 a9       	ldd	r30, Y+49	; 0x31
    50c4:	fa a9       	ldd	r31, Y+50	; 0x32
    50c6:	82 e0       	ldi	r24, 0x02	; 2
    50c8:	09 95       	icall
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
    50ca:	20 e0       	ldi	r18, 0x00	; 0
    50cc:	30 e0       	ldi	r19, 0x00	; 0
    50ce:	4a e0       	ldi	r20, 0x0A	; 10
    50d0:	b8 01       	movw	r22, r16
    50d2:	ce 01       	movw	r24, r28
    50d4:	0e 94 56 28 	call	0x50ac	; 0x50ac <u8g_call_dev_fn>
    50d8:	18 2f       	mov	r17, r24
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
    50da:	e9 a9       	ldd	r30, Y+49	; 0x31
    50dc:	fa a9       	ldd	r31, Y+50	; 0x32
    50de:	83 e0       	ldi	r24, 0x03	; 3
    50e0:	09 95       	icall
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    50e2:	e9 a9       	ldd	r30, Y+49	; 0x31
    50e4:	fa a9       	ldd	r31, Y+50	; 0x32
    50e6:	80 e0       	ldi	r24, 0x00	; 0
    50e8:	09 95       	icall
  return r;
}
    50ea:	81 2f       	mov	r24, r17
    50ec:	df 91       	pop	r29
    50ee:	cf 91       	pop	r28
    50f0:	1f 91       	pop	r17
    50f2:	0f 91       	pop	r16
    50f4:	08 95       	ret

000050f6 <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
    50f6:	0f 93       	push	r16
    50f8:	1f 93       	push	r17
    50fa:	cf 93       	push	r28
    50fc:	df 93       	push	r29
    50fe:	ec 01       	movw	r28, r24
    5100:	8b 01       	movw	r16, r22
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    5102:	e9 a9       	ldd	r30, Y+49	; 0x31
    5104:	fa a9       	ldd	r31, Y+50	; 0x32
    5106:	82 e0       	ldi	r24, 0x02	; 2
    5108:	09 95       	icall
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
    510a:	e9 a9       	ldd	r30, Y+49	; 0x31
    510c:	fa a9       	ldd	r31, Y+50	; 0x32
    510e:	81 e0       	ldi	r24, 0x01	; 1
    5110:	09 95       	icall
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
    5112:	20 e0       	ldi	r18, 0x00	; 0
    5114:	30 e0       	ldi	r19, 0x00	; 0
    5116:	44 e1       	ldi	r20, 0x14	; 20
    5118:	b8 01       	movw	r22, r16
    511a:	ce 01       	movw	r24, r28
    511c:	0e 94 56 28 	call	0x50ac	; 0x50ac <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    5120:	9e 01       	movw	r18, r28
    5122:	2d 5c       	subi	r18, 0xCD	; 205
    5124:	3f 4f       	sbci	r19, 0xFF	; 255
    5126:	47 e1       	ldi	r20, 0x17	; 23
    5128:	b8 01       	movw	r22, r16
    512a:	ce 01       	movw	r24, r28
    512c:	0e 94 56 28 	call	0x50ac	; 0x50ac <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    5130:	e9 a9       	ldd	r30, Y+49	; 0x31
    5132:	fa a9       	ldd	r31, Y+50	; 0x32
    5134:	80 e0       	ldi	r24, 0x00	; 0
    5136:	09 95       	icall
}
    5138:	df 91       	pop	r29
    513a:	cf 91       	pop	r28
    513c:	1f 91       	pop	r17
    513e:	0f 91       	pop	r16
    5140:	08 95       	ret

00005142 <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
    5142:	ff 92       	push	r15
    5144:	0f 93       	push	r16
    5146:	1f 93       	push	r17
    5148:	cf 93       	push	r28
    514a:	df 93       	push	r29
    514c:	ec 01       	movw	r28, r24
    514e:	8b 01       	movw	r16, r22
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    5150:	e9 a9       	ldd	r30, Y+49	; 0x31
    5152:	fa a9       	ldd	r31, Y+50	; 0x32
    5154:	82 e0       	ldi	r24, 0x02	; 2
    5156:	09 95       	icall
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
    5158:	e9 a9       	ldd	r30, Y+49	; 0x31
    515a:	fa a9       	ldd	r31, Y+50	; 0x32
    515c:	81 e0       	ldi	r24, 0x01	; 1
    515e:	09 95       	icall
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
    5160:	20 e0       	ldi	r18, 0x00	; 0
    5162:	30 e0       	ldi	r19, 0x00	; 0
    5164:	45 e1       	ldi	r20, 0x15	; 21
    5166:	b8 01       	movw	r22, r16
    5168:	ce 01       	movw	r24, r28
    516a:	0e 94 56 28 	call	0x50ac	; 0x50ac <u8g_call_dev_fn>
    516e:	f8 2e       	mov	r15, r24
  if ( r != 0 )
    5170:	88 23       	and	r24, r24
    5172:	41 f0       	breq	.+16     	; 0x5184 <u8g_NextPageLL+0x42>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    5174:	9e 01       	movw	r18, r28
    5176:	2d 5c       	subi	r18, 0xCD	; 205
    5178:	3f 4f       	sbci	r19, 0xFF	; 255
    517a:	47 e1       	ldi	r20, 0x17	; 23
    517c:	b8 01       	movw	r22, r16
    517e:	ce 01       	movw	r24, r28
    5180:	0e 94 56 28 	call	0x50ac	; 0x50ac <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    5184:	e9 a9       	ldd	r30, Y+49	; 0x31
    5186:	fa a9       	ldd	r31, Y+50	; 0x32
    5188:	80 e0       	ldi	r24, 0x00	; 0
    518a:	09 95       	icall
  return r;
}
    518c:	8f 2d       	mov	r24, r15
    518e:	df 91       	pop	r29
    5190:	cf 91       	pop	r28
    5192:	1f 91       	pop	r17
    5194:	0f 91       	pop	r16
    5196:	ff 90       	pop	r15
    5198:	08 95       	ret

0000519a <u8g_DrawPixelLL>:
}

void u8g_DrawPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
    519a:	fc 01       	movw	r30, r24
    519c:	44 8f       	std	Z+28, r20	; 0x1c
  arg->y = y;
    519e:	25 8f       	std	Z+29, r18	; 0x1d
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_CONTRAST, &contrast);
}

void u8g_DrawPixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    51a0:	9c 01       	movw	r18, r24
    51a2:	24 5e       	subi	r18, 0xE4	; 228
    51a4:	3f 4f       	sbci	r19, 0xFF	; 255
  arg->x = x;
  arg->y = y;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
    51a6:	42 e3       	ldi	r20, 0x32	; 50
    51a8:	0e 94 56 28 	call	0x50ac	; 0x50ac <u8g_call_dev_fn>
    51ac:	08 95       	ret

000051ae <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
    51ae:	cf 93       	push	r28
    51b0:	df 93       	push	r29
    51b2:	1f 92       	push	r1
    51b4:	cd b7       	in	r28, 0x3d	; 61
    51b6:	de b7       	in	r29, 0x3e	; 62
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
    51b8:	9e 01       	movw	r18, r28
    51ba:	2f 5f       	subi	r18, 0xFF	; 255
    51bc:	3f 4f       	sbci	r19, 0xFF	; 255
    51be:	46 e4       	ldi	r20, 0x46	; 70
    51c0:	0e 94 56 28 	call	0x50ac	; 0x50ac <u8g_call_dev_fn>
  return r;
}
    51c4:	89 81       	ldd	r24, Y+1	; 0x01
    51c6:	0f 90       	pop	r0
    51c8:	df 91       	pop	r29
    51ca:	cf 91       	pop	r28
    51cc:	08 95       	ret

000051ce <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
    51ce:	cf 93       	push	r28
    51d0:	df 93       	push	r29
    51d2:	1f 92       	push	r1
    51d4:	cd b7       	in	r28, 0x3d	; 61
    51d6:	de b7       	in	r29, 0x3e	; 62
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
    51d8:	9e 01       	movw	r18, r28
    51da:	2f 5f       	subi	r18, 0xFF	; 255
    51dc:	3f 4f       	sbci	r19, 0xFF	; 255
    51de:	47 e4       	ldi	r20, 0x47	; 71
    51e0:	0e 94 56 28 	call	0x50ac	; 0x50ac <u8g_call_dev_fn>
  return r;
}
    51e4:	89 81       	ldd	r24, Y+1	; 0x01
    51e6:	0f 90       	pop	r0
    51e8:	df 91       	pop	r29
    51ea:	cf 91       	pop	r28
    51ec:	08 95       	ret

000051ee <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
    51ee:	20 e0       	ldi	r18, 0x00	; 0
    51f0:	30 e0       	ldi	r19, 0x00	; 0
    51f2:	48 e4       	ldi	r20, 0x48	; 72
    51f4:	0e 94 56 28 	call	0x50ac	; 0x50ac <u8g_call_dev_fn>
}
    51f8:	08 95       	ret

000051fa <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
    51fa:	cf 93       	push	r28
    51fc:	df 93       	push	r29
    51fe:	ec 01       	movw	r28, r24
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
    5200:	6a 81       	ldd	r22, Y+2	; 0x02
    5202:	7b 81       	ldd	r23, Y+3	; 0x03
    5204:	0e 94 d7 28 	call	0x51ae	; 0x51ae <u8g_GetWidthLL>
    5208:	88 83       	st	Y, r24
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
    520a:	6a 81       	ldd	r22, Y+2	; 0x02
    520c:	7b 81       	ldd	r23, Y+3	; 0x03
    520e:	ce 01       	movw	r24, r28
    5210:	0e 94 e7 28 	call	0x51ce	; 0x51ce <u8g_GetHeightLL>
    5214:	89 83       	std	Y+1, r24	; 0x01
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
    5216:	6a 81       	ldd	r22, Y+2	; 0x02
    5218:	7b 81       	ldd	r23, Y+3	; 0x03
    521a:	ce 01       	movw	r24, r28
    521c:	0e 94 f7 28 	call	0x51ee	; 0x51ee <u8g_GetModeLL>
    5220:	8b 87       	std	Y+11, r24	; 0x0b
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    5222:	9e 01       	movw	r18, r28
    5224:	2d 5c       	subi	r18, 0xCD	; 205
    5226:	3f 4f       	sbci	r19, 0xFF	; 255
    5228:	6a 81       	ldd	r22, Y+2	; 0x02
    522a:	7b 81       	ldd	r23, Y+3	; 0x03
    522c:	47 e1       	ldi	r20, 0x17	; 23
    522e:	ce 01       	movw	r24, r28
    5230:	0e 94 56 28 	call	0x50ac	; 0x50ac <u8g_call_dev_fn>
}
    5234:	df 91       	pop	r29
    5236:	cf 91       	pop	r28
    5238:	08 95       	ret

0000523a <u8g_Begin>:
  u8g->state_cb = u8g_state_dummy_cb;

}

uint8_t u8g_Begin(u8g_t *u8g)
{
    523a:	cf 93       	push	r28
    523c:	df 93       	push	r29
    523e:	ec 01       	movw	r28, r24
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
    5240:	6a 81       	ldd	r22, Y+2	; 0x02
    5242:	7b 81       	ldd	r23, Y+3	; 0x03
    5244:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <u8g_InitLL>
    5248:	88 23       	and	r24, r24
    524a:	29 f0       	breq	.+10     	; 0x5256 <u8g_Begin+0x1c>
    return 0;
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
    524c:	ce 01       	movw	r24, r28
    524e:	0e 94 fd 28 	call	0x51fa	; 0x51fa <u8g_UpdateDimension>
  return 1;
    5252:	81 e0       	ldi	r24, 0x01	; 1
    5254:	01 c0       	rjmp	.+2      	; 0x5258 <u8g_Begin+0x1e>

uint8_t u8g_Begin(u8g_t *u8g)
{
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
    return 0;
    5256:	80 e0       	ldi	r24, 0x00	; 0
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
  return 1;
}
    5258:	df 91       	pop	r29
    525a:	cf 91       	pop	r28
    525c:	08 95       	ret

0000525e <u8g_Init8Bit>:
  return u8g_Begin(u8g);
}

uint8_t u8g_Init8Bit(u8g_t *u8g, u8g_dev_t *dev, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7, 
  uint8_t en, uint8_t cs1, uint8_t cs2, uint8_t di, uint8_t rw, uint8_t reset)
{
    525e:	4f 92       	push	r4
    5260:	5f 92       	push	r5
    5262:	6f 92       	push	r6
    5264:	7f 92       	push	r7
    5266:	8f 92       	push	r8
    5268:	af 92       	push	r10
    526a:	cf 92       	push	r12
    526c:	ef 92       	push	r14
    526e:	ff 92       	push	r15
    5270:	0f 93       	push	r16
    5272:	1f 93       	push	r17
    5274:	cf 93       	push	r28
    5276:	df 93       	push	r29
    5278:	cd b7       	in	r28, 0x3d	; 61
    527a:	de b7       	in	r29, 0x3e	; 62
    527c:	3c 01       	movw	r6, r24
    527e:	2b 01       	movw	r4, r22
    5280:	f4 2e       	mov	r15, r20
    5282:	12 2f       	mov	r17, r18
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
    5284:	0e 94 2c 28 	call	0x5058	; 0x5058 <u8g_init_data>
  u8g->dev = dev;
    5288:	f3 01       	movw	r30, r6
    528a:	42 82       	std	Z+2, r4	; 0x02
    528c:	53 82       	std	Z+3, r5	; 0x03
    
  /* assign user pins */

  u8g->pin_list[U8G_PI_D0] = d0;
    528e:	f0 a6       	std	Z+40, r15	; 0x28
  u8g->pin_list[U8G_PI_D1] = d1;
    5290:	11 a7       	std	Z+41, r17	; 0x29
  u8g->pin_list[U8G_PI_D2] = d2;
    5292:	02 a7       	std	Z+42, r16	; 0x2a
  u8g->pin_list[U8G_PI_D3] = d3;
    5294:	e3 a6       	std	Z+43, r14	; 0x2b
  u8g->pin_list[U8G_PI_D4] = d4;
    5296:	c4 a6       	std	Z+44, r12	; 0x2c
  u8g->pin_list[U8G_PI_D5] = d5;
    5298:	a5 a6       	std	Z+45, r10	; 0x2d
  u8g->pin_list[U8G_PI_D6] = d6;
    529a:	86 a6       	std	Z+46, r8	; 0x2e
  u8g->pin_list[U8G_PI_D7] = d7;
    529c:	88 89       	ldd	r24, Y+16	; 0x10
    529e:	87 a7       	std	Z+47, r24	; 0x2f

  u8g->pin_list[U8G_PI_EN] = en;
    52a0:	89 89       	ldd	r24, Y+17	; 0x11
    52a2:	87 a3       	std	Z+39, r24	; 0x27
  u8g->pin_list[U8G_PI_CS1] = cs1;
    52a4:	8a 89       	ldd	r24, Y+18	; 0x12
    52a6:	85 a3       	std	Z+37, r24	; 0x25
  u8g->pin_list[U8G_PI_CS2] = cs2;
    52a8:	8b 89       	ldd	r24, Y+19	; 0x13
    52aa:	86 a3       	std	Z+38, r24	; 0x26
  u8g->pin_list[U8G_PI_DI] = di;
    52ac:	8c 89       	ldd	r24, Y+20	; 0x14
    52ae:	84 a3       	std	Z+36, r24	; 0x24
  u8g->pin_list[U8G_PI_RW] = rw;
    52b0:	8d 89       	ldd	r24, Y+21	; 0x15
    52b2:	80 ab       	std	Z+48, r24	; 0x30
  u8g->pin_list[U8G_PI_RESET] = reset;
    52b4:	8e 89       	ldd	r24, Y+22	; 0x16
    52b6:	83 a3       	std	Z+35, r24	; 0x23
  
  return u8g_Begin(u8g);
    52b8:	c3 01       	movw	r24, r6
    52ba:	0e 94 1d 29 	call	0x523a	; 0x523a <u8g_Begin>
}
    52be:	df 91       	pop	r29
    52c0:	cf 91       	pop	r28
    52c2:	1f 91       	pop	r17
    52c4:	0f 91       	pop	r16
    52c6:	ff 90       	pop	r15
    52c8:	ef 90       	pop	r14
    52ca:	cf 90       	pop	r12
    52cc:	af 90       	pop	r10
    52ce:	8f 90       	pop	r8
    52d0:	7f 90       	pop	r7
    52d2:	6f 90       	pop	r6
    52d4:	5f 90       	pop	r5
    52d6:	4f 90       	pop	r4
    52d8:	08 95       	ret

000052da <u8g_FirstPage>:
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
  u8g_FirstPageLL(u8g, u8g->dev);
    52da:	fc 01       	movw	r30, r24
    52dc:	62 81       	ldd	r22, Z+2	; 0x02
    52de:	73 81       	ldd	r23, Z+3	; 0x03
    52e0:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <u8g_FirstPageLL>
    52e4:	08 95       	ret

000052e6 <u8g_NextPage>:
}

uint8_t u8g_NextPage(u8g_t *u8g)
{
    52e6:	cf 93       	push	r28
    52e8:	df 93       	push	r29
    52ea:	ec 01       	movw	r28, r24
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
    52ec:	ee 85       	ldd	r30, Y+14	; 0x0e
    52ee:	ff 85       	ldd	r31, Y+15	; 0x0f
    52f0:	30 97       	sbiw	r30, 0x00	; 0
    52f2:	09 f0       	breq	.+2      	; 0x52f6 <u8g_NextPage+0x10>
  {
    u8g->cursor_fn(u8g);
    52f4:	09 95       	icall
  }
  return u8g_NextPageLL(u8g, u8g->dev);
    52f6:	6a 81       	ldd	r22, Y+2	; 0x02
    52f8:	7b 81       	ldd	r23, Y+3	; 0x03
    52fa:	ce 01       	movw	r24, r28
    52fc:	0e 94 a1 28 	call	0x5142	; 0x5142 <u8g_NextPageLL>
}
    5300:	df 91       	pop	r29
    5302:	cf 91       	pop	r28
    5304:	08 95       	ret

00005306 <u8g_DrawPixel>:
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SLEEP_OFF, NULL);
}


void u8g_DrawPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y)
{
    5306:	36 2f       	mov	r19, r22
    5308:	24 2f       	mov	r18, r20
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
    530a:	fc 01       	movw	r30, r24
    530c:	62 81       	ldd	r22, Z+2	; 0x02
    530e:	73 81       	ldd	r23, Z+3	; 0x03
    5310:	43 2f       	mov	r20, r19
    5312:	0e 94 cd 28 	call	0x519a	; 0x519a <u8g_DrawPixelLL>
    5316:	08 95       	ret

00005318 <u8g_Draw8Pixel>:
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
    5318:	0f 93       	push	r16
    531a:	fc 01       	movw	r30, r24
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
    531c:	82 81       	ldd	r24, Z+2	; 0x02
    531e:	93 81       	ldd	r25, Z+3	; 0x03
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
    5320:	64 8f       	std	Z+28, r22	; 0x1c
  arg->y = y;
    5322:	45 8f       	std	Z+29, r20	; 0x1d
  arg->dir = dir;
    5324:	27 8f       	std	Z+31, r18	; 0x1f
  arg->pixel = pixel;
    5326:	06 8f       	std	Z+30, r16	; 0x1e
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    5328:	9f 01       	movw	r18, r30
    532a:	24 5e       	subi	r18, 0xE4	; 228
    532c:	3f 4f       	sbci	r19, 0xFF	; 255
  arg->x = x;
  arg->y = y;
  arg->dir = dir;
  arg->pixel = pixel;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
    532e:	4b e3       	ldi	r20, 0x3B	; 59
    5330:	bc 01       	movw	r22, r24
    5332:	cf 01       	movw	r24, r30
    5334:	0e 94 56 28 	call	0x50ac	; 0x50ac <u8g_call_dev_fn>
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
    5338:	0f 91       	pop	r16
    533a:	08 95       	ret

0000533c <u8g_GetDefaultForegroundColor>:
}

uint8_t u8g_GetDefaultForegroundColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
    533c:	fc 01       	movw	r30, r24
    533e:	83 85       	ldd	r24, Z+11	; 0x0b
  if ( mode == U8G_MODE_R3G3B2 ) 
    5340:	88 32       	cpi	r24, 0x28	; 40
    5342:	21 f0       	breq	.+8      	; 0x534c <u8g_GetDefaultForegroundColor+0x10>
    return 255;     /* white */
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
    5344:	82 30       	cpi	r24, 0x02	; 2
    5346:	21 f4       	brne	.+8      	; 0x5350 <u8g_GetDefaultForegroundColor+0x14>
    return 3;         /* max intensity */
    5348:	83 e0       	ldi	r24, 0x03	; 3
    534a:	08 95       	ret
uint8_t u8g_GetDefaultForegroundColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
    return 255;     /* white */
    534c:	8f ef       	ldi	r24, 0xFF	; 255
    534e:	08 95       	ret
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
    return 3;         /* max intensity */
  else /* if ( u8g.getMode() == U8G_MODE_BW ) */
    return 1;         /* pixel on */
    5350:	81 e0       	ldi	r24, 0x01	; 1
  return 1;
}
    5352:	08 95       	ret

00005354 <u8g_SetDefaultForegroundColor>:

void u8g_SetDefaultForegroundColor(u8g_t *u8g)
{
    5354:	cf 93       	push	r28
    5356:	df 93       	push	r29
    5358:	ec 01       	movw	r28, r24
  if ( u8g->mode == U8G_MODE_HICOLOR )
    535a:	8b 85       	ldd	r24, Y+11	; 0x0b
    535c:	80 33       	cpi	r24, 0x30	; 48
    535e:	21 f4       	brne	.+8      	; 0x5368 <u8g_SetDefaultForegroundColor+0x14>
  {
    u8g->arg_pixel.color = 0x0ff;
    5360:	8f ef       	ldi	r24, 0xFF	; 255
    5362:	88 a3       	std	Y+32, r24	; 0x20
    u8g->arg_pixel.hi_color = 0x0ff;
    5364:	89 a3       	std	Y+33, r24	; 0x21
    5366:	04 c0       	rjmp	.+8      	; 0x5370 <u8g_SetDefaultForegroundColor+0x1c>
  }
  else
  {
    u8g_SetColorIndex(u8g, u8g_GetDefaultForegroundColor(u8g));
    5368:	ce 01       	movw	r24, r28
    536a:	0e 94 9e 29 	call	0x533c	; 0x533c <u8g_GetDefaultForegroundColor>
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    536e:	88 a3       	std	Y+32, r24	; 0x20
  }
  else
  {
    u8g_SetColorIndex(u8g, u8g_GetDefaultForegroundColor(u8g));
  }
}
    5370:	df 91       	pop	r29
    5372:	cf 91       	pop	r28
    5374:	08 95       	ret

00005376 <u8g_SetDefaultBackgroundColor>:
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    5376:	fc 01       	movw	r30, r24
    5378:	10 a2       	std	Z+32, r1	; 0x20
    537a:	08 95       	ret

0000537c <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
    537c:	fc 01       	movw	r30, r24
  p->page_y0 = 0;
    537e:	12 82       	std	Z+2, r1	; 0x02
  p->page_y1 = p->page_height;
  p->page_y1--;
    5380:	80 81       	ld	r24, Z
    5382:	81 50       	subi	r24, 0x01	; 1
    5384:	83 83       	std	Z+3, r24	; 0x03
  p->page = 0;
    5386:	14 82       	std	Z+4, r1	; 0x04
    5388:	08 95       	ret

0000538a <u8g_page_Next>:
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    538a:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    538c:	20 81       	ld	r18, Z
    538e:	82 81       	ldd	r24, Z+2	; 0x02
    5390:	82 0f       	add	r24, r18
    5392:	82 83       	std	Z+2, r24	; 0x02
  if ( p->page_y0 >= p->total_height )
    5394:	91 81       	ldd	r25, Z+1	; 0x01
    5396:	89 17       	cp	r24, r25
    5398:	60 f4       	brcc	.+24     	; 0x53b2 <u8g_page_Next+0x28>
    return 0;
  p->page++;
    539a:	84 81       	ldd	r24, Z+4	; 0x04
    539c:	8f 5f       	subi	r24, 0xFF	; 255
    539e:	84 83       	std	Z+4, r24	; 0x04
  y1 = p->page_y1;
    53a0:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    53a2:	28 0f       	add	r18, r24
  if ( y1 >= p->total_height )
    53a4:	29 17       	cp	r18, r25
    53a6:	10 f0       	brcs	.+4      	; 0x53ac <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    53a8:	2f ef       	ldi	r18, 0xFF	; 255
    53aa:	29 0f       	add	r18, r25
  }
  p->page_y1 = y1;
    53ac:	23 83       	std	Z+3, r18	; 0x03
  
  return 1;
    53ae:	81 e0       	ldi	r24, 0x01	; 1
    53b0:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    53b2:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    53b4:	08 95       	ret

000053b6 <u8g_pb_Clear>:

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
    53b6:	dc 01       	movw	r26, r24
    53b8:	16 96       	adiw	r26, 0x06	; 6
    53ba:	ed 91       	ld	r30, X+
    53bc:	fc 91       	ld	r31, X
    53be:	17 97       	sbiw	r26, 0x07	; 7
  uint8_t *end_ptr = ptr;
  end_ptr += b->width;
    53c0:	15 96       	adiw	r26, 0x05	; 5
    53c2:	8c 91       	ld	r24, X
    53c4:	9f 01       	movw	r18, r30
    53c6:	28 0f       	add	r18, r24
    53c8:	31 1d       	adc	r19, r1
    53ca:	c9 01       	movw	r24, r18
  do
  {
    *ptr++ = 0;
    53cc:	11 92       	st	Z+, r1
  } while( ptr != end_ptr );
    53ce:	e8 17       	cp	r30, r24
    53d0:	f9 07       	cpc	r31, r25
    53d2:	e1 f7       	brne	.-8      	; 0x53cc <u8g_pb_Clear+0x16>
}
    53d4:	08 95       	ret

000053d6 <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
    53d6:	fc 01       	movw	r30, r24
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
    53d8:	91 e0       	ldi	r25, 0x01	; 1
    53da:	83 81       	ldd	r24, Z+3	; 0x03
    53dc:	86 17       	cp	r24, r22
    53de:	08 f4       	brcc	.+2      	; 0x53e2 <u8g_pb_IsYIntersection+0xc>
    53e0:	90 e0       	ldi	r25, 0x00	; 0
  c2 = v1 >= pb->p.page_y0;
  c3 = v0 > v1;
    53e2:	21 e0       	ldi	r18, 0x01	; 1
    53e4:	46 17       	cp	r20, r22
    53e6:	08 f0       	brcs	.+2      	; 0x53ea <u8g_pb_IsYIntersection+0x14>
    53e8:	20 e0       	ldi	r18, 0x00	; 0
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
    53ea:	32 2f       	mov	r19, r18
    53ec:	39 2b       	or	r19, r25

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
  c2 = v1 >= pb->p.page_y0;
    53ee:	81 e0       	ldi	r24, 0x01	; 1
    53f0:	52 81       	ldd	r21, Z+2	; 0x02
    53f2:	45 17       	cp	r20, r21
    53f4:	08 f4       	brcc	.+2      	; 0x53f8 <u8g_pb_IsYIntersection+0x22>
    53f6:	80 e0       	ldi	r24, 0x00	; 0
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
    53f8:	83 23       	and	r24, r19
  */
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
    53fa:	92 23       	and	r25, r18
  c1 |= c2;
  c1 |= c3;
  return c1 & 1;
}
    53fc:	89 2b       	or	r24, r25
    53fe:	08 95       	ret

00005400 <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    5400:	dc 01       	movw	r26, r24
    5402:	fb 01       	movw	r30, r22
  box->x0 = 0;
    5404:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    5406:	12 96       	adiw	r26, 0x02	; 2
    5408:	8c 91       	ld	r24, X
    540a:	12 97       	sbiw	r26, 0x02	; 2
    540c:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    540e:	15 96       	adiw	r26, 0x05	; 5
    5410:	8c 91       	ld	r24, X
    5412:	15 97       	sbiw	r26, 0x05	; 5
    5414:	81 50       	subi	r24, 0x01	; 1
    5416:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    5418:	13 96       	adiw	r26, 0x03	; 3
    541a:	8c 91       	ld	r24, X
    541c:	83 83       	std	Z+3, r24	; 0x03
    541e:	08 95       	ret

00005420 <u8g_pb_Is8PixelVisible>:
}


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    5420:	fb 01       	movw	r30, r22
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    5422:	61 81       	ldd	r22, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    5424:	23 81       	ldd	r18, Z+3	; 0x03
    5426:	21 30       	cpi	r18, 0x01	; 1
    5428:	19 f0       	breq	.+6      	; 0x5430 <u8g_pb_Is8PixelVisible+0x10>
    542a:	23 30       	cpi	r18, 0x03	; 3
    542c:	21 f0       	breq	.+8      	; 0x5436 <u8g_pb_Is8PixelVisible+0x16>
    542e:	06 c0       	rjmp	.+12     	; 0x543c <u8g_pb_Is8PixelVisible+0x1c>
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    5430:	48 e0       	ldi	r20, 0x08	; 8
    5432:	46 0f       	add	r20, r22
      break;
    5434:	04 c0       	rjmp	.+8      	; 0x543e <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    5436:	46 2f       	mov	r20, r22
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    5438:	68 50       	subi	r22, 0x08	; 8
      break;
    543a:	01 c0       	rjmp	.+2      	; 0x543e <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    543c:	46 2f       	mov	r20, r22
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    543e:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <u8g_pb_IsYIntersection>
}
    5442:	08 95       	ret

00005444 <u8g_pb8v1_set_pixel>:
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
  register uint8_t mask;
  uint8_t *ptr = b->buf;
    5444:	dc 01       	movw	r26, r24
    5446:	16 96       	adiw	r26, 0x06	; 6
    5448:	ed 91       	ld	r30, X+
    544a:	fc 91       	ld	r31, X
    544c:	17 97       	sbiw	r26, 0x07	; 7
  
  y -= b->p.page_y0;
    544e:	12 96       	adiw	r26, 0x02	; 2
    5450:	8c 91       	ld	r24, X
    5452:	48 1b       	sub	r20, r24
  mask = 1;
  y &= 0x07;
    5454:	47 70       	andi	r20, 0x07	; 7
  mask <<= y;
    5456:	81 e0       	ldi	r24, 0x01	; 1
    5458:	90 e0       	ldi	r25, 0x00	; 0
    545a:	dc 01       	movw	r26, r24
    545c:	02 c0       	rjmp	.+4      	; 0x5462 <u8g_pb8v1_set_pixel+0x1e>
    545e:	aa 0f       	add	r26, r26
    5460:	bb 1f       	adc	r27, r27
    5462:	4a 95       	dec	r20
    5464:	e2 f7       	brpl	.-8      	; 0x545e <u8g_pb8v1_set_pixel+0x1a>
    5466:	ad 01       	movw	r20, r26
  ptr += x;
    5468:	e6 0f       	add	r30, r22
    546a:	f1 1d       	adc	r31, r1
  if ( color_index )
    546c:	22 23       	and	r18, r18
    546e:	21 f0       	breq	.+8      	; 0x5478 <u8g_pb8v1_set_pixel+0x34>
  {
    *ptr |= mask;
    5470:	80 81       	ld	r24, Z
    5472:	48 2b       	or	r20, r24
    5474:	40 83       	st	Z, r20
    5476:	08 95       	ret
  }
  else
  {
    mask ^=0xff;
    5478:	40 95       	com	r20
    *ptr &= mask;
    547a:	80 81       	ld	r24, Z
    547c:	48 23       	and	r20, r24
    547e:	40 83       	st	Z, r20
    5480:	08 95       	ret

00005482 <u8g_pb8v1_SetPixel>:
}


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
  if ( arg_pixel->y < b->p.page_y0 )
    5482:	fb 01       	movw	r30, r22
    5484:	41 81       	ldd	r20, Z+1	; 0x01
    5486:	fc 01       	movw	r30, r24
    5488:	22 81       	ldd	r18, Z+2	; 0x02
    548a:	42 17       	cp	r20, r18
    548c:	70 f0       	brcs	.+28     	; 0x54aa <u8g_pb8v1_SetPixel+0x28>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
    548e:	23 81       	ldd	r18, Z+3	; 0x03
    5490:	24 17       	cp	r18, r20
    5492:	58 f0       	brcs	.+22     	; 0x54aa <u8g_pb8v1_SetPixel+0x28>
    return;
  if ( arg_pixel->x >= b->width )
    5494:	fb 01       	movw	r30, r22
    5496:	30 81       	ld	r19, Z
    5498:	fc 01       	movw	r30, r24
    549a:	25 81       	ldd	r18, Z+5	; 0x05
    549c:	32 17       	cp	r19, r18
    549e:	28 f4       	brcc	.+10     	; 0x54aa <u8g_pb8v1_SetPixel+0x28>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
    54a0:	fb 01       	movw	r30, r22
    54a2:	24 81       	ldd	r18, Z+4	; 0x04
    54a4:	63 2f       	mov	r22, r19
    54a6:	0e 94 22 2a 	call	0x5444	; 0x5444 <u8g_pb8v1_set_pixel>
    54aa:	08 95       	ret

000054ac <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    54ac:	df 92       	push	r13
    54ae:	ef 92       	push	r14
    54b0:	ff 92       	push	r15
    54b2:	0f 93       	push	r16
    54b4:	1f 93       	push	r17
    54b6:	cf 93       	push	r28
    54b8:	df 93       	push	r29
    54ba:	8c 01       	movw	r16, r24
    54bc:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    54be:	fa 80       	ldd	r15, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    54c0:	8b 81       	ldd	r24, Y+3	; 0x03
    54c2:	81 30       	cpi	r24, 0x01	; 1
    54c4:	41 f0       	breq	.+16     	; 0x54d6 <u8g_pb8v1_Set8PixelOpt2+0x2a>
    54c6:	98 f0       	brcs	.+38     	; 0x54ee <u8g_pb8v1_Set8PixelOpt2+0x42>
    54c8:	82 30       	cpi	r24, 0x02	; 2
    54ca:	49 f0       	breq	.+18     	; 0x54de <u8g_pb8v1_Set8PixelOpt2+0x32>
    54cc:	83 30       	cpi	r24, 0x03	; 3
    54ce:	59 f0       	breq	.+22     	; 0x54e6 <u8g_pb8v1_Set8PixelOpt2+0x3a>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    54d0:	d1 2c       	mov	r13, r1


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    54d2:	e1 2c       	mov	r14, r1
    54d4:	0f c0       	rjmp	.+30     	; 0x54f4 <u8g_pb8v1_Set8PixelOpt2+0x48>
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    54d6:	dd 24       	eor	r13, r13
    54d8:	d3 94       	inc	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    54da:	e1 2c       	mov	r14, r1
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    54dc:	0b c0       	rjmp	.+22     	; 0x54f4 <u8g_pb8v1_Set8PixelOpt2+0x48>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    54de:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    54e0:	ee 24       	eor	r14, r14
    54e2:	ea 94       	dec	r14
    54e4:	07 c0       	rjmp	.+14     	; 0x54f4 <u8g_pb8v1_Set8PixelOpt2+0x48>
    case 3: dy--; break;
    54e6:	dd 24       	eor	r13, r13
    54e8:	da 94       	dec	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    54ea:	e1 2c       	mov	r14, r1
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    54ec:	03 c0       	rjmp	.+6      	; 0x54f4 <u8g_pb8v1_Set8PixelOpt2+0x48>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    54ee:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    54f0:	ee 24       	eor	r14, r14
    54f2:	e3 94       	inc	r14
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    54f4:	ff 20       	and	r15, r15
    54f6:	24 f4       	brge	.+8      	; 0x5500 <u8g_pb8v1_Set8PixelOpt2+0x54>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    54f8:	be 01       	movw	r22, r28
    54fa:	c8 01       	movw	r24, r16
    54fc:	0e 94 41 2a 	call	0x5482	; 0x5482 <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
    5500:	88 81       	ld	r24, Y
    5502:	8e 0d       	add	r24, r14
    5504:	88 83       	st	Y, r24
    arg_pixel->y += dy;
    5506:	89 81       	ldd	r24, Y+1	; 0x01
    5508:	8d 0d       	add	r24, r13
    550a:	89 83       	std	Y+1, r24	; 0x01
    pixel <<= 1;
    550c:	ff 0c       	add	r15, r15
  } while( pixel != 0  );
    550e:	91 f7       	brne	.-28     	; 0x54f4 <u8g_pb8v1_Set8PixelOpt2+0x48>
  
}
    5510:	df 91       	pop	r29
    5512:	cf 91       	pop	r28
    5514:	1f 91       	pop	r17
    5516:	0f 91       	pop	r16
    5518:	ff 90       	pop	r15
    551a:	ef 90       	pop	r14
    551c:	df 90       	pop	r13
    551e:	08 95       	ret

00005520 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    5520:	0f 93       	push	r16
    5522:	1f 93       	push	r17
    5524:	cf 93       	push	r28
    5526:	df 93       	push	r29
    5528:	e9 01       	movw	r28, r18
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    552a:	fb 01       	movw	r30, r22
    552c:	02 81       	ldd	r16, Z+2	; 0x02
    552e:	13 81       	ldd	r17, Z+3	; 0x03
  switch(msg)
    5530:	50 e0       	ldi	r21, 0x00	; 0
    5532:	fa 01       	movw	r30, r20
    5534:	74 97       	sbiw	r30, 0x14	; 20
    5536:	e4 33       	cpi	r30, 0x34	; 52
    5538:	f1 05       	cpc	r31, r1
    553a:	c0 f5       	brcc	.+112    	; 0x55ac <u8g_dev_pb8v1_base_fn+0x8c>
    553c:	ef 5f       	subi	r30, 0xFF	; 255
    553e:	fe 4f       	sbci	r31, 0xFE	; 254
    5540:	0c 94 38 35 	jmp	0x6a70	; 0x6a70 <__tablejump2__>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    5544:	b9 01       	movw	r22, r18
    5546:	c8 01       	movw	r24, r16
    5548:	0e 94 10 2a 	call	0x5420	; 0x5420 <u8g_pb_Is8PixelVisible>
    554c:	88 23       	and	r24, r24
    554e:	81 f1       	breq	.+96     	; 0x55b0 <u8g_dev_pb8v1_base_fn+0x90>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    5550:	be 01       	movw	r22, r28
    5552:	c8 01       	movw	r24, r16
    5554:	0e 94 56 2a 	call	0x54ac	; 0x54ac <u8g_pb8v1_Set8PixelOpt2>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    5558:	81 e0       	ldi	r24, 0x01	; 1
    555a:	2d c0       	rjmp	.+90     	; 0x55b6 <u8g_dev_pb8v1_base_fn+0x96>
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    555c:	b9 01       	movw	r22, r18
    555e:	c8 01       	movw	r24, r16
    5560:	0e 94 41 2a 	call	0x5482	; 0x5482 <u8g_pb8v1_SetPixel>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    5564:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    5566:	27 c0       	rjmp	.+78     	; 0x55b6 <u8g_dev_pb8v1_base_fn+0x96>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    5568:	c8 01       	movw	r24, r16
    556a:	0e 94 db 29 	call	0x53b6	; 0x53b6 <u8g_pb_Clear>
	  u8g_page_First(&(pb->p));
    556e:	c8 01       	movw	r24, r16
    5570:	0e 94 be 29 	call	0x537c	; 0x537c <u8g_page_First>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    5574:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
	  u8g_page_First(&(pb->p));
      break;
    5576:	1f c0       	rjmp	.+62     	; 0x55b6 <u8g_dev_pb8v1_base_fn+0x96>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    5578:	c8 01       	movw	r24, r16
    557a:	0e 94 c5 29 	call	0x538a	; 0x538a <u8g_page_Next>
    557e:	88 23       	and	r24, r24
    5580:	c9 f0       	breq	.+50     	; 0x55b4 <u8g_dev_pb8v1_base_fn+0x94>
        return 0;
      u8g_pb_Clear(pb);
    5582:	c8 01       	movw	r24, r16
    5584:	0e 94 db 29 	call	0x53b6	; 0x53b6 <u8g_pb_Clear>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    5588:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
      u8g_pb_Clear(pb);
      break;
    558a:	15 c0       	rjmp	.+42     	; 0x55b6 <u8g_dev_pb8v1_base_fn+0x96>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    558c:	b9 01       	movw	r22, r18
    558e:	c8 01       	movw	r24, r16
    5590:	0e 94 00 2a 	call	0x5400	; 0x5400 <u8g_pb_GetPageBox>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    5594:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    5596:	0f c0       	rjmp	.+30     	; 0x55b6 <u8g_dev_pb8v1_base_fn+0x96>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    5598:	f8 01       	movw	r30, r16
    559a:	85 81       	ldd	r24, Z+5	; 0x05
    559c:	88 83       	st	Y, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    559e:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    55a0:	0a c0       	rjmp	.+20     	; 0x55b6 <u8g_dev_pb8v1_base_fn+0x96>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    55a2:	f8 01       	movw	r30, r16
    55a4:	81 81       	ldd	r24, Z+1	; 0x01
    55a6:	88 83       	st	Y, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    55a8:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
      break;
    55aa:	05 c0       	rjmp	.+10     	; 0x55b6 <u8g_dev_pb8v1_base_fn+0x96>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
    55ac:	81 e0       	ldi	r24, 0x01	; 1
    55ae:	03 c0       	rjmp	.+6      	; 0x55b6 <u8g_dev_pb8v1_base_fn+0x96>
  }
  return 1;
    55b0:	81 e0       	ldi	r24, 0x01	; 1
    55b2:	01 c0       	rjmp	.+2      	; 0x55b6 <u8g_dev_pb8v1_base_fn+0x96>
      u8g_pb_Clear(pb);
	  u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
    55b4:	80 e0       	ldi	r24, 0x00	; 0
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
}
    55b6:	df 91       	pop	r29
    55b8:	cf 91       	pop	r28
    55ba:	1f 91       	pop	r17
    55bc:	0f 91       	pop	r16
    55be:	08 95       	ret

000055c0 <u8g_draw_hline>:
*/

#include "u8g.h"

void u8g_draw_hline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
    55c0:	af 92       	push	r10
    55c2:	bf 92       	push	r11
    55c4:	cf 92       	push	r12
    55c6:	df 92       	push	r13
    55c8:	ef 92       	push	r14
    55ca:	0f 93       	push	r16
    55cc:	1f 93       	push	r17
    55ce:	cf 93       	push	r28
    55d0:	5c 01       	movw	r10, r24
    55d2:	c6 2e       	mov	r12, r22
    55d4:	e4 2e       	mov	r14, r20
    55d6:	d2 2e       	mov	r13, r18
  uint8_t pixel = 0x0ff;
  while( w >= 8 )
    55d8:	27 e0       	ldi	r18, 0x07	; 7
    55da:	2d 15       	cp	r18, r13
    55dc:	b8 f4       	brcc	.+46     	; 0x560c <u8g_draw_hline+0x4c>
    55de:	cd 2d       	mov	r28, r13
    55e0:	16 2f       	mov	r17, r22
  {
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
    55e2:	0f ef       	ldi	r16, 0xFF	; 255
    55e4:	20 e0       	ldi	r18, 0x00	; 0
    55e6:	4e 2d       	mov	r20, r14
    55e8:	61 2f       	mov	r22, r17
    55ea:	c5 01       	movw	r24, r10
    55ec:	0e 94 8c 29 	call	0x5318	; 0x5318 <u8g_Draw8Pixel>
    w-=8;
    55f0:	c8 50       	subi	r28, 0x08	; 8
    x+=8;
    55f2:	18 5f       	subi	r17, 0xF8	; 248
#include "u8g.h"

void u8g_draw_hline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
  uint8_t pixel = 0x0ff;
  while( w >= 8 )
    55f4:	c8 30       	cpi	r28, 0x08	; 8
    55f6:	a8 f7       	brcc	.-22     	; 0x55e2 <u8g_draw_hline+0x22>
    55f8:	8d 2d       	mov	r24, r13
    55fa:	87 70       	andi	r24, 0x07	; 7
    55fc:	28 e0       	ldi	r18, 0x08	; 8
    55fe:	2c 0d       	add	r18, r12
    5600:	98 ef       	ldi	r25, 0xF8	; 248
    5602:	9d 0d       	add	r25, r13
    5604:	98 7f       	andi	r25, 0xF8	; 248
    5606:	c2 2e       	mov	r12, r18
    5608:	c9 0e       	add	r12, r25
    560a:	01 c0       	rjmp	.+2      	; 0x560e <u8g_draw_hline+0x4e>
    560c:	8d 2d       	mov	r24, r13
  {
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
    w-=8;
    x+=8;
  }
  if ( w != 0 )
    560e:	88 23       	and	r24, r24
    5610:	99 f0       	breq	.+38     	; 0x5638 <u8g_draw_hline+0x78>
  {
    w ^=7;
    5612:	07 e0       	ldi	r16, 0x07	; 7
    5614:	08 27       	eor	r16, r24
    w++;
    5616:	0f 5f       	subi	r16, 0xFF	; 255
    pixel <<= w&7;
    5618:	07 70       	andi	r16, 0x07	; 7
    561a:	8f ef       	ldi	r24, 0xFF	; 255
    561c:	90 e0       	ldi	r25, 0x00	; 0
    561e:	9c 01       	movw	r18, r24
    5620:	02 c0       	rjmp	.+4      	; 0x5626 <u8g_draw_hline+0x66>
    5622:	22 0f       	add	r18, r18
    5624:	33 1f       	adc	r19, r19
    5626:	0a 95       	dec	r16
    5628:	e2 f7       	brpl	.-8      	; 0x5622 <u8g_draw_hline+0x62>
    562a:	89 01       	movw	r16, r18
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
    562c:	20 e0       	ldi	r18, 0x00	; 0
    562e:	4e 2d       	mov	r20, r14
    5630:	6c 2d       	mov	r22, r12
    5632:	c5 01       	movw	r24, r10
    5634:	0e 94 8c 29 	call	0x5318	; 0x5318 <u8g_Draw8Pixel>
  }
}
    5638:	cf 91       	pop	r28
    563a:	1f 91       	pop	r17
    563c:	0f 91       	pop	r16
    563e:	ef 90       	pop	r14
    5640:	df 90       	pop	r13
    5642:	cf 90       	pop	r12
    5644:	bf 90       	pop	r11
    5646:	af 90       	pop	r10
    5648:	08 95       	ret

0000564a <u8g_draw_vline>:

void u8g_draw_vline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t h)
{
    564a:	af 92       	push	r10
    564c:	bf 92       	push	r11
    564e:	cf 92       	push	r12
    5650:	df 92       	push	r13
    5652:	ef 92       	push	r14
    5654:	0f 93       	push	r16
    5656:	1f 93       	push	r17
    5658:	cf 93       	push	r28
    565a:	5c 01       	movw	r10, r24
    565c:	e6 2e       	mov	r14, r22
    565e:	c4 2e       	mov	r12, r20
    5660:	d2 2e       	mov	r13, r18
  uint8_t pixel = 0x0ff;
  while( h >= 8 )
    5662:	27 e0       	ldi	r18, 0x07	; 7
    5664:	2d 15       	cp	r18, r13
    5666:	b8 f4       	brcc	.+46     	; 0x5696 <u8g_draw_vline+0x4c>
    5668:	cd 2d       	mov	r28, r13
    566a:	14 2f       	mov	r17, r20
  {
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
    566c:	0f ef       	ldi	r16, 0xFF	; 255
    566e:	21 e0       	ldi	r18, 0x01	; 1
    5670:	41 2f       	mov	r20, r17
    5672:	6e 2d       	mov	r22, r14
    5674:	c5 01       	movw	r24, r10
    5676:	0e 94 8c 29 	call	0x5318	; 0x5318 <u8g_Draw8Pixel>
    h-=8;
    567a:	c8 50       	subi	r28, 0x08	; 8
    y+=8;
    567c:	18 5f       	subi	r17, 0xF8	; 248
}

void u8g_draw_vline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t h)
{
  uint8_t pixel = 0x0ff;
  while( h >= 8 )
    567e:	c8 30       	cpi	r28, 0x08	; 8
    5680:	a8 f7       	brcc	.-22     	; 0x566c <u8g_draw_vline+0x22>
    5682:	8d 2d       	mov	r24, r13
    5684:	87 70       	andi	r24, 0x07	; 7
    5686:	28 e0       	ldi	r18, 0x08	; 8
    5688:	2c 0d       	add	r18, r12
    568a:	98 ef       	ldi	r25, 0xF8	; 248
    568c:	9d 0d       	add	r25, r13
    568e:	98 7f       	andi	r25, 0xF8	; 248
    5690:	c2 2e       	mov	r12, r18
    5692:	c9 0e       	add	r12, r25
    5694:	01 c0       	rjmp	.+2      	; 0x5698 <u8g_draw_vline+0x4e>
    5696:	8d 2d       	mov	r24, r13
  {
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
    h-=8;
    y+=8;
  }
  if ( h != 0 )
    5698:	88 23       	and	r24, r24
    569a:	99 f0       	breq	.+38     	; 0x56c2 <u8g_draw_vline+0x78>
  {
    h ^=7;
    569c:	07 e0       	ldi	r16, 0x07	; 7
    569e:	08 27       	eor	r16, r24
    h++;
    56a0:	0f 5f       	subi	r16, 0xFF	; 255
    pixel <<= h&7;
    56a2:	07 70       	andi	r16, 0x07	; 7
    56a4:	8f ef       	ldi	r24, 0xFF	; 255
    56a6:	90 e0       	ldi	r25, 0x00	; 0
    56a8:	9c 01       	movw	r18, r24
    56aa:	02 c0       	rjmp	.+4      	; 0x56b0 <u8g_draw_vline+0x66>
    56ac:	22 0f       	add	r18, r18
    56ae:	33 1f       	adc	r19, r19
    56b0:	0a 95       	dec	r16
    56b2:	e2 f7       	brpl	.-8      	; 0x56ac <u8g_draw_vline+0x62>
    56b4:	89 01       	movw	r16, r18
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
    56b6:	21 e0       	ldi	r18, 0x01	; 1
    56b8:	4c 2d       	mov	r20, r12
    56ba:	6e 2d       	mov	r22, r14
    56bc:	c5 01       	movw	r24, r10
    56be:	0e 94 8c 29 	call	0x5318	; 0x5318 <u8g_Draw8Pixel>
  }
}
    56c2:	cf 91       	pop	r28
    56c4:	1f 91       	pop	r17
    56c6:	0f 91       	pop	r16
    56c8:	ef 90       	pop	r14
    56ca:	df 90       	pop	r13
    56cc:	cf 90       	pop	r12
    56ce:	bf 90       	pop	r11
    56d0:	af 90       	pop	r10
    56d2:	08 95       	ret

000056d4 <u8g_DrawFrame>:
  u8g_draw_vline(u8g, x, y, w);
}

/* restrictions: w > 0 && h > 0 */
void u8g_DrawFrame(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    56d4:	df 92       	push	r13
    56d6:	ef 92       	push	r14
    56d8:	ff 92       	push	r15
    56da:	0f 93       	push	r16
    56dc:	1f 93       	push	r17
    56de:	cf 93       	push	r28
    56e0:	df 93       	push	r29
    56e2:	ec 01       	movw	r28, r24
    56e4:	16 2f       	mov	r17, r22
    56e6:	f4 2e       	mov	r15, r20
    56e8:	e2 2e       	mov	r14, r18
    56ea:	d0 2e       	mov	r13, r16
  u8g_uint_t xtmp = x;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    56ec:	0e 94 9c 22 	call	0x4538	; 0x4538 <u8g_IsBBXIntersection>
    56f0:	88 23       	and	r24, r24
    56f2:	e1 f0       	breq	.+56     	; 0x572c <u8g_DrawFrame+0x58>
    return;

  
  u8g_draw_hline(u8g, x, y, w);
    56f4:	2e 2d       	mov	r18, r14
    56f6:	4f 2d       	mov	r20, r15
    56f8:	61 2f       	mov	r22, r17
    56fa:	ce 01       	movw	r24, r28
    56fc:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <u8g_draw_hline>
  u8g_draw_vline(u8g, x, y, h);
    5700:	2d 2d       	mov	r18, r13
    5702:	4f 2d       	mov	r20, r15
    5704:	61 2f       	mov	r22, r17
    5706:	ce 01       	movw	r24, r28
    5708:	0e 94 25 2b 	call	0x564a	; 0x564a <u8g_draw_vline>
  x+=w;
    570c:	6f ef       	ldi	r22, 0xFF	; 255
    570e:	6e 0d       	add	r22, r14
  x--;
    5710:	61 0f       	add	r22, r17
  u8g_draw_vline(u8g, x, y, h);
    5712:	2d 2d       	mov	r18, r13
    5714:	4f 2d       	mov	r20, r15
    5716:	ce 01       	movw	r24, r28
    5718:	0e 94 25 2b 	call	0x564a	; 0x564a <u8g_draw_vline>
  y+=h;
    571c:	da 94       	dec	r13
  y--;
    571e:	4d 2d       	mov	r20, r13
    5720:	4f 0d       	add	r20, r15
  u8g_draw_hline(u8g, xtmp, y, w);
    5722:	2e 2d       	mov	r18, r14
    5724:	61 2f       	mov	r22, r17
    5726:	ce 01       	movw	r24, r28
    5728:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <u8g_draw_hline>
}
    572c:	df 91       	pop	r29
    572e:	cf 91       	pop	r28
    5730:	1f 91       	pop	r17
    5732:	0f 91       	pop	r16
    5734:	ff 90       	pop	r15
    5736:	ef 90       	pop	r14
    5738:	df 90       	pop	r13
    573a:	08 95       	ret

0000573c <u8g_draw_box>:

void u8g_draw_box(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    573c:	ef 92       	push	r14
    573e:	ff 92       	push	r15
    5740:	0f 93       	push	r16
    5742:	1f 93       	push	r17
    5744:	cf 93       	push	r28
    5746:	df 93       	push	r29
    5748:	ec 01       	movw	r28, r24
    574a:	e6 2e       	mov	r14, r22
    574c:	14 2f       	mov	r17, r20
    574e:	f2 2e       	mov	r15, r18
  do
  { 
    u8g_draw_hline(u8g, x, y, w);
    5750:	2f 2d       	mov	r18, r15
    5752:	41 2f       	mov	r20, r17
    5754:	6e 2d       	mov	r22, r14
    5756:	ce 01       	movw	r24, r28
    5758:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <u8g_draw_hline>
    y++;    
    575c:	1f 5f       	subi	r17, 0xFF	; 255
    h--;
    575e:	01 50       	subi	r16, 0x01	; 1
  } while( h != 0 );
    5760:	b9 f7       	brne	.-18     	; 0x5750 <u8g_draw_box+0x14>
}
    5762:	df 91       	pop	r29
    5764:	cf 91       	pop	r28
    5766:	1f 91       	pop	r17
    5768:	0f 91       	pop	r16
    576a:	ff 90       	pop	r15
    576c:	ef 90       	pop	r14
    576e:	08 95       	ret

00005770 <u8g_DrawBox>:

/* restrictions: h > 0 */
void u8g_DrawBox(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    5770:	df 92       	push	r13
    5772:	ef 92       	push	r14
    5774:	ff 92       	push	r15
    5776:	0f 93       	push	r16
    5778:	1f 93       	push	r17
    577a:	cf 93       	push	r28
    577c:	df 93       	push	r29
    577e:	ec 01       	movw	r28, r24
    5780:	16 2f       	mov	r17, r22
    5782:	f4 2e       	mov	r15, r20
    5784:	e2 2e       	mov	r14, r18
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    5786:	0e 94 9c 22 	call	0x4538	; 0x4538 <u8g_IsBBXIntersection>
    578a:	88 23       	and	r24, r24
    578c:	31 f0       	breq	.+12     	; 0x579a <u8g_DrawBox+0x2a>
    return;
  u8g_draw_box(u8g, x, y, w, h);
    578e:	2e 2d       	mov	r18, r14
    5790:	4f 2d       	mov	r20, r15
    5792:	61 2f       	mov	r22, r17
    5794:	ce 01       	movw	r24, r28
    5796:	0e 94 9e 2b 	call	0x573c	; 0x573c <u8g_draw_box>
}
    579a:	df 91       	pop	r29
    579c:	cf 91       	pop	r28
    579e:	1f 91       	pop	r17
    57a0:	0f 91       	pop	r16
    57a2:	ff 90       	pop	r15
    57a4:	ef 90       	pop	r14
    57a6:	df 90       	pop	r13
    57a8:	08 95       	ret

000057aa <u8g_DrawRFrame>:


void u8g_DrawRFrame(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, u8g_uint_t r)
{
    57aa:	7f 92       	push	r7
    57ac:	8f 92       	push	r8
    57ae:	9f 92       	push	r9
    57b0:	af 92       	push	r10
    57b2:	bf 92       	push	r11
    57b4:	cf 92       	push	r12
    57b6:	df 92       	push	r13
    57b8:	ef 92       	push	r14
    57ba:	ff 92       	push	r15
    57bc:	0f 93       	push	r16
    57be:	1f 93       	push	r17
    57c0:	cf 93       	push	r28
    57c2:	df 93       	push	r29
    57c4:	ec 01       	movw	r28, r24
    57c6:	16 2f       	mov	r17, r22
    57c8:	f4 2e       	mov	r15, r20
    57ca:	d2 2e       	mov	r13, r18
    57cc:	c0 2e       	mov	r12, r16
  u8g_uint_t xl, yu;

  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    57ce:	0e 94 9c 22 	call	0x4538	; 0x4538 <u8g_IsBBXIntersection>
    57d2:	88 23       	and	r24, r24
    57d4:	09 f4       	brne	.+2      	; 0x57d8 <u8g_DrawRFrame+0x2e>
    57d6:	51 c0       	rjmp	.+162    	; 0x587a <u8g_DrawRFrame+0xd0>
    return;

  xl = x;
  xl += r;
    57d8:	a1 2e       	mov	r10, r17
    57da:	ae 0c       	add	r10, r14
  yu = y;
  yu += r;
    57dc:	bf 2c       	mov	r11, r15
    57de:	be 0c       	add	r11, r14
 
  {
    u8g_uint_t yl, xr;
      
    xr = x;
    xr += w;
    57e0:	8e 2c       	mov	r8, r14
    57e2:	80 94       	com	r8
    xr -= r;
    57e4:	8d 0c       	add	r8, r13
    xr -= 1;
    57e6:	81 0e       	add	r8, r17
    
    yl = y;
    yl += h;
    57e8:	9c 2c       	mov	r9, r12
    57ea:	9e 18       	sub	r9, r14
    yl -= r; 
    57ec:	77 24       	eor	r7, r7
    57ee:	7a 94       	dec	r7
    57f0:	79 0c       	add	r7, r9
    yl -= 1;
    57f2:	7f 0c       	add	r7, r15

    u8g_draw_circle(u8g, xl, yu, r, U8G_DRAW_UPPER_LEFT);
    57f4:	02 e0       	ldi	r16, 0x02	; 2
    57f6:	2e 2d       	mov	r18, r14
    57f8:	4b 2d       	mov	r20, r11
    57fa:	6a 2d       	mov	r22, r10
    57fc:	ce 01       	movw	r24, r28
    57fe:	0e 94 30 22 	call	0x4460	; 0x4460 <u8g_draw_circle>
    u8g_draw_circle(u8g, xr, yu, r, U8G_DRAW_UPPER_RIGHT);
    5802:	01 e0       	ldi	r16, 0x01	; 1
    5804:	2e 2d       	mov	r18, r14
    5806:	4b 2d       	mov	r20, r11
    5808:	68 2d       	mov	r22, r8
    580a:	ce 01       	movw	r24, r28
    580c:	0e 94 30 22 	call	0x4460	; 0x4460 <u8g_draw_circle>
    u8g_draw_circle(u8g, xl, yl, r, U8G_DRAW_LOWER_LEFT);
    5810:	04 e0       	ldi	r16, 0x04	; 4
    5812:	2e 2d       	mov	r18, r14
    5814:	47 2d       	mov	r20, r7
    5816:	6a 2d       	mov	r22, r10
    5818:	ce 01       	movw	r24, r28
    581a:	0e 94 30 22 	call	0x4460	; 0x4460 <u8g_draw_circle>
    u8g_draw_circle(u8g, xr, yl, r, U8G_DRAW_LOWER_RIGHT);
    581e:	08 e0       	ldi	r16, 0x08	; 8
    5820:	2e 2d       	mov	r18, r14
    5822:	47 2d       	mov	r20, r7
    5824:	68 2d       	mov	r22, r8
    5826:	ce 01       	movw	r24, r28
    5828:	0e 94 30 22 	call	0x4460	; 0x4460 <u8g_draw_circle>
    582c:	8e 2d       	mov	r24, r14
    582e:	88 0f       	add	r24, r24

  {
    u8g_uint_t ww, hh;

    ww = w;
    ww -= r;
    5830:	8d 2c       	mov	r8, r13
    5832:	88 1a       	sub	r8, r24
    ww -= r;
    ww -= 2;
    5834:	8a 94       	dec	r8
    5836:	8a 94       	dec	r8
    hh = h;
    hh -= r;
    5838:	9a 94       	dec	r9
    583a:	9a 94       	dec	r9
    hh -= r;
    hh -= 2;
    583c:	9e 18       	sub	r9, r14
    
    xl++;
    583e:	a3 94       	inc	r10
    yu++;
    5840:	b3 94       	inc	r11
    h--;
    w--;
    u8g_draw_hline(u8g, xl, y, ww);
    5842:	28 2d       	mov	r18, r8
    5844:	4f 2d       	mov	r20, r15
    5846:	6a 2d       	mov	r22, r10
    5848:	ce 01       	movw	r24, r28
    584a:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <u8g_draw_hline>
    hh -= r;
    hh -= 2;
    
    xl++;
    yu++;
    h--;
    584e:	ca 94       	dec	r12
    w--;
    u8g_draw_hline(u8g, xl, y, ww);
    u8g_draw_hline(u8g, xl, y+h, ww);
    5850:	4c 2d       	mov	r20, r12
    5852:	4f 0d       	add	r20, r15
    5854:	28 2d       	mov	r18, r8
    5856:	6a 2d       	mov	r22, r10
    5858:	ce 01       	movw	r24, r28
    585a:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <u8g_draw_hline>
    u8g_draw_vline(u8g, x,         yu, hh);
    585e:	29 2d       	mov	r18, r9
    5860:	4b 2d       	mov	r20, r11
    5862:	61 2f       	mov	r22, r17
    5864:	ce 01       	movw	r24, r28
    5866:	0e 94 25 2b 	call	0x564a	; 0x564a <u8g_draw_vline>
    hh -= 2;
    
    xl++;
    yu++;
    h--;
    w--;
    586a:	da 94       	dec	r13
    u8g_draw_hline(u8g, xl, y, ww);
    u8g_draw_hline(u8g, xl, y+h, ww);
    u8g_draw_vline(u8g, x,         yu, hh);
    u8g_draw_vline(u8g, x+w, yu, hh);
    586c:	6d 2d       	mov	r22, r13
    586e:	61 0f       	add	r22, r17
    5870:	29 2d       	mov	r18, r9
    5872:	4b 2d       	mov	r20, r11
    5874:	ce 01       	movw	r24, r28
    5876:	0e 94 25 2b 	call	0x564a	; 0x564a <u8g_draw_vline>
  }
}
    587a:	df 91       	pop	r29
    587c:	cf 91       	pop	r28
    587e:	1f 91       	pop	r17
    5880:	0f 91       	pop	r16
    5882:	ff 90       	pop	r15
    5884:	ef 90       	pop	r14
    5886:	df 90       	pop	r13
    5888:	cf 90       	pop	r12
    588a:	bf 90       	pop	r11
    588c:	af 90       	pop	r10
    588e:	9f 90       	pop	r9
    5890:	8f 90       	pop	r8
    5892:	7f 90       	pop	r7
    5894:	08 95       	ret

00005896 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    5896:	08 95       	ret

00005898 <setup_timmer>:

/** settignup interup timmer tcc0 */
void setup_timmer()
{
	// read timmer for radio timeout
	TCC0.CNT = 0;// Zeroise count
    5898:	e0 e0       	ldi	r30, 0x00	; 0
    589a:	f8 e0       	ldi	r31, 0x08	; 8
    589c:	10 a2       	std	Z+32, r1	; 0x20
    589e:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 80000; //Period
    58a0:	80 e8       	ldi	r24, 0x80	; 128
    58a2:	98 e3       	ldi	r25, 0x38	; 56
    58a4:	86 a3       	std	Z+38, r24	; 0x26
    58a6:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1024_gc; //Divider
    58a8:	87 e0       	ldi	r24, 0x07	; 7
    58aa:	80 83       	st	Z, r24
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc; //Liow level interrupt
    58ac:	81 e0       	ldi	r24, 0x01	; 1
    58ae:	86 83       	std	Z+6, r24	; 0x06
	TCC0.INTFLAGS = 0x01; // clear any initial interrupt flags
    58b0:	84 87       	std	Z+12, r24	; 0x0c
	TCC0.CTRLB = TC_WGMODE_NORMAL_gc; // Normal operation
    58b2:	11 82       	std	Z+1, r1	; 0x01
    58b4:	08 95       	ret

000058b6 <send_get_freq>:
}

/** Send the paket to radio for freqvency and mode */
void send_get_freq()
{
    58b6:	0f 93       	push	r16
    58b8:	1f 93       	push	r17
    58ba:	cf 93       	push	r28
    58bc:	df 93       	push	r29
    58be:	cd b7       	in	r28, 0x3d	; 61
    58c0:	de b7       	in	r29, 0x3e	; 62
    58c2:	25 97       	sbiw	r28, 0x05	; 5
    58c4:	cd bf       	out	0x3d, r28	; 61
    58c6:	de bf       	out	0x3e, r29	; 62

	BYTE serial[5] ={0xFF,0xFF,0xFF,0xFF,0x03};
    58c8:	85 e0       	ldi	r24, 0x05	; 5
    58ca:	ef e7       	ldi	r30, 0x7F	; 127
    58cc:	f0 e2       	ldi	r31, 0x20	; 32
    58ce:	de 01       	movw	r26, r28
    58d0:	11 96       	adiw	r26, 0x01	; 1
    58d2:	01 90       	ld	r0, Z+
    58d4:	0d 92       	st	X+, r0
    58d6:	8a 95       	dec	r24
    58d8:	e1 f7       	brne	.-8      	; 0x58d2 <send_get_freq+0x1c>
	

	for (int i =0; i<8;i++)
    58da:	00 e0       	ldi	r16, 0x00	; 0
    58dc:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (i <5)
    58de:	05 30       	cpi	r16, 0x05	; 5
    58e0:	11 05       	cpc	r17, r1
    58e2:	5c f4       	brge	.+22     	; 0x58fa <send_get_freq+0x44>
    58e4:	e1 e0       	ldi	r30, 0x01	; 1
    58e6:	f0 e0       	ldi	r31, 0x00	; 0
    58e8:	ec 0f       	add	r30, r28
    58ea:	fd 1f       	adc	r31, r29
    58ec:	e0 0f       	add	r30, r16
    58ee:	f1 1f       	adc	r31, r17
		{
			sendChar_d(serial[i]);
    58f0:	80 81       	ld	r24, Z
    58f2:	90 e0       	ldi	r25, 0x00	; 0
    58f4:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <sendChar_d>
    58f8:	04 c0       	rjmp	.+8      	; 0x5902 <send_get_freq+0x4c>
		}
		else
		{
			sendChar_d(0xFF);
    58fa:	8f ef       	ldi	r24, 0xFF	; 255
    58fc:	90 e0       	ldi	r25, 0x00	; 0
    58fe:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <sendChar_d>
{

	BYTE serial[5] ={0xFF,0xFF,0xFF,0xFF,0x03};
	

	for (int i =0; i<8;i++)
    5902:	0f 5f       	subi	r16, 0xFF	; 255
    5904:	1f 4f       	sbci	r17, 0xFF	; 255
    5906:	08 30       	cpi	r16, 0x08	; 8
    5908:	11 05       	cpc	r17, r1
    590a:	49 f7       	brne	.-46     	; 0x58de <send_get_freq+0x28>
		{
			sendChar_d(0xFF);
		}
		
	}
	controller_tx=1;
    590c:	81 e0       	ldi	r24, 0x01	; 1
    590e:	90 e0       	ldi	r25, 0x00	; 0
    5910:	80 93 cc 25 	sts	0x25CC, r24
    5914:	90 93 cd 25 	sts	0x25CD, r25


}
    5918:	25 96       	adiw	r28, 0x05	; 5
    591a:	cd bf       	out	0x3d, r28	; 61
    591c:	de bf       	out	0x3e, r29	; 62
    591e:	df 91       	pop	r29
    5920:	cf 91       	pop	r28
    5922:	1f 91       	pop	r17
    5924:	0f 91       	pop	r16
    5926:	08 95       	ret

00005928 <send_get_status>:
/** Send the paket to radio for status of settings */
void send_get_status()
{
    5928:	0f 93       	push	r16
    592a:	1f 93       	push	r17
    592c:	cf 93       	push	r28
    592e:	df 93       	push	r29
    5930:	cd b7       	in	r28, 0x3d	; 61
    5932:	de b7       	in	r29, 0x3e	; 62
    5934:	25 97       	sbiw	r28, 0x05	; 5
    5936:	cd bf       	out	0x3d, r28	; 61
    5938:	de bf       	out	0x3e, r29	; 62
	BYTE serial[5] ={0xFF,0xFF,0xFF,0xFF,0xF7};
    593a:	85 e0       	ldi	r24, 0x05	; 5
    593c:	e4 e8       	ldi	r30, 0x84	; 132
    593e:	f0 e2       	ldi	r31, 0x20	; 32
    5940:	de 01       	movw	r26, r28
    5942:	11 96       	adiw	r26, 0x01	; 1
    5944:	01 90       	ld	r0, Z+
    5946:	0d 92       	st	X+, r0
    5948:	8a 95       	dec	r24
    594a:	e1 f7       	brne	.-8      	; 0x5944 <send_get_status+0x1c>


	for (int i =0; i<8;i++)
    594c:	00 e0       	ldi	r16, 0x00	; 0
    594e:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (i <5)
    5950:	05 30       	cpi	r16, 0x05	; 5
    5952:	11 05       	cpc	r17, r1
    5954:	54 f4       	brge	.+20     	; 0x596a <send_get_status+0x42>
    5956:	e1 e0       	ldi	r30, 0x01	; 1
    5958:	f0 e0       	ldi	r31, 0x00	; 0
    595a:	ec 0f       	add	r30, r28
    595c:	fd 1f       	adc	r31, r29
    595e:	e0 0f       	add	r30, r16
    5960:	f1 1f       	adc	r31, r17
		{
			sendChar_d(serial[i]);
    5962:	80 81       	ld	r24, Z
    5964:	90 e0       	ldi	r25, 0x00	; 0
    5966:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <sendChar_d>
void send_get_status()
{
	BYTE serial[5] ={0xFF,0xFF,0xFF,0xFF,0xF7};


	for (int i =0; i<8;i++)
    596a:	0f 5f       	subi	r16, 0xFF	; 255
    596c:	1f 4f       	sbci	r17, 0xFF	; 255
    596e:	08 30       	cpi	r16, 0x08	; 8
    5970:	11 05       	cpc	r17, r1
    5972:	71 f7       	brne	.-36     	; 0x5950 <send_get_status+0x28>
		{
			sendChar_d(serial[i]);
		}
		
	}
	controller_tx=1;
    5974:	81 e0       	ldi	r24, 0x01	; 1
    5976:	90 e0       	ldi	r25, 0x00	; 0
    5978:	80 93 cc 25 	sts	0x25CC, r24
    597c:	90 93 cd 25 	sts	0x25CD, r25

}
    5980:	25 96       	adiw	r28, 0x05	; 5
    5982:	cd bf       	out	0x3d, r28	; 61
    5984:	de bf       	out	0x3e, r29	; 62
    5986:	df 91       	pop	r29
    5988:	cf 91       	pop	r28
    598a:	1f 91       	pop	r17
    598c:	0f 91       	pop	r16
    598e:	08 95       	ret

00005990 <send_get_rxstatus>:
/** Send the paket to radio for RX settings */
void send_get_rxstatus()
{
    5990:	0f 93       	push	r16
    5992:	1f 93       	push	r17
    5994:	cf 93       	push	r28
    5996:	df 93       	push	r29
    5998:	cd b7       	in	r28, 0x3d	; 61
    599a:	de b7       	in	r29, 0x3e	; 62
    599c:	25 97       	sbiw	r28, 0x05	; 5
    599e:	cd bf       	out	0x3d, r28	; 61
    59a0:	de bf       	out	0x3e, r29	; 62
	BYTE serial[5] ={0xFF,0xFF,0xFF,0xFF,0xE7};
    59a2:	85 e0       	ldi	r24, 0x05	; 5
    59a4:	e9 e8       	ldi	r30, 0x89	; 137
    59a6:	f0 e2       	ldi	r31, 0x20	; 32
    59a8:	de 01       	movw	r26, r28
    59aa:	11 96       	adiw	r26, 0x01	; 1
    59ac:	01 90       	ld	r0, Z+
    59ae:	0d 92       	st	X+, r0
    59b0:	8a 95       	dec	r24
    59b2:	e1 f7       	brne	.-8      	; 0x59ac <send_get_rxstatus+0x1c>


	for (int i =0; i<8;i++)
    59b4:	00 e0       	ldi	r16, 0x00	; 0
    59b6:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (i <5)
    59b8:	05 30       	cpi	r16, 0x05	; 5
    59ba:	11 05       	cpc	r17, r1
    59bc:	54 f4       	brge	.+20     	; 0x59d2 <send_get_rxstatus+0x42>
    59be:	e1 e0       	ldi	r30, 0x01	; 1
    59c0:	f0 e0       	ldi	r31, 0x00	; 0
    59c2:	ec 0f       	add	r30, r28
    59c4:	fd 1f       	adc	r31, r29
    59c6:	e0 0f       	add	r30, r16
    59c8:	f1 1f       	adc	r31, r17
		{
			sendChar_d(serial[i]);
    59ca:	80 81       	ld	r24, Z
    59cc:	90 e0       	ldi	r25, 0x00	; 0
    59ce:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <sendChar_d>
void send_get_rxstatus()
{
	BYTE serial[5] ={0xFF,0xFF,0xFF,0xFF,0xE7};


	for (int i =0; i<8;i++)
    59d2:	0f 5f       	subi	r16, 0xFF	; 255
    59d4:	1f 4f       	sbci	r17, 0xFF	; 255
    59d6:	08 30       	cpi	r16, 0x08	; 8
    59d8:	11 05       	cpc	r17, r1
    59da:	71 f7       	brne	.-36     	; 0x59b8 <send_get_rxstatus+0x28>
		{
			sendChar_d(serial[i]);
		}
		
	}
	controller_tx=1;
    59dc:	81 e0       	ldi	r24, 0x01	; 1
    59de:	90 e0       	ldi	r25, 0x00	; 0
    59e0:	80 93 cc 25 	sts	0x25CC, r24
    59e4:	90 93 cd 25 	sts	0x25CD, r25

}
    59e8:	25 96       	adiw	r28, 0x05	; 5
    59ea:	cd bf       	out	0x3d, r28	; 61
    59ec:	de bf       	out	0x3e, r29	; 62
    59ee:	df 91       	pop	r29
    59f0:	cf 91       	pop	r28
    59f2:	1f 91       	pop	r17
    59f4:	0f 91       	pop	r16
    59f6:	08 95       	ret

000059f8 <from_bcd_be>:
}

// GPL
// unsigned long from hamlib work
long from_bcd_be(char bcd_data[], int bcd_len)
{
    59f8:	af 92       	push	r10
    59fa:	bf 92       	push	r11
    59fc:	cf 92       	push	r12
    59fe:	df 92       	push	r13
    5a00:	ef 92       	push	r14
    5a02:	ff 92       	push	r15
    5a04:	0f 93       	push	r16
    5a06:	1f 93       	push	r17
    5a08:	cf 93       	push	r28
    5a0a:	df 93       	push	r29
    5a0c:	5c 01       	movw	r10, r24
    5a0e:	db 01       	movw	r26, r22
	int i;
	long f = 0;

	for (i=0; i < bcd_len/2; i++) {
    5a10:	eb 01       	movw	r28, r22
    5a12:	bb 23       	and	r27, r27
    5a14:	0c f4       	brge	.+2      	; 0x5a18 <from_bcd_be+0x20>
    5a16:	21 96       	adiw	r28, 0x01	; 1
    5a18:	d5 95       	asr	r29
    5a1a:	c7 95       	ror	r28
    5a1c:	1c 16       	cp	r1, r28
    5a1e:	1d 06       	cpc	r1, r29
    5a20:	0c f0       	brlt	.+2      	; 0x5a24 <from_bcd_be+0x2c>
    5a22:	42 c0       	rjmp	.+132    	; 0x5aa8 <from_bcd_be+0xb0>
    5a24:	f5 01       	movw	r30, r10
    5a26:	95 01       	movw	r18, r10
    5a28:	2c 0f       	add	r18, r28
    5a2a:	3d 1f       	adc	r19, r29
// GPL
// unsigned long from hamlib work
long from_bcd_be(char bcd_data[], int bcd_len)
{
	int i;
	long f = 0;
    5a2c:	60 e0       	ldi	r22, 0x00	; 0
    5a2e:	70 e0       	ldi	r23, 0x00	; 0
    5a30:	cb 01       	movw	r24, r22

	for (i=0; i < bcd_len/2; i++) {
		f *= 10;
    5a32:	ab 01       	movw	r20, r22
    5a34:	bc 01       	movw	r22, r24
    5a36:	44 0f       	add	r20, r20
    5a38:	55 1f       	adc	r21, r21
    5a3a:	66 1f       	adc	r22, r22
    5a3c:	77 1f       	adc	r23, r23
    5a3e:	6a 01       	movw	r12, r20
    5a40:	7b 01       	movw	r14, r22
    5a42:	cc 0c       	add	r12, r12
    5a44:	dd 1c       	adc	r13, r13
    5a46:	ee 1c       	adc	r14, r14
    5a48:	ff 1c       	adc	r15, r15
    5a4a:	cc 0c       	add	r12, r12
    5a4c:	dd 1c       	adc	r13, r13
    5a4e:	ee 1c       	adc	r14, r14
    5a50:	ff 1c       	adc	r15, r15
    5a52:	4c 0d       	add	r20, r12
    5a54:	5d 1d       	adc	r21, r13
    5a56:	6e 1d       	adc	r22, r14
    5a58:	7f 1d       	adc	r23, r15
		f += bcd_data[i]>>4;
    5a5a:	11 91       	ld	r17, Z+
    5a5c:	f1 2e       	mov	r15, r17
    5a5e:	f6 94       	lsr	r15
    5a60:	f6 94       	lsr	r15
    5a62:	f6 94       	lsr	r15
    5a64:	f6 94       	lsr	r15
    5a66:	4f 0d       	add	r20, r15
    5a68:	51 1d       	adc	r21, r1
    5a6a:	61 1d       	adc	r22, r1
    5a6c:	71 1d       	adc	r23, r1
		f *= 10;
    5a6e:	44 0f       	add	r20, r20
    5a70:	55 1f       	adc	r21, r21
    5a72:	66 1f       	adc	r22, r22
    5a74:	77 1f       	adc	r23, r23
    5a76:	6a 01       	movw	r12, r20
    5a78:	7b 01       	movw	r14, r22
    5a7a:	cc 0c       	add	r12, r12
    5a7c:	dd 1c       	adc	r13, r13
    5a7e:	ee 1c       	adc	r14, r14
    5a80:	ff 1c       	adc	r15, r15
    5a82:	cc 0c       	add	r12, r12
    5a84:	dd 1c       	adc	r13, r13
    5a86:	ee 1c       	adc	r14, r14
    5a88:	ff 1c       	adc	r15, r15
    5a8a:	4c 0d       	add	r20, r12
    5a8c:	5d 1d       	adc	r21, r13
    5a8e:	6e 1d       	adc	r22, r14
    5a90:	7f 1d       	adc	r23, r15
		f += bcd_data[i] & 0x0f;
    5a92:	1f 70       	andi	r17, 0x0F	; 15
    5a94:	cb 01       	movw	r24, r22
    5a96:	ba 01       	movw	r22, r20
    5a98:	61 0f       	add	r22, r17
    5a9a:	71 1d       	adc	r23, r1
    5a9c:	81 1d       	adc	r24, r1
    5a9e:	91 1d       	adc	r25, r1
long from_bcd_be(char bcd_data[], int bcd_len)
{
	int i;
	long f = 0;

	for (i=0; i < bcd_len/2; i++) {
    5aa0:	e2 17       	cp	r30, r18
    5aa2:	f3 07       	cpc	r31, r19
    5aa4:	31 f6       	brne	.-116    	; 0x5a32 <from_bcd_be+0x3a>
    5aa6:	03 c0       	rjmp	.+6      	; 0x5aae <from_bcd_be+0xb6>
// GPL
// unsigned long from hamlib work
long from_bcd_be(char bcd_data[], int bcd_len)
{
	int i;
	long f = 0;
    5aa8:	60 e0       	ldi	r22, 0x00	; 0
    5aaa:	70 e0       	ldi	r23, 0x00	; 0
    5aac:	cb 01       	movw	r24, r22
		f *= 10;
		f += bcd_data[i]>>4;
		f *= 10;
		f += bcd_data[i] & 0x0f;
	}
	if (bcd_len&1) {
    5aae:	a0 ff       	sbrs	r26, 0
    5ab0:	21 c0       	rjmp	.+66     	; 0x5af4 <from_bcd_be+0xfc>
		f *= 10;
    5ab2:	ab 01       	movw	r20, r22
    5ab4:	bc 01       	movw	r22, r24
    5ab6:	44 0f       	add	r20, r20
    5ab8:	55 1f       	adc	r21, r21
    5aba:	66 1f       	adc	r22, r22
    5abc:	77 1f       	adc	r23, r23
    5abe:	6a 01       	movw	r12, r20
    5ac0:	7b 01       	movw	r14, r22
    5ac2:	cc 0c       	add	r12, r12
    5ac4:	dd 1c       	adc	r13, r13
    5ac6:	ee 1c       	adc	r14, r14
    5ac8:	ff 1c       	adc	r15, r15
    5aca:	cc 0c       	add	r12, r12
    5acc:	dd 1c       	adc	r13, r13
    5ace:	ee 1c       	adc	r14, r14
    5ad0:	ff 1c       	adc	r15, r15
    5ad2:	4c 0d       	add	r20, r12
    5ad4:	5d 1d       	adc	r21, r13
    5ad6:	6e 1d       	adc	r22, r14
    5ad8:	7f 1d       	adc	r23, r15
		f += bcd_data[bcd_len/2]>>4;
    5ada:	ca 0d       	add	r28, r10
    5adc:	db 1d       	adc	r29, r11
    5ade:	88 81       	ld	r24, Y
    5ae0:	82 95       	swap	r24
    5ae2:	8f 70       	andi	r24, 0x0F	; 15
    5ae4:	8a 01       	movw	r16, r20
    5ae6:	9b 01       	movw	r18, r22
    5ae8:	08 0f       	add	r16, r24
    5aea:	11 1d       	adc	r17, r1
    5aec:	21 1d       	adc	r18, r1
    5aee:	31 1d       	adc	r19, r1
    5af0:	c9 01       	movw	r24, r18
    5af2:	b8 01       	movw	r22, r16
	}
	return f;
}
    5af4:	df 91       	pop	r29
    5af6:	cf 91       	pop	r28
    5af8:	1f 91       	pop	r17
    5afa:	0f 91       	pop	r16
    5afc:	ff 90       	pop	r15
    5afe:	ef 90       	pop	r14
    5b00:	df 90       	pop	r13
    5b02:	cf 90       	pop	r12
    5b04:	bf 90       	pop	r11
    5b06:	af 90       	pop	r10
    5b08:	08 95       	ret

00005b0a <__vector_88>:
}


int Reissue_command =0; /** fix for some logprogram theat put pakets to fast*/
ISR(USARTD0_RXC_vect)
{
    5b0a:	1f 92       	push	r1
    5b0c:	0f 92       	push	r0
    5b0e:	0f b6       	in	r0, 0x3f	; 63
    5b10:	0f 92       	push	r0
    5b12:	11 24       	eor	r1, r1
    5b14:	08 b6       	in	r0, 0x38	; 56
    5b16:	0f 92       	push	r0
    5b18:	18 be       	out	0x38, r1	; 56
    5b1a:	09 b6       	in	r0, 0x39	; 57
    5b1c:	0f 92       	push	r0
    5b1e:	19 be       	out	0x39, r1	; 57
    5b20:	0b b6       	in	r0, 0x3b	; 59
    5b22:	0f 92       	push	r0
    5b24:	1b be       	out	0x3b, r1	; 59
    5b26:	2f 93       	push	r18
    5b28:	3f 93       	push	r19
    5b2a:	4f 93       	push	r20
    5b2c:	5f 93       	push	r21
    5b2e:	6f 93       	push	r22
    5b30:	7f 93       	push	r23
    5b32:	8f 93       	push	r24
    5b34:	9f 93       	push	r25
    5b36:	af 93       	push	r26
    5b38:	bf 93       	push	r27
    5b3a:	cf 93       	push	r28
    5b3c:	ef 93       	push	r30
    5b3e:	ff 93       	push	r31
	char test1a =USARTD0_DATA;
    5b40:	c0 91 a0 09 	lds	r28, 0x09A0
	yeasu_read[number_of_readed_byte] = test1a;
    5b44:	80 91 c8 25 	lds	r24, 0x25C8
    5b48:	90 91 c9 25 	lds	r25, 0x25C9
    5b4c:	fc 01       	movw	r30, r24
    5b4e:	e7 5b       	subi	r30, 0xB7	; 183
    5b50:	f8 4d       	sbci	r31, 0xD8	; 216
    5b52:	c0 83       	st	Z, r28
	number_of_readed_byte++;
    5b54:	01 96       	adiw	r24, 0x01	; 1
	
	if(number_of_readed_byte >4)
    5b56:	85 30       	cpi	r24, 0x05	; 5
    5b58:	91 05       	cpc	r25, r1
    5b5a:	2c f4       	brge	.+10     	; 0x5b66 <__vector_88+0x5c>
int Reissue_command =0; /** fix for some logprogram theat put pakets to fast*/
ISR(USARTD0_RXC_vect)
{
	char test1a =USARTD0_DATA;
	yeasu_read[number_of_readed_byte] = test1a;
	number_of_readed_byte++;
    5b5c:	80 93 c8 25 	sts	0x25C8, r24
    5b60:	90 93 c9 25 	sts	0x25C9, r25
    5b64:	23 c0       	rjmp	.+70     	; 0x5bac <__vector_88+0xa2>
	
	if(number_of_readed_byte >4)
	{
		number_of_readed_byte =0;
    5b66:	10 92 c8 25 	sts	0x25C8, r1
    5b6a:	10 92 c9 25 	sts	0x25C9, r1
		Reissue_command=0;
    5b6e:	10 92 c2 25 	sts	0x25C2, r1
    5b72:	10 92 c3 25 	sts	0x25C3, r1
		// copy the message to the from yeasy yx
		switch(cat_message_type)
    5b76:	80 91 c4 25 	lds	r24, 0x25C4
    5b7a:	90 91 c5 25 	lds	r25, 0x25C5
    5b7e:	01 97       	sbiw	r24, 0x01	; 1
    5b80:	a9 f4       	brne	.+42     	; 0x5bac <__vector_88+0xa2>
		{
			case CAT_READ_FREQ_MODE:
				// Decode the freqvensy from radio
				rs232radio.freqvensy = from_bcd_be(yeasu_read, 8);
    5b82:	68 e0       	ldi	r22, 0x08	; 8
    5b84:	70 e0       	ldi	r23, 0x00	; 0
    5b86:	89 e4       	ldi	r24, 0x49	; 73
    5b88:	97 e2       	ldi	r25, 0x27	; 39
    5b8a:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <from_bcd_be>
    5b8e:	60 93 8c 26 	sts	0x268C, r22
    5b92:	70 93 8d 26 	sts	0x268D, r23
    5b96:	80 93 8e 26 	sts	0x268E, r24
    5b9a:	90 93 8f 26 	sts	0x268F, r25
				rs232radio.radio_mode = yeasu_read[4];
    5b9e:	80 91 4d 27 	lds	r24, 0x274D
    5ba2:	90 e0       	ldi	r25, 0x00	; 0
    5ba4:	80 93 90 26 	sts	0x2690, r24
    5ba8:	90 93 91 26 	sts	0x2691, r25
			
		}

	}
	
	USARTC0_DATA = test1a;
    5bac:	c0 93 a0 08 	sts	0x08A0, r28

}
    5bb0:	ff 91       	pop	r31
    5bb2:	ef 91       	pop	r30
    5bb4:	cf 91       	pop	r28
    5bb6:	bf 91       	pop	r27
    5bb8:	af 91       	pop	r26
    5bba:	9f 91       	pop	r25
    5bbc:	8f 91       	pop	r24
    5bbe:	7f 91       	pop	r23
    5bc0:	6f 91       	pop	r22
    5bc2:	5f 91       	pop	r21
    5bc4:	4f 91       	pop	r20
    5bc6:	3f 91       	pop	r19
    5bc8:	2f 91       	pop	r18
    5bca:	0f 90       	pop	r0
    5bcc:	0b be       	out	0x3b, r0	; 59
    5bce:	0f 90       	pop	r0
    5bd0:	09 be       	out	0x39, r0	; 57
    5bd2:	0f 90       	pop	r0
    5bd4:	08 be       	out	0x38, r0	; 56
    5bd6:	0f 90       	pop	r0
    5bd8:	0f be       	out	0x3f, r0	; 63
    5bda:	0f 90       	pop	r0
    5bdc:	1f 90       	pop	r1
    5bde:	18 95       	reti

00005be0 <__vector_25>:

ISR(USARTC0_RXC_vect)
{
    5be0:	1f 92       	push	r1
    5be2:	0f 92       	push	r0
    5be4:	0f b6       	in	r0, 0x3f	; 63
    5be6:	0f 92       	push	r0
    5be8:	11 24       	eor	r1, r1
    5bea:	08 b6       	in	r0, 0x38	; 56
    5bec:	0f 92       	push	r0
    5bee:	18 be       	out	0x38, r1	; 56
    5bf0:	0b b6       	in	r0, 0x3b	; 59
    5bf2:	0f 92       	push	r0
    5bf4:	1b be       	out	0x3b, r1	; 59
    5bf6:	2f 93       	push	r18
    5bf8:	8f 93       	push	r24
    5bfa:	9f 93       	push	r25
    5bfc:	ef 93       	push	r30
    5bfe:	ff 93       	push	r31
	char rx_data = USARTC0_DATA;
    5c00:	20 91 a0 08 	lds	r18, 0x08A0

	pc_read[number_of_transmitted_byte_pc] = rx_data;
    5c04:	80 91 c6 25 	lds	r24, 0x25C6
    5c08:	90 91 c7 25 	lds	r25, 0x25C7
    5c0c:	fc 01       	movw	r30, r24
    5c0e:	e2 5b       	subi	r30, 0xB2	; 178
    5c10:	f8 4d       	sbci	r31, 0xD8	; 216
    5c12:	20 83       	st	Z, r18
	
	number_of_transmitted_byte_pc++;
    5c14:	01 96       	adiw	r24, 0x01	; 1

	
	if(number_of_transmitted_byte_pc >4)
    5c16:	85 30       	cpi	r24, 0x05	; 5
    5c18:	91 05       	cpc	r25, r1
    5c1a:	2c f4       	brge	.+10     	; 0x5c26 <__vector_25+0x46>
{
	char rx_data = USARTC0_DATA;

	pc_read[number_of_transmitted_byte_pc] = rx_data;
	
	number_of_transmitted_byte_pc++;
    5c1c:	80 93 c6 25 	sts	0x25C6, r24
    5c20:	90 93 c7 25 	sts	0x25C7, r25
    5c24:	23 c0       	rjmp	.+70     	; 0x5c6c <__vector_25+0x8c>

	
	if(number_of_transmitted_byte_pc >4)
	{
		number_of_transmitted_byte_pc =0;
    5c26:	10 92 c6 25 	sts	0x25C6, r1
    5c2a:	10 92 c7 25 	sts	0x25C7, r1
		
		if(Reissue_command == 0)
    5c2e:	80 91 c2 25 	lds	r24, 0x25C2
    5c32:	90 91 c3 25 	lds	r25, 0x25C3
    5c36:	89 2b       	or	r24, r25
    5c38:	c9 f4       	brne	.+50     	; 0x5c6c <__vector_25+0x8c>
		{
			Reissue_command=1;
    5c3a:	81 e0       	ldi	r24, 0x01	; 1
    5c3c:	90 e0       	ldi	r25, 0x00	; 0
    5c3e:	80 93 c2 25 	sts	0x25C2, r24
    5c42:	90 93 c3 25 	sts	0x25C3, r25
			switch(pc_read[4])
    5c46:	80 91 52 27 	lds	r24, 0x2752
    5c4a:	83 30       	cpi	r24, 0x03	; 3
    5c4c:	59 f4       	brne	.+22     	; 0x5c64 <__vector_25+0x84>
			{
				case CAT_RX_FREQ_CMD:
					cat_message_type= CAT_READ_FREQ_MODE;
    5c4e:	81 e0       	ldi	r24, 0x01	; 1
    5c50:	90 e0       	ldi	r25, 0x00	; 0
    5c52:	80 93 c4 25 	sts	0x25C4, r24
    5c56:	90 93 c5 25 	sts	0x25C5, r25
					number_of_readed_byte=0;
    5c5a:	10 92 c8 25 	sts	0x25C8, r1
    5c5e:	10 92 c9 25 	sts	0x25C9, r1
					break;
    5c62:	04 c0       	rjmp	.+8      	; 0x5c6c <__vector_25+0x8c>
				default:
					cat_message_type =0;
    5c64:	10 92 c4 25 	sts	0x25C4, r1
    5c68:	10 92 c5 25 	sts	0x25C5, r1
			}
		}
		
	}
	
	USARTD0_DATA = rx_data;
    5c6c:	20 93 a0 09 	sts	0x09A0, r18
	
	count_active++;
    5c70:	80 91 d2 25 	lds	r24, 0x25D2
    5c74:	90 91 d3 25 	lds	r25, 0x25D3
    5c78:	01 96       	adiw	r24, 0x01	; 1
    5c7a:	80 93 d2 25 	sts	0x25D2, r24
    5c7e:	90 93 d3 25 	sts	0x25D3, r25

	
}
    5c82:	ff 91       	pop	r31
    5c84:	ef 91       	pop	r30
    5c86:	9f 91       	pop	r25
    5c88:	8f 91       	pop	r24
    5c8a:	2f 91       	pop	r18
    5c8c:	0f 90       	pop	r0
    5c8e:	0b be       	out	0x3b, r0	; 59
    5c90:	0f 90       	pop	r0
    5c92:	08 be       	out	0x38, r0	; 56
    5c94:	0f 90       	pop	r0
    5c96:	0f be       	out	0x3f, r0	; 63
    5c98:	0f 90       	pop	r0
    5c9a:	1f 90       	pop	r1
    5c9c:	18 95       	reti

00005c9e <__vector_14>:
// skriver kommandon till radion för att få ut data då logprogramet ej är på
ISR(TCC0_OVF_vect)
{
    5c9e:	1f 92       	push	r1
    5ca0:	0f 92       	push	r0
    5ca2:	0f b6       	in	r0, 0x3f	; 63
    5ca4:	0f 92       	push	r0
    5ca6:	11 24       	eor	r1, r1
    5ca8:	08 b6       	in	r0, 0x38	; 56
    5caa:	0f 92       	push	r0
    5cac:	18 be       	out	0x38, r1	; 56
    5cae:	09 b6       	in	r0, 0x39	; 57
    5cb0:	0f 92       	push	r0
    5cb2:	19 be       	out	0x39, r1	; 57
    5cb4:	0b b6       	in	r0, 0x3b	; 59
    5cb6:	0f 92       	push	r0
    5cb8:	1b be       	out	0x3b, r1	; 59
    5cba:	2f 93       	push	r18
    5cbc:	3f 93       	push	r19
    5cbe:	4f 93       	push	r20
    5cc0:	5f 93       	push	r21
    5cc2:	6f 93       	push	r22
    5cc4:	7f 93       	push	r23
    5cc6:	8f 93       	push	r24
    5cc8:	9f 93       	push	r25
    5cca:	af 93       	push	r26
    5ccc:	bf 93       	push	r27
    5cce:	ef 93       	push	r30
    5cd0:	ff 93       	push	r31
	// koden skickar ut data till radion då
	// logprogrammet inte gör det
	
	if (count_active_temp == count_active )
    5cd2:	20 91 ce 25 	lds	r18, 0x25CE
    5cd6:	30 91 cf 25 	lds	r19, 0x25CF
    5cda:	80 91 d2 25 	lds	r24, 0x25D2
    5cde:	90 91 d3 25 	lds	r25, 0x25D3
    5ce2:	28 17       	cp	r18, r24
    5ce4:	39 07       	cpc	r19, r25
    5ce6:	09 f0       	breq	.+2      	; 0x5cea <__vector_14+0x4c>
    5ce8:	54 c0       	rjmp	.+168    	; 0x5d92 <__vector_14+0xf4>
	{
		number_of_readed_byte=0;
    5cea:	10 92 c8 25 	sts	0x25C8, r1
    5cee:	10 92 c9 25 	sts	0x25C9, r1
		switch(scan_for)
    5cf2:	80 91 d0 25 	lds	r24, 0x25D0
    5cf6:	90 91 d1 25 	lds	r25, 0x25D1
    5cfa:	81 30       	cpi	r24, 0x01	; 1
    5cfc:	91 05       	cpc	r25, r1
    5cfe:	b9 f0       	breq	.+46     	; 0x5d2e <__vector_14+0x90>
    5d00:	82 30       	cpi	r24, 0x02	; 2
    5d02:	91 05       	cpc	r25, r1
    5d04:	31 f1       	breq	.+76     	; 0x5d52 <__vector_14+0xb4>
    5d06:	89 2b       	or	r24, r25
    5d08:	e1 f5       	brne	.+120    	; 0x5d82 <__vector_14+0xe4>
		{
			case 0:
				send_get_freq();
    5d0a:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <send_get_freq>
				cat_message_type = CAT_READ_FREQ_MODE;
    5d0e:	81 e0       	ldi	r24, 0x01	; 1
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	80 93 c4 25 	sts	0x25C4, r24
    5d16:	90 93 c5 25 	sts	0x25C5, r25
				scan_for++;
    5d1a:	80 91 d0 25 	lds	r24, 0x25D0
    5d1e:	90 91 d1 25 	lds	r25, 0x25D1
    5d22:	01 96       	adiw	r24, 0x01	; 1
    5d24:	80 93 d0 25 	sts	0x25D0, r24
    5d28:	90 93 d1 25 	sts	0x25D1, r25
				break;
    5d2c:	32 c0       	rjmp	.+100    	; 0x5d92 <__vector_14+0xf4>
			case 1:
				send_get_status();
    5d2e:	0e 94 94 2c 	call	0x5928	; 0x5928 <send_get_status>
				cat_message_type = CAT_READ_STATUS;
    5d32:	82 e0       	ldi	r24, 0x02	; 2
    5d34:	90 e0       	ldi	r25, 0x00	; 0
    5d36:	80 93 c4 25 	sts	0x25C4, r24
    5d3a:	90 93 c5 25 	sts	0x25C5, r25
				scan_for++;
    5d3e:	80 91 d0 25 	lds	r24, 0x25D0
    5d42:	90 91 d1 25 	lds	r25, 0x25D1
    5d46:	01 96       	adiw	r24, 0x01	; 1
    5d48:	80 93 d0 25 	sts	0x25D0, r24
    5d4c:	90 93 d1 25 	sts	0x25D1, r25
			break;
    5d50:	20 c0       	rjmp	.+64     	; 0x5d92 <__vector_14+0xf4>
			case 2:
				stand_alone_transmit=1;
    5d52:	81 e0       	ldi	r24, 0x01	; 1
    5d54:	90 e0       	ldi	r25, 0x00	; 0
    5d56:	80 93 ca 25 	sts	0x25CA, r24
    5d5a:	90 93 cb 25 	sts	0x25CB, r25
				send_get_rxstatus();
    5d5e:	0e 94 c8 2c 	call	0x5990	; 0x5990 <send_get_rxstatus>
				cat_message_type = CAT_READ_RXSTATUS;
    5d62:	83 e0       	ldi	r24, 0x03	; 3
    5d64:	90 e0       	ldi	r25, 0x00	; 0
    5d66:	80 93 c4 25 	sts	0x25C4, r24
    5d6a:	90 93 c5 25 	sts	0x25C5, r25
				scan_for++;
    5d6e:	80 91 d0 25 	lds	r24, 0x25D0
    5d72:	90 91 d1 25 	lds	r25, 0x25D1
    5d76:	01 96       	adiw	r24, 0x01	; 1
    5d78:	80 93 d0 25 	sts	0x25D0, r24
    5d7c:	90 93 d1 25 	sts	0x25D1, r25
			break;
    5d80:	08 c0       	rjmp	.+16     	; 0x5d92 <__vector_14+0xf4>
			default:
				scan_for=0;
    5d82:	10 92 d0 25 	sts	0x25D0, r1
    5d86:	10 92 d1 25 	sts	0x25D1, r1
				controller_tx=0;
    5d8a:	10 92 cc 25 	sts	0x25CC, r1
    5d8e:	10 92 cd 25 	sts	0x25CD, r1
			
		}
		
	}
	
	count_active_temp =count_active;
    5d92:	80 91 d2 25 	lds	r24, 0x25D2
    5d96:	90 91 d3 25 	lds	r25, 0x25D3
    5d9a:	80 93 ce 25 	sts	0x25CE, r24
    5d9e:	90 93 cf 25 	sts	0x25CF, r25
}
    5da2:	ff 91       	pop	r31
    5da4:	ef 91       	pop	r30
    5da6:	bf 91       	pop	r27
    5da8:	af 91       	pop	r26
    5daa:	9f 91       	pop	r25
    5dac:	8f 91       	pop	r24
    5dae:	7f 91       	pop	r23
    5db0:	6f 91       	pop	r22
    5db2:	5f 91       	pop	r21
    5db4:	4f 91       	pop	r20
    5db6:	3f 91       	pop	r19
    5db8:	2f 91       	pop	r18
    5dba:	0f 90       	pop	r0
    5dbc:	0b be       	out	0x3b, r0	; 59
    5dbe:	0f 90       	pop	r0
    5dc0:	09 be       	out	0x39, r0	; 57
    5dc2:	0f 90       	pop	r0
    5dc4:	08 be       	out	0x38, r0	; 56
    5dc6:	0f 90       	pop	r0
    5dc8:	0f be       	out	0x3f, r0	; 63
    5dca:	0f 90       	pop	r0
    5dcc:	1f 90       	pop	r1
    5dce:	18 95       	reti

00005dd0 <__subsf3>:
    5dd0:	50 58       	subi	r21, 0x80	; 128

00005dd2 <__addsf3>:
    5dd2:	bb 27       	eor	r27, r27
    5dd4:	aa 27       	eor	r26, r26
    5dd6:	0e d0       	rcall	.+28     	; 0x5df4 <__addsf3x>
    5dd8:	38 c1       	rjmp	.+624    	; 0x604a <__fp_round>
    5dda:	01 d1       	rcall	.+514    	; 0x5fde <__fp_pscA>
    5ddc:	30 f0       	brcs	.+12     	; 0x5dea <__addsf3+0x18>
    5dde:	06 d1       	rcall	.+524    	; 0x5fec <__fp_pscB>
    5de0:	20 f0       	brcs	.+8      	; 0x5dea <__addsf3+0x18>
    5de2:	31 f4       	brne	.+12     	; 0x5df0 <__addsf3+0x1e>
    5de4:	9f 3f       	cpi	r25, 0xFF	; 255
    5de6:	11 f4       	brne	.+4      	; 0x5dec <__addsf3+0x1a>
    5de8:	1e f4       	brtc	.+6      	; 0x5df0 <__addsf3+0x1e>
    5dea:	f6 c0       	rjmp	.+492    	; 0x5fd8 <__fp_nan>
    5dec:	0e f4       	brtc	.+2      	; 0x5df0 <__addsf3+0x1e>
    5dee:	e0 95       	com	r30
    5df0:	e7 fb       	bst	r30, 7
    5df2:	ec c0       	rjmp	.+472    	; 0x5fcc <__fp_inf>

00005df4 <__addsf3x>:
    5df4:	e9 2f       	mov	r30, r25
    5df6:	4b d1       	rcall	.+662    	; 0x608e <__fp_split3>
    5df8:	80 f3       	brcs	.-32     	; 0x5dda <__addsf3+0x8>
    5dfa:	ba 17       	cp	r27, r26
    5dfc:	62 07       	cpc	r22, r18
    5dfe:	73 07       	cpc	r23, r19
    5e00:	84 07       	cpc	r24, r20
    5e02:	95 07       	cpc	r25, r21
    5e04:	18 f0       	brcs	.+6      	; 0x5e0c <__addsf3x+0x18>
    5e06:	71 f4       	brne	.+28     	; 0x5e24 <__addsf3x+0x30>
    5e08:	9e f5       	brtc	.+102    	; 0x5e70 <__addsf3x+0x7c>
    5e0a:	63 c1       	rjmp	.+710    	; 0x60d2 <__fp_zero>
    5e0c:	0e f4       	brtc	.+2      	; 0x5e10 <__addsf3x+0x1c>
    5e0e:	e0 95       	com	r30
    5e10:	0b 2e       	mov	r0, r27
    5e12:	ba 2f       	mov	r27, r26
    5e14:	a0 2d       	mov	r26, r0
    5e16:	0b 01       	movw	r0, r22
    5e18:	b9 01       	movw	r22, r18
    5e1a:	90 01       	movw	r18, r0
    5e1c:	0c 01       	movw	r0, r24
    5e1e:	ca 01       	movw	r24, r20
    5e20:	a0 01       	movw	r20, r0
    5e22:	11 24       	eor	r1, r1
    5e24:	ff 27       	eor	r31, r31
    5e26:	59 1b       	sub	r21, r25
    5e28:	99 f0       	breq	.+38     	; 0x5e50 <__addsf3x+0x5c>
    5e2a:	59 3f       	cpi	r21, 0xF9	; 249
    5e2c:	50 f4       	brcc	.+20     	; 0x5e42 <__addsf3x+0x4e>
    5e2e:	50 3e       	cpi	r21, 0xE0	; 224
    5e30:	68 f1       	brcs	.+90     	; 0x5e8c <__addsf3x+0x98>
    5e32:	1a 16       	cp	r1, r26
    5e34:	f0 40       	sbci	r31, 0x00	; 0
    5e36:	a2 2f       	mov	r26, r18
    5e38:	23 2f       	mov	r18, r19
    5e3a:	34 2f       	mov	r19, r20
    5e3c:	44 27       	eor	r20, r20
    5e3e:	58 5f       	subi	r21, 0xF8	; 248
    5e40:	f3 cf       	rjmp	.-26     	; 0x5e28 <__addsf3x+0x34>
    5e42:	46 95       	lsr	r20
    5e44:	37 95       	ror	r19
    5e46:	27 95       	ror	r18
    5e48:	a7 95       	ror	r26
    5e4a:	f0 40       	sbci	r31, 0x00	; 0
    5e4c:	53 95       	inc	r21
    5e4e:	c9 f7       	brne	.-14     	; 0x5e42 <__addsf3x+0x4e>
    5e50:	7e f4       	brtc	.+30     	; 0x5e70 <__addsf3x+0x7c>
    5e52:	1f 16       	cp	r1, r31
    5e54:	ba 0b       	sbc	r27, r26
    5e56:	62 0b       	sbc	r22, r18
    5e58:	73 0b       	sbc	r23, r19
    5e5a:	84 0b       	sbc	r24, r20
    5e5c:	ba f0       	brmi	.+46     	; 0x5e8c <__addsf3x+0x98>
    5e5e:	91 50       	subi	r25, 0x01	; 1
    5e60:	a1 f0       	breq	.+40     	; 0x5e8a <__addsf3x+0x96>
    5e62:	ff 0f       	add	r31, r31
    5e64:	bb 1f       	adc	r27, r27
    5e66:	66 1f       	adc	r22, r22
    5e68:	77 1f       	adc	r23, r23
    5e6a:	88 1f       	adc	r24, r24
    5e6c:	c2 f7       	brpl	.-16     	; 0x5e5e <__addsf3x+0x6a>
    5e6e:	0e c0       	rjmp	.+28     	; 0x5e8c <__addsf3x+0x98>
    5e70:	ba 0f       	add	r27, r26
    5e72:	62 1f       	adc	r22, r18
    5e74:	73 1f       	adc	r23, r19
    5e76:	84 1f       	adc	r24, r20
    5e78:	48 f4       	brcc	.+18     	; 0x5e8c <__addsf3x+0x98>
    5e7a:	87 95       	ror	r24
    5e7c:	77 95       	ror	r23
    5e7e:	67 95       	ror	r22
    5e80:	b7 95       	ror	r27
    5e82:	f7 95       	ror	r31
    5e84:	9e 3f       	cpi	r25, 0xFE	; 254
    5e86:	08 f0       	brcs	.+2      	; 0x5e8a <__addsf3x+0x96>
    5e88:	b3 cf       	rjmp	.-154    	; 0x5df0 <__addsf3+0x1e>
    5e8a:	93 95       	inc	r25
    5e8c:	88 0f       	add	r24, r24
    5e8e:	08 f0       	brcs	.+2      	; 0x5e92 <__addsf3x+0x9e>
    5e90:	99 27       	eor	r25, r25
    5e92:	ee 0f       	add	r30, r30
    5e94:	97 95       	ror	r25
    5e96:	87 95       	ror	r24
    5e98:	08 95       	ret

00005e9a <__cmpsf2>:
    5e9a:	74 d0       	rcall	.+232    	; 0x5f84 <__fp_cmp>
    5e9c:	08 f4       	brcc	.+2      	; 0x5ea0 <__cmpsf2+0x6>
    5e9e:	81 e0       	ldi	r24, 0x01	; 1
    5ea0:	08 95       	ret

00005ea2 <cos>:
    5ea2:	ac d0       	rcall	.+344    	; 0x5ffc <__fp_rempio2>
    5ea4:	e3 95       	inc	r30
    5ea6:	e2 c0       	rjmp	.+452    	; 0x606c <__fp_sinus>

00005ea8 <__fixsfsi>:
    5ea8:	04 d0       	rcall	.+8      	; 0x5eb2 <__fixunssfsi>
    5eaa:	68 94       	set
    5eac:	b1 11       	cpse	r27, r1
    5eae:	12 c1       	rjmp	.+548    	; 0x60d4 <__fp_szero>
    5eb0:	08 95       	ret

00005eb2 <__fixunssfsi>:
    5eb2:	f5 d0       	rcall	.+490    	; 0x609e <__fp_splitA>
    5eb4:	88 f0       	brcs	.+34     	; 0x5ed8 <__fixunssfsi+0x26>
    5eb6:	9f 57       	subi	r25, 0x7F	; 127
    5eb8:	90 f0       	brcs	.+36     	; 0x5ede <__fixunssfsi+0x2c>
    5eba:	b9 2f       	mov	r27, r25
    5ebc:	99 27       	eor	r25, r25
    5ebe:	b7 51       	subi	r27, 0x17	; 23
    5ec0:	a0 f0       	brcs	.+40     	; 0x5eea <__fixunssfsi+0x38>
    5ec2:	d1 f0       	breq	.+52     	; 0x5ef8 <__fixunssfsi+0x46>
    5ec4:	66 0f       	add	r22, r22
    5ec6:	77 1f       	adc	r23, r23
    5ec8:	88 1f       	adc	r24, r24
    5eca:	99 1f       	adc	r25, r25
    5ecc:	1a f0       	brmi	.+6      	; 0x5ed4 <__fixunssfsi+0x22>
    5ece:	ba 95       	dec	r27
    5ed0:	c9 f7       	brne	.-14     	; 0x5ec4 <__fixunssfsi+0x12>
    5ed2:	12 c0       	rjmp	.+36     	; 0x5ef8 <__fixunssfsi+0x46>
    5ed4:	b1 30       	cpi	r27, 0x01	; 1
    5ed6:	81 f0       	breq	.+32     	; 0x5ef8 <__fixunssfsi+0x46>
    5ed8:	fc d0       	rcall	.+504    	; 0x60d2 <__fp_zero>
    5eda:	b1 e0       	ldi	r27, 0x01	; 1
    5edc:	08 95       	ret
    5ede:	f9 c0       	rjmp	.+498    	; 0x60d2 <__fp_zero>
    5ee0:	67 2f       	mov	r22, r23
    5ee2:	78 2f       	mov	r23, r24
    5ee4:	88 27       	eor	r24, r24
    5ee6:	b8 5f       	subi	r27, 0xF8	; 248
    5ee8:	39 f0       	breq	.+14     	; 0x5ef8 <__fixunssfsi+0x46>
    5eea:	b9 3f       	cpi	r27, 0xF9	; 249
    5eec:	cc f3       	brlt	.-14     	; 0x5ee0 <__fixunssfsi+0x2e>
    5eee:	86 95       	lsr	r24
    5ef0:	77 95       	ror	r23
    5ef2:	67 95       	ror	r22
    5ef4:	b3 95       	inc	r27
    5ef6:	d9 f7       	brne	.-10     	; 0x5eee <__fixunssfsi+0x3c>
    5ef8:	3e f4       	brtc	.+14     	; 0x5f08 <__fixunssfsi+0x56>
    5efa:	90 95       	com	r25
    5efc:	80 95       	com	r24
    5efe:	70 95       	com	r23
    5f00:	61 95       	neg	r22
    5f02:	7f 4f       	sbci	r23, 0xFF	; 255
    5f04:	8f 4f       	sbci	r24, 0xFF	; 255
    5f06:	9f 4f       	sbci	r25, 0xFF	; 255
    5f08:	08 95       	ret

00005f0a <__floatunsisf>:
    5f0a:	e8 94       	clt
    5f0c:	09 c0       	rjmp	.+18     	; 0x5f20 <__floatsisf+0x12>

00005f0e <__floatsisf>:
    5f0e:	97 fb       	bst	r25, 7
    5f10:	3e f4       	brtc	.+14     	; 0x5f20 <__floatsisf+0x12>
    5f12:	90 95       	com	r25
    5f14:	80 95       	com	r24
    5f16:	70 95       	com	r23
    5f18:	61 95       	neg	r22
    5f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    5f1c:	8f 4f       	sbci	r24, 0xFF	; 255
    5f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    5f20:	99 23       	and	r25, r25
    5f22:	a9 f0       	breq	.+42     	; 0x5f4e <__floatsisf+0x40>
    5f24:	f9 2f       	mov	r31, r25
    5f26:	96 e9       	ldi	r25, 0x96	; 150
    5f28:	bb 27       	eor	r27, r27
    5f2a:	93 95       	inc	r25
    5f2c:	f6 95       	lsr	r31
    5f2e:	87 95       	ror	r24
    5f30:	77 95       	ror	r23
    5f32:	67 95       	ror	r22
    5f34:	b7 95       	ror	r27
    5f36:	f1 11       	cpse	r31, r1
    5f38:	f8 cf       	rjmp	.-16     	; 0x5f2a <__floatsisf+0x1c>
    5f3a:	fa f4       	brpl	.+62     	; 0x5f7a <__floatsisf+0x6c>
    5f3c:	bb 0f       	add	r27, r27
    5f3e:	11 f4       	brne	.+4      	; 0x5f44 <__floatsisf+0x36>
    5f40:	60 ff       	sbrs	r22, 0
    5f42:	1b c0       	rjmp	.+54     	; 0x5f7a <__floatsisf+0x6c>
    5f44:	6f 5f       	subi	r22, 0xFF	; 255
    5f46:	7f 4f       	sbci	r23, 0xFF	; 255
    5f48:	8f 4f       	sbci	r24, 0xFF	; 255
    5f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f4c:	16 c0       	rjmp	.+44     	; 0x5f7a <__floatsisf+0x6c>
    5f4e:	88 23       	and	r24, r24
    5f50:	11 f0       	breq	.+4      	; 0x5f56 <__floatsisf+0x48>
    5f52:	96 e9       	ldi	r25, 0x96	; 150
    5f54:	11 c0       	rjmp	.+34     	; 0x5f78 <__floatsisf+0x6a>
    5f56:	77 23       	and	r23, r23
    5f58:	21 f0       	breq	.+8      	; 0x5f62 <__floatsisf+0x54>
    5f5a:	9e e8       	ldi	r25, 0x8E	; 142
    5f5c:	87 2f       	mov	r24, r23
    5f5e:	76 2f       	mov	r23, r22
    5f60:	05 c0       	rjmp	.+10     	; 0x5f6c <__floatsisf+0x5e>
    5f62:	66 23       	and	r22, r22
    5f64:	71 f0       	breq	.+28     	; 0x5f82 <__floatsisf+0x74>
    5f66:	96 e8       	ldi	r25, 0x86	; 134
    5f68:	86 2f       	mov	r24, r22
    5f6a:	70 e0       	ldi	r23, 0x00	; 0
    5f6c:	60 e0       	ldi	r22, 0x00	; 0
    5f6e:	2a f0       	brmi	.+10     	; 0x5f7a <__floatsisf+0x6c>
    5f70:	9a 95       	dec	r25
    5f72:	66 0f       	add	r22, r22
    5f74:	77 1f       	adc	r23, r23
    5f76:	88 1f       	adc	r24, r24
    5f78:	da f7       	brpl	.-10     	; 0x5f70 <__floatsisf+0x62>
    5f7a:	88 0f       	add	r24, r24
    5f7c:	96 95       	lsr	r25
    5f7e:	87 95       	ror	r24
    5f80:	97 f9       	bld	r25, 7
    5f82:	08 95       	ret

00005f84 <__fp_cmp>:
    5f84:	99 0f       	add	r25, r25
    5f86:	00 08       	sbc	r0, r0
    5f88:	55 0f       	add	r21, r21
    5f8a:	aa 0b       	sbc	r26, r26
    5f8c:	e0 e8       	ldi	r30, 0x80	; 128
    5f8e:	fe ef       	ldi	r31, 0xFE	; 254
    5f90:	16 16       	cp	r1, r22
    5f92:	17 06       	cpc	r1, r23
    5f94:	e8 07       	cpc	r30, r24
    5f96:	f9 07       	cpc	r31, r25
    5f98:	c0 f0       	brcs	.+48     	; 0x5fca <__fp_cmp+0x46>
    5f9a:	12 16       	cp	r1, r18
    5f9c:	13 06       	cpc	r1, r19
    5f9e:	e4 07       	cpc	r30, r20
    5fa0:	f5 07       	cpc	r31, r21
    5fa2:	98 f0       	brcs	.+38     	; 0x5fca <__fp_cmp+0x46>
    5fa4:	62 1b       	sub	r22, r18
    5fa6:	73 0b       	sbc	r23, r19
    5fa8:	84 0b       	sbc	r24, r20
    5faa:	95 0b       	sbc	r25, r21
    5fac:	39 f4       	brne	.+14     	; 0x5fbc <__fp_cmp+0x38>
    5fae:	0a 26       	eor	r0, r26
    5fb0:	61 f0       	breq	.+24     	; 0x5fca <__fp_cmp+0x46>
    5fb2:	23 2b       	or	r18, r19
    5fb4:	24 2b       	or	r18, r20
    5fb6:	25 2b       	or	r18, r21
    5fb8:	21 f4       	brne	.+8      	; 0x5fc2 <__fp_cmp+0x3e>
    5fba:	08 95       	ret
    5fbc:	0a 26       	eor	r0, r26
    5fbe:	09 f4       	brne	.+2      	; 0x5fc2 <__fp_cmp+0x3e>
    5fc0:	a1 40       	sbci	r26, 0x01	; 1
    5fc2:	a6 95       	lsr	r26
    5fc4:	8f ef       	ldi	r24, 0xFF	; 255
    5fc6:	81 1d       	adc	r24, r1
    5fc8:	81 1d       	adc	r24, r1
    5fca:	08 95       	ret

00005fcc <__fp_inf>:
    5fcc:	97 f9       	bld	r25, 7
    5fce:	9f 67       	ori	r25, 0x7F	; 127
    5fd0:	80 e8       	ldi	r24, 0x80	; 128
    5fd2:	70 e0       	ldi	r23, 0x00	; 0
    5fd4:	60 e0       	ldi	r22, 0x00	; 0
    5fd6:	08 95       	ret

00005fd8 <__fp_nan>:
    5fd8:	9f ef       	ldi	r25, 0xFF	; 255
    5fda:	80 ec       	ldi	r24, 0xC0	; 192
    5fdc:	08 95       	ret

00005fde <__fp_pscA>:
    5fde:	00 24       	eor	r0, r0
    5fe0:	0a 94       	dec	r0
    5fe2:	16 16       	cp	r1, r22
    5fe4:	17 06       	cpc	r1, r23
    5fe6:	18 06       	cpc	r1, r24
    5fe8:	09 06       	cpc	r0, r25
    5fea:	08 95       	ret

00005fec <__fp_pscB>:
    5fec:	00 24       	eor	r0, r0
    5fee:	0a 94       	dec	r0
    5ff0:	12 16       	cp	r1, r18
    5ff2:	13 06       	cpc	r1, r19
    5ff4:	14 06       	cpc	r1, r20
    5ff6:	05 06       	cpc	r0, r21
    5ff8:	08 95       	ret
    5ffa:	ee cf       	rjmp	.-36     	; 0x5fd8 <__fp_nan>

00005ffc <__fp_rempio2>:
    5ffc:	50 d0       	rcall	.+160    	; 0x609e <__fp_splitA>
    5ffe:	e8 f3       	brcs	.-6      	; 0x5ffa <__fp_pscB+0xe>
    6000:	e8 94       	clt
    6002:	e0 e0       	ldi	r30, 0x00	; 0
    6004:	bb 27       	eor	r27, r27
    6006:	9f 57       	subi	r25, 0x7F	; 127
    6008:	f0 f0       	brcs	.+60     	; 0x6046 <__fp_rempio2+0x4a>
    600a:	2a ed       	ldi	r18, 0xDA	; 218
    600c:	3f e0       	ldi	r19, 0x0F	; 15
    600e:	49 ec       	ldi	r20, 0xC9	; 201
    6010:	06 c0       	rjmp	.+12     	; 0x601e <__fp_rempio2+0x22>
    6012:	ee 0f       	add	r30, r30
    6014:	bb 0f       	add	r27, r27
    6016:	66 1f       	adc	r22, r22
    6018:	77 1f       	adc	r23, r23
    601a:	88 1f       	adc	r24, r24
    601c:	28 f0       	brcs	.+10     	; 0x6028 <__fp_rempio2+0x2c>
    601e:	b2 3a       	cpi	r27, 0xA2	; 162
    6020:	62 07       	cpc	r22, r18
    6022:	73 07       	cpc	r23, r19
    6024:	84 07       	cpc	r24, r20
    6026:	28 f0       	brcs	.+10     	; 0x6032 <__fp_rempio2+0x36>
    6028:	b2 5a       	subi	r27, 0xA2	; 162
    602a:	62 0b       	sbc	r22, r18
    602c:	73 0b       	sbc	r23, r19
    602e:	84 0b       	sbc	r24, r20
    6030:	e3 95       	inc	r30
    6032:	9a 95       	dec	r25
    6034:	72 f7       	brpl	.-36     	; 0x6012 <__fp_rempio2+0x16>
    6036:	80 38       	cpi	r24, 0x80	; 128
    6038:	30 f4       	brcc	.+12     	; 0x6046 <__fp_rempio2+0x4a>
    603a:	9a 95       	dec	r25
    603c:	bb 0f       	add	r27, r27
    603e:	66 1f       	adc	r22, r22
    6040:	77 1f       	adc	r23, r23
    6042:	88 1f       	adc	r24, r24
    6044:	d2 f7       	brpl	.-12     	; 0x603a <__fp_rempio2+0x3e>
    6046:	90 48       	sbci	r25, 0x80	; 128
    6048:	ba c0       	rjmp	.+372    	; 0x61be <__fp_mpack_finite>

0000604a <__fp_round>:
    604a:	09 2e       	mov	r0, r25
    604c:	03 94       	inc	r0
    604e:	00 0c       	add	r0, r0
    6050:	11 f4       	brne	.+4      	; 0x6056 <__fp_round+0xc>
    6052:	88 23       	and	r24, r24
    6054:	52 f0       	brmi	.+20     	; 0x606a <__fp_round+0x20>
    6056:	bb 0f       	add	r27, r27
    6058:	40 f4       	brcc	.+16     	; 0x606a <__fp_round+0x20>
    605a:	bf 2b       	or	r27, r31
    605c:	11 f4       	brne	.+4      	; 0x6062 <__fp_round+0x18>
    605e:	60 ff       	sbrs	r22, 0
    6060:	04 c0       	rjmp	.+8      	; 0x606a <__fp_round+0x20>
    6062:	6f 5f       	subi	r22, 0xFF	; 255
    6064:	7f 4f       	sbci	r23, 0xFF	; 255
    6066:	8f 4f       	sbci	r24, 0xFF	; 255
    6068:	9f 4f       	sbci	r25, 0xFF	; 255
    606a:	08 95       	ret

0000606c <__fp_sinus>:
    606c:	ef 93       	push	r30
    606e:	e0 ff       	sbrs	r30, 0
    6070:	06 c0       	rjmp	.+12     	; 0x607e <__fp_sinus+0x12>
    6072:	a2 ea       	ldi	r26, 0xA2	; 162
    6074:	2a ed       	ldi	r18, 0xDA	; 218
    6076:	3f e0       	ldi	r19, 0x0F	; 15
    6078:	49 ec       	ldi	r20, 0xC9	; 201
    607a:	5f eb       	ldi	r21, 0xBF	; 191
    607c:	bb de       	rcall	.-650    	; 0x5df4 <__addsf3x>
    607e:	e5 df       	rcall	.-54     	; 0x604a <__fp_round>
    6080:	0f 90       	pop	r0
    6082:	03 94       	inc	r0
    6084:	01 fc       	sbrc	r0, 1
    6086:	90 58       	subi	r25, 0x80	; 128
    6088:	ea e6       	ldi	r30, 0x6A	; 106
    608a:	f2 e0       	ldi	r31, 0x02	; 2
    608c:	a4 c0       	rjmp	.+328    	; 0x61d6 <__fp_powsodd>

0000608e <__fp_split3>:
    608e:	57 fd       	sbrc	r21, 7
    6090:	90 58       	subi	r25, 0x80	; 128
    6092:	44 0f       	add	r20, r20
    6094:	55 1f       	adc	r21, r21
    6096:	59 f0       	breq	.+22     	; 0x60ae <__fp_splitA+0x10>
    6098:	5f 3f       	cpi	r21, 0xFF	; 255
    609a:	71 f0       	breq	.+28     	; 0x60b8 <__fp_splitA+0x1a>
    609c:	47 95       	ror	r20

0000609e <__fp_splitA>:
    609e:	88 0f       	add	r24, r24
    60a0:	97 fb       	bst	r25, 7
    60a2:	99 1f       	adc	r25, r25
    60a4:	61 f0       	breq	.+24     	; 0x60be <__fp_splitA+0x20>
    60a6:	9f 3f       	cpi	r25, 0xFF	; 255
    60a8:	79 f0       	breq	.+30     	; 0x60c8 <__fp_splitA+0x2a>
    60aa:	87 95       	ror	r24
    60ac:	08 95       	ret
    60ae:	12 16       	cp	r1, r18
    60b0:	13 06       	cpc	r1, r19
    60b2:	14 06       	cpc	r1, r20
    60b4:	55 1f       	adc	r21, r21
    60b6:	f2 cf       	rjmp	.-28     	; 0x609c <__fp_split3+0xe>
    60b8:	46 95       	lsr	r20
    60ba:	f1 df       	rcall	.-30     	; 0x609e <__fp_splitA>
    60bc:	08 c0       	rjmp	.+16     	; 0x60ce <__fp_splitA+0x30>
    60be:	16 16       	cp	r1, r22
    60c0:	17 06       	cpc	r1, r23
    60c2:	18 06       	cpc	r1, r24
    60c4:	99 1f       	adc	r25, r25
    60c6:	f1 cf       	rjmp	.-30     	; 0x60aa <__fp_splitA+0xc>
    60c8:	86 95       	lsr	r24
    60ca:	71 05       	cpc	r23, r1
    60cc:	61 05       	cpc	r22, r1
    60ce:	08 94       	sec
    60d0:	08 95       	ret

000060d2 <__fp_zero>:
    60d2:	e8 94       	clt

000060d4 <__fp_szero>:
    60d4:	bb 27       	eor	r27, r27
    60d6:	66 27       	eor	r22, r22
    60d8:	77 27       	eor	r23, r23
    60da:	cb 01       	movw	r24, r22
    60dc:	97 f9       	bld	r25, 7
    60de:	08 95       	ret

000060e0 <__gesf2>:
    60e0:	51 df       	rcall	.-350    	; 0x5f84 <__fp_cmp>
    60e2:	08 f4       	brcc	.+2      	; 0x60e6 <__gesf2+0x6>
    60e4:	8f ef       	ldi	r24, 0xFF	; 255
    60e6:	08 95       	ret

000060e8 <__mulsf3>:
    60e8:	0b d0       	rcall	.+22     	; 0x6100 <__mulsf3x>
    60ea:	af cf       	rjmp	.-162    	; 0x604a <__fp_round>
    60ec:	78 df       	rcall	.-272    	; 0x5fde <__fp_pscA>
    60ee:	28 f0       	brcs	.+10     	; 0x60fa <__mulsf3+0x12>
    60f0:	7d df       	rcall	.-262    	; 0x5fec <__fp_pscB>
    60f2:	18 f0       	brcs	.+6      	; 0x60fa <__mulsf3+0x12>
    60f4:	95 23       	and	r25, r21
    60f6:	09 f0       	breq	.+2      	; 0x60fa <__mulsf3+0x12>
    60f8:	69 cf       	rjmp	.-302    	; 0x5fcc <__fp_inf>
    60fa:	6e cf       	rjmp	.-292    	; 0x5fd8 <__fp_nan>
    60fc:	11 24       	eor	r1, r1
    60fe:	ea cf       	rjmp	.-44     	; 0x60d4 <__fp_szero>

00006100 <__mulsf3x>:
    6100:	c6 df       	rcall	.-116    	; 0x608e <__fp_split3>
    6102:	a0 f3       	brcs	.-24     	; 0x60ec <__mulsf3+0x4>

00006104 <__mulsf3_pse>:
    6104:	95 9f       	mul	r25, r21
    6106:	d1 f3       	breq	.-12     	; 0x60fc <__mulsf3+0x14>
    6108:	95 0f       	add	r25, r21
    610a:	50 e0       	ldi	r21, 0x00	; 0
    610c:	55 1f       	adc	r21, r21
    610e:	62 9f       	mul	r22, r18
    6110:	f0 01       	movw	r30, r0
    6112:	72 9f       	mul	r23, r18
    6114:	bb 27       	eor	r27, r27
    6116:	f0 0d       	add	r31, r0
    6118:	b1 1d       	adc	r27, r1
    611a:	63 9f       	mul	r22, r19
    611c:	aa 27       	eor	r26, r26
    611e:	f0 0d       	add	r31, r0
    6120:	b1 1d       	adc	r27, r1
    6122:	aa 1f       	adc	r26, r26
    6124:	64 9f       	mul	r22, r20
    6126:	66 27       	eor	r22, r22
    6128:	b0 0d       	add	r27, r0
    612a:	a1 1d       	adc	r26, r1
    612c:	66 1f       	adc	r22, r22
    612e:	82 9f       	mul	r24, r18
    6130:	22 27       	eor	r18, r18
    6132:	b0 0d       	add	r27, r0
    6134:	a1 1d       	adc	r26, r1
    6136:	62 1f       	adc	r22, r18
    6138:	73 9f       	mul	r23, r19
    613a:	b0 0d       	add	r27, r0
    613c:	a1 1d       	adc	r26, r1
    613e:	62 1f       	adc	r22, r18
    6140:	83 9f       	mul	r24, r19
    6142:	a0 0d       	add	r26, r0
    6144:	61 1d       	adc	r22, r1
    6146:	22 1f       	adc	r18, r18
    6148:	74 9f       	mul	r23, r20
    614a:	33 27       	eor	r19, r19
    614c:	a0 0d       	add	r26, r0
    614e:	61 1d       	adc	r22, r1
    6150:	23 1f       	adc	r18, r19
    6152:	84 9f       	mul	r24, r20
    6154:	60 0d       	add	r22, r0
    6156:	21 1d       	adc	r18, r1
    6158:	82 2f       	mov	r24, r18
    615a:	76 2f       	mov	r23, r22
    615c:	6a 2f       	mov	r22, r26
    615e:	11 24       	eor	r1, r1
    6160:	9f 57       	subi	r25, 0x7F	; 127
    6162:	50 40       	sbci	r21, 0x00	; 0
    6164:	8a f0       	brmi	.+34     	; 0x6188 <__mulsf3_pse+0x84>
    6166:	e1 f0       	breq	.+56     	; 0x61a0 <__mulsf3_pse+0x9c>
    6168:	88 23       	and	r24, r24
    616a:	4a f0       	brmi	.+18     	; 0x617e <__mulsf3_pse+0x7a>
    616c:	ee 0f       	add	r30, r30
    616e:	ff 1f       	adc	r31, r31
    6170:	bb 1f       	adc	r27, r27
    6172:	66 1f       	adc	r22, r22
    6174:	77 1f       	adc	r23, r23
    6176:	88 1f       	adc	r24, r24
    6178:	91 50       	subi	r25, 0x01	; 1
    617a:	50 40       	sbci	r21, 0x00	; 0
    617c:	a9 f7       	brne	.-22     	; 0x6168 <__mulsf3_pse+0x64>
    617e:	9e 3f       	cpi	r25, 0xFE	; 254
    6180:	51 05       	cpc	r21, r1
    6182:	70 f0       	brcs	.+28     	; 0x61a0 <__mulsf3_pse+0x9c>
    6184:	23 cf       	rjmp	.-442    	; 0x5fcc <__fp_inf>
    6186:	a6 cf       	rjmp	.-180    	; 0x60d4 <__fp_szero>
    6188:	5f 3f       	cpi	r21, 0xFF	; 255
    618a:	ec f3       	brlt	.-6      	; 0x6186 <__mulsf3_pse+0x82>
    618c:	98 3e       	cpi	r25, 0xE8	; 232
    618e:	dc f3       	brlt	.-10     	; 0x6186 <__mulsf3_pse+0x82>
    6190:	86 95       	lsr	r24
    6192:	77 95       	ror	r23
    6194:	67 95       	ror	r22
    6196:	b7 95       	ror	r27
    6198:	f7 95       	ror	r31
    619a:	e7 95       	ror	r30
    619c:	9f 5f       	subi	r25, 0xFF	; 255
    619e:	c1 f7       	brne	.-16     	; 0x6190 <__mulsf3_pse+0x8c>
    61a0:	fe 2b       	or	r31, r30
    61a2:	88 0f       	add	r24, r24
    61a4:	91 1d       	adc	r25, r1
    61a6:	96 95       	lsr	r25
    61a8:	87 95       	ror	r24
    61aa:	97 f9       	bld	r25, 7
    61ac:	08 95       	ret

000061ae <sin>:
    61ae:	9f 93       	push	r25
    61b0:	25 df       	rcall	.-438    	; 0x5ffc <__fp_rempio2>
    61b2:	0f 90       	pop	r0
    61b4:	07 fc       	sbrc	r0, 7
    61b6:	ee 5f       	subi	r30, 0xFE	; 254
    61b8:	59 cf       	rjmp	.-334    	; 0x606c <__fp_sinus>

000061ba <__fp_mpack>:
    61ba:	9f 3f       	cpi	r25, 0xFF	; 255
    61bc:	31 f0       	breq	.+12     	; 0x61ca <__fp_mpack_finite+0xc>

000061be <__fp_mpack_finite>:
    61be:	91 50       	subi	r25, 0x01	; 1
    61c0:	20 f4       	brcc	.+8      	; 0x61ca <__fp_mpack_finite+0xc>
    61c2:	87 95       	ror	r24
    61c4:	77 95       	ror	r23
    61c6:	67 95       	ror	r22
    61c8:	b7 95       	ror	r27
    61ca:	88 0f       	add	r24, r24
    61cc:	91 1d       	adc	r25, r1
    61ce:	96 95       	lsr	r25
    61d0:	87 95       	ror	r24
    61d2:	97 f9       	bld	r25, 7
    61d4:	08 95       	ret

000061d6 <__fp_powsodd>:
    61d6:	9f 93       	push	r25
    61d8:	8f 93       	push	r24
    61da:	7f 93       	push	r23
    61dc:	6f 93       	push	r22
    61de:	ff 93       	push	r31
    61e0:	ef 93       	push	r30
    61e2:	9b 01       	movw	r18, r22
    61e4:	ac 01       	movw	r20, r24
    61e6:	80 df       	rcall	.-256    	; 0x60e8 <__mulsf3>
    61e8:	ef 91       	pop	r30
    61ea:	ff 91       	pop	r31
    61ec:	05 d0       	rcall	.+10     	; 0x61f8 <__fp_powser>
    61ee:	2f 91       	pop	r18
    61f0:	3f 91       	pop	r19
    61f2:	4f 91       	pop	r20
    61f4:	5f 91       	pop	r21
    61f6:	78 cf       	rjmp	.-272    	; 0x60e8 <__mulsf3>

000061f8 <__fp_powser>:
    61f8:	df 93       	push	r29
    61fa:	cf 93       	push	r28
    61fc:	1f 93       	push	r17
    61fe:	0f 93       	push	r16
    6200:	ff 92       	push	r15
    6202:	ef 92       	push	r14
    6204:	df 92       	push	r13
    6206:	7b 01       	movw	r14, r22
    6208:	8c 01       	movw	r16, r24
    620a:	68 94       	set
    620c:	05 c0       	rjmp	.+10     	; 0x6218 <__fp_powser+0x20>
    620e:	da 2e       	mov	r13, r26
    6210:	ef 01       	movw	r28, r30
    6212:	76 df       	rcall	.-276    	; 0x6100 <__mulsf3x>
    6214:	fe 01       	movw	r30, r28
    6216:	e8 94       	clt
    6218:	a5 91       	lpm	r26, Z+
    621a:	25 91       	lpm	r18, Z+
    621c:	35 91       	lpm	r19, Z+
    621e:	45 91       	lpm	r20, Z+
    6220:	55 91       	lpm	r21, Z+
    6222:	ae f3       	brts	.-22     	; 0x620e <__fp_powser+0x16>
    6224:	ef 01       	movw	r28, r30
    6226:	e6 dd       	rcall	.-1076   	; 0x5df4 <__addsf3x>
    6228:	fe 01       	movw	r30, r28
    622a:	97 01       	movw	r18, r14
    622c:	a8 01       	movw	r20, r16
    622e:	da 94       	dec	r13
    6230:	79 f7       	brne	.-34     	; 0x6210 <__fp_powser+0x18>
    6232:	df 90       	pop	r13
    6234:	ef 90       	pop	r14
    6236:	ff 90       	pop	r15
    6238:	0f 91       	pop	r16
    623a:	1f 91       	pop	r17
    623c:	cf 91       	pop	r28
    623e:	df 91       	pop	r29
    6240:	08 95       	ret

00006242 <vfprintf>:
    6242:	2f 92       	push	r2
    6244:	3f 92       	push	r3
    6246:	4f 92       	push	r4
    6248:	5f 92       	push	r5
    624a:	6f 92       	push	r6
    624c:	7f 92       	push	r7
    624e:	8f 92       	push	r8
    6250:	9f 92       	push	r9
    6252:	af 92       	push	r10
    6254:	bf 92       	push	r11
    6256:	cf 92       	push	r12
    6258:	df 92       	push	r13
    625a:	ef 92       	push	r14
    625c:	ff 92       	push	r15
    625e:	0f 93       	push	r16
    6260:	1f 93       	push	r17
    6262:	cf 93       	push	r28
    6264:	df 93       	push	r29
    6266:	cd b7       	in	r28, 0x3d	; 61
    6268:	de b7       	in	r29, 0x3e	; 62
    626a:	63 97       	sbiw	r28, 0x13	; 19
    626c:	cd bf       	out	0x3d, r28	; 61
    626e:	de bf       	out	0x3e, r29	; 62
    6270:	7c 01       	movw	r14, r24
    6272:	1b 01       	movw	r2, r22
    6274:	6a 01       	movw	r12, r20
    6276:	fc 01       	movw	r30, r24
    6278:	16 82       	std	Z+6, r1	; 0x06
    627a:	17 82       	std	Z+7, r1	; 0x07
    627c:	83 81       	ldd	r24, Z+3	; 0x03
    627e:	81 ff       	sbrs	r24, 1
    6280:	66 c3       	rjmp	.+1740   	; 0x694e <vfprintf+0x70c>
    6282:	be 01       	movw	r22, r28
    6284:	6f 5f       	subi	r22, 0xFF	; 255
    6286:	7f 4f       	sbci	r23, 0xFF	; 255
    6288:	4b 01       	movw	r8, r22
    628a:	f7 01       	movw	r30, r14
    628c:	93 81       	ldd	r25, Z+3	; 0x03
    628e:	f1 01       	movw	r30, r2
    6290:	93 fd       	sbrc	r25, 3
    6292:	85 91       	lpm	r24, Z+
    6294:	93 ff       	sbrs	r25, 3
    6296:	81 91       	ld	r24, Z+
    6298:	1f 01       	movw	r2, r30
    629a:	88 23       	and	r24, r24
    629c:	09 f4       	brne	.+2      	; 0x62a0 <vfprintf+0x5e>
    629e:	53 c3       	rjmp	.+1702   	; 0x6946 <vfprintf+0x704>
    62a0:	85 32       	cpi	r24, 0x25	; 37
    62a2:	39 f4       	brne	.+14     	; 0x62b2 <vfprintf+0x70>
    62a4:	93 fd       	sbrc	r25, 3
    62a6:	85 91       	lpm	r24, Z+
    62a8:	93 ff       	sbrs	r25, 3
    62aa:	81 91       	ld	r24, Z+
    62ac:	1f 01       	movw	r2, r30
    62ae:	85 32       	cpi	r24, 0x25	; 37
    62b0:	39 f4       	brne	.+14     	; 0x62c0 <vfprintf+0x7e>
    62b2:	b7 01       	movw	r22, r14
    62b4:	90 e0       	ldi	r25, 0x00	; 0
    62b6:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    62ba:	56 01       	movw	r10, r12
    62bc:	65 01       	movw	r12, r10
    62be:	e5 cf       	rjmp	.-54     	; 0x628a <vfprintf+0x48>
    62c0:	10 e0       	ldi	r17, 0x00	; 0
    62c2:	51 2c       	mov	r5, r1
    62c4:	20 e0       	ldi	r18, 0x00	; 0
    62c6:	20 32       	cpi	r18, 0x20	; 32
    62c8:	a0 f4       	brcc	.+40     	; 0x62f2 <vfprintf+0xb0>
    62ca:	8b 32       	cpi	r24, 0x2B	; 43
    62cc:	69 f0       	breq	.+26     	; 0x62e8 <vfprintf+0xa6>
    62ce:	30 f4       	brcc	.+12     	; 0x62dc <vfprintf+0x9a>
    62d0:	80 32       	cpi	r24, 0x20	; 32
    62d2:	59 f0       	breq	.+22     	; 0x62ea <vfprintf+0xa8>
    62d4:	83 32       	cpi	r24, 0x23	; 35
    62d6:	69 f4       	brne	.+26     	; 0x62f2 <vfprintf+0xb0>
    62d8:	20 61       	ori	r18, 0x10	; 16
    62da:	2c c0       	rjmp	.+88     	; 0x6334 <vfprintf+0xf2>
    62dc:	8d 32       	cpi	r24, 0x2D	; 45
    62de:	39 f0       	breq	.+14     	; 0x62ee <vfprintf+0xac>
    62e0:	80 33       	cpi	r24, 0x30	; 48
    62e2:	39 f4       	brne	.+14     	; 0x62f2 <vfprintf+0xb0>
    62e4:	21 60       	ori	r18, 0x01	; 1
    62e6:	26 c0       	rjmp	.+76     	; 0x6334 <vfprintf+0xf2>
    62e8:	22 60       	ori	r18, 0x02	; 2
    62ea:	24 60       	ori	r18, 0x04	; 4
    62ec:	23 c0       	rjmp	.+70     	; 0x6334 <vfprintf+0xf2>
    62ee:	28 60       	ori	r18, 0x08	; 8
    62f0:	21 c0       	rjmp	.+66     	; 0x6334 <vfprintf+0xf2>
    62f2:	27 fd       	sbrc	r18, 7
    62f4:	27 c0       	rjmp	.+78     	; 0x6344 <vfprintf+0x102>
    62f6:	30 ed       	ldi	r19, 0xD0	; 208
    62f8:	38 0f       	add	r19, r24
    62fa:	3a 30       	cpi	r19, 0x0A	; 10
    62fc:	78 f4       	brcc	.+30     	; 0x631c <vfprintf+0xda>
    62fe:	26 ff       	sbrs	r18, 6
    6300:	06 c0       	rjmp	.+12     	; 0x630e <vfprintf+0xcc>
    6302:	fa e0       	ldi	r31, 0x0A	; 10
    6304:	1f 9f       	mul	r17, r31
    6306:	30 0d       	add	r19, r0
    6308:	11 24       	eor	r1, r1
    630a:	13 2f       	mov	r17, r19
    630c:	13 c0       	rjmp	.+38     	; 0x6334 <vfprintf+0xf2>
    630e:	6a e0       	ldi	r22, 0x0A	; 10
    6310:	56 9e       	mul	r5, r22
    6312:	30 0d       	add	r19, r0
    6314:	11 24       	eor	r1, r1
    6316:	53 2e       	mov	r5, r19
    6318:	20 62       	ori	r18, 0x20	; 32
    631a:	0c c0       	rjmp	.+24     	; 0x6334 <vfprintf+0xf2>
    631c:	8e 32       	cpi	r24, 0x2E	; 46
    631e:	21 f4       	brne	.+8      	; 0x6328 <vfprintf+0xe6>
    6320:	26 fd       	sbrc	r18, 6
    6322:	11 c3       	rjmp	.+1570   	; 0x6946 <vfprintf+0x704>
    6324:	20 64       	ori	r18, 0x40	; 64
    6326:	06 c0       	rjmp	.+12     	; 0x6334 <vfprintf+0xf2>
    6328:	8c 36       	cpi	r24, 0x6C	; 108
    632a:	11 f4       	brne	.+4      	; 0x6330 <vfprintf+0xee>
    632c:	20 68       	ori	r18, 0x80	; 128
    632e:	02 c0       	rjmp	.+4      	; 0x6334 <vfprintf+0xf2>
    6330:	88 36       	cpi	r24, 0x68	; 104
    6332:	41 f4       	brne	.+16     	; 0x6344 <vfprintf+0x102>
    6334:	f1 01       	movw	r30, r2
    6336:	93 fd       	sbrc	r25, 3
    6338:	85 91       	lpm	r24, Z+
    633a:	93 ff       	sbrs	r25, 3
    633c:	81 91       	ld	r24, Z+
    633e:	1f 01       	movw	r2, r30
    6340:	81 11       	cpse	r24, r1
    6342:	c1 cf       	rjmp	.-126    	; 0x62c6 <vfprintf+0x84>
    6344:	9b eb       	ldi	r25, 0xBB	; 187
    6346:	98 0f       	add	r25, r24
    6348:	93 30       	cpi	r25, 0x03	; 3
    634a:	18 f4       	brcc	.+6      	; 0x6352 <vfprintf+0x110>
    634c:	20 61       	ori	r18, 0x10	; 16
    634e:	80 5e       	subi	r24, 0xE0	; 224
    6350:	06 c0       	rjmp	.+12     	; 0x635e <vfprintf+0x11c>
    6352:	9b e9       	ldi	r25, 0x9B	; 155
    6354:	98 0f       	add	r25, r24
    6356:	93 30       	cpi	r25, 0x03	; 3
    6358:	08 f0       	brcs	.+2      	; 0x635c <vfprintf+0x11a>
    635a:	aa c1       	rjmp	.+852    	; 0x66b0 <vfprintf+0x46e>
    635c:	2f 7e       	andi	r18, 0xEF	; 239
    635e:	26 ff       	sbrs	r18, 6
    6360:	16 e0       	ldi	r17, 0x06	; 6
    6362:	2f 73       	andi	r18, 0x3F	; 63
    6364:	72 2e       	mov	r7, r18
    6366:	85 36       	cpi	r24, 0x65	; 101
    6368:	21 f4       	brne	.+8      	; 0x6372 <vfprintf+0x130>
    636a:	f2 2f       	mov	r31, r18
    636c:	f0 64       	ori	r31, 0x40	; 64
    636e:	7f 2e       	mov	r7, r31
    6370:	08 c0       	rjmp	.+16     	; 0x6382 <vfprintf+0x140>
    6372:	86 36       	cpi	r24, 0x66	; 102
    6374:	21 f4       	brne	.+8      	; 0x637e <vfprintf+0x13c>
    6376:	62 2f       	mov	r22, r18
    6378:	60 68       	ori	r22, 0x80	; 128
    637a:	76 2e       	mov	r7, r22
    637c:	02 c0       	rjmp	.+4      	; 0x6382 <vfprintf+0x140>
    637e:	11 11       	cpse	r17, r1
    6380:	11 50       	subi	r17, 0x01	; 1
    6382:	77 fe       	sbrs	r7, 7
    6384:	07 c0       	rjmp	.+14     	; 0x6394 <vfprintf+0x152>
    6386:	1c 33       	cpi	r17, 0x3C	; 60
    6388:	48 f4       	brcc	.+18     	; 0x639c <vfprintf+0x15a>
    638a:	44 24       	eor	r4, r4
    638c:	43 94       	inc	r4
    638e:	41 0e       	add	r4, r17
    6390:	27 e0       	ldi	r18, 0x07	; 7
    6392:	0b c0       	rjmp	.+22     	; 0x63aa <vfprintf+0x168>
    6394:	18 30       	cpi	r17, 0x08	; 8
    6396:	30 f4       	brcc	.+12     	; 0x63a4 <vfprintf+0x162>
    6398:	21 2f       	mov	r18, r17
    639a:	06 c0       	rjmp	.+12     	; 0x63a8 <vfprintf+0x166>
    639c:	27 e0       	ldi	r18, 0x07	; 7
    639e:	4c e3       	ldi	r20, 0x3C	; 60
    63a0:	44 2e       	mov	r4, r20
    63a2:	03 c0       	rjmp	.+6      	; 0x63aa <vfprintf+0x168>
    63a4:	27 e0       	ldi	r18, 0x07	; 7
    63a6:	17 e0       	ldi	r17, 0x07	; 7
    63a8:	41 2c       	mov	r4, r1
    63aa:	56 01       	movw	r10, r12
    63ac:	74 e0       	ldi	r23, 0x04	; 4
    63ae:	a7 0e       	add	r10, r23
    63b0:	b1 1c       	adc	r11, r1
    63b2:	f6 01       	movw	r30, r12
    63b4:	60 81       	ld	r22, Z
    63b6:	71 81       	ldd	r23, Z+1	; 0x01
    63b8:	82 81       	ldd	r24, Z+2	; 0x02
    63ba:	93 81       	ldd	r25, Z+3	; 0x03
    63bc:	04 2d       	mov	r16, r4
    63be:	a4 01       	movw	r20, r8
    63c0:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <__ftoa_engine>
    63c4:	6c 01       	movw	r12, r24
    63c6:	09 81       	ldd	r16, Y+1	; 0x01
    63c8:	00 ff       	sbrs	r16, 0
    63ca:	02 c0       	rjmp	.+4      	; 0x63d0 <vfprintf+0x18e>
    63cc:	03 ff       	sbrs	r16, 3
    63ce:	06 c0       	rjmp	.+12     	; 0x63dc <vfprintf+0x19a>
    63d0:	71 fc       	sbrc	r7, 1
    63d2:	07 c0       	rjmp	.+14     	; 0x63e2 <vfprintf+0x1a0>
    63d4:	72 fc       	sbrc	r7, 2
    63d6:	08 c0       	rjmp	.+16     	; 0x63e8 <vfprintf+0x1a6>
    63d8:	61 2c       	mov	r6, r1
    63da:	08 c0       	rjmp	.+16     	; 0x63ec <vfprintf+0x1aa>
    63dc:	3d e2       	ldi	r19, 0x2D	; 45
    63de:	63 2e       	mov	r6, r19
    63e0:	05 c0       	rjmp	.+10     	; 0x63ec <vfprintf+0x1aa>
    63e2:	2b e2       	ldi	r18, 0x2B	; 43
    63e4:	62 2e       	mov	r6, r18
    63e6:	02 c0       	rjmp	.+4      	; 0x63ec <vfprintf+0x1aa>
    63e8:	90 e2       	ldi	r25, 0x20	; 32
    63ea:	69 2e       	mov	r6, r25
    63ec:	80 2f       	mov	r24, r16
    63ee:	8c 70       	andi	r24, 0x0C	; 12
    63f0:	99 f1       	breq	.+102    	; 0x6458 <vfprintf+0x216>
    63f2:	66 20       	and	r6, r6
    63f4:	11 f0       	breq	.+4      	; 0x63fa <vfprintf+0x1b8>
    63f6:	84 e0       	ldi	r24, 0x04	; 4
    63f8:	01 c0       	rjmp	.+2      	; 0x63fc <vfprintf+0x1ba>
    63fa:	83 e0       	ldi	r24, 0x03	; 3
    63fc:	85 15       	cp	r24, r5
    63fe:	10 f0       	brcs	.+4      	; 0x6404 <vfprintf+0x1c2>
    6400:	51 2c       	mov	r5, r1
    6402:	0b c0       	rjmp	.+22     	; 0x641a <vfprintf+0x1d8>
    6404:	58 1a       	sub	r5, r24
    6406:	73 fc       	sbrc	r7, 3
    6408:	08 c0       	rjmp	.+16     	; 0x641a <vfprintf+0x1d8>
    640a:	b7 01       	movw	r22, r14
    640c:	80 e2       	ldi	r24, 0x20	; 32
    640e:	90 e0       	ldi	r25, 0x00	; 0
    6410:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    6414:	5a 94       	dec	r5
    6416:	c9 f7       	brne	.-14     	; 0x640a <vfprintf+0x1c8>
    6418:	f3 cf       	rjmp	.-26     	; 0x6400 <vfprintf+0x1be>
    641a:	66 20       	and	r6, r6
    641c:	29 f0       	breq	.+10     	; 0x6428 <vfprintf+0x1e6>
    641e:	b7 01       	movw	r22, r14
    6420:	86 2d       	mov	r24, r6
    6422:	90 e0       	ldi	r25, 0x00	; 0
    6424:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    6428:	03 fd       	sbrc	r16, 3
    642a:	03 c0       	rjmp	.+6      	; 0x6432 <vfprintf+0x1f0>
    642c:	00 e0       	ldi	r16, 0x00	; 0
    642e:	1a e0       	ldi	r17, 0x0A	; 10
    6430:	02 c0       	rjmp	.+4      	; 0x6436 <vfprintf+0x1f4>
    6432:	0c ef       	ldi	r16, 0xFC	; 252
    6434:	19 e0       	ldi	r17, 0x09	; 9
    6436:	f7 2d       	mov	r31, r7
    6438:	f0 71       	andi	r31, 0x10	; 16
    643a:	7f 2e       	mov	r7, r31
    643c:	f8 01       	movw	r30, r16
    643e:	84 91       	lpm	r24, Z
    6440:	88 23       	and	r24, r24
    6442:	09 f4       	brne	.+2      	; 0x6446 <vfprintf+0x204>
    6444:	76 c2       	rjmp	.+1260   	; 0x6932 <vfprintf+0x6f0>
    6446:	71 10       	cpse	r7, r1
    6448:	80 52       	subi	r24, 0x20	; 32
    644a:	b7 01       	movw	r22, r14
    644c:	90 e0       	ldi	r25, 0x00	; 0
    644e:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    6452:	0f 5f       	subi	r16, 0xFF	; 255
    6454:	1f 4f       	sbci	r17, 0xFF	; 255
    6456:	f2 cf       	rjmp	.-28     	; 0x643c <vfprintf+0x1fa>
    6458:	77 fe       	sbrs	r7, 7
    645a:	0f c0       	rjmp	.+30     	; 0x647a <vfprintf+0x238>
    645c:	4c 0c       	add	r4, r12
    645e:	04 ff       	sbrs	r16, 4
    6460:	04 c0       	rjmp	.+8      	; 0x646a <vfprintf+0x228>
    6462:	8a 81       	ldd	r24, Y+2	; 0x02
    6464:	81 33       	cpi	r24, 0x31	; 49
    6466:	09 f4       	brne	.+2      	; 0x646a <vfprintf+0x228>
    6468:	4a 94       	dec	r4
    646a:	14 14       	cp	r1, r4
    646c:	74 f5       	brge	.+92     	; 0x64ca <vfprintf+0x288>
    646e:	f8 e0       	ldi	r31, 0x08	; 8
    6470:	f4 15       	cp	r31, r4
    6472:	78 f5       	brcc	.+94     	; 0x64d2 <vfprintf+0x290>
    6474:	88 e0       	ldi	r24, 0x08	; 8
    6476:	48 2e       	mov	r4, r24
    6478:	2c c0       	rjmp	.+88     	; 0x64d2 <vfprintf+0x290>
    647a:	76 fc       	sbrc	r7, 6
    647c:	2a c0       	rjmp	.+84     	; 0x64d2 <vfprintf+0x290>
    647e:	81 2f       	mov	r24, r17
    6480:	90 e0       	ldi	r25, 0x00	; 0
    6482:	8c 15       	cp	r24, r12
    6484:	9d 05       	cpc	r25, r13
    6486:	9c f0       	brlt	.+38     	; 0x64ae <vfprintf+0x26c>
    6488:	6c ef       	ldi	r22, 0xFC	; 252
    648a:	c6 16       	cp	r12, r22
    648c:	6f ef       	ldi	r22, 0xFF	; 255
    648e:	d6 06       	cpc	r13, r22
    6490:	74 f0       	brlt	.+28     	; 0x64ae <vfprintf+0x26c>
    6492:	77 2d       	mov	r23, r7
    6494:	70 68       	ori	r23, 0x80	; 128
    6496:	77 2e       	mov	r7, r23
    6498:	0a c0       	rjmp	.+20     	; 0x64ae <vfprintf+0x26c>
    649a:	e2 e0       	ldi	r30, 0x02	; 2
    649c:	f0 e0       	ldi	r31, 0x00	; 0
    649e:	ec 0f       	add	r30, r28
    64a0:	fd 1f       	adc	r31, r29
    64a2:	e1 0f       	add	r30, r17
    64a4:	f1 1d       	adc	r31, r1
    64a6:	80 81       	ld	r24, Z
    64a8:	80 33       	cpi	r24, 0x30	; 48
    64aa:	19 f4       	brne	.+6      	; 0x64b2 <vfprintf+0x270>
    64ac:	11 50       	subi	r17, 0x01	; 1
    64ae:	11 11       	cpse	r17, r1
    64b0:	f4 cf       	rjmp	.-24     	; 0x649a <vfprintf+0x258>
    64b2:	77 fe       	sbrs	r7, 7
    64b4:	0e c0       	rjmp	.+28     	; 0x64d2 <vfprintf+0x290>
    64b6:	44 24       	eor	r4, r4
    64b8:	43 94       	inc	r4
    64ba:	41 0e       	add	r4, r17
    64bc:	81 2f       	mov	r24, r17
    64be:	90 e0       	ldi	r25, 0x00	; 0
    64c0:	c8 16       	cp	r12, r24
    64c2:	d9 06       	cpc	r13, r25
    64c4:	2c f4       	brge	.+10     	; 0x64d0 <vfprintf+0x28e>
    64c6:	1c 19       	sub	r17, r12
    64c8:	04 c0       	rjmp	.+8      	; 0x64d2 <vfprintf+0x290>
    64ca:	44 24       	eor	r4, r4
    64cc:	43 94       	inc	r4
    64ce:	01 c0       	rjmp	.+2      	; 0x64d2 <vfprintf+0x290>
    64d0:	10 e0       	ldi	r17, 0x00	; 0
    64d2:	77 fe       	sbrs	r7, 7
    64d4:	07 c0       	rjmp	.+14     	; 0x64e4 <vfprintf+0x2a2>
    64d6:	1c 14       	cp	r1, r12
    64d8:	1d 04       	cpc	r1, r13
    64da:	3c f4       	brge	.+14     	; 0x64ea <vfprintf+0x2a8>
    64dc:	96 01       	movw	r18, r12
    64de:	2f 5f       	subi	r18, 0xFF	; 255
    64e0:	3f 4f       	sbci	r19, 0xFF	; 255
    64e2:	05 c0       	rjmp	.+10     	; 0x64ee <vfprintf+0x2ac>
    64e4:	25 e0       	ldi	r18, 0x05	; 5
    64e6:	30 e0       	ldi	r19, 0x00	; 0
    64e8:	02 c0       	rjmp	.+4      	; 0x64ee <vfprintf+0x2ac>
    64ea:	21 e0       	ldi	r18, 0x01	; 1
    64ec:	30 e0       	ldi	r19, 0x00	; 0
    64ee:	66 20       	and	r6, r6
    64f0:	11 f0       	breq	.+4      	; 0x64f6 <vfprintf+0x2b4>
    64f2:	2f 5f       	subi	r18, 0xFF	; 255
    64f4:	3f 4f       	sbci	r19, 0xFF	; 255
    64f6:	11 23       	and	r17, r17
    64f8:	31 f0       	breq	.+12     	; 0x6506 <vfprintf+0x2c4>
    64fa:	41 2f       	mov	r20, r17
    64fc:	50 e0       	ldi	r21, 0x00	; 0
    64fe:	4f 5f       	subi	r20, 0xFF	; 255
    6500:	5f 4f       	sbci	r21, 0xFF	; 255
    6502:	24 0f       	add	r18, r20
    6504:	35 1f       	adc	r19, r21
    6506:	45 2d       	mov	r20, r5
    6508:	50 e0       	ldi	r21, 0x00	; 0
    650a:	24 17       	cp	r18, r20
    650c:	35 07       	cpc	r19, r21
    650e:	14 f4       	brge	.+4      	; 0x6514 <vfprintf+0x2d2>
    6510:	52 1a       	sub	r5, r18
    6512:	01 c0       	rjmp	.+2      	; 0x6516 <vfprintf+0x2d4>
    6514:	51 2c       	mov	r5, r1
    6516:	87 2d       	mov	r24, r7
    6518:	89 70       	andi	r24, 0x09	; 9
    651a:	49 f4       	brne	.+18     	; 0x652e <vfprintf+0x2ec>
    651c:	55 20       	and	r5, r5
    651e:	39 f0       	breq	.+14     	; 0x652e <vfprintf+0x2ec>
    6520:	b7 01       	movw	r22, r14
    6522:	80 e2       	ldi	r24, 0x20	; 32
    6524:	90 e0       	ldi	r25, 0x00	; 0
    6526:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    652a:	5a 94       	dec	r5
    652c:	f7 cf       	rjmp	.-18     	; 0x651c <vfprintf+0x2da>
    652e:	66 20       	and	r6, r6
    6530:	29 f0       	breq	.+10     	; 0x653c <vfprintf+0x2fa>
    6532:	b7 01       	movw	r22, r14
    6534:	86 2d       	mov	r24, r6
    6536:	90 e0       	ldi	r25, 0x00	; 0
    6538:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    653c:	73 fc       	sbrc	r7, 3
    653e:	09 c0       	rjmp	.+18     	; 0x6552 <vfprintf+0x310>
    6540:	55 20       	and	r5, r5
    6542:	39 f0       	breq	.+14     	; 0x6552 <vfprintf+0x310>
    6544:	b7 01       	movw	r22, r14
    6546:	80 e3       	ldi	r24, 0x30	; 48
    6548:	90 e0       	ldi	r25, 0x00	; 0
    654a:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    654e:	5a 94       	dec	r5
    6550:	f7 cf       	rjmp	.-18     	; 0x6540 <vfprintf+0x2fe>
    6552:	77 fe       	sbrs	r7, 7
    6554:	5f c0       	rjmp	.+190    	; 0x6614 <vfprintf+0x3d2>
    6556:	9c 2d       	mov	r25, r12
    6558:	8d 2d       	mov	r24, r13
    655a:	d7 fe       	sbrs	r13, 7
    655c:	02 c0       	rjmp	.+4      	; 0x6562 <vfprintf+0x320>
    655e:	90 e0       	ldi	r25, 0x00	; 0
    6560:	80 e0       	ldi	r24, 0x00	; 0
    6562:	69 2e       	mov	r6, r25
    6564:	78 2e       	mov	r7, r24
    6566:	40 e0       	ldi	r20, 0x00	; 0
    6568:	50 e0       	ldi	r21, 0x00	; 0
    656a:	c6 01       	movw	r24, r12
    656c:	84 19       	sub	r24, r4
    656e:	91 09       	sbc	r25, r1
    6570:	8c 87       	std	Y+12, r24	; 0x0c
    6572:	9d 87       	std	Y+13, r25	; 0x0d
    6574:	96 01       	movw	r18, r12
    6576:	26 19       	sub	r18, r6
    6578:	37 09       	sbc	r19, r7
    657a:	28 0d       	add	r18, r8
    657c:	39 1d       	adc	r19, r9
    657e:	81 2f       	mov	r24, r17
    6580:	90 e0       	ldi	r25, 0x00	; 0
    6582:	ee 27       	eor	r30, r30
    6584:	ff 27       	eor	r31, r31
    6586:	e8 1b       	sub	r30, r24
    6588:	f9 0b       	sbc	r31, r25
    658a:	ee 87       	std	Y+14, r30	; 0x0e
    658c:	ff 87       	std	Y+15, r31	; 0x0f
    658e:	ff ef       	ldi	r31, 0xFF	; 255
    6590:	6f 16       	cp	r6, r31
    6592:	7f 06       	cpc	r7, r31
    6594:	69 f4       	brne	.+26     	; 0x65b0 <vfprintf+0x36e>
    6596:	b7 01       	movw	r22, r14
    6598:	8e e2       	ldi	r24, 0x2E	; 46
    659a:	90 e0       	ldi	r25, 0x00	; 0
    659c:	2b 8b       	std	Y+19, r18	; 0x13
    659e:	3a 8b       	std	Y+18, r19	; 0x12
    65a0:	48 8b       	std	Y+16, r20	; 0x10
    65a2:	59 8b       	std	Y+17, r21	; 0x11
    65a4:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    65a8:	59 89       	ldd	r21, Y+17	; 0x11
    65aa:	48 89       	ldd	r20, Y+16	; 0x10
    65ac:	3a 89       	ldd	r19, Y+18	; 0x12
    65ae:	2b 89       	ldd	r18, Y+19	; 0x13
    65b0:	c6 14       	cp	r12, r6
    65b2:	d7 04       	cpc	r13, r7
    65b4:	54 f0       	brlt	.+20     	; 0x65ca <vfprintf+0x388>
    65b6:	6c 85       	ldd	r22, Y+12	; 0x0c
    65b8:	7d 85       	ldd	r23, Y+13	; 0x0d
    65ba:	66 15       	cp	r22, r6
    65bc:	77 05       	cpc	r23, r7
    65be:	2c f4       	brge	.+10     	; 0x65ca <vfprintf+0x388>
    65c0:	f9 01       	movw	r30, r18
    65c2:	e4 0f       	add	r30, r20
    65c4:	f5 1f       	adc	r31, r21
    65c6:	81 81       	ldd	r24, Z+1	; 0x01
    65c8:	01 c0       	rjmp	.+2      	; 0x65cc <vfprintf+0x38a>
    65ca:	80 e3       	ldi	r24, 0x30	; 48
    65cc:	71 e0       	ldi	r23, 0x01	; 1
    65ce:	67 1a       	sub	r6, r23
    65d0:	71 08       	sbc	r7, r1
    65d2:	4f 5f       	subi	r20, 0xFF	; 255
    65d4:	5f 4f       	sbci	r21, 0xFF	; 255
    65d6:	ee 85       	ldd	r30, Y+14	; 0x0e
    65d8:	ff 85       	ldd	r31, Y+15	; 0x0f
    65da:	6e 16       	cp	r6, r30
    65dc:	7f 06       	cpc	r7, r31
    65de:	6c f0       	brlt	.+26     	; 0x65fa <vfprintf+0x3b8>
    65e0:	b7 01       	movw	r22, r14
    65e2:	90 e0       	ldi	r25, 0x00	; 0
    65e4:	2b 8b       	std	Y+19, r18	; 0x13
    65e6:	3a 8b       	std	Y+18, r19	; 0x12
    65e8:	48 8b       	std	Y+16, r20	; 0x10
    65ea:	59 8b       	std	Y+17, r21	; 0x11
    65ec:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    65f0:	2b 89       	ldd	r18, Y+19	; 0x13
    65f2:	3a 89       	ldd	r19, Y+18	; 0x12
    65f4:	48 89       	ldd	r20, Y+16	; 0x10
    65f6:	59 89       	ldd	r21, Y+17	; 0x11
    65f8:	ca cf       	rjmp	.-108    	; 0x658e <vfprintf+0x34c>
    65fa:	6c 14       	cp	r6, r12
    65fc:	7d 04       	cpc	r7, r13
    65fe:	39 f4       	brne	.+14     	; 0x660e <vfprintf+0x3cc>
    6600:	9a 81       	ldd	r25, Y+2	; 0x02
    6602:	96 33       	cpi	r25, 0x36	; 54
    6604:	18 f4       	brcc	.+6      	; 0x660c <vfprintf+0x3ca>
    6606:	95 33       	cpi	r25, 0x35	; 53
    6608:	11 f4       	brne	.+4      	; 0x660e <vfprintf+0x3cc>
    660a:	04 ff       	sbrs	r16, 4
    660c:	81 e3       	ldi	r24, 0x31	; 49
    660e:	b7 01       	movw	r22, r14
    6610:	90 e0       	ldi	r25, 0x00	; 0
    6612:	4b c0       	rjmp	.+150    	; 0x66aa <vfprintf+0x468>
    6614:	8a 81       	ldd	r24, Y+2	; 0x02
    6616:	81 33       	cpi	r24, 0x31	; 49
    6618:	09 f0       	breq	.+2      	; 0x661c <vfprintf+0x3da>
    661a:	0f 7e       	andi	r16, 0xEF	; 239
    661c:	b7 01       	movw	r22, r14
    661e:	90 e0       	ldi	r25, 0x00	; 0
    6620:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    6624:	11 11       	cpse	r17, r1
    6626:	05 c0       	rjmp	.+10     	; 0x6632 <vfprintf+0x3f0>
    6628:	74 fe       	sbrs	r7, 4
    662a:	18 c0       	rjmp	.+48     	; 0x665c <vfprintf+0x41a>
    662c:	85 e4       	ldi	r24, 0x45	; 69
    662e:	90 e0       	ldi	r25, 0x00	; 0
    6630:	17 c0       	rjmp	.+46     	; 0x6660 <vfprintf+0x41e>
    6632:	b7 01       	movw	r22, r14
    6634:	8e e2       	ldi	r24, 0x2E	; 46
    6636:	90 e0       	ldi	r25, 0x00	; 0
    6638:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    663c:	82 e0       	ldi	r24, 0x02	; 2
    663e:	66 24       	eor	r6, r6
    6640:	63 94       	inc	r6
    6642:	68 0e       	add	r6, r24
    6644:	f4 01       	movw	r30, r8
    6646:	e8 0f       	add	r30, r24
    6648:	f1 1d       	adc	r31, r1
    664a:	80 81       	ld	r24, Z
    664c:	b7 01       	movw	r22, r14
    664e:	90 e0       	ldi	r25, 0x00	; 0
    6650:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    6654:	11 50       	subi	r17, 0x01	; 1
    6656:	41 f3       	breq	.-48     	; 0x6628 <vfprintf+0x3e6>
    6658:	86 2d       	mov	r24, r6
    665a:	f1 cf       	rjmp	.-30     	; 0x663e <vfprintf+0x3fc>
    665c:	85 e6       	ldi	r24, 0x65	; 101
    665e:	90 e0       	ldi	r25, 0x00	; 0
    6660:	b7 01       	movw	r22, r14
    6662:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    6666:	d7 fc       	sbrc	r13, 7
    6668:	05 c0       	rjmp	.+10     	; 0x6674 <vfprintf+0x432>
    666a:	c1 14       	cp	r12, r1
    666c:	d1 04       	cpc	r13, r1
    666e:	39 f4       	brne	.+14     	; 0x667e <vfprintf+0x43c>
    6670:	04 ff       	sbrs	r16, 4
    6672:	05 c0       	rjmp	.+10     	; 0x667e <vfprintf+0x43c>
    6674:	d1 94       	neg	r13
    6676:	c1 94       	neg	r12
    6678:	d1 08       	sbc	r13, r1
    667a:	8d e2       	ldi	r24, 0x2D	; 45
    667c:	01 c0       	rjmp	.+2      	; 0x6680 <vfprintf+0x43e>
    667e:	8b e2       	ldi	r24, 0x2B	; 43
    6680:	b7 01       	movw	r22, r14
    6682:	90 e0       	ldi	r25, 0x00	; 0
    6684:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    6688:	80 e3       	ldi	r24, 0x30	; 48
    668a:	6a e0       	ldi	r22, 0x0A	; 10
    668c:	c6 16       	cp	r12, r22
    668e:	d1 04       	cpc	r13, r1
    6690:	2c f0       	brlt	.+10     	; 0x669c <vfprintf+0x45a>
    6692:	8f 5f       	subi	r24, 0xFF	; 255
    6694:	fa e0       	ldi	r31, 0x0A	; 10
    6696:	cf 1a       	sub	r12, r31
    6698:	d1 08       	sbc	r13, r1
    669a:	f7 cf       	rjmp	.-18     	; 0x668a <vfprintf+0x448>
    669c:	b7 01       	movw	r22, r14
    669e:	90 e0       	ldi	r25, 0x00	; 0
    66a0:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    66a4:	b7 01       	movw	r22, r14
    66a6:	c6 01       	movw	r24, r12
    66a8:	c0 96       	adiw	r24, 0x30	; 48
    66aa:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    66ae:	41 c1       	rjmp	.+642    	; 0x6932 <vfprintf+0x6f0>
    66b0:	83 36       	cpi	r24, 0x63	; 99
    66b2:	31 f0       	breq	.+12     	; 0x66c0 <vfprintf+0x47e>
    66b4:	83 37       	cpi	r24, 0x73	; 115
    66b6:	79 f0       	breq	.+30     	; 0x66d6 <vfprintf+0x494>
    66b8:	83 35       	cpi	r24, 0x53	; 83
    66ba:	09 f0       	breq	.+2      	; 0x66be <vfprintf+0x47c>
    66bc:	58 c0       	rjmp	.+176    	; 0x676e <vfprintf+0x52c>
    66be:	21 c0       	rjmp	.+66     	; 0x6702 <vfprintf+0x4c0>
    66c0:	56 01       	movw	r10, r12
    66c2:	72 e0       	ldi	r23, 0x02	; 2
    66c4:	a7 0e       	add	r10, r23
    66c6:	b1 1c       	adc	r11, r1
    66c8:	f6 01       	movw	r30, r12
    66ca:	80 81       	ld	r24, Z
    66cc:	89 83       	std	Y+1, r24	; 0x01
    66ce:	01 e0       	ldi	r16, 0x01	; 1
    66d0:	10 e0       	ldi	r17, 0x00	; 0
    66d2:	64 01       	movw	r12, r8
    66d4:	14 c0       	rjmp	.+40     	; 0x66fe <vfprintf+0x4bc>
    66d6:	56 01       	movw	r10, r12
    66d8:	f2 e0       	ldi	r31, 0x02	; 2
    66da:	af 0e       	add	r10, r31
    66dc:	b1 1c       	adc	r11, r1
    66de:	f6 01       	movw	r30, r12
    66e0:	c0 80       	ld	r12, Z
    66e2:	d1 80       	ldd	r13, Z+1	; 0x01
    66e4:	26 ff       	sbrs	r18, 6
    66e6:	03 c0       	rjmp	.+6      	; 0x66ee <vfprintf+0x4ac>
    66e8:	61 2f       	mov	r22, r17
    66ea:	70 e0       	ldi	r23, 0x00	; 0
    66ec:	02 c0       	rjmp	.+4      	; 0x66f2 <vfprintf+0x4b0>
    66ee:	6f ef       	ldi	r22, 0xFF	; 255
    66f0:	7f ef       	ldi	r23, 0xFF	; 255
    66f2:	c6 01       	movw	r24, r12
    66f4:	2b 8b       	std	Y+19, r18	; 0x13
    66f6:	0e 94 44 38 	call	0x7088	; 0x7088 <strnlen>
    66fa:	8c 01       	movw	r16, r24
    66fc:	2b 89       	ldd	r18, Y+19	; 0x13
    66fe:	2f 77       	andi	r18, 0x7F	; 127
    6700:	15 c0       	rjmp	.+42     	; 0x672c <vfprintf+0x4ea>
    6702:	56 01       	movw	r10, r12
    6704:	f2 e0       	ldi	r31, 0x02	; 2
    6706:	af 0e       	add	r10, r31
    6708:	b1 1c       	adc	r11, r1
    670a:	f6 01       	movw	r30, r12
    670c:	c0 80       	ld	r12, Z
    670e:	d1 80       	ldd	r13, Z+1	; 0x01
    6710:	26 ff       	sbrs	r18, 6
    6712:	03 c0       	rjmp	.+6      	; 0x671a <vfprintf+0x4d8>
    6714:	61 2f       	mov	r22, r17
    6716:	70 e0       	ldi	r23, 0x00	; 0
    6718:	02 c0       	rjmp	.+4      	; 0x671e <vfprintf+0x4dc>
    671a:	6f ef       	ldi	r22, 0xFF	; 255
    671c:	7f ef       	ldi	r23, 0xFF	; 255
    671e:	c6 01       	movw	r24, r12
    6720:	2b 8b       	std	Y+19, r18	; 0x13
    6722:	0e 94 17 38 	call	0x702e	; 0x702e <strnlen_P>
    6726:	8c 01       	movw	r16, r24
    6728:	2b 89       	ldd	r18, Y+19	; 0x13
    672a:	20 68       	ori	r18, 0x80	; 128
    672c:	72 2e       	mov	r7, r18
    672e:	23 fd       	sbrc	r18, 3
    6730:	1a c0       	rjmp	.+52     	; 0x6766 <vfprintf+0x524>
    6732:	85 2d       	mov	r24, r5
    6734:	90 e0       	ldi	r25, 0x00	; 0
    6736:	08 17       	cp	r16, r24
    6738:	19 07       	cpc	r17, r25
    673a:	a8 f4       	brcc	.+42     	; 0x6766 <vfprintf+0x524>
    673c:	b7 01       	movw	r22, r14
    673e:	80 e2       	ldi	r24, 0x20	; 32
    6740:	90 e0       	ldi	r25, 0x00	; 0
    6742:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    6746:	5a 94       	dec	r5
    6748:	f4 cf       	rjmp	.-24     	; 0x6732 <vfprintf+0x4f0>
    674a:	f6 01       	movw	r30, r12
    674c:	77 fc       	sbrc	r7, 7
    674e:	85 91       	lpm	r24, Z+
    6750:	77 fe       	sbrs	r7, 7
    6752:	81 91       	ld	r24, Z+
    6754:	6f 01       	movw	r12, r30
    6756:	b7 01       	movw	r22, r14
    6758:	90 e0       	ldi	r25, 0x00	; 0
    675a:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    675e:	51 10       	cpse	r5, r1
    6760:	5a 94       	dec	r5
    6762:	01 50       	subi	r16, 0x01	; 1
    6764:	11 09       	sbc	r17, r1
    6766:	01 15       	cp	r16, r1
    6768:	11 05       	cpc	r17, r1
    676a:	79 f7       	brne	.-34     	; 0x674a <vfprintf+0x508>
    676c:	e2 c0       	rjmp	.+452    	; 0x6932 <vfprintf+0x6f0>
    676e:	84 36       	cpi	r24, 0x64	; 100
    6770:	11 f0       	breq	.+4      	; 0x6776 <vfprintf+0x534>
    6772:	89 36       	cpi	r24, 0x69	; 105
    6774:	51 f5       	brne	.+84     	; 0x67ca <vfprintf+0x588>
    6776:	56 01       	movw	r10, r12
    6778:	27 ff       	sbrs	r18, 7
    677a:	09 c0       	rjmp	.+18     	; 0x678e <vfprintf+0x54c>
    677c:	f4 e0       	ldi	r31, 0x04	; 4
    677e:	af 0e       	add	r10, r31
    6780:	b1 1c       	adc	r11, r1
    6782:	f6 01       	movw	r30, r12
    6784:	60 81       	ld	r22, Z
    6786:	71 81       	ldd	r23, Z+1	; 0x01
    6788:	82 81       	ldd	r24, Z+2	; 0x02
    678a:	93 81       	ldd	r25, Z+3	; 0x03
    678c:	0a c0       	rjmp	.+20     	; 0x67a2 <vfprintf+0x560>
    678e:	f2 e0       	ldi	r31, 0x02	; 2
    6790:	af 0e       	add	r10, r31
    6792:	b1 1c       	adc	r11, r1
    6794:	f6 01       	movw	r30, r12
    6796:	60 81       	ld	r22, Z
    6798:	71 81       	ldd	r23, Z+1	; 0x01
    679a:	88 27       	eor	r24, r24
    679c:	77 fd       	sbrc	r23, 7
    679e:	80 95       	com	r24
    67a0:	98 2f       	mov	r25, r24
    67a2:	02 2f       	mov	r16, r18
    67a4:	0f 76       	andi	r16, 0x6F	; 111
    67a6:	97 ff       	sbrs	r25, 7
    67a8:	08 c0       	rjmp	.+16     	; 0x67ba <vfprintf+0x578>
    67aa:	90 95       	com	r25
    67ac:	80 95       	com	r24
    67ae:	70 95       	com	r23
    67b0:	61 95       	neg	r22
    67b2:	7f 4f       	sbci	r23, 0xFF	; 255
    67b4:	8f 4f       	sbci	r24, 0xFF	; 255
    67b6:	9f 4f       	sbci	r25, 0xFF	; 255
    67b8:	00 68       	ori	r16, 0x80	; 128
    67ba:	2a e0       	ldi	r18, 0x0A	; 10
    67bc:	30 e0       	ldi	r19, 0x00	; 0
    67be:	a4 01       	movw	r20, r8
    67c0:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <__ultoa_invert>
    67c4:	c8 2e       	mov	r12, r24
    67c6:	c8 18       	sub	r12, r8
    67c8:	3e c0       	rjmp	.+124    	; 0x6846 <vfprintf+0x604>
    67ca:	02 2f       	mov	r16, r18
    67cc:	85 37       	cpi	r24, 0x75	; 117
    67ce:	21 f4       	brne	.+8      	; 0x67d8 <vfprintf+0x596>
    67d0:	0f 7e       	andi	r16, 0xEF	; 239
    67d2:	2a e0       	ldi	r18, 0x0A	; 10
    67d4:	30 e0       	ldi	r19, 0x00	; 0
    67d6:	1d c0       	rjmp	.+58     	; 0x6812 <vfprintf+0x5d0>
    67d8:	09 7f       	andi	r16, 0xF9	; 249
    67da:	8f 36       	cpi	r24, 0x6F	; 111
    67dc:	91 f0       	breq	.+36     	; 0x6802 <vfprintf+0x5c0>
    67de:	18 f4       	brcc	.+6      	; 0x67e6 <vfprintf+0x5a4>
    67e0:	88 35       	cpi	r24, 0x58	; 88
    67e2:	59 f0       	breq	.+22     	; 0x67fa <vfprintf+0x5b8>
    67e4:	b0 c0       	rjmp	.+352    	; 0x6946 <vfprintf+0x704>
    67e6:	80 37       	cpi	r24, 0x70	; 112
    67e8:	19 f0       	breq	.+6      	; 0x67f0 <vfprintf+0x5ae>
    67ea:	88 37       	cpi	r24, 0x78	; 120
    67ec:	11 f0       	breq	.+4      	; 0x67f2 <vfprintf+0x5b0>
    67ee:	ab c0       	rjmp	.+342    	; 0x6946 <vfprintf+0x704>
    67f0:	00 61       	ori	r16, 0x10	; 16
    67f2:	04 ff       	sbrs	r16, 4
    67f4:	09 c0       	rjmp	.+18     	; 0x6808 <vfprintf+0x5c6>
    67f6:	04 60       	ori	r16, 0x04	; 4
    67f8:	07 c0       	rjmp	.+14     	; 0x6808 <vfprintf+0x5c6>
    67fa:	24 ff       	sbrs	r18, 4
    67fc:	08 c0       	rjmp	.+16     	; 0x680e <vfprintf+0x5cc>
    67fe:	06 60       	ori	r16, 0x06	; 6
    6800:	06 c0       	rjmp	.+12     	; 0x680e <vfprintf+0x5cc>
    6802:	28 e0       	ldi	r18, 0x08	; 8
    6804:	30 e0       	ldi	r19, 0x00	; 0
    6806:	05 c0       	rjmp	.+10     	; 0x6812 <vfprintf+0x5d0>
    6808:	20 e1       	ldi	r18, 0x10	; 16
    680a:	30 e0       	ldi	r19, 0x00	; 0
    680c:	02 c0       	rjmp	.+4      	; 0x6812 <vfprintf+0x5d0>
    680e:	20 e1       	ldi	r18, 0x10	; 16
    6810:	32 e0       	ldi	r19, 0x02	; 2
    6812:	56 01       	movw	r10, r12
    6814:	07 ff       	sbrs	r16, 7
    6816:	09 c0       	rjmp	.+18     	; 0x682a <vfprintf+0x5e8>
    6818:	f4 e0       	ldi	r31, 0x04	; 4
    681a:	af 0e       	add	r10, r31
    681c:	b1 1c       	adc	r11, r1
    681e:	f6 01       	movw	r30, r12
    6820:	60 81       	ld	r22, Z
    6822:	71 81       	ldd	r23, Z+1	; 0x01
    6824:	82 81       	ldd	r24, Z+2	; 0x02
    6826:	93 81       	ldd	r25, Z+3	; 0x03
    6828:	08 c0       	rjmp	.+16     	; 0x683a <vfprintf+0x5f8>
    682a:	f2 e0       	ldi	r31, 0x02	; 2
    682c:	af 0e       	add	r10, r31
    682e:	b1 1c       	adc	r11, r1
    6830:	f6 01       	movw	r30, r12
    6832:	60 81       	ld	r22, Z
    6834:	71 81       	ldd	r23, Z+1	; 0x01
    6836:	80 e0       	ldi	r24, 0x00	; 0
    6838:	90 e0       	ldi	r25, 0x00	; 0
    683a:	a4 01       	movw	r20, r8
    683c:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <__ultoa_invert>
    6840:	c8 2e       	mov	r12, r24
    6842:	c8 18       	sub	r12, r8
    6844:	0f 77       	andi	r16, 0x7F	; 127
    6846:	06 ff       	sbrs	r16, 6
    6848:	0b c0       	rjmp	.+22     	; 0x6860 <vfprintf+0x61e>
    684a:	20 2f       	mov	r18, r16
    684c:	2e 7f       	andi	r18, 0xFE	; 254
    684e:	c1 16       	cp	r12, r17
    6850:	50 f4       	brcc	.+20     	; 0x6866 <vfprintf+0x624>
    6852:	04 ff       	sbrs	r16, 4
    6854:	0a c0       	rjmp	.+20     	; 0x686a <vfprintf+0x628>
    6856:	02 fd       	sbrc	r16, 2
    6858:	08 c0       	rjmp	.+16     	; 0x686a <vfprintf+0x628>
    685a:	20 2f       	mov	r18, r16
    685c:	2e 7e       	andi	r18, 0xEE	; 238
    685e:	05 c0       	rjmp	.+10     	; 0x686a <vfprintf+0x628>
    6860:	dc 2c       	mov	r13, r12
    6862:	20 2f       	mov	r18, r16
    6864:	03 c0       	rjmp	.+6      	; 0x686c <vfprintf+0x62a>
    6866:	dc 2c       	mov	r13, r12
    6868:	01 c0       	rjmp	.+2      	; 0x686c <vfprintf+0x62a>
    686a:	d1 2e       	mov	r13, r17
    686c:	24 ff       	sbrs	r18, 4
    686e:	0d c0       	rjmp	.+26     	; 0x688a <vfprintf+0x648>
    6870:	fe 01       	movw	r30, r28
    6872:	ec 0d       	add	r30, r12
    6874:	f1 1d       	adc	r31, r1
    6876:	80 81       	ld	r24, Z
    6878:	80 33       	cpi	r24, 0x30	; 48
    687a:	11 f4       	brne	.+4      	; 0x6880 <vfprintf+0x63e>
    687c:	29 7e       	andi	r18, 0xE9	; 233
    687e:	09 c0       	rjmp	.+18     	; 0x6892 <vfprintf+0x650>
    6880:	22 ff       	sbrs	r18, 2
    6882:	06 c0       	rjmp	.+12     	; 0x6890 <vfprintf+0x64e>
    6884:	d3 94       	inc	r13
    6886:	d3 94       	inc	r13
    6888:	04 c0       	rjmp	.+8      	; 0x6892 <vfprintf+0x650>
    688a:	82 2f       	mov	r24, r18
    688c:	86 78       	andi	r24, 0x86	; 134
    688e:	09 f0       	breq	.+2      	; 0x6892 <vfprintf+0x650>
    6890:	d3 94       	inc	r13
    6892:	23 fd       	sbrc	r18, 3
    6894:	13 c0       	rjmp	.+38     	; 0x68bc <vfprintf+0x67a>
    6896:	20 ff       	sbrs	r18, 0
    6898:	06 c0       	rjmp	.+12     	; 0x68a6 <vfprintf+0x664>
    689a:	1c 2d       	mov	r17, r12
    689c:	d5 14       	cp	r13, r5
    689e:	18 f4       	brcc	.+6      	; 0x68a6 <vfprintf+0x664>
    68a0:	15 0d       	add	r17, r5
    68a2:	1d 19       	sub	r17, r13
    68a4:	d5 2c       	mov	r13, r5
    68a6:	d5 14       	cp	r13, r5
    68a8:	68 f4       	brcc	.+26     	; 0x68c4 <vfprintf+0x682>
    68aa:	b7 01       	movw	r22, r14
    68ac:	80 e2       	ldi	r24, 0x20	; 32
    68ae:	90 e0       	ldi	r25, 0x00	; 0
    68b0:	2b 8b       	std	Y+19, r18	; 0x13
    68b2:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    68b6:	d3 94       	inc	r13
    68b8:	2b 89       	ldd	r18, Y+19	; 0x13
    68ba:	f5 cf       	rjmp	.-22     	; 0x68a6 <vfprintf+0x664>
    68bc:	d5 14       	cp	r13, r5
    68be:	10 f4       	brcc	.+4      	; 0x68c4 <vfprintf+0x682>
    68c0:	5d 18       	sub	r5, r13
    68c2:	01 c0       	rjmp	.+2      	; 0x68c6 <vfprintf+0x684>
    68c4:	51 2c       	mov	r5, r1
    68c6:	24 ff       	sbrs	r18, 4
    68c8:	12 c0       	rjmp	.+36     	; 0x68ee <vfprintf+0x6ac>
    68ca:	b7 01       	movw	r22, r14
    68cc:	80 e3       	ldi	r24, 0x30	; 48
    68ce:	90 e0       	ldi	r25, 0x00	; 0
    68d0:	2b 8b       	std	Y+19, r18	; 0x13
    68d2:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    68d6:	2b 89       	ldd	r18, Y+19	; 0x13
    68d8:	22 ff       	sbrs	r18, 2
    68da:	17 c0       	rjmp	.+46     	; 0x690a <vfprintf+0x6c8>
    68dc:	21 ff       	sbrs	r18, 1
    68de:	03 c0       	rjmp	.+6      	; 0x68e6 <vfprintf+0x6a4>
    68e0:	88 e5       	ldi	r24, 0x58	; 88
    68e2:	90 e0       	ldi	r25, 0x00	; 0
    68e4:	02 c0       	rjmp	.+4      	; 0x68ea <vfprintf+0x6a8>
    68e6:	88 e7       	ldi	r24, 0x78	; 120
    68e8:	90 e0       	ldi	r25, 0x00	; 0
    68ea:	b7 01       	movw	r22, r14
    68ec:	0c c0       	rjmp	.+24     	; 0x6906 <vfprintf+0x6c4>
    68ee:	82 2f       	mov	r24, r18
    68f0:	86 78       	andi	r24, 0x86	; 134
    68f2:	59 f0       	breq	.+22     	; 0x690a <vfprintf+0x6c8>
    68f4:	21 fd       	sbrc	r18, 1
    68f6:	02 c0       	rjmp	.+4      	; 0x68fc <vfprintf+0x6ba>
    68f8:	80 e2       	ldi	r24, 0x20	; 32
    68fa:	01 c0       	rjmp	.+2      	; 0x68fe <vfprintf+0x6bc>
    68fc:	8b e2       	ldi	r24, 0x2B	; 43
    68fe:	27 fd       	sbrc	r18, 7
    6900:	8d e2       	ldi	r24, 0x2D	; 45
    6902:	b7 01       	movw	r22, r14
    6904:	90 e0       	ldi	r25, 0x00	; 0
    6906:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    690a:	c1 16       	cp	r12, r17
    690c:	38 f4       	brcc	.+14     	; 0x691c <vfprintf+0x6da>
    690e:	b7 01       	movw	r22, r14
    6910:	80 e3       	ldi	r24, 0x30	; 48
    6912:	90 e0       	ldi	r25, 0x00	; 0
    6914:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    6918:	11 50       	subi	r17, 0x01	; 1
    691a:	f7 cf       	rjmp	.-18     	; 0x690a <vfprintf+0x6c8>
    691c:	ca 94       	dec	r12
    691e:	f4 01       	movw	r30, r8
    6920:	ec 0d       	add	r30, r12
    6922:	f1 1d       	adc	r31, r1
    6924:	80 81       	ld	r24, Z
    6926:	b7 01       	movw	r22, r14
    6928:	90 e0       	ldi	r25, 0x00	; 0
    692a:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    692e:	c1 10       	cpse	r12, r1
    6930:	f5 cf       	rjmp	.-22     	; 0x691c <vfprintf+0x6da>
    6932:	55 20       	and	r5, r5
    6934:	09 f4       	brne	.+2      	; 0x6938 <vfprintf+0x6f6>
    6936:	c2 cc       	rjmp	.-1660   	; 0x62bc <vfprintf+0x7a>
    6938:	b7 01       	movw	r22, r14
    693a:	80 e2       	ldi	r24, 0x20	; 32
    693c:	90 e0       	ldi	r25, 0x00	; 0
    693e:	0e 94 4f 38 	call	0x709e	; 0x709e <fputc>
    6942:	5a 94       	dec	r5
    6944:	f6 cf       	rjmp	.-20     	; 0x6932 <vfprintf+0x6f0>
    6946:	f7 01       	movw	r30, r14
    6948:	86 81       	ldd	r24, Z+6	; 0x06
    694a:	97 81       	ldd	r25, Z+7	; 0x07
    694c:	02 c0       	rjmp	.+4      	; 0x6952 <vfprintf+0x710>
    694e:	8f ef       	ldi	r24, 0xFF	; 255
    6950:	9f ef       	ldi	r25, 0xFF	; 255
    6952:	63 96       	adiw	r28, 0x13	; 19
    6954:	cd bf       	out	0x3d, r28	; 61
    6956:	de bf       	out	0x3e, r29	; 62
    6958:	df 91       	pop	r29
    695a:	cf 91       	pop	r28
    695c:	1f 91       	pop	r17
    695e:	0f 91       	pop	r16
    6960:	ff 90       	pop	r15
    6962:	ef 90       	pop	r14
    6964:	df 90       	pop	r13
    6966:	cf 90       	pop	r12
    6968:	bf 90       	pop	r11
    696a:	af 90       	pop	r10
    696c:	9f 90       	pop	r9
    696e:	8f 90       	pop	r8
    6970:	7f 90       	pop	r7
    6972:	6f 90       	pop	r6
    6974:	5f 90       	pop	r5
    6976:	4f 90       	pop	r4
    6978:	3f 90       	pop	r3
    697a:	2f 90       	pop	r2
    697c:	08 95       	ret

0000697e <__mulsi3>:
    697e:	db 01       	movw	r26, r22
    6980:	8f 93       	push	r24
    6982:	9f 93       	push	r25
    6984:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <__muluhisi3>
    6988:	bf 91       	pop	r27
    698a:	af 91       	pop	r26
    698c:	a2 9f       	mul	r26, r18
    698e:	80 0d       	add	r24, r0
    6990:	91 1d       	adc	r25, r1
    6992:	a3 9f       	mul	r26, r19
    6994:	90 0d       	add	r25, r0
    6996:	b2 9f       	mul	r27, r18
    6998:	90 0d       	add	r25, r0
    699a:	11 24       	eor	r1, r1
    699c:	08 95       	ret

0000699e <__udivmodhi4>:
    699e:	aa 1b       	sub	r26, r26
    69a0:	bb 1b       	sub	r27, r27
    69a2:	51 e1       	ldi	r21, 0x11	; 17
    69a4:	07 c0       	rjmp	.+14     	; 0x69b4 <__udivmodhi4_ep>

000069a6 <__udivmodhi4_loop>:
    69a6:	aa 1f       	adc	r26, r26
    69a8:	bb 1f       	adc	r27, r27
    69aa:	a6 17       	cp	r26, r22
    69ac:	b7 07       	cpc	r27, r23
    69ae:	10 f0       	brcs	.+4      	; 0x69b4 <__udivmodhi4_ep>
    69b0:	a6 1b       	sub	r26, r22
    69b2:	b7 0b       	sbc	r27, r23

000069b4 <__udivmodhi4_ep>:
    69b4:	88 1f       	adc	r24, r24
    69b6:	99 1f       	adc	r25, r25
    69b8:	5a 95       	dec	r21
    69ba:	a9 f7       	brne	.-22     	; 0x69a6 <__udivmodhi4_loop>
    69bc:	80 95       	com	r24
    69be:	90 95       	com	r25
    69c0:	bc 01       	movw	r22, r24
    69c2:	cd 01       	movw	r24, r26
    69c4:	08 95       	ret

000069c6 <__divmodhi4>:
    69c6:	97 fb       	bst	r25, 7
    69c8:	07 2e       	mov	r0, r23
    69ca:	16 f4       	brtc	.+4      	; 0x69d0 <__divmodhi4+0xa>
    69cc:	00 94       	com	r0
    69ce:	07 d0       	rcall	.+14     	; 0x69de <__divmodhi4_neg1>
    69d0:	77 fd       	sbrc	r23, 7
    69d2:	09 d0       	rcall	.+18     	; 0x69e6 <__divmodhi4_neg2>
    69d4:	0e 94 cf 34 	call	0x699e	; 0x699e <__udivmodhi4>
    69d8:	07 fc       	sbrc	r0, 7
    69da:	05 d0       	rcall	.+10     	; 0x69e6 <__divmodhi4_neg2>
    69dc:	3e f4       	brtc	.+14     	; 0x69ec <__divmodhi4_exit>

000069de <__divmodhi4_neg1>:
    69de:	90 95       	com	r25
    69e0:	81 95       	neg	r24
    69e2:	9f 4f       	sbci	r25, 0xFF	; 255
    69e4:	08 95       	ret

000069e6 <__divmodhi4_neg2>:
    69e6:	70 95       	com	r23
    69e8:	61 95       	neg	r22
    69ea:	7f 4f       	sbci	r23, 0xFF	; 255

000069ec <__divmodhi4_exit>:
    69ec:	08 95       	ret

000069ee <__udivmodsi4>:
    69ee:	a1 e2       	ldi	r26, 0x21	; 33
    69f0:	1a 2e       	mov	r1, r26
    69f2:	aa 1b       	sub	r26, r26
    69f4:	bb 1b       	sub	r27, r27
    69f6:	fd 01       	movw	r30, r26
    69f8:	0d c0       	rjmp	.+26     	; 0x6a14 <__udivmodsi4_ep>

000069fa <__udivmodsi4_loop>:
    69fa:	aa 1f       	adc	r26, r26
    69fc:	bb 1f       	adc	r27, r27
    69fe:	ee 1f       	adc	r30, r30
    6a00:	ff 1f       	adc	r31, r31
    6a02:	a2 17       	cp	r26, r18
    6a04:	b3 07       	cpc	r27, r19
    6a06:	e4 07       	cpc	r30, r20
    6a08:	f5 07       	cpc	r31, r21
    6a0a:	20 f0       	brcs	.+8      	; 0x6a14 <__udivmodsi4_ep>
    6a0c:	a2 1b       	sub	r26, r18
    6a0e:	b3 0b       	sbc	r27, r19
    6a10:	e4 0b       	sbc	r30, r20
    6a12:	f5 0b       	sbc	r31, r21

00006a14 <__udivmodsi4_ep>:
    6a14:	66 1f       	adc	r22, r22
    6a16:	77 1f       	adc	r23, r23
    6a18:	88 1f       	adc	r24, r24
    6a1a:	99 1f       	adc	r25, r25
    6a1c:	1a 94       	dec	r1
    6a1e:	69 f7       	brne	.-38     	; 0x69fa <__udivmodsi4_loop>
    6a20:	60 95       	com	r22
    6a22:	70 95       	com	r23
    6a24:	80 95       	com	r24
    6a26:	90 95       	com	r25
    6a28:	9b 01       	movw	r18, r22
    6a2a:	ac 01       	movw	r20, r24
    6a2c:	bd 01       	movw	r22, r26
    6a2e:	cf 01       	movw	r24, r30
    6a30:	08 95       	ret

00006a32 <__divmodsi4>:
    6a32:	05 2e       	mov	r0, r21
    6a34:	97 fb       	bst	r25, 7
    6a36:	1e f4       	brtc	.+6      	; 0x6a3e <__divmodsi4+0xc>
    6a38:	00 94       	com	r0
    6a3a:	0e 94 30 35 	call	0x6a60	; 0x6a60 <__negsi2>
    6a3e:	57 fd       	sbrc	r21, 7
    6a40:	07 d0       	rcall	.+14     	; 0x6a50 <__divmodsi4_neg2>
    6a42:	0e 94 f7 34 	call	0x69ee	; 0x69ee <__udivmodsi4>
    6a46:	07 fc       	sbrc	r0, 7
    6a48:	03 d0       	rcall	.+6      	; 0x6a50 <__divmodsi4_neg2>
    6a4a:	4e f4       	brtc	.+18     	; 0x6a5e <__divmodsi4_exit>
    6a4c:	0c 94 30 35 	jmp	0x6a60	; 0x6a60 <__negsi2>

00006a50 <__divmodsi4_neg2>:
    6a50:	50 95       	com	r21
    6a52:	40 95       	com	r20
    6a54:	30 95       	com	r19
    6a56:	21 95       	neg	r18
    6a58:	3f 4f       	sbci	r19, 0xFF	; 255
    6a5a:	4f 4f       	sbci	r20, 0xFF	; 255
    6a5c:	5f 4f       	sbci	r21, 0xFF	; 255

00006a5e <__divmodsi4_exit>:
    6a5e:	08 95       	ret

00006a60 <__negsi2>:
    6a60:	90 95       	com	r25
    6a62:	80 95       	com	r24
    6a64:	70 95       	com	r23
    6a66:	61 95       	neg	r22
    6a68:	7f 4f       	sbci	r23, 0xFF	; 255
    6a6a:	8f 4f       	sbci	r24, 0xFF	; 255
    6a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    6a6e:	08 95       	ret

00006a70 <__tablejump2__>:
    6a70:	ee 0f       	add	r30, r30
    6a72:	ff 1f       	adc	r31, r31

00006a74 <__tablejump__>:
    6a74:	05 90       	lpm	r0, Z+
    6a76:	f4 91       	lpm	r31, Z
    6a78:	e0 2d       	mov	r30, r0
    6a7a:	09 94       	ijmp

00006a7c <__umulhisi3>:
    6a7c:	a2 9f       	mul	r26, r18
    6a7e:	b0 01       	movw	r22, r0
    6a80:	b3 9f       	mul	r27, r19
    6a82:	c0 01       	movw	r24, r0
    6a84:	a3 9f       	mul	r26, r19
    6a86:	70 0d       	add	r23, r0
    6a88:	81 1d       	adc	r24, r1
    6a8a:	11 24       	eor	r1, r1
    6a8c:	91 1d       	adc	r25, r1
    6a8e:	b2 9f       	mul	r27, r18
    6a90:	70 0d       	add	r23, r0
    6a92:	81 1d       	adc	r24, r1
    6a94:	11 24       	eor	r1, r1
    6a96:	91 1d       	adc	r25, r1
    6a98:	08 95       	ret

00006a9a <__muluhisi3>:
    6a9a:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <__umulhisi3>
    6a9e:	a5 9f       	mul	r26, r21
    6aa0:	90 0d       	add	r25, r0
    6aa2:	b4 9f       	mul	r27, r20
    6aa4:	90 0d       	add	r25, r0
    6aa6:	a4 9f       	mul	r26, r20
    6aa8:	80 0d       	add	r24, r0
    6aaa:	91 1d       	adc	r25, r1
    6aac:	11 24       	eor	r1, r1
    6aae:	08 95       	ret

00006ab0 <__muldi3>:
    6ab0:	df 93       	push	r29
    6ab2:	cf 93       	push	r28
    6ab4:	1f 93       	push	r17
    6ab6:	0f 93       	push	r16
    6ab8:	9a 9d       	mul	r25, r10
    6aba:	f0 2d       	mov	r31, r0
    6abc:	21 9f       	mul	r18, r17
    6abe:	f0 0d       	add	r31, r0
    6ac0:	8b 9d       	mul	r24, r11
    6ac2:	f0 0d       	add	r31, r0
    6ac4:	8a 9d       	mul	r24, r10
    6ac6:	e0 2d       	mov	r30, r0
    6ac8:	f1 0d       	add	r31, r1
    6aca:	03 9f       	mul	r16, r19
    6acc:	f0 0d       	add	r31, r0
    6ace:	02 9f       	mul	r16, r18
    6ad0:	e0 0d       	add	r30, r0
    6ad2:	f1 1d       	adc	r31, r1
    6ad4:	4e 9d       	mul	r20, r14
    6ad6:	e0 0d       	add	r30, r0
    6ad8:	f1 1d       	adc	r31, r1
    6ada:	5e 9d       	mul	r21, r14
    6adc:	f0 0d       	add	r31, r0
    6ade:	4f 9d       	mul	r20, r15
    6ae0:	f0 0d       	add	r31, r0
    6ae2:	7f 93       	push	r23
    6ae4:	6f 93       	push	r22
    6ae6:	bf 92       	push	r11
    6ae8:	af 92       	push	r10
    6aea:	5f 93       	push	r21
    6aec:	4f 93       	push	r20
    6aee:	d5 01       	movw	r26, r10
    6af0:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <__umulhisi3>
    6af4:	8b 01       	movw	r16, r22
    6af6:	ac 01       	movw	r20, r24
    6af8:	d7 01       	movw	r26, r14
    6afa:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <__umulhisi3>
    6afe:	eb 01       	movw	r28, r22
    6b00:	e8 0f       	add	r30, r24
    6b02:	f9 1f       	adc	r31, r25
    6b04:	d6 01       	movw	r26, r12
    6b06:	0e 94 a8 35 	call	0x6b50	; 0x6b50 <__muldi3_6>
    6b0a:	2f 91       	pop	r18
    6b0c:	3f 91       	pop	r19
    6b0e:	d6 01       	movw	r26, r12
    6b10:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <__umulhisi3>
    6b14:	c6 0f       	add	r28, r22
    6b16:	d7 1f       	adc	r29, r23
    6b18:	e8 1f       	adc	r30, r24
    6b1a:	f9 1f       	adc	r31, r25
    6b1c:	af 91       	pop	r26
    6b1e:	bf 91       	pop	r27
    6b20:	0e 94 a8 35 	call	0x6b50	; 0x6b50 <__muldi3_6>
    6b24:	2f 91       	pop	r18
    6b26:	3f 91       	pop	r19
    6b28:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <__umulhisi3>
    6b2c:	c6 0f       	add	r28, r22
    6b2e:	d7 1f       	adc	r29, r23
    6b30:	e8 1f       	adc	r30, r24
    6b32:	f9 1f       	adc	r31, r25
    6b34:	d6 01       	movw	r26, r12
    6b36:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <__umulhisi3>
    6b3a:	e6 0f       	add	r30, r22
    6b3c:	f7 1f       	adc	r31, r23
    6b3e:	98 01       	movw	r18, r16
    6b40:	be 01       	movw	r22, r28
    6b42:	cf 01       	movw	r24, r30
    6b44:	11 24       	eor	r1, r1
    6b46:	0f 91       	pop	r16
    6b48:	1f 91       	pop	r17
    6b4a:	cf 91       	pop	r28
    6b4c:	df 91       	pop	r29
    6b4e:	08 95       	ret

00006b50 <__muldi3_6>:
    6b50:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <__umulhisi3>
    6b54:	46 0f       	add	r20, r22
    6b56:	57 1f       	adc	r21, r23
    6b58:	c8 1f       	adc	r28, r24
    6b5a:	d9 1f       	adc	r29, r25
    6b5c:	08 f4       	brcc	.+2      	; 0x6b60 <__muldi3_6+0x10>
    6b5e:	31 96       	adiw	r30, 0x01	; 1
    6b60:	08 95       	ret

00006b62 <__ashldi3>:
    6b62:	0f 93       	push	r16
    6b64:	08 30       	cpi	r16, 0x08	; 8
    6b66:	90 f0       	brcs	.+36     	; 0x6b8c <__ashldi3+0x2a>
    6b68:	98 2f       	mov	r25, r24
    6b6a:	87 2f       	mov	r24, r23
    6b6c:	76 2f       	mov	r23, r22
    6b6e:	65 2f       	mov	r22, r21
    6b70:	54 2f       	mov	r21, r20
    6b72:	43 2f       	mov	r20, r19
    6b74:	32 2f       	mov	r19, r18
    6b76:	22 27       	eor	r18, r18
    6b78:	08 50       	subi	r16, 0x08	; 8
    6b7a:	f4 cf       	rjmp	.-24     	; 0x6b64 <__ashldi3+0x2>
    6b7c:	22 0f       	add	r18, r18
    6b7e:	33 1f       	adc	r19, r19
    6b80:	44 1f       	adc	r20, r20
    6b82:	55 1f       	adc	r21, r21
    6b84:	66 1f       	adc	r22, r22
    6b86:	77 1f       	adc	r23, r23
    6b88:	88 1f       	adc	r24, r24
    6b8a:	99 1f       	adc	r25, r25
    6b8c:	0a 95       	dec	r16
    6b8e:	b2 f7       	brpl	.-20     	; 0x6b7c <__ashldi3+0x1a>
    6b90:	0f 91       	pop	r16
    6b92:	08 95       	ret

00006b94 <__ashrdi3>:
    6b94:	97 fb       	bst	r25, 7
    6b96:	10 f8       	bld	r1, 0

00006b98 <__lshrdi3>:
    6b98:	16 94       	lsr	r1
    6b9a:	00 08       	sbc	r0, r0
    6b9c:	0f 93       	push	r16
    6b9e:	08 30       	cpi	r16, 0x08	; 8
    6ba0:	98 f0       	brcs	.+38     	; 0x6bc8 <__lshrdi3+0x30>
    6ba2:	08 50       	subi	r16, 0x08	; 8
    6ba4:	23 2f       	mov	r18, r19
    6ba6:	34 2f       	mov	r19, r20
    6ba8:	45 2f       	mov	r20, r21
    6baa:	56 2f       	mov	r21, r22
    6bac:	67 2f       	mov	r22, r23
    6bae:	78 2f       	mov	r23, r24
    6bb0:	89 2f       	mov	r24, r25
    6bb2:	90 2d       	mov	r25, r0
    6bb4:	f4 cf       	rjmp	.-24     	; 0x6b9e <__lshrdi3+0x6>
    6bb6:	05 94       	asr	r0
    6bb8:	97 95       	ror	r25
    6bba:	87 95       	ror	r24
    6bbc:	77 95       	ror	r23
    6bbe:	67 95       	ror	r22
    6bc0:	57 95       	ror	r21
    6bc2:	47 95       	ror	r20
    6bc4:	37 95       	ror	r19
    6bc6:	27 95       	ror	r18
    6bc8:	0a 95       	dec	r16
    6bca:	aa f7       	brpl	.-22     	; 0x6bb6 <__lshrdi3+0x1e>
    6bcc:	0f 91       	pop	r16
    6bce:	08 95       	ret

00006bd0 <__adddi3>:
    6bd0:	2a 0d       	add	r18, r10
    6bd2:	3b 1d       	adc	r19, r11
    6bd4:	4c 1d       	adc	r20, r12
    6bd6:	5d 1d       	adc	r21, r13
    6bd8:	6e 1d       	adc	r22, r14
    6bda:	7f 1d       	adc	r23, r15
    6bdc:	80 1f       	adc	r24, r16
    6bde:	91 1f       	adc	r25, r17
    6be0:	08 95       	ret

00006be2 <__adddi3_s8>:
    6be2:	00 24       	eor	r0, r0
    6be4:	a7 fd       	sbrc	r26, 7
    6be6:	00 94       	com	r0
    6be8:	2a 0f       	add	r18, r26
    6bea:	30 1d       	adc	r19, r0
    6bec:	40 1d       	adc	r20, r0
    6bee:	50 1d       	adc	r21, r0
    6bf0:	60 1d       	adc	r22, r0
    6bf2:	70 1d       	adc	r23, r0
    6bf4:	80 1d       	adc	r24, r0
    6bf6:	90 1d       	adc	r25, r0
    6bf8:	08 95       	ret

00006bfa <__subdi3>:
    6bfa:	2a 19       	sub	r18, r10
    6bfc:	3b 09       	sbc	r19, r11
    6bfe:	4c 09       	sbc	r20, r12
    6c00:	5d 09       	sbc	r21, r13
    6c02:	6e 09       	sbc	r22, r14
    6c04:	7f 09       	sbc	r23, r15
    6c06:	80 0b       	sbc	r24, r16
    6c08:	91 0b       	sbc	r25, r17
    6c0a:	08 95       	ret

00006c0c <__cmpdi2>:
    6c0c:	2a 15       	cp	r18, r10
    6c0e:	3b 05       	cpc	r19, r11
    6c10:	4c 05       	cpc	r20, r12
    6c12:	5d 05       	cpc	r21, r13
    6c14:	6e 05       	cpc	r22, r14
    6c16:	7f 05       	cpc	r23, r15
    6c18:	80 07       	cpc	r24, r16
    6c1a:	91 07       	cpc	r25, r17
    6c1c:	08 95       	ret

00006c1e <malloc>:
    6c1e:	cf 93       	push	r28
    6c20:	df 93       	push	r29
    6c22:	82 30       	cpi	r24, 0x02	; 2
    6c24:	91 05       	cpc	r25, r1
    6c26:	10 f4       	brcc	.+4      	; 0x6c2c <malloc+0xe>
    6c28:	82 e0       	ldi	r24, 0x02	; 2
    6c2a:	90 e0       	ldi	r25, 0x00	; 0
    6c2c:	e0 91 55 27 	lds	r30, 0x2755
    6c30:	f0 91 56 27 	lds	r31, 0x2756
    6c34:	20 e0       	ldi	r18, 0x00	; 0
    6c36:	30 e0       	ldi	r19, 0x00	; 0
    6c38:	a0 e0       	ldi	r26, 0x00	; 0
    6c3a:	b0 e0       	ldi	r27, 0x00	; 0
    6c3c:	30 97       	sbiw	r30, 0x00	; 0
    6c3e:	39 f1       	breq	.+78     	; 0x6c8e <malloc+0x70>
    6c40:	40 81       	ld	r20, Z
    6c42:	51 81       	ldd	r21, Z+1	; 0x01
    6c44:	48 17       	cp	r20, r24
    6c46:	59 07       	cpc	r21, r25
    6c48:	b8 f0       	brcs	.+46     	; 0x6c78 <malloc+0x5a>
    6c4a:	48 17       	cp	r20, r24
    6c4c:	59 07       	cpc	r21, r25
    6c4e:	71 f4       	brne	.+28     	; 0x6c6c <malloc+0x4e>
    6c50:	82 81       	ldd	r24, Z+2	; 0x02
    6c52:	93 81       	ldd	r25, Z+3	; 0x03
    6c54:	10 97       	sbiw	r26, 0x00	; 0
    6c56:	29 f0       	breq	.+10     	; 0x6c62 <malloc+0x44>
    6c58:	12 96       	adiw	r26, 0x02	; 2
    6c5a:	8d 93       	st	X+, r24
    6c5c:	9c 93       	st	X, r25
    6c5e:	13 97       	sbiw	r26, 0x03	; 3
    6c60:	2c c0       	rjmp	.+88     	; 0x6cba <malloc+0x9c>
    6c62:	80 93 55 27 	sts	0x2755, r24
    6c66:	90 93 56 27 	sts	0x2756, r25
    6c6a:	27 c0       	rjmp	.+78     	; 0x6cba <malloc+0x9c>
    6c6c:	21 15       	cp	r18, r1
    6c6e:	31 05       	cpc	r19, r1
    6c70:	31 f0       	breq	.+12     	; 0x6c7e <malloc+0x60>
    6c72:	42 17       	cp	r20, r18
    6c74:	53 07       	cpc	r21, r19
    6c76:	18 f0       	brcs	.+6      	; 0x6c7e <malloc+0x60>
    6c78:	a9 01       	movw	r20, r18
    6c7a:	db 01       	movw	r26, r22
    6c7c:	01 c0       	rjmp	.+2      	; 0x6c80 <malloc+0x62>
    6c7e:	ef 01       	movw	r28, r30
    6c80:	9a 01       	movw	r18, r20
    6c82:	bd 01       	movw	r22, r26
    6c84:	df 01       	movw	r26, r30
    6c86:	02 80       	ldd	r0, Z+2	; 0x02
    6c88:	f3 81       	ldd	r31, Z+3	; 0x03
    6c8a:	e0 2d       	mov	r30, r0
    6c8c:	d7 cf       	rjmp	.-82     	; 0x6c3c <malloc+0x1e>
    6c8e:	21 15       	cp	r18, r1
    6c90:	31 05       	cpc	r19, r1
    6c92:	f9 f0       	breq	.+62     	; 0x6cd2 <malloc+0xb4>
    6c94:	28 1b       	sub	r18, r24
    6c96:	39 0b       	sbc	r19, r25
    6c98:	24 30       	cpi	r18, 0x04	; 4
    6c9a:	31 05       	cpc	r19, r1
    6c9c:	80 f4       	brcc	.+32     	; 0x6cbe <malloc+0xa0>
    6c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    6ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    6ca2:	61 15       	cp	r22, r1
    6ca4:	71 05       	cpc	r23, r1
    6ca6:	21 f0       	breq	.+8      	; 0x6cb0 <malloc+0x92>
    6ca8:	fb 01       	movw	r30, r22
    6caa:	82 83       	std	Z+2, r24	; 0x02
    6cac:	93 83       	std	Z+3, r25	; 0x03
    6cae:	04 c0       	rjmp	.+8      	; 0x6cb8 <malloc+0x9a>
    6cb0:	80 93 55 27 	sts	0x2755, r24
    6cb4:	90 93 56 27 	sts	0x2756, r25
    6cb8:	fe 01       	movw	r30, r28
    6cba:	32 96       	adiw	r30, 0x02	; 2
    6cbc:	44 c0       	rjmp	.+136    	; 0x6d46 <malloc+0x128>
    6cbe:	fe 01       	movw	r30, r28
    6cc0:	e2 0f       	add	r30, r18
    6cc2:	f3 1f       	adc	r31, r19
    6cc4:	81 93       	st	Z+, r24
    6cc6:	91 93       	st	Z+, r25
    6cc8:	22 50       	subi	r18, 0x02	; 2
    6cca:	31 09       	sbc	r19, r1
    6ccc:	28 83       	st	Y, r18
    6cce:	39 83       	std	Y+1, r19	; 0x01
    6cd0:	3a c0       	rjmp	.+116    	; 0x6d46 <malloc+0x128>
    6cd2:	20 91 53 27 	lds	r18, 0x2753
    6cd6:	30 91 54 27 	lds	r19, 0x2754
    6cda:	23 2b       	or	r18, r19
    6cdc:	41 f4       	brne	.+16     	; 0x6cee <malloc+0xd0>
    6cde:	20 91 02 20 	lds	r18, 0x2002
    6ce2:	30 91 03 20 	lds	r19, 0x2003
    6ce6:	20 93 53 27 	sts	0x2753, r18
    6cea:	30 93 54 27 	sts	0x2754, r19
    6cee:	20 91 00 20 	lds	r18, 0x2000
    6cf2:	30 91 01 20 	lds	r19, 0x2001
    6cf6:	21 15       	cp	r18, r1
    6cf8:	31 05       	cpc	r19, r1
    6cfa:	41 f4       	brne	.+16     	; 0x6d0c <malloc+0xee>
    6cfc:	2d b7       	in	r18, 0x3d	; 61
    6cfe:	3e b7       	in	r19, 0x3e	; 62
    6d00:	40 91 04 20 	lds	r20, 0x2004
    6d04:	50 91 05 20 	lds	r21, 0x2005
    6d08:	24 1b       	sub	r18, r20
    6d0a:	35 0b       	sbc	r19, r21
    6d0c:	e0 91 53 27 	lds	r30, 0x2753
    6d10:	f0 91 54 27 	lds	r31, 0x2754
    6d14:	e2 17       	cp	r30, r18
    6d16:	f3 07       	cpc	r31, r19
    6d18:	a0 f4       	brcc	.+40     	; 0x6d42 <malloc+0x124>
    6d1a:	2e 1b       	sub	r18, r30
    6d1c:	3f 0b       	sbc	r19, r31
    6d1e:	28 17       	cp	r18, r24
    6d20:	39 07       	cpc	r19, r25
    6d22:	78 f0       	brcs	.+30     	; 0x6d42 <malloc+0x124>
    6d24:	ac 01       	movw	r20, r24
    6d26:	4e 5f       	subi	r20, 0xFE	; 254
    6d28:	5f 4f       	sbci	r21, 0xFF	; 255
    6d2a:	24 17       	cp	r18, r20
    6d2c:	35 07       	cpc	r19, r21
    6d2e:	48 f0       	brcs	.+18     	; 0x6d42 <malloc+0x124>
    6d30:	4e 0f       	add	r20, r30
    6d32:	5f 1f       	adc	r21, r31
    6d34:	40 93 53 27 	sts	0x2753, r20
    6d38:	50 93 54 27 	sts	0x2754, r21
    6d3c:	81 93       	st	Z+, r24
    6d3e:	91 93       	st	Z+, r25
    6d40:	02 c0       	rjmp	.+4      	; 0x6d46 <malloc+0x128>
    6d42:	e0 e0       	ldi	r30, 0x00	; 0
    6d44:	f0 e0       	ldi	r31, 0x00	; 0
    6d46:	cf 01       	movw	r24, r30
    6d48:	df 91       	pop	r29
    6d4a:	cf 91       	pop	r28
    6d4c:	08 95       	ret

00006d4e <free>:
    6d4e:	cf 93       	push	r28
    6d50:	df 93       	push	r29
    6d52:	00 97       	sbiw	r24, 0x00	; 0
    6d54:	09 f4       	brne	.+2      	; 0x6d58 <free+0xa>
    6d56:	87 c0       	rjmp	.+270    	; 0x6e66 <free+0x118>
    6d58:	fc 01       	movw	r30, r24
    6d5a:	32 97       	sbiw	r30, 0x02	; 2
    6d5c:	12 82       	std	Z+2, r1	; 0x02
    6d5e:	13 82       	std	Z+3, r1	; 0x03
    6d60:	c0 91 55 27 	lds	r28, 0x2755
    6d64:	d0 91 56 27 	lds	r29, 0x2756
    6d68:	20 97       	sbiw	r28, 0x00	; 0
    6d6a:	81 f4       	brne	.+32     	; 0x6d8c <free+0x3e>
    6d6c:	20 81       	ld	r18, Z
    6d6e:	31 81       	ldd	r19, Z+1	; 0x01
    6d70:	28 0f       	add	r18, r24
    6d72:	39 1f       	adc	r19, r25
    6d74:	80 91 53 27 	lds	r24, 0x2753
    6d78:	90 91 54 27 	lds	r25, 0x2754
    6d7c:	82 17       	cp	r24, r18
    6d7e:	93 07       	cpc	r25, r19
    6d80:	79 f5       	brne	.+94     	; 0x6de0 <free+0x92>
    6d82:	e0 93 53 27 	sts	0x2753, r30
    6d86:	f0 93 54 27 	sts	0x2754, r31
    6d8a:	6d c0       	rjmp	.+218    	; 0x6e66 <free+0x118>
    6d8c:	de 01       	movw	r26, r28
    6d8e:	20 e0       	ldi	r18, 0x00	; 0
    6d90:	30 e0       	ldi	r19, 0x00	; 0
    6d92:	ae 17       	cp	r26, r30
    6d94:	bf 07       	cpc	r27, r31
    6d96:	50 f4       	brcc	.+20     	; 0x6dac <free+0x5e>
    6d98:	12 96       	adiw	r26, 0x02	; 2
    6d9a:	4d 91       	ld	r20, X+
    6d9c:	5c 91       	ld	r21, X
    6d9e:	13 97       	sbiw	r26, 0x03	; 3
    6da0:	9d 01       	movw	r18, r26
    6da2:	41 15       	cp	r20, r1
    6da4:	51 05       	cpc	r21, r1
    6da6:	09 f1       	breq	.+66     	; 0x6dea <free+0x9c>
    6da8:	da 01       	movw	r26, r20
    6daa:	f3 cf       	rjmp	.-26     	; 0x6d92 <free+0x44>
    6dac:	a2 83       	std	Z+2, r26	; 0x02
    6dae:	b3 83       	std	Z+3, r27	; 0x03
    6db0:	40 81       	ld	r20, Z
    6db2:	51 81       	ldd	r21, Z+1	; 0x01
    6db4:	84 0f       	add	r24, r20
    6db6:	95 1f       	adc	r25, r21
    6db8:	8a 17       	cp	r24, r26
    6dba:	9b 07       	cpc	r25, r27
    6dbc:	71 f4       	brne	.+28     	; 0x6dda <free+0x8c>
    6dbe:	8d 91       	ld	r24, X+
    6dc0:	9c 91       	ld	r25, X
    6dc2:	11 97       	sbiw	r26, 0x01	; 1
    6dc4:	84 0f       	add	r24, r20
    6dc6:	95 1f       	adc	r25, r21
    6dc8:	02 96       	adiw	r24, 0x02	; 2
    6dca:	80 83       	st	Z, r24
    6dcc:	91 83       	std	Z+1, r25	; 0x01
    6dce:	12 96       	adiw	r26, 0x02	; 2
    6dd0:	8d 91       	ld	r24, X+
    6dd2:	9c 91       	ld	r25, X
    6dd4:	13 97       	sbiw	r26, 0x03	; 3
    6dd6:	82 83       	std	Z+2, r24	; 0x02
    6dd8:	93 83       	std	Z+3, r25	; 0x03
    6dda:	21 15       	cp	r18, r1
    6ddc:	31 05       	cpc	r19, r1
    6dde:	29 f4       	brne	.+10     	; 0x6dea <free+0x9c>
    6de0:	e0 93 55 27 	sts	0x2755, r30
    6de4:	f0 93 56 27 	sts	0x2756, r31
    6de8:	3e c0       	rjmp	.+124    	; 0x6e66 <free+0x118>
    6dea:	d9 01       	movw	r26, r18
    6dec:	12 96       	adiw	r26, 0x02	; 2
    6dee:	ed 93       	st	X+, r30
    6df0:	fc 93       	st	X, r31
    6df2:	13 97       	sbiw	r26, 0x03	; 3
    6df4:	4d 91       	ld	r20, X+
    6df6:	5d 91       	ld	r21, X+
    6df8:	a4 0f       	add	r26, r20
    6dfa:	b5 1f       	adc	r27, r21
    6dfc:	ea 17       	cp	r30, r26
    6dfe:	fb 07       	cpc	r31, r27
    6e00:	79 f4       	brne	.+30     	; 0x6e20 <free+0xd2>
    6e02:	80 81       	ld	r24, Z
    6e04:	91 81       	ldd	r25, Z+1	; 0x01
    6e06:	84 0f       	add	r24, r20
    6e08:	95 1f       	adc	r25, r21
    6e0a:	02 96       	adiw	r24, 0x02	; 2
    6e0c:	d9 01       	movw	r26, r18
    6e0e:	8d 93       	st	X+, r24
    6e10:	9c 93       	st	X, r25
    6e12:	11 97       	sbiw	r26, 0x01	; 1
    6e14:	82 81       	ldd	r24, Z+2	; 0x02
    6e16:	93 81       	ldd	r25, Z+3	; 0x03
    6e18:	12 96       	adiw	r26, 0x02	; 2
    6e1a:	8d 93       	st	X+, r24
    6e1c:	9c 93       	st	X, r25
    6e1e:	13 97       	sbiw	r26, 0x03	; 3
    6e20:	e0 e0       	ldi	r30, 0x00	; 0
    6e22:	f0 e0       	ldi	r31, 0x00	; 0
    6e24:	8a 81       	ldd	r24, Y+2	; 0x02
    6e26:	9b 81       	ldd	r25, Y+3	; 0x03
    6e28:	00 97       	sbiw	r24, 0x00	; 0
    6e2a:	19 f0       	breq	.+6      	; 0x6e32 <free+0xe4>
    6e2c:	fe 01       	movw	r30, r28
    6e2e:	ec 01       	movw	r28, r24
    6e30:	f9 cf       	rjmp	.-14     	; 0x6e24 <free+0xd6>
    6e32:	ce 01       	movw	r24, r28
    6e34:	02 96       	adiw	r24, 0x02	; 2
    6e36:	28 81       	ld	r18, Y
    6e38:	39 81       	ldd	r19, Y+1	; 0x01
    6e3a:	82 0f       	add	r24, r18
    6e3c:	93 1f       	adc	r25, r19
    6e3e:	20 91 53 27 	lds	r18, 0x2753
    6e42:	30 91 54 27 	lds	r19, 0x2754
    6e46:	28 17       	cp	r18, r24
    6e48:	39 07       	cpc	r19, r25
    6e4a:	69 f4       	brne	.+26     	; 0x6e66 <free+0x118>
    6e4c:	30 97       	sbiw	r30, 0x00	; 0
    6e4e:	29 f4       	brne	.+10     	; 0x6e5a <free+0x10c>
    6e50:	10 92 55 27 	sts	0x2755, r1
    6e54:	10 92 56 27 	sts	0x2756, r1
    6e58:	02 c0       	rjmp	.+4      	; 0x6e5e <free+0x110>
    6e5a:	12 82       	std	Z+2, r1	; 0x02
    6e5c:	13 82       	std	Z+3, r1	; 0x03
    6e5e:	c0 93 53 27 	sts	0x2753, r28
    6e62:	d0 93 54 27 	sts	0x2754, r29
    6e66:	df 91       	pop	r29
    6e68:	cf 91       	pop	r28
    6e6a:	08 95       	ret

00006e6c <__ftoa_engine>:
    6e6c:	28 30       	cpi	r18, 0x08	; 8
    6e6e:	08 f0       	brcs	.+2      	; 0x6e72 <__ftoa_engine+0x6>
    6e70:	27 e0       	ldi	r18, 0x07	; 7
    6e72:	33 27       	eor	r19, r19
    6e74:	da 01       	movw	r26, r20
    6e76:	99 0f       	add	r25, r25
    6e78:	31 1d       	adc	r19, r1
    6e7a:	87 fd       	sbrc	r24, 7
    6e7c:	91 60       	ori	r25, 0x01	; 1
    6e7e:	00 96       	adiw	r24, 0x00	; 0
    6e80:	61 05       	cpc	r22, r1
    6e82:	71 05       	cpc	r23, r1
    6e84:	39 f4       	brne	.+14     	; 0x6e94 <__ftoa_engine+0x28>
    6e86:	32 60       	ori	r19, 0x02	; 2
    6e88:	2e 5f       	subi	r18, 0xFE	; 254
    6e8a:	3d 93       	st	X+, r19
    6e8c:	30 e3       	ldi	r19, 0x30	; 48
    6e8e:	2a 95       	dec	r18
    6e90:	e1 f7       	brne	.-8      	; 0x6e8a <__ftoa_engine+0x1e>
    6e92:	08 95       	ret
    6e94:	9f 3f       	cpi	r25, 0xFF	; 255
    6e96:	30 f0       	brcs	.+12     	; 0x6ea4 <__ftoa_engine+0x38>
    6e98:	80 38       	cpi	r24, 0x80	; 128
    6e9a:	71 05       	cpc	r23, r1
    6e9c:	61 05       	cpc	r22, r1
    6e9e:	09 f0       	breq	.+2      	; 0x6ea2 <__ftoa_engine+0x36>
    6ea0:	3c 5f       	subi	r19, 0xFC	; 252
    6ea2:	3c 5f       	subi	r19, 0xFC	; 252
    6ea4:	3d 93       	st	X+, r19
    6ea6:	91 30       	cpi	r25, 0x01	; 1
    6ea8:	08 f0       	brcs	.+2      	; 0x6eac <__ftoa_engine+0x40>
    6eaa:	80 68       	ori	r24, 0x80	; 128
    6eac:	91 1d       	adc	r25, r1
    6eae:	df 93       	push	r29
    6eb0:	cf 93       	push	r28
    6eb2:	1f 93       	push	r17
    6eb4:	0f 93       	push	r16
    6eb6:	ff 92       	push	r15
    6eb8:	ef 92       	push	r14
    6eba:	19 2f       	mov	r17, r25
    6ebc:	98 7f       	andi	r25, 0xF8	; 248
    6ebe:	96 95       	lsr	r25
    6ec0:	e9 2f       	mov	r30, r25
    6ec2:	96 95       	lsr	r25
    6ec4:	96 95       	lsr	r25
    6ec6:	e9 0f       	add	r30, r25
    6ec8:	ff 27       	eor	r31, r31
    6eca:	e2 5a       	subi	r30, 0xA2	; 162
    6ecc:	f5 4f       	sbci	r31, 0xF5	; 245
    6ece:	99 27       	eor	r25, r25
    6ed0:	33 27       	eor	r19, r19
    6ed2:	ee 24       	eor	r14, r14
    6ed4:	ff 24       	eor	r15, r15
    6ed6:	a7 01       	movw	r20, r14
    6ed8:	e7 01       	movw	r28, r14
    6eda:	05 90       	lpm	r0, Z+
    6edc:	08 94       	sec
    6ede:	07 94       	ror	r0
    6ee0:	28 f4       	brcc	.+10     	; 0x6eec <__ftoa_engine+0x80>
    6ee2:	36 0f       	add	r19, r22
    6ee4:	e7 1e       	adc	r14, r23
    6ee6:	f8 1e       	adc	r15, r24
    6ee8:	49 1f       	adc	r20, r25
    6eea:	51 1d       	adc	r21, r1
    6eec:	66 0f       	add	r22, r22
    6eee:	77 1f       	adc	r23, r23
    6ef0:	88 1f       	adc	r24, r24
    6ef2:	99 1f       	adc	r25, r25
    6ef4:	06 94       	lsr	r0
    6ef6:	a1 f7       	brne	.-24     	; 0x6ee0 <__ftoa_engine+0x74>
    6ef8:	05 90       	lpm	r0, Z+
    6efa:	07 94       	ror	r0
    6efc:	28 f4       	brcc	.+10     	; 0x6f08 <__ftoa_engine+0x9c>
    6efe:	e7 0e       	add	r14, r23
    6f00:	f8 1e       	adc	r15, r24
    6f02:	49 1f       	adc	r20, r25
    6f04:	56 1f       	adc	r21, r22
    6f06:	c1 1d       	adc	r28, r1
    6f08:	77 0f       	add	r23, r23
    6f0a:	88 1f       	adc	r24, r24
    6f0c:	99 1f       	adc	r25, r25
    6f0e:	66 1f       	adc	r22, r22
    6f10:	06 94       	lsr	r0
    6f12:	a1 f7       	brne	.-24     	; 0x6efc <__ftoa_engine+0x90>
    6f14:	05 90       	lpm	r0, Z+
    6f16:	07 94       	ror	r0
    6f18:	28 f4       	brcc	.+10     	; 0x6f24 <__ftoa_engine+0xb8>
    6f1a:	f8 0e       	add	r15, r24
    6f1c:	49 1f       	adc	r20, r25
    6f1e:	56 1f       	adc	r21, r22
    6f20:	c7 1f       	adc	r28, r23
    6f22:	d1 1d       	adc	r29, r1
    6f24:	88 0f       	add	r24, r24
    6f26:	99 1f       	adc	r25, r25
    6f28:	66 1f       	adc	r22, r22
    6f2a:	77 1f       	adc	r23, r23
    6f2c:	06 94       	lsr	r0
    6f2e:	a1 f7       	brne	.-24     	; 0x6f18 <__ftoa_engine+0xac>
    6f30:	05 90       	lpm	r0, Z+
    6f32:	07 94       	ror	r0
    6f34:	20 f4       	brcc	.+8      	; 0x6f3e <__ftoa_engine+0xd2>
    6f36:	49 0f       	add	r20, r25
    6f38:	56 1f       	adc	r21, r22
    6f3a:	c7 1f       	adc	r28, r23
    6f3c:	d8 1f       	adc	r29, r24
    6f3e:	99 0f       	add	r25, r25
    6f40:	66 1f       	adc	r22, r22
    6f42:	77 1f       	adc	r23, r23
    6f44:	88 1f       	adc	r24, r24
    6f46:	06 94       	lsr	r0
    6f48:	a9 f7       	brne	.-22     	; 0x6f34 <__ftoa_engine+0xc8>
    6f4a:	84 91       	lpm	r24, Z
    6f4c:	10 95       	com	r17
    6f4e:	17 70       	andi	r17, 0x07	; 7
    6f50:	41 f0       	breq	.+16     	; 0x6f62 <__ftoa_engine+0xf6>
    6f52:	d6 95       	lsr	r29
    6f54:	c7 95       	ror	r28
    6f56:	57 95       	ror	r21
    6f58:	47 95       	ror	r20
    6f5a:	f7 94       	ror	r15
    6f5c:	e7 94       	ror	r14
    6f5e:	1a 95       	dec	r17
    6f60:	c1 f7       	brne	.-16     	; 0x6f52 <__ftoa_engine+0xe6>
    6f62:	e4 e0       	ldi	r30, 0x04	; 4
    6f64:	fa e0       	ldi	r31, 0x0A	; 10
    6f66:	68 94       	set
    6f68:	15 90       	lpm	r1, Z+
    6f6a:	15 91       	lpm	r17, Z+
    6f6c:	35 91       	lpm	r19, Z+
    6f6e:	65 91       	lpm	r22, Z+
    6f70:	95 91       	lpm	r25, Z+
    6f72:	05 90       	lpm	r0, Z+
    6f74:	7f e2       	ldi	r23, 0x2F	; 47
    6f76:	73 95       	inc	r23
    6f78:	e1 18       	sub	r14, r1
    6f7a:	f1 0a       	sbc	r15, r17
    6f7c:	43 0b       	sbc	r20, r19
    6f7e:	56 0b       	sbc	r21, r22
    6f80:	c9 0b       	sbc	r28, r25
    6f82:	d0 09       	sbc	r29, r0
    6f84:	c0 f7       	brcc	.-16     	; 0x6f76 <__ftoa_engine+0x10a>
    6f86:	e1 0c       	add	r14, r1
    6f88:	f1 1e       	adc	r15, r17
    6f8a:	43 1f       	adc	r20, r19
    6f8c:	56 1f       	adc	r21, r22
    6f8e:	c9 1f       	adc	r28, r25
    6f90:	d0 1d       	adc	r29, r0
    6f92:	7e f4       	brtc	.+30     	; 0x6fb2 <__ftoa_engine+0x146>
    6f94:	70 33       	cpi	r23, 0x30	; 48
    6f96:	11 f4       	brne	.+4      	; 0x6f9c <__ftoa_engine+0x130>
    6f98:	8a 95       	dec	r24
    6f9a:	e6 cf       	rjmp	.-52     	; 0x6f68 <__ftoa_engine+0xfc>
    6f9c:	e8 94       	clt
    6f9e:	01 50       	subi	r16, 0x01	; 1
    6fa0:	30 f0       	brcs	.+12     	; 0x6fae <__ftoa_engine+0x142>
    6fa2:	08 0f       	add	r16, r24
    6fa4:	0a f4       	brpl	.+2      	; 0x6fa8 <__ftoa_engine+0x13c>
    6fa6:	00 27       	eor	r16, r16
    6fa8:	02 17       	cp	r16, r18
    6faa:	08 f4       	brcc	.+2      	; 0x6fae <__ftoa_engine+0x142>
    6fac:	20 2f       	mov	r18, r16
    6fae:	23 95       	inc	r18
    6fb0:	02 2f       	mov	r16, r18
    6fb2:	7a 33       	cpi	r23, 0x3A	; 58
    6fb4:	28 f0       	brcs	.+10     	; 0x6fc0 <__ftoa_engine+0x154>
    6fb6:	79 e3       	ldi	r23, 0x39	; 57
    6fb8:	7d 93       	st	X+, r23
    6fba:	2a 95       	dec	r18
    6fbc:	e9 f7       	brne	.-6      	; 0x6fb8 <__ftoa_engine+0x14c>
    6fbe:	10 c0       	rjmp	.+32     	; 0x6fe0 <__ftoa_engine+0x174>
    6fc0:	7d 93       	st	X+, r23
    6fc2:	2a 95       	dec	r18
    6fc4:	89 f6       	brne	.-94     	; 0x6f68 <__ftoa_engine+0xfc>
    6fc6:	06 94       	lsr	r0
    6fc8:	97 95       	ror	r25
    6fca:	67 95       	ror	r22
    6fcc:	37 95       	ror	r19
    6fce:	17 95       	ror	r17
    6fd0:	17 94       	ror	r1
    6fd2:	e1 18       	sub	r14, r1
    6fd4:	f1 0a       	sbc	r15, r17
    6fd6:	43 0b       	sbc	r20, r19
    6fd8:	56 0b       	sbc	r21, r22
    6fda:	c9 0b       	sbc	r28, r25
    6fdc:	d0 09       	sbc	r29, r0
    6fde:	98 f0       	brcs	.+38     	; 0x7006 <__ftoa_engine+0x19a>
    6fe0:	23 95       	inc	r18
    6fe2:	7e 91       	ld	r23, -X
    6fe4:	73 95       	inc	r23
    6fe6:	7a 33       	cpi	r23, 0x3A	; 58
    6fe8:	08 f0       	brcs	.+2      	; 0x6fec <__ftoa_engine+0x180>
    6fea:	70 e3       	ldi	r23, 0x30	; 48
    6fec:	7c 93       	st	X, r23
    6fee:	20 13       	cpse	r18, r16
    6ff0:	b8 f7       	brcc	.-18     	; 0x6fe0 <__ftoa_engine+0x174>
    6ff2:	7e 91       	ld	r23, -X
    6ff4:	70 61       	ori	r23, 0x10	; 16
    6ff6:	7d 93       	st	X+, r23
    6ff8:	30 f0       	brcs	.+12     	; 0x7006 <__ftoa_engine+0x19a>
    6ffa:	83 95       	inc	r24
    6ffc:	71 e3       	ldi	r23, 0x31	; 49
    6ffe:	7d 93       	st	X+, r23
    7000:	70 e3       	ldi	r23, 0x30	; 48
    7002:	2a 95       	dec	r18
    7004:	e1 f7       	brne	.-8      	; 0x6ffe <__ftoa_engine+0x192>
    7006:	11 24       	eor	r1, r1
    7008:	ef 90       	pop	r14
    700a:	ff 90       	pop	r15
    700c:	0f 91       	pop	r16
    700e:	1f 91       	pop	r17
    7010:	cf 91       	pop	r28
    7012:	df 91       	pop	r29
    7014:	99 27       	eor	r25, r25
    7016:	87 fd       	sbrc	r24, 7
    7018:	90 95       	com	r25
    701a:	08 95       	ret

0000701c <memcpy_P>:
    701c:	fb 01       	movw	r30, r22
    701e:	dc 01       	movw	r26, r24
    7020:	02 c0       	rjmp	.+4      	; 0x7026 <memcpy_P+0xa>
    7022:	05 90       	lpm	r0, Z+
    7024:	0d 92       	st	X+, r0
    7026:	41 50       	subi	r20, 0x01	; 1
    7028:	50 40       	sbci	r21, 0x00	; 0
    702a:	d8 f7       	brcc	.-10     	; 0x7022 <memcpy_P+0x6>
    702c:	08 95       	ret

0000702e <strnlen_P>:
    702e:	fc 01       	movw	r30, r24
    7030:	05 90       	lpm	r0, Z+
    7032:	61 50       	subi	r22, 0x01	; 1
    7034:	70 40       	sbci	r23, 0x00	; 0
    7036:	01 10       	cpse	r0, r1
    7038:	d8 f7       	brcc	.-10     	; 0x7030 <strnlen_P+0x2>
    703a:	80 95       	com	r24
    703c:	90 95       	com	r25
    703e:	8e 0f       	add	r24, r30
    7040:	9f 1f       	adc	r25, r31
    7042:	08 95       	ret

00007044 <memcpy>:
    7044:	fb 01       	movw	r30, r22
    7046:	dc 01       	movw	r26, r24
    7048:	02 c0       	rjmp	.+4      	; 0x704e <memcpy+0xa>
    704a:	01 90       	ld	r0, Z+
    704c:	0d 92       	st	X+, r0
    704e:	41 50       	subi	r20, 0x01	; 1
    7050:	50 40       	sbci	r21, 0x00	; 0
    7052:	d8 f7       	brcc	.-10     	; 0x704a <memcpy+0x6>
    7054:	08 95       	ret

00007056 <strchr>:
    7056:	fc 01       	movw	r30, r24
    7058:	81 91       	ld	r24, Z+
    705a:	86 17       	cp	r24, r22
    705c:	21 f0       	breq	.+8      	; 0x7066 <strchr+0x10>
    705e:	88 23       	and	r24, r24
    7060:	d9 f7       	brne	.-10     	; 0x7058 <strchr+0x2>
    7062:	99 27       	eor	r25, r25
    7064:	08 95       	ret
    7066:	31 97       	sbiw	r30, 0x01	; 1
    7068:	cf 01       	movw	r24, r30
    706a:	08 95       	ret

0000706c <strncmp>:
    706c:	fb 01       	movw	r30, r22
    706e:	dc 01       	movw	r26, r24
    7070:	41 50       	subi	r20, 0x01	; 1
    7072:	50 40       	sbci	r21, 0x00	; 0
    7074:	30 f0       	brcs	.+12     	; 0x7082 <strncmp+0x16>
    7076:	8d 91       	ld	r24, X+
    7078:	01 90       	ld	r0, Z+
    707a:	80 19       	sub	r24, r0
    707c:	19 f4       	brne	.+6      	; 0x7084 <strncmp+0x18>
    707e:	00 20       	and	r0, r0
    7080:	b9 f7       	brne	.-18     	; 0x7070 <strncmp+0x4>
    7082:	88 1b       	sub	r24, r24
    7084:	99 0b       	sbc	r25, r25
    7086:	08 95       	ret

00007088 <strnlen>:
    7088:	fc 01       	movw	r30, r24
    708a:	61 50       	subi	r22, 0x01	; 1
    708c:	70 40       	sbci	r23, 0x00	; 0
    708e:	01 90       	ld	r0, Z+
    7090:	01 10       	cpse	r0, r1
    7092:	d8 f7       	brcc	.-10     	; 0x708a <strnlen+0x2>
    7094:	80 95       	com	r24
    7096:	90 95       	com	r25
    7098:	8e 0f       	add	r24, r30
    709a:	9f 1f       	adc	r25, r31
    709c:	08 95       	ret

0000709e <fputc>:
    709e:	0f 93       	push	r16
    70a0:	1f 93       	push	r17
    70a2:	cf 93       	push	r28
    70a4:	df 93       	push	r29
    70a6:	18 2f       	mov	r17, r24
    70a8:	09 2f       	mov	r16, r25
    70aa:	eb 01       	movw	r28, r22
    70ac:	8b 81       	ldd	r24, Y+3	; 0x03
    70ae:	81 fd       	sbrc	r24, 1
    70b0:	03 c0       	rjmp	.+6      	; 0x70b8 <fputc+0x1a>
    70b2:	8f ef       	ldi	r24, 0xFF	; 255
    70b4:	9f ef       	ldi	r25, 0xFF	; 255
    70b6:	20 c0       	rjmp	.+64     	; 0x70f8 <fputc+0x5a>
    70b8:	82 ff       	sbrs	r24, 2
    70ba:	10 c0       	rjmp	.+32     	; 0x70dc <fputc+0x3e>
    70bc:	4e 81       	ldd	r20, Y+6	; 0x06
    70be:	5f 81       	ldd	r21, Y+7	; 0x07
    70c0:	2c 81       	ldd	r18, Y+4	; 0x04
    70c2:	3d 81       	ldd	r19, Y+5	; 0x05
    70c4:	42 17       	cp	r20, r18
    70c6:	53 07       	cpc	r21, r19
    70c8:	7c f4       	brge	.+30     	; 0x70e8 <fputc+0x4a>
    70ca:	e8 81       	ld	r30, Y
    70cc:	f9 81       	ldd	r31, Y+1	; 0x01
    70ce:	9f 01       	movw	r18, r30
    70d0:	2f 5f       	subi	r18, 0xFF	; 255
    70d2:	3f 4f       	sbci	r19, 0xFF	; 255
    70d4:	28 83       	st	Y, r18
    70d6:	39 83       	std	Y+1, r19	; 0x01
    70d8:	10 83       	st	Z, r17
    70da:	06 c0       	rjmp	.+12     	; 0x70e8 <fputc+0x4a>
    70dc:	e8 85       	ldd	r30, Y+8	; 0x08
    70de:	f9 85       	ldd	r31, Y+9	; 0x09
    70e0:	81 2f       	mov	r24, r17
    70e2:	09 95       	icall
    70e4:	89 2b       	or	r24, r25
    70e6:	29 f7       	brne	.-54     	; 0x70b2 <fputc+0x14>
    70e8:	2e 81       	ldd	r18, Y+6	; 0x06
    70ea:	3f 81       	ldd	r19, Y+7	; 0x07
    70ec:	2f 5f       	subi	r18, 0xFF	; 255
    70ee:	3f 4f       	sbci	r19, 0xFF	; 255
    70f0:	2e 83       	std	Y+6, r18	; 0x06
    70f2:	3f 83       	std	Y+7, r19	; 0x07
    70f4:	81 2f       	mov	r24, r17
    70f6:	90 2f       	mov	r25, r16
    70f8:	df 91       	pop	r29
    70fa:	cf 91       	pop	r28
    70fc:	1f 91       	pop	r17
    70fe:	0f 91       	pop	r16
    7100:	08 95       	ret

00007102 <printf>:
    7102:	cf 93       	push	r28
    7104:	df 93       	push	r29
    7106:	cd b7       	in	r28, 0x3d	; 61
    7108:	de b7       	in	r29, 0x3e	; 62
    710a:	fe 01       	movw	r30, r28
    710c:	35 96       	adiw	r30, 0x05	; 5
    710e:	61 91       	ld	r22, Z+
    7110:	71 91       	ld	r23, Z+
    7112:	af 01       	movw	r20, r30
    7114:	80 91 59 27 	lds	r24, 0x2759
    7118:	90 91 5a 27 	lds	r25, 0x275A
    711c:	0e 94 21 31 	call	0x6242	; 0x6242 <vfprintf>
    7120:	df 91       	pop	r29
    7122:	cf 91       	pop	r28
    7124:	08 95       	ret

00007126 <puts>:
    7126:	0f 93       	push	r16
    7128:	1f 93       	push	r17
    712a:	cf 93       	push	r28
    712c:	df 93       	push	r29
    712e:	e0 91 59 27 	lds	r30, 0x2759
    7132:	f0 91 5a 27 	lds	r31, 0x275A
    7136:	23 81       	ldd	r18, Z+3	; 0x03
    7138:	21 ff       	sbrs	r18, 1
    713a:	1b c0       	rjmp	.+54     	; 0x7172 <puts+0x4c>
    713c:	ec 01       	movw	r28, r24
    713e:	00 e0       	ldi	r16, 0x00	; 0
    7140:	10 e0       	ldi	r17, 0x00	; 0
    7142:	89 91       	ld	r24, Y+
    7144:	60 91 59 27 	lds	r22, 0x2759
    7148:	70 91 5a 27 	lds	r23, 0x275A
    714c:	db 01       	movw	r26, r22
    714e:	18 96       	adiw	r26, 0x08	; 8
    7150:	ed 91       	ld	r30, X+
    7152:	fc 91       	ld	r31, X
    7154:	19 97       	sbiw	r26, 0x09	; 9
    7156:	88 23       	and	r24, r24
    7158:	31 f0       	breq	.+12     	; 0x7166 <puts+0x40>
    715a:	09 95       	icall
    715c:	89 2b       	or	r24, r25
    715e:	89 f3       	breq	.-30     	; 0x7142 <puts+0x1c>
    7160:	0f ef       	ldi	r16, 0xFF	; 255
    7162:	1f ef       	ldi	r17, 0xFF	; 255
    7164:	ee cf       	rjmp	.-36     	; 0x7142 <puts+0x1c>
    7166:	8a e0       	ldi	r24, 0x0A	; 10
    7168:	09 95       	icall
    716a:	89 2b       	or	r24, r25
    716c:	11 f4       	brne	.+4      	; 0x7172 <puts+0x4c>
    716e:	c8 01       	movw	r24, r16
    7170:	02 c0       	rjmp	.+4      	; 0x7176 <puts+0x50>
    7172:	8f ef       	ldi	r24, 0xFF	; 255
    7174:	9f ef       	ldi	r25, 0xFF	; 255
    7176:	df 91       	pop	r29
    7178:	cf 91       	pop	r28
    717a:	1f 91       	pop	r17
    717c:	0f 91       	pop	r16
    717e:	08 95       	ret

00007180 <sprintf>:
    7180:	0f 93       	push	r16
    7182:	1f 93       	push	r17
    7184:	cf 93       	push	r28
    7186:	df 93       	push	r29
    7188:	cd b7       	in	r28, 0x3d	; 61
    718a:	de b7       	in	r29, 0x3e	; 62
    718c:	2e 97       	sbiw	r28, 0x0e	; 14
    718e:	cd bf       	out	0x3d, r28	; 61
    7190:	de bf       	out	0x3e, r29	; 62
    7192:	0d 89       	ldd	r16, Y+21	; 0x15
    7194:	1e 89       	ldd	r17, Y+22	; 0x16
    7196:	86 e0       	ldi	r24, 0x06	; 6
    7198:	8c 83       	std	Y+4, r24	; 0x04
    719a:	09 83       	std	Y+1, r16	; 0x01
    719c:	1a 83       	std	Y+2, r17	; 0x02
    719e:	8f ef       	ldi	r24, 0xFF	; 255
    71a0:	9f e7       	ldi	r25, 0x7F	; 127
    71a2:	8d 83       	std	Y+5, r24	; 0x05
    71a4:	9e 83       	std	Y+6, r25	; 0x06
    71a6:	ae 01       	movw	r20, r28
    71a8:	47 5e       	subi	r20, 0xE7	; 231
    71aa:	5f 4f       	sbci	r21, 0xFF	; 255
    71ac:	6f 89       	ldd	r22, Y+23	; 0x17
    71ae:	78 8d       	ldd	r23, Y+24	; 0x18
    71b0:	ce 01       	movw	r24, r28
    71b2:	01 96       	adiw	r24, 0x01	; 1
    71b4:	0e 94 21 31 	call	0x6242	; 0x6242 <vfprintf>
    71b8:	ef 81       	ldd	r30, Y+7	; 0x07
    71ba:	f8 85       	ldd	r31, Y+8	; 0x08
    71bc:	e0 0f       	add	r30, r16
    71be:	f1 1f       	adc	r31, r17
    71c0:	10 82       	st	Z, r1
    71c2:	2e 96       	adiw	r28, 0x0e	; 14
    71c4:	cd bf       	out	0x3d, r28	; 61
    71c6:	de bf       	out	0x3e, r29	; 62
    71c8:	df 91       	pop	r29
    71ca:	cf 91       	pop	r28
    71cc:	1f 91       	pop	r17
    71ce:	0f 91       	pop	r16
    71d0:	08 95       	ret

000071d2 <__ultoa_invert>:
    71d2:	fa 01       	movw	r30, r20
    71d4:	aa 27       	eor	r26, r26
    71d6:	28 30       	cpi	r18, 0x08	; 8
    71d8:	51 f1       	breq	.+84     	; 0x722e <__ultoa_invert+0x5c>
    71da:	20 31       	cpi	r18, 0x10	; 16
    71dc:	81 f1       	breq	.+96     	; 0x723e <__ultoa_invert+0x6c>
    71de:	e8 94       	clt
    71e0:	6f 93       	push	r22
    71e2:	6e 7f       	andi	r22, 0xFE	; 254
    71e4:	6e 5f       	subi	r22, 0xFE	; 254
    71e6:	7f 4f       	sbci	r23, 0xFF	; 255
    71e8:	8f 4f       	sbci	r24, 0xFF	; 255
    71ea:	9f 4f       	sbci	r25, 0xFF	; 255
    71ec:	af 4f       	sbci	r26, 0xFF	; 255
    71ee:	b1 e0       	ldi	r27, 0x01	; 1
    71f0:	3e d0       	rcall	.+124    	; 0x726e <__ultoa_invert+0x9c>
    71f2:	b4 e0       	ldi	r27, 0x04	; 4
    71f4:	3c d0       	rcall	.+120    	; 0x726e <__ultoa_invert+0x9c>
    71f6:	67 0f       	add	r22, r23
    71f8:	78 1f       	adc	r23, r24
    71fa:	89 1f       	adc	r24, r25
    71fc:	9a 1f       	adc	r25, r26
    71fe:	a1 1d       	adc	r26, r1
    7200:	68 0f       	add	r22, r24
    7202:	79 1f       	adc	r23, r25
    7204:	8a 1f       	adc	r24, r26
    7206:	91 1d       	adc	r25, r1
    7208:	a1 1d       	adc	r26, r1
    720a:	6a 0f       	add	r22, r26
    720c:	71 1d       	adc	r23, r1
    720e:	81 1d       	adc	r24, r1
    7210:	91 1d       	adc	r25, r1
    7212:	a1 1d       	adc	r26, r1
    7214:	20 d0       	rcall	.+64     	; 0x7256 <__ultoa_invert+0x84>
    7216:	09 f4       	brne	.+2      	; 0x721a <__ultoa_invert+0x48>
    7218:	68 94       	set
    721a:	3f 91       	pop	r19
    721c:	2a e0       	ldi	r18, 0x0A	; 10
    721e:	26 9f       	mul	r18, r22
    7220:	11 24       	eor	r1, r1
    7222:	30 19       	sub	r19, r0
    7224:	30 5d       	subi	r19, 0xD0	; 208
    7226:	31 93       	st	Z+, r19
    7228:	de f6       	brtc	.-74     	; 0x71e0 <__ultoa_invert+0xe>
    722a:	cf 01       	movw	r24, r30
    722c:	08 95       	ret
    722e:	46 2f       	mov	r20, r22
    7230:	47 70       	andi	r20, 0x07	; 7
    7232:	40 5d       	subi	r20, 0xD0	; 208
    7234:	41 93       	st	Z+, r20
    7236:	b3 e0       	ldi	r27, 0x03	; 3
    7238:	0f d0       	rcall	.+30     	; 0x7258 <__ultoa_invert+0x86>
    723a:	c9 f7       	brne	.-14     	; 0x722e <__ultoa_invert+0x5c>
    723c:	f6 cf       	rjmp	.-20     	; 0x722a <__ultoa_invert+0x58>
    723e:	46 2f       	mov	r20, r22
    7240:	4f 70       	andi	r20, 0x0F	; 15
    7242:	40 5d       	subi	r20, 0xD0	; 208
    7244:	4a 33       	cpi	r20, 0x3A	; 58
    7246:	18 f0       	brcs	.+6      	; 0x724e <__ultoa_invert+0x7c>
    7248:	49 5d       	subi	r20, 0xD9	; 217
    724a:	31 fd       	sbrc	r19, 1
    724c:	40 52       	subi	r20, 0x20	; 32
    724e:	41 93       	st	Z+, r20
    7250:	02 d0       	rcall	.+4      	; 0x7256 <__ultoa_invert+0x84>
    7252:	a9 f7       	brne	.-22     	; 0x723e <__ultoa_invert+0x6c>
    7254:	ea cf       	rjmp	.-44     	; 0x722a <__ultoa_invert+0x58>
    7256:	b4 e0       	ldi	r27, 0x04	; 4
    7258:	a6 95       	lsr	r26
    725a:	97 95       	ror	r25
    725c:	87 95       	ror	r24
    725e:	77 95       	ror	r23
    7260:	67 95       	ror	r22
    7262:	ba 95       	dec	r27
    7264:	c9 f7       	brne	.-14     	; 0x7258 <__ultoa_invert+0x86>
    7266:	00 97       	sbiw	r24, 0x00	; 0
    7268:	61 05       	cpc	r22, r1
    726a:	71 05       	cpc	r23, r1
    726c:	08 95       	ret
    726e:	9b 01       	movw	r18, r22
    7270:	ac 01       	movw	r20, r24
    7272:	0a 2e       	mov	r0, r26
    7274:	06 94       	lsr	r0
    7276:	57 95       	ror	r21
    7278:	47 95       	ror	r20
    727a:	37 95       	ror	r19
    727c:	27 95       	ror	r18
    727e:	ba 95       	dec	r27
    7280:	c9 f7       	brne	.-14     	; 0x7274 <__ultoa_invert+0xa2>
    7282:	62 0f       	add	r22, r18
    7284:	73 1f       	adc	r23, r19
    7286:	84 1f       	adc	r24, r20
    7288:	95 1f       	adc	r25, r21
    728a:	a0 1d       	adc	r26, r0
    728c:	08 95       	ret

0000728e <_exit>:
    728e:	f8 94       	cli

00007290 <__stop_program>:
    7290:	ff cf       	rjmp	.-2      	; 0x7290 <__stop_program>
